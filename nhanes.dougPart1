{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## nhanes.dougPart1 creates adultfinal and youth.final \n",
    "## Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import nhanes_loader\n",
    "import importlib\n",
    "importlib.reload(nhanes_loader)\n",
    "import numpy as np\n",
    "import janitor\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "janitor allows command to find and replace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Household Adult File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nhanes.household_adult_file import HouseholdAdultFile\n",
    "nh = HouseholdAdultFile()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sequence number</td>\n",
       "      <td>SEQN</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Family sequence number</td>\n",
       "      <td>DMPFSEQ</td>\n",
       "      <td>6</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Examination/interview status</td>\n",
       "      <td>DMPSTAT</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Race-ethnicity</td>\n",
       "      <td>DMARETHN</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Race</td>\n",
       "      <td>DMARACER</td>\n",
       "      <td>13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1233</th>\n",
       "      <td>BP statement read to SP (years 5 and 6)</td>\n",
       "      <td>HAZA12</td>\n",
       "      <td>3336</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1234</th>\n",
       "      <td>Average K1 BP from household and MEC</td>\n",
       "      <td>HAZMNK1R</td>\n",
       "      <td>3337</td>\n",
       "      <td>3339.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1235</th>\n",
       "      <td>Number of BP's used for average K1</td>\n",
       "      <td>HAZNOK1R</td>\n",
       "      <td>3340</td>\n",
       "      <td>3341.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1236</th>\n",
       "      <td>Average K5 BP from household and MEC</td>\n",
       "      <td>HAZMNK5R</td>\n",
       "      <td>3342</td>\n",
       "      <td>3344.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>Number of BP's used for average K5</td>\n",
       "      <td>HAZNOK5R</td>\n",
       "      <td>3345</td>\n",
       "      <td>3346.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1238 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  description  variable  position  \\\n",
       "0                             Sequence number      SEQN         1   \n",
       "1                      Family sequence number   DMPFSEQ         6   \n",
       "2                Examination/interview status   DMPSTAT        11   \n",
       "3                              Race-ethnicity  DMARETHN        12   \n",
       "4                                        Race  DMARACER        13   \n",
       "...                                       ...       ...       ...   \n",
       "1233  BP statement read to SP (years 5 and 6)    HAZA12      3336   \n",
       "1234     Average K1 BP from household and MEC  HAZMNK1R      3337   \n",
       "1235       Number of BP's used for average K1  HAZNOK1R      3340   \n",
       "1236     Average K5 BP from household and MEC  HAZMNK5R      3342   \n",
       "1237       Number of BP's used for average K5  HAZNOK5R      3345   \n",
       "\n",
       "      end position  length  \n",
       "0              5.0       5  \n",
       "1             10.0       5  \n",
       "2              NaN       1  \n",
       "3              NaN       1  \n",
       "4              NaN       1  \n",
       "...            ...     ...  \n",
       "1233           NaN       1  \n",
       "1234        3339.0       3  \n",
       "1235        3341.0       2  \n",
       "1236        3344.0       3  \n",
       "1237        3346.0       2  \n",
       "\n",
       "[1238 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nh.cols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Exam File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import nhanes.exam_file\n",
    "importlib.reload(nhanes.exam_file)\n",
    "from nhanes.exam_file import ExamFile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "exam = ExamFile()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(31311, 45)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exam.data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Respondent identification number</td>\n",
       "      <td>SEQN</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Family sequence number</td>\n",
       "      <td>DMPFSEQ</td>\n",
       "      <td>6</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Examination/interview status</td>\n",
       "      <td>DMPSTAT</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Race-ethnicity</td>\n",
       "      <td>DMARETHN</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Race</td>\n",
       "      <td>DMARACER</td>\n",
       "      <td>13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2363</th>\n",
       "      <td>Time to complete 8-ft walk--trial B(sec)</td>\n",
       "      <td>PFPTWLKB</td>\n",
       "      <td>6221</td>\n",
       "      <td>6224.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2364</th>\n",
       "      <td>Number of steps--trial B</td>\n",
       "      <td>PFPNSTPB</td>\n",
       "      <td>6225</td>\n",
       "      <td>6226.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2365</th>\n",
       "      <td>Pain reported on walking</td>\n",
       "      <td>PFPPAIN</td>\n",
       "      <td>6227</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2366</th>\n",
       "      <td>Type of device used</td>\n",
       "      <td>PFPDEVIC</td>\n",
       "      <td>6228</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2367</th>\n",
       "      <td>Examiner number</td>\n",
       "      <td>PFPTECH</td>\n",
       "      <td>6229</td>\n",
       "      <td>6233.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2368 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   description  variable  position  \\\n",
       "0             Respondent identification number      SEQN         1   \n",
       "1                       Family sequence number   DMPFSEQ         6   \n",
       "2                 Examination/interview status   DMPSTAT        11   \n",
       "3                               Race-ethnicity  DMARETHN        12   \n",
       "4                                         Race  DMARACER        13   \n",
       "...                                        ...       ...       ...   \n",
       "2363  Time to complete 8-ft walk--trial B(sec)  PFPTWLKB      6221   \n",
       "2364                  Number of steps--trial B  PFPNSTPB      6225   \n",
       "2365                  Pain reported on walking   PFPPAIN      6227   \n",
       "2366                       Type of device used  PFPDEVIC      6228   \n",
       "2367                           Examiner number   PFPTECH      6229   \n",
       "\n",
       "      end position  length  \n",
       "0              5.0       5  \n",
       "1             10.0       5  \n",
       "2              NaN       1  \n",
       "3              NaN       1  \n",
       "4              NaN       1  \n",
       "...            ...     ...  \n",
       "2363        6224.0       4  \n",
       "2364        6226.0       2  \n",
       "2365           NaN       1  \n",
       "2366           NaN       1  \n",
       "2367        6233.0       5  \n",
       "\n",
       "[2368 rows x 5 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exam.cols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Household Youth File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import nhanes.household_youth_file\n",
    "importlib.reload(nhanes.household_youth_file)\n",
    "from nhanes.household_youth_file import HouseholdYouthFile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "youth = HouseholdYouthFile()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sequence number</td>\n",
       "      <td>SEQN</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Family sequence number</td>\n",
       "      <td>DMPFSEQ</td>\n",
       "      <td>6</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Examination/interview status</td>\n",
       "      <td>DMPSTAT</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Race-ethnicity</td>\n",
       "      <td>DMARETHN</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Race</td>\n",
       "      <td>DMARACER</td>\n",
       "      <td>13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>ICD-9-CM code-9th</td>\n",
       "      <td>HYK11AO</td>\n",
       "      <td>2087</td>\n",
       "      <td>2092.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>683</th>\n",
       "      <td>For how long been taking (days)-9th</td>\n",
       "      <td>HYK12SO</td>\n",
       "      <td>2093</td>\n",
       "      <td>2097.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684</th>\n",
       "      <td>Main respondents relationship to SP</td>\n",
       "      <td>HYM1</td>\n",
       "      <td>2098</td>\n",
       "      <td>2099.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>685</th>\n",
       "      <td>Was SP present during any of interview</td>\n",
       "      <td>HYM2</td>\n",
       "      <td>2100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>686</th>\n",
       "      <td>Quality of interview</td>\n",
       "      <td>HYM3</td>\n",
       "      <td>2101</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>687 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                description  variable  position  end position  \\\n",
       "0                           Sequence number      SEQN         1           5.0   \n",
       "1                    Family sequence number   DMPFSEQ         6          10.0   \n",
       "2              Examination/interview status   DMPSTAT        11           NaN   \n",
       "3                            Race-ethnicity  DMARETHN        12           NaN   \n",
       "4                                      Race  DMARACER        13           NaN   \n",
       "..                                      ...       ...       ...           ...   \n",
       "682                       ICD-9-CM code-9th   HYK11AO      2087        2092.0   \n",
       "683     For how long been taking (days)-9th   HYK12SO      2093        2097.0   \n",
       "684     Main respondents relationship to SP      HYM1      2098        2099.0   \n",
       "685  Was SP present during any of interview      HYM2      2100           NaN   \n",
       "686                    Quality of interview      HYM3      2101           NaN   \n",
       "\n",
       "     length  \n",
       "0         5  \n",
       "1         5  \n",
       "2         1  \n",
       "3         1  \n",
       "4         1  \n",
       "..      ...  \n",
       "682       6  \n",
       "683       5  \n",
       "684       2  \n",
       "685       1  \n",
       "686       1  \n",
       "\n",
       "[687 rows x 5 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth.cols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Combine adult and exam files - adult_exam"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "match files on the SEQN field "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "adult_exam = nh.data.set_index('SEQN').join(exam.data.set_index('SEQN'),rsuffix='_exam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 20050 entries, 3 to 53623\n",
      "Data columns (total 66 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   HAR1           20050 non-null  int64  \n",
      " 1   HAR23          20050 non-null  int64  \n",
      " 2   HAR26          20050 non-null  int64  \n",
      " 3   HAC1E          20050 non-null  int64  \n",
      " 4   HAC1F          20050 non-null  int64  \n",
      " 5   HAC1G          20050 non-null  int64  \n",
      " 6   HAC1O          20050 non-null  int64  \n",
      " 7   HAL6           20050 non-null  int64  \n",
      " 8   HAL10          20050 non-null  int64  \n",
      " 9   HAL1           20050 non-null  int64  \n",
      " 10  HAL3           20050 non-null  int64  \n",
      " 11  HAL5           20050 non-null  int64  \n",
      " 12  DMARACER       20050 non-null  int64  \n",
      " 13  DMARETHN       20050 non-null  int64  \n",
      " 14  DMAETHNR       20050 non-null  int64  \n",
      " 15  HSSEX          20050 non-null  int64  \n",
      " 16  HSAGEIR        20050 non-null  int64  \n",
      " 17  HSAGEU         20050 non-null  int64  \n",
      " 18  HXPAXTMR       457 non-null    float64\n",
      " 19  HXPSESSR       457 non-null    float64\n",
      " 20  HSAITMOR       20050 non-null  int64  \n",
      " 21  HAR4S          5008 non-null   float64\n",
      " 22  SPPQ1          18162 non-null  float64\n",
      " 23  SPPQ2          18162 non-null  float64\n",
      " 24  SPPQ3          18150 non-null  float64\n",
      " 25  SPPQ4          18150 non-null  float64\n",
      " 26  SPPQ5          18150 non-null  float64\n",
      " 27  SPPMANEU       18150 non-null  float64\n",
      " 28  MYPB1          0 non-null      float64\n",
      " 29  MYPB3          0 non-null      float64\n",
      " 30  MYPB11         0 non-null      float64\n",
      " 31  MYPB27A        0 non-null      float64\n",
      " 32  MYPB27B        0 non-null      float64\n",
      " 33  HSAGEIR_exam   18162 non-null  float64\n",
      " 34  HSAGEU_exam    18162 non-null  float64\n",
      " 35  HXPAXTMR_exam  457 non-null    float64\n",
      " 36  HXPSESSR_exam  457 non-null    float64\n",
      " 37  HXPEJ6A2       445 non-null    float64\n",
      " 38  SPPTECH1       18150 non-null  float64\n",
      " 39  SPPTRIAL       18150 non-null  float64\n",
      " 40  SPPPEAK        18150 non-null  float64\n",
      " 41  SPPFEV05       18150 non-null  float64\n",
      " 42  SPPFEV1        18150 non-null  float64\n",
      " 43  SPPFEV3        18150 non-null  float64\n",
      " 44  SPPFEV6        18150 non-null  float64\n",
      " 45  SPPFVC         18150 non-null  float64\n",
      " 46  SPPMMEF        18150 non-null  float64\n",
      " 47  SPPFEF75       18150 non-null  float64\n",
      " 48  SPPTYPE        18150 non-null  float64\n",
      " 49  SPPREPRO       18150 non-null  float64\n",
      " 50  SPPTIME        18150 non-null  object \n",
      " 51  SPPEXPIR       18150 non-null  float64\n",
      " 52  SPPTEMP        18150 non-null  float64\n",
      " 53  HSSEX_exam     18162 non-null  float64\n",
      " 54  WTPFHX6        18162 non-null  float64\n",
      " 55  MXPAXTMR       17705 non-null  float64\n",
      " 56  BMPHT          18162 non-null  float64\n",
      " 57  BMPSITHT       17705 non-null  float64\n",
      " 58  BMPWT          18162 non-null  float64\n",
      " 59  DMARACER_exam  18162 non-null  Int64  \n",
      " 60  DMARETHN_exam  18162 non-null  float64\n",
      " 61  DMAETHNR_exam  18162 non-null  float64\n",
      " 62  HSAITMOR_exam  18162 non-null  float64\n",
      " 63  HXPG1          457 non-null    float64\n",
      " 64  HXPG2A         457 non-null    float64\n",
      " 65  HXPG2B         457 non-null    float64\n",
      "dtypes: Int64(1), float64(45), int64(19), object(1)\n",
      "memory usage: 10.9+ MB\n"
     ]
    }
   ],
   "source": [
    "adult_exam.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Combine youth and exam files - youth_exam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "youth_exam = youth.data.set_index('SEQN').join(exam.data.set_index('SEQN'),rsuffix='_exam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13944 entries, 7 to 53622\n",
      "Data columns (total 60 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   HYE1G          13944 non-null  int64  \n",
      " 1   HYE1H          13944 non-null  int64  \n",
      " 2   HSSEX          13944 non-null  int64  \n",
      " 3   HSAGEIR        13944 non-null  int64  \n",
      " 4   HSAGEU         13944 non-null  int64  \n",
      " 5   DMARACER       13944 non-null  int64  \n",
      " 6   DMARETHN       13944 non-null  int64  \n",
      " 7   DMAETHNR       13944 non-null  int64  \n",
      " 8   HXPAXTMR       36 non-null     float64\n",
      " 9   HXPSESSR       36 non-null     float64\n",
      " 10  HYG2           2216 non-null   float64\n",
      " 11  HYG4           2216 non-null   float64\n",
      " 12  HYG7           3690 non-null   float64\n",
      " 13  HYG8           13944 non-null  int64  \n",
      " 14  HYG12          13944 non-null  int64  \n",
      " 15  HSAITMOR       13944 non-null  int64  \n",
      " 16  SPPQ1          4281 non-null   float64\n",
      " 17  SPPQ2          4281 non-null   float64\n",
      " 18  SPPQ3          4281 non-null   float64\n",
      " 19  SPPQ4          4281 non-null   float64\n",
      " 20  SPPQ5          4281 non-null   float64\n",
      " 21  SPPMANEU       4281 non-null   float64\n",
      " 22  MYPB1          4281 non-null   float64\n",
      " 23  MYPB3          887 non-null    float64\n",
      " 24  MYPB11         859 non-null    float64\n",
      " 25  MYPB27A        4281 non-null   float64\n",
      " 26  MYPB27B        4281 non-null   float64\n",
      " 27  HSAGEIR_exam   13149 non-null  float64\n",
      " 28  HSAGEU_exam    13149 non-null  float64\n",
      " 29  HXPAXTMR_exam  36 non-null     float64\n",
      " 30  HXPSESSR_exam  36 non-null     float64\n",
      " 31  HXPEJ6A2       0 non-null      float64\n",
      " 32  SPPTECH1       4281 non-null   float64\n",
      " 33  SPPTRIAL       4281 non-null   float64\n",
      " 34  SPPPEAK        4281 non-null   float64\n",
      " 35  SPPFEV05       4281 non-null   float64\n",
      " 36  SPPFEV1        4281 non-null   float64\n",
      " 37  SPPFEV3        4281 non-null   float64\n",
      " 38  SPPFEV6        4281 non-null   float64\n",
      " 39  SPPFVC         4281 non-null   float64\n",
      " 40  SPPMMEF        4281 non-null   float64\n",
      " 41  SPPFEF75       4281 non-null   float64\n",
      " 42  SPPTYPE        4281 non-null   float64\n",
      " 43  SPPREPRO       4281 non-null   float64\n",
      " 44  SPPTIME        4281 non-null   object \n",
      " 45  SPPEXPIR       4281 non-null   float64\n",
      " 46  SPPTEMP        4281 non-null   float64\n",
      " 47  HSSEX_exam     13149 non-null  float64\n",
      " 48  WTPFHX6        13149 non-null  float64\n",
      " 49  MXPAXTMR       13113 non-null  float64\n",
      " 50  BMPHT          9895 non-null   float64\n",
      " 51  BMPSITHT       9894 non-null   float64\n",
      " 52  BMPWT          13149 non-null  float64\n",
      " 53  DMARACER_exam  13149 non-null  Int64  \n",
      " 54  DMARETHN_exam  13149 non-null  float64\n",
      " 55  DMAETHNR_exam  13149 non-null  float64\n",
      " 56  HSAITMOR_exam  13149 non-null  float64\n",
      " 57  HXPG1          0 non-null      float64\n",
      " 58  HXPG2A         0 non-null      float64\n",
      " 59  HXPG2B         0 non-null      float64\n",
      "dtypes: Int64(1), float64(47), int64(11), object(1)\n",
      "memory usage: 7.1+ MB\n"
     ]
    }
   ],
   "source": [
    "youth_exam.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13944, 60)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('HSAGEIR < 18').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hankinson Exclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ages - have none over 89; 17-89\n",
    "20,050 patients in adult exam file (age > 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Any age  .shape - returns row and column count of a dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".describe() - returns statistics about numerical columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".dtypes - returns the data type of each column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".count() - number of total values in column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".value_counts() - returns object counting counts of unique values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20050, 66)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('HSAGEIR>0').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Any spirometry  H 16484 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "20050 adult in exam file\n",
    "16840  adult did spirometry"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SPPMANEU - # acceptable trials"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "According to the NHANES documentation, the values for SPPMANEU (number of acceptable trials)\n",
    "\n",
    "00 150; 01-16 20836. 88 1445 blank 8880"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "so total spirometry is 150 + 20836 = 20986, but this doesn't match, looking at data base values which has 16840 with SPPMANEU 0 to <88"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0     7569\n",
       "6.0     2553\n",
       "4.0     1932\n",
       "7.0     1544\n",
       "88.0    1310\n",
       "8.0     1238\n",
       "3.0      668\n",
       "9.0      400\n",
       "2.0      292\n",
       "10.0     233\n",
       "1.0      226\n",
       "0.0      144\n",
       "11.0      23\n",
       "13.0       8\n",
       "12.0       8\n",
       "14.0       1\n",
       "16.0       1\n",
       "Name: SPPMANEU, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.SPPMANEU.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "adult_exam.SPPMANEU.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18740, 66)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('SPPMANEU != 88').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16840, 66)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('SPPMANEU > -1 & SPPMANEU < 88').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## total with spirometry 16840\n",
    "total 2 or more spirometry 16470"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## number 2 or more acceptable trials  H 277, 16207  we have 16470 (+263)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16470, 66)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16470, 66)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('SPPMANEU > 1 & SPPMANEU < 88').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SPPREPRO = 4 both FVC and FEV1 reproducible; 1 FVC not reproducible; 2 FEV1 no reprod 3 neither FVC or FEV1 reproducible\n",
    "What closely matches Hankinson is to take subjects with FEV1 reproducible or both FEV1 and FVC reproducible\n",
    "15286 have 2 or more, both FEV1 and FVC reproducible\n",
    "16289 have 2 or more, FEV1 reproducible - use that criteria (=4 | =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0    15373\n",
       "8.0     1454\n",
       "1.0     1003\n",
       "3.0      267\n",
       "2.0       53\n",
       "Name: SPPREPRO, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.SPPREPRO.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15286, 66)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('SPPMANEU > 1 & SPPMANEU < 88 & SPPREPRO == 4').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16289, 66)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and age < 90 H 68,16139  we have 84  16386 (+26, +247)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16386, 66)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16215, 66)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('HSAGEIR < 90').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16027, 66)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('MXPAXTMR < 1080').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## and age <90 16386, 16215"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# first number is with 2 or more spirometries and = the parameter; 2nd is 2 or more with reproducible FEV1 with not the parameter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "adult_exam.query('HSAGEIR >= 90').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and race/ethnicity not other  H 636, 15503"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "adult_exam.query('HSAGEIR > 0').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and race/ethnicity not other  H 636  15503  we have 639, 15747 (+3, +244)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    8483\n",
       "2    5486\n",
       "3    5306\n",
       "4     775\n",
       "Name: DMARETHN, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.DMARETHN.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(639, 66)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN == 4').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15747, 66)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15395, 66)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and race not other 15747, 15580"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and cigarette smoker H 7,667  7,836  We have  7787 7960 (+120  +124)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    10235\n",
       "1     9799\n",
       "8       16\n",
       "Name: HAR1, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAR1.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or statement not work, so need HAR1 = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9799, 66)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('HAR1 == 1' or 'HAR1 == 8').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9815, 66)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('HAR1 == 1 | HAR1 == 8').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10235, 66)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('HAR1 == 2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "age<90 & ethnicity not other and not smoker(HAR1==2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7960, 66)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 ==2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and not smoker('not HAR1==1') 7960, 7851"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7960, 66)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7764, 66)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "HXPG1 how many cigarettes past 5 days. 0, #, or 888 applicable  SO '0 < HXPG1 < 888'\n",
    "65 smoke cigarettes past 5 days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(65, 66)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('0 < HXPG1 < 888').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "include those not smoking cigarettes 5 days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(19985, 66)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('not (0 < HXPG1 < 888)').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(392, 66)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('(HXPG1 ==0) | (HXPG1 == 888)').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "HXPG2A -pipes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 66)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('0 < HXPG2A < 88').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "HXPG2B - cigars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 66)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('0 < HXPG2B < 88').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 ==2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "cigs, pipe, cigars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 66)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('MYPB11 ==1').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and cigar or pipe smoker  H 313, 7523  for cigar we have 284, 7676 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "cigar HAR23  2 is not cigar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    17951\n",
       "1     2073\n",
       "8       21\n",
       "9        5\n",
       "Name: HAR23, dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAR23.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7676, 66)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 ==2').query('HAR23 == 2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and pipe smoker with above H 313 7523  We have 326 7634 (+13 +111)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    18411\n",
       "1     1609\n",
       "8       26\n",
       "9        4\n",
       "Name: HAR26, dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAR26.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7634, 66)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7638, 66)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2')\n",
    " .query('HAR23 == 2').query('not HAR26 == 1').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7531, 66)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' ).shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7454, 66)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' ).shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and not cigar or pipe smoker 7634, 7531"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and smoked cigarettes/cigar/pipes in 5 d prior to exam  H 408 7115  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SPQ4 cough, cold or other acute illness;  SPQ3 smoked, ate in past hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    10235\n",
       "1     9799\n",
       "8       16\n",
       "Name: HAR1, dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAR1.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5965, 66)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2').query('SPPQ3 == 2').query('SPPQ4 == 2').query('SPPQ5 == 2').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7540, 66)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4')\n",
    " .query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# add exclude if smoked in 5 days - only 2 more excluded 7632, 7529"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(19979, 66)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7632, 66)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4')\n",
    " .query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2')\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7529, 66)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    ".query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7454, 66)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    ".query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7454, 66)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    ".query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7454, 66)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    ".query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    18672\n",
       "1     1376\n",
       "9        1\n",
       "8        1\n",
       "Name: HAC1E, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAC1E.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    18411\n",
       "1     1609\n",
       "8       26\n",
       "9        4\n",
       "Name: HAR26, dtype: int64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAR26.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and asthma H  454  6661  query('HAC1E == 2') (which gives different that > 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7158, 66)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2')\n",
    " .query('HAR26 == 2'). query('HAC1E == 2').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and asthma (7156 , 7060)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7156, 66)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2')\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('HAR26 == 2'). query('HAC1E == 2').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7060, 66)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    ".query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6987, 66)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    ".query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and chronic bronchitis H  181, 6480  HAC1F == 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    18914\n",
       "1     1134\n",
       "9        2\n",
       "Name: HAC1F, dtype: int64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAC1F.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6962, 66)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2')\n",
    " .query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and chronic bronchitis (6960, 6868 subjects remaining)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6960, 66)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2')\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6868, 66)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    ".query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    ". query('not HAC1F == 1').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6797, 66)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    ".query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    ". query('not HAC1F == 1').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and emphysema  H 15, 6465  HAC1G == 2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    19614\n",
       "1      430\n",
       "9        5\n",
       "8        1\n",
       "Name: HAC1G, dtype: int64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAC1G.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6945, 66)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').query('HAC1G == 2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and emphysema (6943, 6852 remaining)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6943, 66)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2')\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2')\n",
    " .query('HAC1G == 2').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6852, 66)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    "  .query('not HAC1G == 1').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6782, 66)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    "  .query('not HAC1G == 1').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## When add cancer excludes many, but Hankinson none (when lung cancer), so exclude this future analyses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    19266\n",
       "1      780\n",
       "9        3\n",
       "8        1\n",
       "Name: HAC1O, dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAC1O.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6756, 66)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').query('HAC1G == 2').query('HAC1O == 2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and wheezing 6 month  H 419 6046  HAL6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    17097\n",
       "1     2942\n",
       "8        8\n",
       "9        3\n",
       "Name: HAL6, dtype: int64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAL6.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6495, 66)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').query('HAC1G == 2').query('HAL6 == 2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and whistling or wheezing  H 112 5934  HAL10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    17097\n",
       "1     2942\n",
       "8        8\n",
       "9        3\n",
       "Name: HAL6, dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAL6.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and wheezing 12 months 6493, 6408"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6493, 66)"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2')\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2')\n",
    " .query('HAC1G == 2')\n",
    " .query('HAL6 == 2').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6408, 66)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6341, 66)"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1').shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and wheezing 12 months not=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6494, 66)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2')\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2')\n",
    " .query('HAC1G == 2')\n",
    " .query('not HAL6 == 1').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6368, 66)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').query('HAC1G == 2').query('HAL6 == 2').query('HAL10 == 2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and wheezing apart from colds 6366, 6285"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6366, 66)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90')\n",
    " .query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2')\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2')\n",
    " .query('HAC1G == 2')\n",
    " .query('HAL6 == 2')\n",
    " .query('HAL10 == 2').shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6285, 66)"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6220, 66)"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    17958\n",
       "1     2072\n",
       "8       14\n",
       "9        6\n",
       "Name: HAL10, dtype: int64"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAL10.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and persistent cough H 158, 5776  HAL1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and not persistent cough 6200, 6121"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6200, 66)"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').query('HAC1G == 2').query('HAL6 == 2').query('HAL10 == 2').query('HAL1 == 2').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6121, 66)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6059, 66)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    18461\n",
       "1     1582\n",
       "8        6\n",
       "9        1\n",
       "Name: HAL1, dtype: int64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAL1.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and not persistent phlegm H 125  5776  HAL 3, 6065,5990"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6065, 66)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').query('HAC1G == 2').query('HAL6 == 2').query('HAL10 == 2').query('HAL1 == 2').query('HAL3 == 2').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5990, 66)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5930, 66)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and moderate shortness of breath H  848  4803  HAL5  5151 5116"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    18330\n",
       "1     1705\n",
       "8       12\n",
       "9        3\n",
       "Name: HAL3, dtype: int64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAL3.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    14910\n",
       "1     5030\n",
       "8       64\n",
       "9       46\n",
       "Name: HAL5, dtype: int64"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.HAL5.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5116, 66)"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5073, 66)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5151, 66)"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 == 2').query('HAR26 == 2'). query('HAC1E == 2'). query('HAC1F == 2').query('HAC1G == 2').query('HAL6 == 2').query('HAL10 == 2').query('HAL1 == 2').query('HAL3 == 2').query('HAL5 == 2').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5122, 66)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 > 1').query('HAR26 > 1').query('HAC1E > 1').query('HAC1F > 1').query('HAC1G > 1').query('HAC1O > 1').query('HAL6 > 1').query('HAL1 > 1').query('HAL3 > 1').query('HAL5 == 2').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# and age < 80H  139 4634  HSAGEIR 4944, 4925\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "adult_exam.query('2 <= SPPMANEU < 88').query('HSAGEIR < 90').query('DMARETHN < 4').query('HAR1 == 2').query('HAR23 > 1').query('HAR26 > 1').query('HAC1E > 1').query('HAC1F > 1').query('HAC1G > 1').query('HAC1O > 1').query('HAL6 > 1').query('HAL1 > 1').query('HAL3 > 1').query('HAL5 == 2').query('HSAGEIR < 81').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<82 has 4944; <81 has 4907; HSAITMOR<960 has 4905"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4905, 66)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('2 <= SPPMANEU < 88')\n",
    ".query('HSAGEIR < 90').query('DMARETHN < 4')\n",
    ".query('HAR1 == 2').query('HAR23 > 1')\n",
    ".query('HAR26 > 1').query('HAC1E > 1')\n",
    ".query('HAC1F > 1').query('HAC1G > 1')\n",
    ".query('HAC1O > 1').query('HAL6 > 1')\n",
    ".query('HAL1 > 1').query('HAL3 > 1')\n",
    "# .query('HAL5 == 2').query('HSAGEIR < 80').shape)\n",
    ".query('HAL5 == 2').query('HSAITMOR< 960').shape) \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4883, 66)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .query('HSAITMOR < 960')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4863, 66)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .query('MXPAXTMR < 960')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and have value for FEV3 - 22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4862, 66)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .query('HSAITMOR < 960')\n",
    " .query('not SPPFEV3 == 88888')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4863, 66)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .query('MXPAXTMR < 960')\n",
    " .query('not SPPFEV3 == 88888')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and have value for HSAITMOR - 1 ; one deleted from 4903 to 4902 (with ageIR <81; but change to HSAITMOR<960\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4862, 66)"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .query('HSAITMOR < 960')\n",
    " .query('not SPPFEV3 == 88888')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4862, 66)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('HSAGEIR < 90').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .query('HSAITMOR<960')\n",
    " .query('not SPPFEV3 == 88888')\n",
    " .query('not HSAITMOR == 9999')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4863, 66)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    " .query('MXPAXTMR < 960')\n",
    " .query('not SPPFEV3 == 88888')\n",
    " .query('not MXPAXTMR == 9999')\n",
    " .shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now create DataFrame adult_final of the final rows selected"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# change to include up to 90 \n",
    "(remove mxpaxtmr < 960; had been 4863 now is 5073)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "adult_final = (adult_exam.query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    " .query('MXPAXTMR < 1080').query('DMARETHN < 4').query('not HAR1 ==1')\n",
    " .query('not HAR23 == 1').query('not HAR26 == 1' )\n",
    " .query('not (0 < HXPG1 < 888 | 0 < HXPG2A < 88 | 0 < HXPG2B < 88)')\n",
    " .query('not HAR26 == 1'). query('not HAC1E == 1')\n",
    " .query('not HAC1F == 1')\n",
    " .query('not HAC1G == 1')\n",
    " .query('not HAL6 == 1')\n",
    " .query('not HAL10 == 1')\n",
    " .query('not HAL1 == 1')\n",
    " .query('not HAL3 == 1')\n",
    " .query('not HAL5 == 1')\n",
    "# .query('MXPAXTMR < 960')\n",
    " .query('not SPPFEV3 == 88888')\n",
    " .query('not MXPAXTMR == 9999'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "af = adult_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5073, 66)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "af.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>No insur: poor health, illness, age(ph1)</td>\n",
       "      <td>HFB14AC</td>\n",
       "      <td>1280</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>Parent high blood cholesterol at any age</td>\n",
       "      <td>HFC6C</td>\n",
       "      <td>1308</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>Parent asthma or hay fever at any age</td>\n",
       "      <td>HFC6D</td>\n",
       "      <td>1310</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>Parent diabetes at any age</td>\n",
       "      <td>HFC6E</td>\n",
       "      <td>1312</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>Family reference person age - years</td>\n",
       "      <td>HFHAGER</td>\n",
       "      <td>1418</td>\n",
       "      <td>1420.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308</th>\n",
       "      <td>Respondent age in years</td>\n",
       "      <td>HFAGERR</td>\n",
       "      <td>1431</td>\n",
       "      <td>1433.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>Check Item. Refer to age of SP</td>\n",
       "      <td>HAA3</td>\n",
       "      <td>1444</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>479</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAG1</td>\n",
       "      <td>1671</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAG13</td>\n",
       "      <td>1719</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>613</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAJ0</td>\n",
       "      <td>1821</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>650</th>\n",
       "      <td>Check item. Refer to sex and age of SP</td>\n",
       "      <td>HAK12</td>\n",
       "      <td>1881</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>695</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAM1</td>\n",
       "      <td>1944</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>701</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAM7</td>\n",
       "      <td>1954</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>703</th>\n",
       "      <td>How much did you weigh at age 25 - lbs</td>\n",
       "      <td>HAM9S</td>\n",
       "      <td>1958</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>808</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAN9</td>\n",
       "      <td>2215</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>831</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAP16</td>\n",
       "      <td>2238</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAQ7</td>\n",
       "      <td>2277</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>Active compared with men/women your age</td>\n",
       "      <td>HAT28</td>\n",
       "      <td>2499</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>Check item. Refer to age of SP</td>\n",
       "      <td>HAT29</td>\n",
       "      <td>2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  description variable  position  \\\n",
       "192  No insur: poor health, illness, age(ph1)  HFB14AC      1280   \n",
       "218  Parent high blood cholesterol at any age    HFC6C      1308   \n",
       "220     Parent asthma or hay fever at any age    HFC6D      1310   \n",
       "222                Parent diabetes at any age    HFC6E      1312   \n",
       "300       Family reference person age - years  HFHAGER      1418   \n",
       "308                   Respondent age in years  HFAGERR      1431   \n",
       "315            Check Item. Refer to age of SP     HAA3      1444   \n",
       "479            Check item. Refer to age of SP     HAG1      1671   \n",
       "512            Check item. Refer to age of SP    HAG13      1719   \n",
       "613            Check item. Refer to age of SP     HAJ0      1821   \n",
       "650    Check item. Refer to sex and age of SP    HAK12      1881   \n",
       "695            Check item. Refer to age of SP     HAM1      1944   \n",
       "701            Check item. Refer to age of SP     HAM7      1954   \n",
       "703    How much did you weigh at age 25 - lbs    HAM9S      1958   \n",
       "808            Check item. Refer to age of SP     HAN9      2215   \n",
       "831            Check item. Refer to age of SP    HAP16      2238   \n",
       "859            Check item. Refer to age of SP     HAQ7      2277   \n",
       "970   Active compared with men/women your age    HAT28      2499   \n",
       "971            Check item. Refer to age of SP    HAT29      2500   \n",
       "\n",
       "     end position  length  \n",
       "192           NaN       1  \n",
       "218           NaN       1  \n",
       "220           NaN       1  \n",
       "222           NaN       1  \n",
       "300        1420.0       3  \n",
       "308        1433.0       3  \n",
       "315           NaN       1  \n",
       "479           NaN       1  \n",
       "512           NaN       1  \n",
       "613           NaN       1  \n",
       "650           NaN       1  \n",
       "695           NaN       1  \n",
       "701           NaN       1  \n",
       "703        1960.0       3  \n",
       "808           NaN       1  \n",
       "831           NaN       1  \n",
       "859           NaN       1  \n",
       "970           NaN       1  \n",
       "971           NaN       1  "
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nh.cols[nh.cols.description.str.contains(' age')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>211</th>\n",
       "      <td>Mother's height calculated in inches</td>\n",
       "      <td>HFC3S</td>\n",
       "      <td>1301</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213</th>\n",
       "      <td>Father's height calculated in inches</td>\n",
       "      <td>HFC5S</td>\n",
       "      <td>1303</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              description variable  position  end position  \\\n",
       "211  Mother's height calculated in inches    HFC3S      1301           NaN   \n",
       "213  Father's height calculated in inches    HFC5S      1303           NaN   \n",
       "\n",
       "     length  \n",
       "211       1  \n",
       "213       1  "
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nh.cols[nh.cols.description.str.contains('height')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>211</th>\n",
       "      <td>Mother's height calculated in inches</td>\n",
       "      <td>HFC3S</td>\n",
       "      <td>1301</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              description variable  position  end position  \\\n",
       "211  Mother's height calculated in inches    HFC3S      1301           NaN   \n",
       "\n",
       "     length  \n",
       "211       1  "
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nh.cols[nh.cols.variable.str.contains('HFC3S')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>Standing height (cm) (2 years and over)</td>\n",
       "      <td>BMPHT</td>\n",
       "      <td>1528</td>\n",
       "      <td>1532.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>Standing height source flag</td>\n",
       "      <td>BMPHTFLG</td>\n",
       "      <td>1533</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>Standing height (in) (2 years and over)</td>\n",
       "      <td>BMPHTIN</td>\n",
       "      <td>1534</td>\n",
       "      <td>1538.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387</th>\n",
       "      <td>Sitting height (cm) (2 years and over)</td>\n",
       "      <td>BMPSITHT</td>\n",
       "      <td>1545</td>\n",
       "      <td>1549.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>388</th>\n",
       "      <td>Self reported height (in) (12-16 years)</td>\n",
       "      <td>BMPSRHIS</td>\n",
       "      <td>1550</td>\n",
       "      <td>1552.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>Knee height (cm) (60 years and over)</td>\n",
       "      <td>BMPKNEE</td>\n",
       "      <td>1557</td>\n",
       "      <td>1560.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 description  variable  position  \\\n",
       "382  Standing height (cm) (2 years and over)     BMPHT      1528   \n",
       "383              Standing height source flag  BMPHTFLG      1533   \n",
       "384  Standing height (in) (2 years and over)   BMPHTIN      1534   \n",
       "387   Sitting height (cm) (2 years and over)  BMPSITHT      1545   \n",
       "388  Self reported height (in) (12-16 years)  BMPSRHIS      1550   \n",
       "390     Knee height (cm) (60 years and over)   BMPKNEE      1557   \n",
       "\n",
       "     end position  length  \n",
       "382        1532.0       5  \n",
       "383           NaN       1  \n",
       "384        1538.0       5  \n",
       "387        1549.0       5  \n",
       "388        1552.0       3  \n",
       "390        1560.0       4  "
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exam.cols[exam.cols.description.str.contains('height ')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>211</th>\n",
       "      <td>Mother's height calculated in inches</td>\n",
       "      <td>HFC3S</td>\n",
       "      <td>1224</td>\n",
       "      <td>1226.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213</th>\n",
       "      <td>Father's height calculated in inches</td>\n",
       "      <td>HFC5S</td>\n",
       "      <td>1230</td>\n",
       "      <td>1232.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              description variable  position  end position  \\\n",
       "211  Mother's height calculated in inches    HFC3S      1224        1226.0   \n",
       "213  Father's height calculated in inches    HFC5S      1230        1232.0   \n",
       "\n",
       "     length  \n",
       "211       3  \n",
       "213       3  "
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth.cols[youth.cols.description.str.contains('height ')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Need \n",
    "find those with BMPHTIN differ from BMPHT * 2.54; do scatterplot of that and of self-reported height\n",
    "need import BMPHTIN AND BMPSRHIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SEQN\n",
       "3        4640.0\n",
       "4        3089.0\n",
       "52       4658.0\n",
       "60       3651.0\n",
       "84       3147.0\n",
       "          ...  \n",
       "53558    2626.0\n",
       "53567    3348.0\n",
       "53592    3642.0\n",
       "53593    5214.0\n",
       "53623    3196.0\n",
       "Name: SPPFEV1, Length: 5073, dtype: float64"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "af.SPPFEV1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now do youth exclusion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13944, 60)"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 13944 entries, 7 to 53622\n",
      "Data columns (total 60 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   HYE1G          13944 non-null  int64  \n",
      " 1   HYE1H          13944 non-null  int64  \n",
      " 2   HSSEX          13944 non-null  int64  \n",
      " 3   HSAGEIR        13944 non-null  int64  \n",
      " 4   HSAGEU         13944 non-null  int64  \n",
      " 5   DMARACER       13944 non-null  int64  \n",
      " 6   DMARETHN       13944 non-null  int64  \n",
      " 7   DMAETHNR       13944 non-null  int64  \n",
      " 8   HXPAXTMR       36 non-null     float64\n",
      " 9   HXPSESSR       36 non-null     float64\n",
      " 10  HYG2           2216 non-null   float64\n",
      " 11  HYG4           2216 non-null   float64\n",
      " 12  HYG7           3690 non-null   float64\n",
      " 13  HYG8           13944 non-null  int64  \n",
      " 14  HYG12          13944 non-null  int64  \n",
      " 15  HSAITMOR       13944 non-null  int64  \n",
      " 16  SPPQ1          4281 non-null   float64\n",
      " 17  SPPQ2          4281 non-null   float64\n",
      " 18  SPPQ3          4281 non-null   float64\n",
      " 19  SPPQ4          4281 non-null   float64\n",
      " 20  SPPQ5          4281 non-null   float64\n",
      " 21  SPPMANEU       4281 non-null   float64\n",
      " 22  MYPB1          4281 non-null   float64\n",
      " 23  MYPB3          887 non-null    float64\n",
      " 24  MYPB11         859 non-null    float64\n",
      " 25  MYPB27A        4281 non-null   float64\n",
      " 26  MYPB27B        4281 non-null   float64\n",
      " 27  HSAGEIR_exam   13149 non-null  float64\n",
      " 28  HSAGEU_exam    13149 non-null  float64\n",
      " 29  HXPAXTMR_exam  36 non-null     float64\n",
      " 30  HXPSESSR_exam  36 non-null     float64\n",
      " 31  HXPEJ6A2       0 non-null      float64\n",
      " 32  SPPTECH1       4281 non-null   float64\n",
      " 33  SPPTRIAL       4281 non-null   float64\n",
      " 34  SPPPEAK        4281 non-null   float64\n",
      " 35  SPPFEV05       4281 non-null   float64\n",
      " 36  SPPFEV1        4281 non-null   float64\n",
      " 37  SPPFEV3        4281 non-null   float64\n",
      " 38  SPPFEV6        4281 non-null   float64\n",
      " 39  SPPFVC         4281 non-null   float64\n",
      " 40  SPPMMEF        4281 non-null   float64\n",
      " 41  SPPFEF75       4281 non-null   float64\n",
      " 42  SPPTYPE        4281 non-null   float64\n",
      " 43  SPPREPRO       4281 non-null   float64\n",
      " 44  SPPTIME        4281 non-null   object \n",
      " 45  SPPEXPIR       4281 non-null   float64\n",
      " 46  SPPTEMP        4281 non-null   float64\n",
      " 47  HSSEX_exam     13149 non-null  float64\n",
      " 48  WTPFHX6        13149 non-null  float64\n",
      " 49  MXPAXTMR       13113 non-null  float64\n",
      " 50  BMPHT          9895 non-null   float64\n",
      " 51  BMPSITHT       9894 non-null   float64\n",
      " 52  BMPWT          13149 non-null  float64\n",
      " 53  DMARACER_exam  13149 non-null  Int64  \n",
      " 54  DMARETHN_exam  13149 non-null  float64\n",
      " 55  DMAETHNR_exam  13149 non-null  float64\n",
      " 56  HSAITMOR_exam  13149 non-null  float64\n",
      " 57  HXPG1          0 non-null      float64\n",
      " 58  HXPG2A         0 non-null      float64\n",
      " 59  HXPG2B         0 non-null      float64\n",
      "dtypes: Int64(1), float64(47), int64(11), object(1)\n",
      "memory usage: 7.1+ MB\n"
     ]
    }
   ],
   "source": [
    "youth_exam.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hankinson age 8 to 16 4143\n",
    "We have 13944 youth in exam file\n",
    "4146 youth did spirometry all ages\n",
    "5365 age 8 between 7 and 17, same age between 7 and 20\n",
    "4488 age >96 mo; 4538 age >95 mo\n",
    "4076 age 8 and older with at least 2 spirometry vs 4103 Hankinson\n",
    "need do scatter plot of age(month) vs age to see why off\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5365, 60)"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('HSAGEIR > 7').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "age at exam 8 (96 months) and above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4323, 60)"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('MXPAXTMR >95').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4323, 60)"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('MXPAXTMR >95.99').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "age 8 - 16  (204 is age 17)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4291, 60)"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('95 < MXPAXTMR < 204').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "age 17 and above on exam - 32, 27 are less than 1 mo over 17, and 5 are 2 mo over 17 - so include all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32, 60)"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('MXPAXTMR > 203.9').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 60)"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('MXPAXTMR > 204').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 60)"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('MXPAXTMR > 205').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5365, 60)"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 20').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5365, 60)"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 17').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13944 youth in exam file\n",
    "4146  youth did spirometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4323, 60)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('MXPAXTMR > 95').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13944 youth, 13113 had exam, 6487 5 over exam, 4323 8 over exam\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13113, 60)"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('MXPAXTMR > 0').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6487, 60)"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('MXPAXTMR > 59').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4146, 60)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU > -1 & SPPMANEU < 88)').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4146, 60)"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU < 88)').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 60)"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU > 88)').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(135, 60)"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU == 88)').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "!= gets those that are blank as well as those not equal to"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13809, 60)"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU != 88)').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13, 60)"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU > -1 & SPPMANEU < 88)').query('MXPAXTMR < 97').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All youth having spirometry were month 96 to 17y 3 mo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 60)"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU > -1 & SPPMANEU < 88)').query('MXPAXTMR < 96').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4146, 60)"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU > -1 & SPPMANEU < 88)').query('MXPAXTMR > 59').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4146, 60)"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('(SPPMANEU > -1 & SPPMANEU < 88)').query('MXPAXTMR > 95').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "age 8-17"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Total youth exam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13944, 60)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('HSAGEIR > 0').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "total youth with medical exam (have exam age month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4323, 60)"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8790, 60)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR < 96')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13113, 60)"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 0')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5230 age 8- and at least one spirometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5230, 60)"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('7 < HSAGEIR < 18')\n",
    ".query('SPPMANEU !=88')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4188, 60)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('SPPMANEU !=88')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    4602\n",
       "3    4445\n",
       "2    4141\n",
       "4     756\n",
       "Name: DMARETHN, dtype: int64"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.DMARETHN.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "spirometry >1 curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4146, 60)"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('7 < HSAGEIR < 18')\n",
    ".query('(SPPMANEU > -1 & SPPMANEU < 88)')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4146, 60)"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('(SPPMANEU > -1 & SPPMANEU < 88)')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4114, 60)"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('(SPPMANEU > 1 & SPPMANEU < 88)')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "spirometry unusable <2 curves and reproducible FEV1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4076, 60)"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('7 < HSAGEIR < 18')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4076, 60)"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4114, 60)"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ethnicity other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3928, 60)"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3890, 60)"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('7 < HSAGEIR < 18')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3890, 60)"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0    3394\n",
       "1.0     724\n",
       "8.0     162\n",
       "9.0       1\n",
       "Name: MYPB1, dtype: int64"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.MYPB1.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MYPB1 smoked at least one cigarette - too many so not use\n",
    "MYPB11 cigarettes smoked in the past 5 days\n",
    "MYPB3 smoked 100+cigarettes in life\n",
    "MYPB27A pipes past 5 days\n",
    "MYPB27B cigars past 5 days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3238, 60)"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB1 == 1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3813, 60)"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3775, 60)"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "smoked 5 days B11 and B27"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3594, 60)"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and B27"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3593, 60)"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3555, 60)"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "asthma E1g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3268, 60)"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3232, 60)"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "chronic bronchitis E1h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3180, 60)"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').query('not HYE1H == 1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3145, 60)"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "wheezing 12 months"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2899, 60)"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').query('not HYE1H == 1').query('not HYG8 == 1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2867, 60)"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "wheezing apart from colds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2848, 60)"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').query('not HYE1H == 1').query('not HYG8 == 1').query('not HYG12 == 1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2816, 60)"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Youth 12 years and older with above H 1298"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1305, 60)"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').query('not HYE1H == 1').query('not HYG8 == 1').query('not HYG12 == 1').query('HSAGEIR > 11').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1294, 60)"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('7 < HSAGEIR < 18')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('HSAGEIR > 11')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and not persistent cough G2 H 2816 **I all age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2832, 60)"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').query('not HYE1H == 1').query('not HYG8 == 1').query('not HYG12 == 1').query('not HYG2 == 1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2800, 60)"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('not HYG2 == 1')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and not persistent phlegm G4 H 2806"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2822, 60)"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').query('not HYE1H == 1').query('not HYG8 == 1').query('not HYG12 == 1').query('not HYG2 == 1').query('not HYG4 == 1').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2790, 60)"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('not HYG2 == 1')\n",
    ".query('not HYG4 == 1') \n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and Youth age 8-under 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1543, 60)"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').query('not HYE1H == 1').query('not HYG8 == 1').query('not HYG12 == 1').query('not HYG2 == 1').query('not HYG4 == 1').query('HSAGEIR < 12').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1522, 60)"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('7 < HSAGEIR < 18')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('not HYG2 == 1')\n",
    ".query('not HYG4 == 1') \n",
    ".query('HSAGEIR < 12')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and not persistent cough G6 and G7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0      1071\n",
       "2.0       959\n",
       "3.0       588\n",
       "4.0       333\n",
       "555.0     294\n",
       "6.0       117\n",
       "5.0       115\n",
       "12.0       48\n",
       "10.0       29\n",
       "8.0        26\n",
       "7.0        24\n",
       "999.0      18\n",
       "20.0       18\n",
       "888.0      16\n",
       "24.0       12\n",
       "15.0        8\n",
       "9.0         4\n",
       "30.0        2\n",
       "120.0       1\n",
       "104.0       1\n",
       "60.0        1\n",
       "13.0        1\n",
       "11.0        1\n",
       "25.0        1\n",
       "35.0        1\n",
       "14.0        1\n",
       "Name: HYG7, dtype: int64"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.HYG7.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2812, 60)"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88').query('DMARETHN < 4').query('not MYPB3 == 1').query('not MYPB11 >0').query('not MYPB27A >0').query('not HYE1G == 1').query('not HYE1H == 1').query('not HYG8 == 1').query('not HYG12 == 1').query('not HYG2 == 1').query('not HYG4 == 1').query('not HYG7 == 555').shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2780, 60)"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('not HYG2 == 1')\n",
    ".query('not HYG4 == 1') \n",
    ".query('not HYG7 == 555')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and have valid height"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2779, 60)"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('not HYG2 == 1')\n",
    ".query('not HYG4 == 1') \n",
    ".query('not HYG7 == 555')\n",
    ".query('BMPHT > 114')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and have FEV3 value and age in month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2779, 60)"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam.query('7 < HSAGEIR < 18')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('not HYG2 == 1')\n",
    ".query('not HYG4 == 1') \n",
    ".query('not HYG7 == 555')\n",
    ".query('BMPHT > 114')\n",
    ".query('not SPPFEV3 == 88888')\n",
    ".query('not HSAITMOR == 9999')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2779, 60)"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_exam\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('not HYG2 == 1')\n",
    ".query('not HYG4 == 1') \n",
    ".query('not HYG7 == 555')\n",
    ".query('BMPHT > 114')\n",
    ".query('not SPPFEV3 == 88888')\n",
    ".query('not MXPAXTMR  == 9999')\n",
    ".shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create youth_final"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "youth_final = (youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88')\n",
    "               .query('DMARETHN < 4').query('not MYPB3 == 1')\n",
    "               .query('not MYPB11 >0').query('not MYPB27A >0')\n",
    "               .query('not HYE1G == 1').query('not HYE1H == 1')\n",
    "               .query('not HYG8 == 1').query('not HYG12 == 1')\n",
    "               .query('not HYG2 == 1').query('not HYG4 == 1')\n",
    "               .query('not HYG7 == 555'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "not use anymore youth_final = (youth_exam.query('7 < HSAGEIR < 18').query('2 <= SPPMANEU < 88')\n",
    "               .query('DMARETHN < 4').query('not MYPB3 == 1')\n",
    "               .query('not MYPB11 >0').query('not MYPB27A >0')\n",
    "               .query('not HYE1G == 1').query('not HYE1H == 1')\n",
    "               .query('not HYG8 == 1').query('not HYG12 == 1')\n",
    "               .query('not HYG2 == 1').query('not HYG4 == 1')\n",
    "               .query('not HYG7 == 555'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "youth_final = (youth_exam.query('MXPAXTMR > 95')\n",
    ".query('(SPPMANEU > 1 & SPPMANEU < 88) & (SPPREPRO == 4 | SPPREPRO == 1)')\n",
    ".query('DMARETHN < 4')\n",
    ".query('not MYPB3 == 1')\n",
    ".query('not MYPB11 >0').query('not MYPB27A >0')\n",
    ".query('not HYE1G == 1')\n",
    ".query('not HYE1H == 1')\n",
    ".query('not HYG8 == 1')\n",
    ".query('not HYG12 == 1')\n",
    ".query('not HYG2 == 1')\n",
    ".query('not HYG4 == 1') \n",
    ".query('not HYG7 == 555')\n",
    ".query('BMPHT > 114')\n",
    ".query('not SPPFEV3 == 88888')\n",
    ".query('not MXPAXTMR == 9999'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2779, 60)"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_final.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check age month vs ager"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'youth_final' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-0b27cd32587e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0myouth_final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'MXPAXTMR'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'HSAGEIR'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'youth_final' is not defined"
     ]
    }
   ],
   "source": [
    "youth_final.plot.scatter('MXPAXTMR','HSAGEIR')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11e67b310>"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "youth_final.plot.scatter('MXPAXTMR', 'HSAITMOR')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HYE1G</th>\n",
       "      <th>HYE1H</th>\n",
       "      <th>HSSEX</th>\n",
       "      <th>HSAGEIR</th>\n",
       "      <th>HSAGEU</th>\n",
       "      <th>DMARACER</th>\n",
       "      <th>DMARETHN</th>\n",
       "      <th>DMAETHNR</th>\n",
       "      <th>HXPAXTMR</th>\n",
       "      <th>HXPSESSR</th>\n",
       "      <th>...</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>166.9</td>\n",
       "      <td>87.0</td>\n",
       "      <td>47.50</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>167.6</td>\n",
       "      <td>89.2</td>\n",
       "      <td>62.65</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>198.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      HYE1G  HYE1H  HSSEX  HSAGEIR  HSAGEU  DMARACER  DMARETHN  DMAETHNR  \\\n",
       "SEQN                                                                       \n",
       "14        2      2      2       16       2         1         1         3   \n",
       "16        2      2      1       16       2         1         3         1   \n",
       "\n",
       "      HXPAXTMR  HXPSESSR  ...  BMPHT  BMPSITHT  BMPWT  DMARACER_exam  \\\n",
       "SEQN                      ...                                          \n",
       "14         NaN       NaN  ...  166.9      87.0  47.50              1   \n",
       "16         NaN       NaN  ...  167.6      89.2  62.65              1   \n",
       "\n",
       "      DMARETHN_exam  DMAETHNR_exam  HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \n",
       "SEQN                                                                      \n",
       "14              1.0            3.0          196.0    NaN     NaN     NaN  \n",
       "16              3.0            1.0          198.0    NaN     NaN     NaN  \n",
       "\n",
       "[2 rows x 60 columns]"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_final.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After all of the exclusions, the youth_final dataframe has 2812 entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sequence number</td>\n",
       "      <td>SEQN</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Family sequence number</td>\n",
       "      <td>DMPFSEQ</td>\n",
       "      <td>6</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Examination/interview status</td>\n",
       "      <td>DMPSTAT</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Race-ethnicity</td>\n",
       "      <td>DMARETHN</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Race</td>\n",
       "      <td>DMARACER</td>\n",
       "      <td>13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>ICD-9-CM code-9th</td>\n",
       "      <td>HYK11AO</td>\n",
       "      <td>2087</td>\n",
       "      <td>2092.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>683</th>\n",
       "      <td>For how long been taking (days)-9th</td>\n",
       "      <td>HYK12SO</td>\n",
       "      <td>2093</td>\n",
       "      <td>2097.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684</th>\n",
       "      <td>Main respondents relationship to SP</td>\n",
       "      <td>HYM1</td>\n",
       "      <td>2098</td>\n",
       "      <td>2099.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>685</th>\n",
       "      <td>Was SP present during any of interview</td>\n",
       "      <td>HYM2</td>\n",
       "      <td>2100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>686</th>\n",
       "      <td>Quality of interview</td>\n",
       "      <td>HYM3</td>\n",
       "      <td>2101</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>687 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                description  variable  position  end position  \\\n",
       "0                           Sequence number      SEQN         1           5.0   \n",
       "1                    Family sequence number   DMPFSEQ         6          10.0   \n",
       "2              Examination/interview status   DMPSTAT        11           NaN   \n",
       "3                            Race-ethnicity  DMARETHN        12           NaN   \n",
       "4                                      Race  DMARACER        13           NaN   \n",
       "..                                      ...       ...       ...           ...   \n",
       "682                       ICD-9-CM code-9th   HYK11AO      2087        2092.0   \n",
       "683     For how long been taking (days)-9th   HYK12SO      2093        2097.0   \n",
       "684     Main respondents relationship to SP      HYM1      2098        2099.0   \n",
       "685  Was SP present during any of interview      HYM2      2100           NaN   \n",
       "686                    Quality of interview      HYM3      2101           NaN   \n",
       "\n",
       "     length  \n",
       "0         5  \n",
       "1         5  \n",
       "2         1  \n",
       "3         1  \n",
       "4         1  \n",
       "..      ...  \n",
       "682       6  \n",
       "683       5  \n",
       "684       2  \n",
       "685       1  \n",
       "686       1  \n",
       "\n",
       "[687 rows x 5 columns]"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth.cols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reviewing adult file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sequence number</td>\n",
       "      <td>SEQN</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Family sequence number</td>\n",
       "      <td>DMPFSEQ</td>\n",
       "      <td>6</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Examination/interview status</td>\n",
       "      <td>DMPSTAT</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Race-ethnicity</td>\n",
       "      <td>DMARETHN</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Race</td>\n",
       "      <td>DMARACER</td>\n",
       "      <td>13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1233</th>\n",
       "      <td>BP statement read to SP (years 5 and 6)</td>\n",
       "      <td>HAZA12</td>\n",
       "      <td>3336</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1234</th>\n",
       "      <td>Average K1 BP from household and MEC</td>\n",
       "      <td>HAZMNK1R</td>\n",
       "      <td>3337</td>\n",
       "      <td>3339.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1235</th>\n",
       "      <td>Number of BP's used for average K1</td>\n",
       "      <td>HAZNOK1R</td>\n",
       "      <td>3340</td>\n",
       "      <td>3341.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1236</th>\n",
       "      <td>Average K5 BP from household and MEC</td>\n",
       "      <td>HAZMNK5R</td>\n",
       "      <td>3342</td>\n",
       "      <td>3344.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>Number of BP's used for average K5</td>\n",
       "      <td>HAZNOK5R</td>\n",
       "      <td>3345</td>\n",
       "      <td>3346.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1238 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  description  variable  position  \\\n",
       "0                             Sequence number      SEQN         1   \n",
       "1                      Family sequence number   DMPFSEQ         6   \n",
       "2                Examination/interview status   DMPSTAT        11   \n",
       "3                              Race-ethnicity  DMARETHN        12   \n",
       "4                                        Race  DMARACER        13   \n",
       "...                                       ...       ...       ...   \n",
       "1233  BP statement read to SP (years 5 and 6)    HAZA12      3336   \n",
       "1234     Average K1 BP from household and MEC  HAZMNK1R      3337   \n",
       "1235       Number of BP's used for average K1  HAZNOK1R      3340   \n",
       "1236     Average K5 BP from household and MEC  HAZMNK5R      3342   \n",
       "1237       Number of BP's used for average K5  HAZNOK5R      3345   \n",
       "\n",
       "      end position  length  \n",
       "0              5.0       5  \n",
       "1             10.0       5  \n",
       "2              NaN       1  \n",
       "3              NaN       1  \n",
       "4              NaN       1  \n",
       "...            ...     ...  \n",
       "1233           NaN       1  \n",
       "1234        3339.0       3  \n",
       "1235        3341.0       2  \n",
       "1236        3344.0       3  \n",
       "1237        3346.0       2  \n",
       "\n",
       "[1238 rows x 5 columns]"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = nh.cols\n",
    "cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>Anyone living here smoke cigs in home</td>\n",
       "      <td>HFF1</td>\n",
       "      <td>1356</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td># persons who smoke cigarettes in home</td>\n",
       "      <td>HFF2R</td>\n",
       "      <td>1357</td>\n",
       "      <td>1358.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>Cigarettes per day person 1 smokes</td>\n",
       "      <td>HFF3A</td>\n",
       "      <td>1359</td>\n",
       "      <td>1361.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>Cigarettes per day person 2 smokes</td>\n",
       "      <td>HFF3B</td>\n",
       "      <td>1362</td>\n",
       "      <td>1364.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>Cigarettes per day person 3 smokes</td>\n",
       "      <td>HFF3C</td>\n",
       "      <td>1365</td>\n",
       "      <td>1367.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264</th>\n",
       "      <td>Cigarettes per day person 4 smokes</td>\n",
       "      <td>HFF3D</td>\n",
       "      <td>1368</td>\n",
       "      <td>1370.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>Cigarettes per day person 5 smokes</td>\n",
       "      <td>HFF3E</td>\n",
       "      <td>1371</td>\n",
       "      <td>1373.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>Cigarettes per day person 6 smokes</td>\n",
       "      <td>HFF3F</td>\n",
       "      <td>1374</td>\n",
       "      <td>1376.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>Doctor told stop smoking for HBP</td>\n",
       "      <td>HAE4D3</td>\n",
       "      <td>1606</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>428</th>\n",
       "      <td>Now quit smoking for high blood pressure</td>\n",
       "      <td>HAE5D3</td>\n",
       "      <td>1615</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>862</th>\n",
       "      <td>Have you smoked 100+ cigarettes in life</td>\n",
       "      <td>HAR1</td>\n",
       "      <td>2281</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>Age when you started smoking regularly</td>\n",
       "      <td>HAR2</td>\n",
       "      <td>2282</td>\n",
       "      <td>2284.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>Do you smoke cigarettes now</td>\n",
       "      <td>HAR3</td>\n",
       "      <td>2285</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td># cigarettes smoked per day</td>\n",
       "      <td>HAR4S</td>\n",
       "      <td>2286</td>\n",
       "      <td>2288.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>How many yrs have you smoked this amount</td>\n",
       "      <td>HAR5</td>\n",
       "      <td>2289</td>\n",
       "      <td>2291.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867</th>\n",
       "      <td>Ever period of 1+ years when smoked more</td>\n",
       "      <td>HAR6</td>\n",
       "      <td>2292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td># cigarettes per day when smoking most</td>\n",
       "      <td>HAR7S</td>\n",
       "      <td>2293</td>\n",
       "      <td>2296.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>How many years did you smoke that amount</td>\n",
       "      <td>HAR8</td>\n",
       "      <td>2297</td>\n",
       "      <td>2299.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>870</th>\n",
       "      <td>Ever quit smoking for one year or longer</td>\n",
       "      <td>HAR9</td>\n",
       "      <td>2300</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>How many years not smoked since started</td>\n",
       "      <td>HAR10</td>\n",
       "      <td>2301</td>\n",
       "      <td>2303.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>Age last smoke cigarettes reg -- yrs</td>\n",
       "      <td>HAR11R</td>\n",
       "      <td>2304</td>\n",
       "      <td>2306.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>873</th>\n",
       "      <td># cigarettes smoked per day at that time</td>\n",
       "      <td>HAR12S</td>\n",
       "      <td>2307</td>\n",
       "      <td>2309.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>Quit smoking,health problem from smoking</td>\n",
       "      <td>HAR13</td>\n",
       "      <td>2310</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>Ever smoke at least 20 cigars in life</td>\n",
       "      <td>HAR23</td>\n",
       "      <td>2330</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>Do you now smoke cigars</td>\n",
       "      <td>HAR24</td>\n",
       "      <td>2331</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>How many cigars do you smoke per day</td>\n",
       "      <td>HAR25</td>\n",
       "      <td>2332</td>\n",
       "      <td>2333.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>Ever smoke 20 pipes of tobacco in life</td>\n",
       "      <td>HAR26</td>\n",
       "      <td>2334</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>Do you now smoke a pipe</td>\n",
       "      <td>HAR27</td>\n",
       "      <td>2335</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>891</th>\n",
       "      <td>How many pipefuls tobacco smoke per day</td>\n",
       "      <td>HAR28</td>\n",
       "      <td>2336</td>\n",
       "      <td>2337.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>902</th>\n",
       "      <td>At work, hours per day can smell smoking</td>\n",
       "      <td>HAS14</td>\n",
       "      <td>2354</td>\n",
       "      <td>2355.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1200</th>\n",
       "      <td>Have you smoked cigarettes last 30 min</td>\n",
       "      <td>HAZA2A4</td>\n",
       "      <td>3269</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   description variable  position  \\\n",
       "259      Anyone living here smoke cigs in home     HFF1      1356   \n",
       "260     # persons who smoke cigarettes in home    HFF2R      1357   \n",
       "261         Cigarettes per day person 1 smokes    HFF3A      1359   \n",
       "262         Cigarettes per day person 2 smokes    HFF3B      1362   \n",
       "263         Cigarettes per day person 3 smokes    HFF3C      1365   \n",
       "264         Cigarettes per day person 4 smokes    HFF3D      1368   \n",
       "265         Cigarettes per day person 5 smokes    HFF3E      1371   \n",
       "266         Cigarettes per day person 6 smokes    HFF3F      1374   \n",
       "419           Doctor told stop smoking for HBP   HAE4D3      1606   \n",
       "428   Now quit smoking for high blood pressure   HAE5D3      1615   \n",
       "862    Have you smoked 100+ cigarettes in life     HAR1      2281   \n",
       "863     Age when you started smoking regularly     HAR2      2282   \n",
       "864                Do you smoke cigarettes now     HAR3      2285   \n",
       "865                # cigarettes smoked per day    HAR4S      2286   \n",
       "866   How many yrs have you smoked this amount     HAR5      2289   \n",
       "867   Ever period of 1+ years when smoked more     HAR6      2292   \n",
       "868     # cigarettes per day when smoking most    HAR7S      2293   \n",
       "869   How many years did you smoke that amount     HAR8      2297   \n",
       "870   Ever quit smoking for one year or longer     HAR9      2300   \n",
       "871    How many years not smoked since started    HAR10      2301   \n",
       "872       Age last smoke cigarettes reg -- yrs   HAR11R      2304   \n",
       "873   # cigarettes smoked per day at that time   HAR12S      2307   \n",
       "874   Quit smoking,health problem from smoking    HAR13      2310   \n",
       "886      Ever smoke at least 20 cigars in life    HAR23      2330   \n",
       "887                    Do you now smoke cigars    HAR24      2331   \n",
       "888       How many cigars do you smoke per day    HAR25      2332   \n",
       "889     Ever smoke 20 pipes of tobacco in life    HAR26      2334   \n",
       "890                    Do you now smoke a pipe    HAR27      2335   \n",
       "891    How many pipefuls tobacco smoke per day    HAR28      2336   \n",
       "902   At work, hours per day can smell smoking    HAS14      2354   \n",
       "1200    Have you smoked cigarettes last 30 min  HAZA2A4      3269   \n",
       "\n",
       "      end position  length  \n",
       "259            NaN       1  \n",
       "260         1358.0       2  \n",
       "261         1361.0       3  \n",
       "262         1364.0       3  \n",
       "263         1367.0       3  \n",
       "264         1370.0       3  \n",
       "265         1373.0       3  \n",
       "266         1376.0       3  \n",
       "419            NaN       1  \n",
       "428            NaN       1  \n",
       "862            NaN       1  \n",
       "863         2284.0       3  \n",
       "864            NaN       1  \n",
       "865         2288.0       3  \n",
       "866         2291.0       3  \n",
       "867            NaN       1  \n",
       "868         2296.0       4  \n",
       "869         2299.0       3  \n",
       "870            NaN       1  \n",
       "871         2303.0       3  \n",
       "872         2306.0       3  \n",
       "873         2309.0       3  \n",
       "874            NaN       1  \n",
       "886            NaN       1  \n",
       "887            NaN       1  \n",
       "888         2333.0       2  \n",
       "889            NaN       1  \n",
       "890            NaN       1  \n",
       "891         2337.0       2  \n",
       "902         2355.0       2  \n",
       "1200           NaN       1  "
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols[cols.description.str.contains('(?:smok|cig)')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nh.hist_amount('HAR4S');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nh.hist_amount('HSAITMOR',outliers=1200);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nh.hist_amount('DMARETHN', outliers=25);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/pandas/core/strings.py:1952: UserWarning: This pattern has match groups. To actually get the groups, use str.extract.\n",
      "  return func(self, *args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>Mother's weight calculated in pounds</td>\n",
       "      <td>HFC2S</td>\n",
       "      <td>1300</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>Father's weight calculated in pounds</td>\n",
       "      <td>HFC4S</td>\n",
       "      <td>1302</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>Doctor told control/lose weight for HBP</td>\n",
       "      <td>HAE4B</td>\n",
       "      <td>1601</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>424</th>\n",
       "      <td>Now controlling or losing weight for HBP</td>\n",
       "      <td>HAE5B</td>\n",
       "      <td>1611</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>Doctor told lose weight for HBC</td>\n",
       "      <td>HAE8B</td>\n",
       "      <td>1622</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>Now losing weight to lower cholesterol</td>\n",
       "      <td>HAE9B</td>\n",
       "      <td>1626</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>444</th>\n",
       "      <td>On own for HBC, controlled/lost weight</td>\n",
       "      <td>HAE11B</td>\n",
       "      <td>1631</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>599</th>\n",
       "      <td>Difficulty lifting or carrying 10 pounds</td>\n",
       "      <td>HAH4</td>\n",
       "      <td>1807</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>705</th>\n",
       "      <td>Consider self over/under/right weight</td>\n",
       "      <td>HAM11</td>\n",
       "      <td>1964</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>707</th>\n",
       "      <td>Tried to lose weight in past 12 months</td>\n",
       "      <td>HAM13</td>\n",
       "      <td>1966</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>953</th>\n",
       "      <td>In the past month, did you lift weights</td>\n",
       "      <td>HAT16</td>\n",
       "      <td>2442</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>954</th>\n",
       "      <td>Lift weights activity - intensity rating</td>\n",
       "      <td>HAT16MET</td>\n",
       "      <td>2443</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>955</th>\n",
       "      <td>Past mo, how often did you lift weights</td>\n",
       "      <td>HAT17S</td>\n",
       "      <td>2444</td>\n",
       "      <td>2447.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1192</th>\n",
       "      <td>Observed SP:overweight, average, or thin</td>\n",
       "      <td>HAY11J</td>\n",
       "      <td>3232</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   description  variable  position  \\\n",
       "210       Mother's weight calculated in pounds     HFC2S      1300   \n",
       "212       Father's weight calculated in pounds     HFC4S      1302   \n",
       "414    Doctor told control/lose weight for HBP     HAE4B      1601   \n",
       "424   Now controlling or losing weight for HBP     HAE5B      1611   \n",
       "435            Doctor told lose weight for HBC     HAE8B      1622   \n",
       "439     Now losing weight to lower cholesterol     HAE9B      1626   \n",
       "444     On own for HBC, controlled/lost weight    HAE11B      1631   \n",
       "599   Difficulty lifting or carrying 10 pounds      HAH4      1807   \n",
       "705      Consider self over/under/right weight     HAM11      1964   \n",
       "707     Tried to lose weight in past 12 months     HAM13      1966   \n",
       "953    In the past month, did you lift weights     HAT16      2442   \n",
       "954   Lift weights activity - intensity rating  HAT16MET      2443   \n",
       "955    Past mo, how often did you lift weights    HAT17S      2444   \n",
       "1192  Observed SP:overweight, average, or thin    HAY11J      3232   \n",
       "\n",
       "      end position  length  \n",
       "210            NaN       1  \n",
       "212            NaN       1  \n",
       "414            NaN       1  \n",
       "424            NaN       1  \n",
       "435            NaN       1  \n",
       "439            NaN       1  \n",
       "444            NaN       1  \n",
       "599            NaN       1  \n",
       "705            NaN       1  \n",
       "707            NaN       1  \n",
       "953            NaN       1  \n",
       "954            NaN       1  \n",
       "955         2447.0       4  \n",
       "1192           NaN       1  "
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols[cols.description.str.contains('weight|pounds') & ~cols.description.str.contains('(sample|interview|weighting|exam)')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>description</th>\n",
       "      <th>variable</th>\n",
       "      <th>position</th>\n",
       "      <th>end position</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>450</th>\n",
       "      <td>If stand still is chest pain relieved</td>\n",
       "      <td>HAF5</td>\n",
       "      <td>1637</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>Leg pain begin while stand still/sitting</td>\n",
       "      <td>HAF15</td>\n",
       "      <td>1658</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>472</th>\n",
       "      <td>Is leg pain relieved if you stand still</td>\n",
       "      <td>HAF21</td>\n",
       "      <td>1664</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478</th>\n",
       "      <td>Problem with ability to speak/understand</td>\n",
       "      <td>HAF27</td>\n",
       "      <td>1670</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>604</th>\n",
       "      <td>Difficulty standing from armless chair</td>\n",
       "      <td>HAH9</td>\n",
       "      <td>1812</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  description variable  position  \\\n",
       "450     If stand still is chest pain relieved     HAF5      1637   \n",
       "466  Leg pain begin while stand still/sitting    HAF15      1658   \n",
       "472   Is leg pain relieved if you stand still    HAF21      1664   \n",
       "478  Problem with ability to speak/understand    HAF27      1670   \n",
       "604    Difficulty standing from armless chair     HAH9      1812   \n",
       "\n",
       "     end position  length  \n",
       "450           NaN       1  \n",
       "466           NaN       1  \n",
       "472           NaN       1  \n",
       "478           NaN       1  \n",
       "604           NaN       1  "
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols[cols.description.str.contains('stand') ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test Markdown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nh.hist_amount('HAR4S');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nh.hist_amount('HSAITMOR',outliers=1200);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now analyze adult_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>178.8</td>\n",
       "      <td>93.1</td>\n",
       "      <td>81.60</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>162.2</td>\n",
       "      <td>86.1</td>\n",
       "      <td>61.65</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>384.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>178.2</td>\n",
       "      <td>95.4</td>\n",
       "      <td>79.60</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>602.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>175.3</td>\n",
       "      <td>89.3</td>\n",
       "      <td>74.20</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>235.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>157.0</td>\n",
       "      <td>82.1</td>\n",
       "      <td>72.45</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      HAR1  HAR23  HAR26  HAC1E  HAC1F  HAC1G  HAC1O  HAL6  HAL10  HAL1  ...  \\\n",
       "SEQN                                                                     ...   \n",
       "3        2      2      2      2      2      2      2     2      2     2  ...   \n",
       "4        2      2      2      2      2      2      2     2      2     2  ...   \n",
       "52       2      2      2      2      2      2      2     2      2     2  ...   \n",
       "60       2      2      2      2      2      2      2     2      2     2  ...   \n",
       "84       2      2      2      2      2      2      2     2      2     2  ...   \n",
       "\n",
       "      BMPHT  BMPSITHT  BMPWT  DMARACER_exam  DMARETHN_exam  DMAETHNR_exam  \\\n",
       "SEQN                                                                        \n",
       "3     178.8      93.1  81.60              1            3.0            1.0   \n",
       "4     162.2      86.1  61.65              1            3.0            1.0   \n",
       "52    178.2      95.4  79.60              1            3.0            1.0   \n",
       "60    175.3      89.3  74.20              2            2.0            3.0   \n",
       "84    157.0      82.1  72.45              2            2.0            3.0   \n",
       "\n",
       "      HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \n",
       "SEQN                                        \n",
       "3             261.0    NaN     NaN     NaN  \n",
       "4             384.0    NaN     NaN     NaN  \n",
       "52            602.0    NaN     NaN     NaN  \n",
       "60            235.0    NaN     NaN     NaN  \n",
       "84            280.0    NaN     NaN     NaN  \n",
       "\n",
       "[5 rows x 66 columns]"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows Ã— 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [HAR1, HAR23, HAR26, HAC1E, HAC1F, HAC1G, HAC1O, HAL6, HAL10, HAL1, HAL3, HAL5, DMARACER, DMARETHN, DMAETHNR, HSSEX, HSAGEIR, HSAGEU, HXPAXTMR, HXPSESSR, HSAITMOR, HAR4S, SPPQ1, SPPQ2, SPPQ3, SPPQ4, SPPQ5, SPPMANEU, MYPB1, MYPB3, MYPB11, MYPB27A, MYPB27B, HSAGEIR_exam, HSAGEU_exam, HXPAXTMR_exam, HXPSESSR_exam, HXPEJ6A2, SPPTECH1, SPPTRIAL, SPPPEAK, SPPFEV05, SPPFEV1, SPPFEV3, SPPFEV6, SPPFVC, SPPMMEF, SPPFEF75, SPPTYPE, SPPREPRO, SPPTIME, SPPEXPIR, SPPTEMP, HSSEX_exam, WTPFHX6, MXPAXTMR, BMPHT, BMPSITHT, BMPWT, DMARACER_exam, DMARETHN_exam, DMAETHNR_exam, HSAITMOR_exam, HXPG1, HXPG2A, HXPG2B]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 66 columns]"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final[adult_final.SPPFEV1==8888]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows Ã— 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [HAR1, HAR23, HAR26, HAC1E, HAC1F, HAC1G, HAC1O, HAL6, HAL10, HAL1, HAL3, HAL5, DMARACER, DMARETHN, DMAETHNR, HSSEX, HSAGEIR, HSAGEU, HXPAXTMR, HXPSESSR, HSAITMOR, HAR4S, SPPQ1, SPPQ2, SPPQ3, SPPQ4, SPPQ5, SPPMANEU, MYPB1, MYPB3, MYPB11, MYPB27A, MYPB27B, HSAGEIR_exam, HSAGEU_exam, HXPAXTMR_exam, HXPSESSR_exam, HXPEJ6A2, SPPTECH1, SPPTRIAL, SPPPEAK, SPPFEV05, SPPFEV1, SPPFEV3, SPPFEV6, SPPFVC, SPPMMEF, SPPFEF75, SPPTYPE, SPPREPRO, SPPTIME, SPPEXPIR, SPPTEMP, HSSEX_exam, WTPFHX6, MXPAXTMR, BMPHT, BMPSITHT, BMPWT, DMARACER_exam, DMARETHN_exam, DMAETHNR_exam, HSAITMOR_exam, HXPG1, HXPG2A, HXPG2B]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 66 columns]"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final[adult_final.SPPFEV3==88888]\n",
    "# this shows rows with 88888 in SPPFEV3 - 45, 2518, 3216, 5167 etc\n",
    "# Then want replace with NaN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "after running replace there are no longer FEV3 of 88888"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final['SPPFEV3'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows Ã— 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [HAR1, HAR23, HAR26, HAC1E, HAC1F, HAC1G, HAC1O, HAL6, HAL10, HAL1, HAL3, HAL5, DMARACER, DMARETHN, DMAETHNR, HSSEX, HSAGEIR, HSAGEU, HXPAXTMR, HXPSESSR, HSAITMOR, HAR4S, SPPQ1, SPPQ2, SPPQ3, SPPQ4, SPPQ5, SPPMANEU, MYPB1, MYPB3, MYPB11, MYPB27A, MYPB27B, HSAGEIR_exam, HSAGEU_exam, HXPAXTMR_exam, HXPSESSR_exam, HXPEJ6A2, SPPTECH1, SPPTRIAL, SPPPEAK, SPPFEV05, SPPFEV1, SPPFEV3, SPPFEV6, SPPFVC, SPPMMEF, SPPFEF75, SPPTYPE, SPPREPRO, SPPTIME, SPPEXPIR, SPPTEMP, HSSEX_exam, WTPFHX6, MXPAXTMR, BMPHT, BMPSITHT, BMPWT, DMARACER_exam, DMARETHN_exam, DMAETHNR_exam, HSAITMOR_exam, HXPG1, HXPG2A, HXPG2B]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 66 columns]"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final[adult_final.SPPFEV3==88888]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5073.0</td>\n",
       "      <td>5073.0</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.0</td>\n",
       "      <td>5073.0</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.00000</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>5073.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.003548</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.001183</td>\n",
       "      <td>1.980879</td>\n",
       "      <td>2.00138</td>\n",
       "      <td>2.002365</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>165.459905</td>\n",
       "      <td>1486.970333</td>\n",
       "      <td>1649.413116</td>\n",
       "      <td>1.354425</td>\n",
       "      <td>2.005519</td>\n",
       "      <td>2.307707</td>\n",
       "      <td>479.773507</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.145879</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.084240</td>\n",
       "      <td>0.172627</td>\n",
       "      <td>0.09828</td>\n",
       "      <td>0.119122</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.798107</td>\n",
       "      <td>11064.291529</td>\n",
       "      <td>37407.413588</td>\n",
       "      <td>0.525896</td>\n",
       "      <td>0.828781</td>\n",
       "      <td>0.951575</td>\n",
       "      <td>264.284355</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>131.700000</td>\n",
       "      <td>66.300000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>204.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>158.300000</td>\n",
       "      <td>83.300000</td>\n",
       "      <td>60.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>292.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>164.800000</td>\n",
       "      <td>86.500000</td>\n",
       "      <td>69.950000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>412.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>172.100000</td>\n",
       "      <td>90.100000</td>\n",
       "      <td>81.700000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>625.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.00000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>206.500000</td>\n",
       "      <td>88888.000000</td>\n",
       "      <td>888888.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>9999.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 65 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         HAR1   HAR23        HAR26   HAC1E   HAC1F        HAC1G        HAC1O  \\\n",
       "count  5073.0  5073.0  5073.000000  5073.0  5073.0  5073.000000  5073.000000   \n",
       "mean      2.0     2.0     2.003548     2.0     2.0     2.001183     1.980879   \n",
       "std       0.0     0.0     0.145879     0.0     0.0     0.084240     0.172627   \n",
       "min       2.0     2.0     2.000000     2.0     2.0     2.000000     1.000000   \n",
       "25%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "50%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "75%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "max       2.0     2.0     8.000000     2.0     2.0     8.000000     9.000000   \n",
       "\n",
       "             HAL6        HAL10    HAL1  ...        BMPHT      BMPSITHT  \\\n",
       "count  5073.00000  5073.000000  5073.0  ...  5073.000000   5073.000000   \n",
       "mean      2.00138     2.002365     2.0  ...   165.459905   1486.970333   \n",
       "std       0.09828     0.119122     0.0  ...     9.798107  11064.291529   \n",
       "min       2.00000     2.000000     2.0  ...   131.700000     66.300000   \n",
       "25%       2.00000     2.000000     2.0  ...   158.300000     83.300000   \n",
       "50%       2.00000     2.000000     2.0  ...   164.800000     86.500000   \n",
       "75%       2.00000     2.000000     2.0  ...   172.100000     90.100000   \n",
       "max       9.00000     8.000000     2.0  ...   206.500000  88888.000000   \n",
       "\n",
       "               BMPWT  DMARACER_exam  DMARETHN_exam  DMAETHNR_exam  \\\n",
       "count    5073.000000    5073.000000    5073.000000    5073.000000   \n",
       "mean     1649.413116       1.354425       2.005519       2.307707   \n",
       "std     37407.413588       0.525896       0.828781       0.951575   \n",
       "min        32.000000       1.000000       1.000000       1.000000   \n",
       "25%        60.500000       1.000000       1.000000       1.000000   \n",
       "50%        69.950000       1.000000       2.000000       3.000000   \n",
       "75%        81.700000       2.000000       3.000000       3.000000   \n",
       "max    888888.000000       8.000000       3.000000       3.000000   \n",
       "\n",
       "       HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \n",
       "count    5073.000000    0.0     0.0     0.0  \n",
       "mean      479.773507    NaN     NaN     NaN  \n",
       "std       264.284355    NaN     NaN     NaN  \n",
       "min       204.000000    NaN     NaN     NaN  \n",
       "25%       292.000000    NaN     NaN     NaN  \n",
       "50%       412.000000    NaN     NaN     NaN  \n",
       "75%       625.000000    NaN     NaN     NaN  \n",
       "max      9999.000000    NaN     NaN     NaN  \n",
       "\n",
       "[8 rows x 65 columns]"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11f3483d0>"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "adult_final.HSAITMOR.hist(bins='auto', range=(0,1200))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# change bad/blank data to NaN in adult_final then youth_final"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from NHANES doc, SPPPEAK 1596 with 8888\n",
    "  SPPFEV05 1832 with 8888\n",
    "  SPPFEV1 1596 with 8888\n",
    "  SPPFEV3 1832 with 88888\n",
    "  SPPFEV6 1832 with 88888\n",
    "  SPPFVC 1596 with 88888\n",
    "  SPPMMEF 1832 with 88888\n",
    "  SPPEXPIR 1638 with 88\n",
    "  SPPFEF75 1832 with 8888\n",
    "  HSAITMOR 10 with 9999\n",
    "  \n",
    "  mapping = {8888: np.nan)\n",
    "  \n",
    "  adult_final.update_where( \n",
    "      (adult_final['SPPFEV3'] == 88888), 'SPPFEV3',np.nan)\n",
    "  )\n",
    "  \n",
    "  Also need HSAITMOR_exam with 9999\n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>178.8</td>\n",
       "      <td>93.1</td>\n",
       "      <td>81.60</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>162.2</td>\n",
       "      <td>86.1</td>\n",
       "      <td>61.65</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>384.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>178.2</td>\n",
       "      <td>95.4</td>\n",
       "      <td>79.60</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>602.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>175.3</td>\n",
       "      <td>89.3</td>\n",
       "      <td>74.20</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>235.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>157.0</td>\n",
       "      <td>82.1</td>\n",
       "      <td>72.45</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53558</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>163.1</td>\n",
       "      <td>83.3</td>\n",
       "      <td>64.10</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>663.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53567</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>158.7</td>\n",
       "      <td>84.4</td>\n",
       "      <td>74.55</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>432.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53592</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>166.8</td>\n",
       "      <td>85.5</td>\n",
       "      <td>53.20</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>235.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53593</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>193.6</td>\n",
       "      <td>101.6</td>\n",
       "      <td>78.50</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>287.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53623</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>165.2</td>\n",
       "      <td>88.5</td>\n",
       "      <td>56.10</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>208.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5073 rows Ã— 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HAR1  HAR23  HAR26  HAC1E  HAC1F  HAC1G  HAC1O  HAL6  HAL10  HAL1  ...  \\\n",
       "SEQN                                                                      ...   \n",
       "3         2      2      2      2      2      2      2     2      2     2  ...   \n",
       "4         2      2      2      2      2      2      2     2      2     2  ...   \n",
       "52        2      2      2      2      2      2      2     2      2     2  ...   \n",
       "60        2      2      2      2      2      2      2     2      2     2  ...   \n",
       "84        2      2      2      2      2      2      2     2      2     2  ...   \n",
       "...     ...    ...    ...    ...    ...    ...    ...   ...    ...   ...  ...   \n",
       "53558     2      2      2      2      2      2      2     2      2     2  ...   \n",
       "53567     2      2      2      2      2      2      2     2      2     2  ...   \n",
       "53592     2      2      2      2      2      2      2     2      2     2  ...   \n",
       "53593     2      2      2      2      2      2      2     2      2     2  ...   \n",
       "53623     2      2      2      2      2      2      2     2      2     2  ...   \n",
       "\n",
       "       BMPHT  BMPSITHT  BMPWT  DMARACER_exam  DMARETHN_exam  DMAETHNR_exam  \\\n",
       "SEQN                                                                         \n",
       "3      178.8      93.1  81.60              1            3.0            1.0   \n",
       "4      162.2      86.1  61.65              1            3.0            1.0   \n",
       "52     178.2      95.4  79.60              1            3.0            1.0   \n",
       "60     175.3      89.3  74.20              2            2.0            3.0   \n",
       "84     157.0      82.1  72.45              2            2.0            3.0   \n",
       "...      ...       ...    ...            ...            ...            ...   \n",
       "53558  163.1      83.3  64.10              1            1.0            3.0   \n",
       "53567  158.7      84.4  74.55              1            3.0            1.0   \n",
       "53592  166.8      85.5  53.20              1            3.0            1.0   \n",
       "53593  193.6     101.6  78.50              1            1.0            3.0   \n",
       "53623  165.2      88.5  56.10              2            2.0            3.0   \n",
       "\n",
       "       HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \n",
       "SEQN                                         \n",
       "3              261.0    NaN     NaN     NaN  \n",
       "4              384.0    NaN     NaN     NaN  \n",
       "52             602.0    NaN     NaN     NaN  \n",
       "60             235.0    NaN     NaN     NaN  \n",
       "84             280.0    NaN     NaN     NaN  \n",
       "...              ...    ...     ...     ...  \n",
       "53558          663.0    NaN     NaN     NaN  \n",
       "53567          432.0    NaN     NaN     NaN  \n",
       "53592          235.0    NaN     NaN     NaN  \n",
       "53593          287.0    NaN     NaN     NaN  \n",
       "53623          208.0    NaN     NaN     NaN  \n",
       "\n",
       "[5073 rows x 66 columns]"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "(adult_final.update_where( (adult_final['SPPFEV3'] == 88888), 'SPPFEV3',np.nan)\n",
    ".update_where( (adult_final['SPPFEV6'] == 88888), 'SPPFEV6',np.nan)\n",
    ".update_where( (adult_final['SPPFVC'] == 88888), 'SPPFVC',np.nan)\n",
    ".update_where( (adult_final['SPPMMEF'] == 88888), 'SPPMMEF',np.nan)\n",
    ".update_where( (adult_final['SPPEXPIR'] == 88), 'SPPEXPIR',np.nan)\n",
    ".update_where( (adult_final['SPPFEF75'] == 8888), 'SPPFEV3',np.nan)\n",
    ".update_where( (adult_final['SPPFEV05'] == 8888), 'SPPFEV05',np.nan)\n",
    ".update_where( (adult_final['SPPFEV1'] == 8888), 'SPPFEV1',np.nan)\n",
    ".update_where( (adult_final['HSAITMOR'] == 9999), 'HSAITMOR',np.nan)\n",
    ") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HYE1G</th>\n",
       "      <th>HYE1H</th>\n",
       "      <th>HSSEX</th>\n",
       "      <th>HSAGEIR</th>\n",
       "      <th>HSAGEU</th>\n",
       "      <th>DMARACER</th>\n",
       "      <th>DMARETHN</th>\n",
       "      <th>DMAETHNR</th>\n",
       "      <th>HXPAXTMR</th>\n",
       "      <th>HXPSESSR</th>\n",
       "      <th>...</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>166.9</td>\n",
       "      <td>87.0</td>\n",
       "      <td>47.50</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>167.6</td>\n",
       "      <td>89.2</td>\n",
       "      <td>62.65</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>198.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>148.0</td>\n",
       "      <td>75.5</td>\n",
       "      <td>36.15</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>156.0</td>\n",
       "      <td>88888.0</td>\n",
       "      <td>46.67</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>143.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>164.6</td>\n",
       "      <td>84.9</td>\n",
       "      <td>56.00</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53566</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>146.0</td>\n",
       "      <td>70.5</td>\n",
       "      <td>42.50</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53576</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>146.6</td>\n",
       "      <td>74.6</td>\n",
       "      <td>38.80</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53579</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>170.3</td>\n",
       "      <td>89.7</td>\n",
       "      <td>66.00</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53587</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>145.7</td>\n",
       "      <td>79.1</td>\n",
       "      <td>43.70</td>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53590</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>148.7</td>\n",
       "      <td>75.8</td>\n",
       "      <td>43.65</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2779 rows Ã— 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HYE1G  HYE1H  HSSEX  HSAGEIR  HSAGEU  DMARACER  DMARETHN  DMAETHNR  \\\n",
       "SEQN                                                                        \n",
       "14         2      2      2       16       2         1         1         3   \n",
       "16         2      2      1       16       2         1         3         1   \n",
       "20         2      2      2       10       2         1         1         3   \n",
       "30         2      2      2       11       2         1         3         1   \n",
       "33         2      2      2       14       2         1         3         1   \n",
       "...      ...    ...    ...      ...     ...       ...       ...       ...   \n",
       "53566      2      2      1       10       2         2         2         3   \n",
       "53576      2      2      2       10       2         2         2         3   \n",
       "53579      2      2      1       15       2         2         2         3   \n",
       "53587      2      2      2       12       2         3         3         1   \n",
       "53590      2      2      1       10       2         1         1         3   \n",
       "\n",
       "       HXPAXTMR  HXPSESSR  ...  BMPHT  BMPSITHT  BMPWT  DMARACER_exam  \\\n",
       "SEQN                       ...                                          \n",
       "14          NaN       NaN  ...  166.9      87.0  47.50              1   \n",
       "16          NaN       NaN  ...  167.6      89.2  62.65              1   \n",
       "20          NaN       NaN  ...  148.0      75.5  36.15              1   \n",
       "30          NaN       NaN  ...  156.0   88888.0  46.67              1   \n",
       "33          NaN       NaN  ...  164.6      84.9  56.00              1   \n",
       "...         ...       ...  ...    ...       ...    ...            ...   \n",
       "53566       NaN       NaN  ...  146.0      70.5  42.50              2   \n",
       "53576       NaN       NaN  ...  146.6      74.6  38.80              2   \n",
       "53579       NaN       NaN  ...  170.3      89.7  66.00              2   \n",
       "53587       NaN       NaN  ...  145.7      79.1  43.70              3   \n",
       "53590       NaN       NaN  ...  148.7      75.8  43.65              1   \n",
       "\n",
       "       DMARETHN_exam  DMAETHNR_exam  HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \n",
       "SEQN                                                                       \n",
       "14               1.0            3.0          196.0    NaN     NaN     NaN  \n",
       "16               3.0            1.0          198.0    NaN     NaN     NaN  \n",
       "20               1.0            3.0          127.0    NaN     NaN     NaN  \n",
       "30               3.0            1.0          143.0    NaN     NaN     NaN  \n",
       "33               3.0            1.0          178.0    NaN     NaN     NaN  \n",
       "...              ...            ...            ...    ...     ...     ...  \n",
       "53566            2.0            3.0          131.0    NaN     NaN     NaN  \n",
       "53576            2.0            3.0          129.0    NaN     NaN     NaN  \n",
       "53579            2.0            3.0          181.0    NaN     NaN     NaN  \n",
       "53587            3.0            1.0          152.0    NaN     NaN     NaN  \n",
       "53590            1.0            3.0          127.0    NaN     NaN     NaN  \n",
       "\n",
       "[2779 rows x 60 columns]"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(youth_final.update_where( (youth_final['SPPFEV3'] == 88888), 'SPPFEV3',np.nan)\n",
    ".update_where( (youth_final['SPPFEV6'] == 88888), 'SPPFEV6',np.nan)\n",
    ".update_where( (youth_final['SPPFVC'] == 88888), 'SPPFVC',np.nan)\n",
    ".update_where( (youth_final['SPPMMEF'] == 88888), 'SPPMMEF',np.nan)\n",
    ".update_where( (youth_final['SPPEXPIR'] == 88), 'SPPEXPIR',np.nan)\n",
    ".update_where( (youth_final['SPPFEF75'] == 8888), 'SPPFEV3',np.nan)\n",
    ".update_where( (youth_final['SPPFEV05'] == 8888), 'SPPFEV05',np.nan)\n",
    ".update_where( (youth_final['SPPFEV1'] == 8888), 'SPPFEV1',np.nan)\n",
    ".update_where( (youth_final['HSAITMOR'] == 9999), 'HSAITMOR',np.nan)\n",
    ") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Determine how many NaN there are for each parameter;\n",
    "There are 22 missing values in adult_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Youth FEV3  0  FEV6  0  FVC  0  MMEF  0  EXPIR  0  FEF75  0  FEV05  0\n",
      "Adult FEV3  0  FEV6  0  FVC  0  MMEF  0  EXPIR  0  FEF75  0  FEV05  0  FEV1  0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# print (\"youth rows cols \", youth_final.shape)\n",
    "print (\"Youth FEV3 \", youth_final['SPPFEV3'].isnull().sum(), \n",
    "       \" FEV6 \", youth_final['SPPFEV6'].isnull().sum(),\n",
    "       \" FVC \", youth_final['SPPFVC'].isnull().sum(),\n",
    "       \" MMEF \", youth_final['SPPMMEF'].isnull().sum(),\n",
    "       \" EXPIR \", youth_final['SPPEXPIR'].isnull().sum(),\n",
    "       \" FEF75 \", youth_final['SPPFEF75'].isnull().sum(),\n",
    "       \" FEV05 \", youth_final['SPPFEV05'].isnull().sum())\n",
    "print (\"Adult FEV3 \", adult_final['SPPFEV3'].isnull().sum(), \n",
    "       \" FEV6 \", adult_final['SPPFEV6'].isnull().sum(),\n",
    "       \" FVC \", adult_final['SPPFVC'].isnull().sum(),\n",
    "       \" MMEF \", adult_final['SPPMMEF'].isnull().sum(),\n",
    "       \" EXPIR \", adult_final['SPPEXPIR'].isnull().sum(),\n",
    "       \" FEF75 \", adult_final['SPPFEF75'].isnull().sum(),\n",
    "       \" FEV05 \", adult_final['SPPFEV05'].isnull().sum(),\n",
    "       \" FEV1 \", adult_final['SPPFEV1'].isnull().sum()\n",
    "      )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "prior to deleting null rows \n",
    "adult rows cols  (4925, 73)\n",
    "Adult FEV3  22  FEV6  22  FVC  0  MMEF  22  EXPIR  5  FEF75  0  FEV05  22  FEV1  0\n",
    "youth rows cols  (2780, 67)\n",
    "Youth FEV3  0  FEV6  0  FVC  0  MMEF  0  EXPIR  0  FEF75  0  FEV05  0  FEV1  0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now remove the adult rows which have null values in FEV3 and see if that clears all the rest of NaN\n",
    "When do that says is 4903, which is 22 less, but when print adult_final back to 4925"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "adult_final = adult_final.dropna(subset=['SPPFEV3'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Need also drop those with HSAITMOR that are null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "adult_final = adult_final.dropna(subset=['HSAITMOR'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "adult rows cols  (5072, 66)\n",
      "Adult FEV3  0  FEV6  0  FVC  0  MMEF  0  EXPIR  0  FEF75  0  FEV05  0  FEV1  0  HSAITMOR  0\n"
     ]
    }
   ],
   "source": [
    "print (\"adult rows cols \",adult_final.shape)\n",
    "print (\"Adult FEV3 \", adult_final['SPPFEV3'].isnull().sum(), \n",
    "       \" FEV6 \", adult_final['SPPFEV6'].isnull().sum(),\n",
    "       \" FVC \", adult_final['SPPFVC'].isnull().sum(),\n",
    "       \" MMEF \", adult_final['SPPMMEF'].isnull().sum(),\n",
    "       \" EXPIR \", adult_final['SPPEXPIR'].isnull().sum(),\n",
    "       \" FEF75 \", adult_final['SPPFEF75'].isnull().sum(),\n",
    "       \" FEV05 \", adult_final['SPPFEV05'].isnull().sum(),\n",
    "       \" FEV1 \", adult_final['SPPFEV1'].isnull().sum(),\n",
    "       \" HSAITMOR \", adult_final['HSAITMOR'].isnull().sum()\n",
    "      )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2779, 60)"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_final.shape"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now change blank data (8888 or 88888) to NaN\n",
    "for variables \n",
    "Example below creates new df wind2 from wind\n",
    "mapping = {-9999.0: np.nan}\n",
    "wind2 = (\n",
    "    wind\n",
    "    .find_replace(\n",
    "        usgs_pr_id=mapping,\n",
    "        p_tnum=mapping,\n",
    "        p_cap=mapping,\n",
    "        t_cap=mapping,\n",
    "        t_hh=mapping,\n",
    "        t_rd=mapping,\n",
    "        t_rsa=mapping,\n",
    "        t_ttlh=mapping,\n",
    "    )\n",
    ")\n",
    "wind2.head()\n",
    "\n",
    "Example below replaces data with nan\n",
    "(\n",
    "    wind.update_where(\n",
    "        (wind['p_year'] < 1887) | (wind['p_year'] > 2018), 'p_year', np.nan\n",
    "    )\n",
    "    .update_where((wind['t_hh'] <= 0) | (wind['t_hh'] >= 1000), 't_hh', np.nan)\n",
    "    .update_where((wind['xlong'] < -161.76) | (wind['xlong'] > -68.01), 'xlong', np.nan)\n",
    ");\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create new fields in adult_final and youth_final"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create new fields (XoY = X/Y) in youth_final and adult_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "oldvariables = [ 'SPPFEV1', 'SPPFEV3', 'SPPFEV6', 'SPPFVC','SPPPEAK','SPPMMEF', 'SPPFEF75', 'SPPEXPIR']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create new variables in adult_final final and youth_final\n",
    "including nonratio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "newvariables = ['FEV1OFVC', 'FEV1OFEV6', 'PEFROFVC', 'PEFROFEV6', 'PEFROFEV1', 'FEV3OFVC', 'FEV6OFVC']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "def createvariables(df):\n",
    "    df['FEV1OFVC'] = df.SPPFEV1 / df.SPPFVC\n",
    "    df['FEV1OFEV6']= df.SPPFEV1 / df.SPPFEV6\n",
    "    df['PEFROFVC'] = df.SPPPEAK / df.SPPFVC\n",
    "    df['PEFROFEV6']= df.SPPPEAK / df.SPPFEV6\n",
    "    df['PEFROFEV1'] = df.SPPPEAK / df.SPPFEV1\n",
    "    df['FEV3OFVC'] = df.SPPFEV3 / df.SPPFVC\n",
    "    df['FEV6OFVC'] = df.SPPFEV6 / df.SPPFVC\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvariables(df):\n",
    "    df['FEF75OFVC']= df.SPPFEF75 / df.SPPFVC * 100\n",
    "    df['FEF75OPEFR']= df.SPPFEF75 / df.SPPPEAK * 100\n",
    "    df['FEV1OFVC'] = df.SPPFEV1 / df.SPPFVC * 100\n",
    "    df['FEV1OFEV3']= df.SPPFEV1 / df.SPPFEV3 * 100\n",
    "    df['FEV1OFEV6']= df.SPPFEV1 / df.SPPFEV6 * 100\n",
    "    df['PEFROFVC'] = df.SPPPEAK / df.SPPFVC\n",
    "    df['PEFROFEV6']= df.SPPPEAK / df.SPPFEV6\n",
    "    df['PEFROFEV1'] = df.SPPPEAK / df.SPPFEV1\n",
    "    df['FEV3OFEV6'] = df.SPPFEV3 / df.SPPFEV6 * 100\n",
    "    df['FEV3OFVC'] = df.SPPFEV3 / df.SPPFVC * 100\n",
    "    df['FEV6OFVC'] = df.SPPFEV6 / df.SPPFVC * 100\n",
    "    df['MMEFOPEFR'] = df.SPPMMEF / df.SPPPEAK * 100\n",
    "    df['MMEFOFVC'] = df.SPPMMEF / df.SPPFVC\n",
    "    df['FEV05OFEV3'] = df.SPPFEV05 / df.SPPFEV3 * 100\n",
    "    df['FEV05OFVC'] = df.SPPFEV05 / df.SPPFVC * 100\n",
    "    df['FEV05'] = df.SPPFEV05 / 1000\n",
    "    df['FEV1'] = df.SPPFEV1 / 1000\n",
    "    df['FEV3'] = df.SPPFEV3 / 1000\n",
    "    df['FEV6'] = df.SPPFEV6 / 1000\n",
    "    df['FVC'] = df.SPPFVC / 1000\n",
    "    df['PEFR'] = df.SPPPEAK / 1000\n",
    "    df['MMEF'] = df.SPPMMEF / 1000 \n",
    "    df['FEF75'] = df.SPPFEF75 / 1000\n",
    "    df['FEV05'] = df.SPPFEV05 / 1000\n",
    "    df['EXPIR'] = df.SPPEXPIR\n",
    "    return\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "createvariables(adult_final) then youth_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "createvariables(adult_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "createvariables(youth_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11ed6e810>"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "adult_final.PEFROFVC.hist(bins='auto', range=(0,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11ae21c50>"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "adult_final.MMEFOPEFR.hist(bins='auto', range=(0,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11f8529d0>"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "youth_final.PEFROFVC.hist(bins='auto', range=(0,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1104cef10>"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "adult_final.FEV1OFVC.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11ecbf990>"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "youth_final.FEV1OFVC.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11f0be210>"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "adult_final.FEV3OFVC.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11ee05290>"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "youth_final.FEV3OFVC.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5072.0</td>\n",
       "      <td>5072.0</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.0</td>\n",
       "      <td>5072.0</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.00000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.003549</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.001183</td>\n",
       "      <td>1.980875</td>\n",
       "      <td>2.00138</td>\n",
       "      <td>2.002366</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>65.623766</td>\n",
       "      <td>2.487742</td>\n",
       "      <td>3.140080</td>\n",
       "      <td>3.618051</td>\n",
       "      <td>3.742541</td>\n",
       "      <td>3.811945</td>\n",
       "      <td>7.446075</td>\n",
       "      <td>3.327736</td>\n",
       "      <td>1.230897</td>\n",
       "      <td>9.462934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.145894</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.084248</td>\n",
       "      <td>0.172643</td>\n",
       "      <td>0.09829</td>\n",
       "      <td>0.119133</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.887579</td>\n",
       "      <td>0.684020</td>\n",
       "      <td>0.898856</td>\n",
       "      <td>1.035070</td>\n",
       "      <td>1.047891</td>\n",
       "      <td>1.048546</td>\n",
       "      <td>2.196130</td>\n",
       "      <td>1.339500</td>\n",
       "      <td>0.734718</td>\n",
       "      <td>3.864676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>22.382199</td>\n",
       "      <td>0.342000</td>\n",
       "      <td>0.624000</td>\n",
       "      <td>0.738000</td>\n",
       "      <td>0.738000</td>\n",
       "      <td>0.740000</td>\n",
       "      <td>0.668000</td>\n",
       "      <td>0.243000</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>60.678642</td>\n",
       "      <td>2.041750</td>\n",
       "      <td>2.527750</td>\n",
       "      <td>2.911000</td>\n",
       "      <td>3.025750</td>\n",
       "      <td>3.097750</td>\n",
       "      <td>5.965000</td>\n",
       "      <td>2.391000</td>\n",
       "      <td>0.659000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>66.004607</td>\n",
       "      <td>2.448000</td>\n",
       "      <td>3.086500</td>\n",
       "      <td>3.521000</td>\n",
       "      <td>3.628500</td>\n",
       "      <td>3.687000</td>\n",
       "      <td>7.234500</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>1.155000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>70.787539</td>\n",
       "      <td>2.940250</td>\n",
       "      <td>3.729500</td>\n",
       "      <td>4.288000</td>\n",
       "      <td>4.421000</td>\n",
       "      <td>4.488250</td>\n",
       "      <td>8.873500</td>\n",
       "      <td>4.227000</td>\n",
       "      <td>1.675000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.00000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>95.574163</td>\n",
       "      <td>4.941000</td>\n",
       "      <td>6.407000</td>\n",
       "      <td>7.608000</td>\n",
       "      <td>7.611000</td>\n",
       "      <td>7.612000</td>\n",
       "      <td>17.980000</td>\n",
       "      <td>8.913000</td>\n",
       "      <td>5.427000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 89 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         HAR1   HAR23        HAR26   HAC1E   HAC1F        HAC1G        HAC1O  \\\n",
       "count  5072.0  5072.0  5072.000000  5072.0  5072.0  5072.000000  5072.000000   \n",
       "mean      2.0     2.0     2.003549     2.0     2.0     2.001183     1.980875   \n",
       "std       0.0     0.0     0.145894     0.0     0.0     0.084248     0.172643   \n",
       "min       2.0     2.0     2.000000     2.0     2.0     2.000000     1.000000   \n",
       "25%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "50%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "75%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "max       2.0     2.0     8.000000     2.0     2.0     8.000000     9.000000   \n",
       "\n",
       "             HAL6        HAL10    HAL1  ...    FEV05OFVC        FEV05  \\\n",
       "count  5072.00000  5072.000000  5072.0  ...  5072.000000  5072.000000   \n",
       "mean      2.00138     2.002366     2.0  ...    65.623766     2.487742   \n",
       "std       0.09829     0.119133     0.0  ...     7.887579     0.684020   \n",
       "min       2.00000     2.000000     2.0  ...    22.382199     0.342000   \n",
       "25%       2.00000     2.000000     2.0  ...    60.678642     2.041750   \n",
       "50%       2.00000     2.000000     2.0  ...    66.004607     2.448000   \n",
       "75%       2.00000     2.000000     2.0  ...    70.787539     2.940250   \n",
       "max       9.00000     8.000000     2.0  ...    95.574163     4.941000   \n",
       "\n",
       "              FEV1         FEV3         FEV6          FVC         PEFR  \\\n",
       "count  5072.000000  5072.000000  5072.000000  5072.000000  5072.000000   \n",
       "mean      3.140080     3.618051     3.742541     3.811945     7.446075   \n",
       "std       0.898856     1.035070     1.047891     1.048546     2.196130   \n",
       "min       0.624000     0.738000     0.738000     0.740000     0.668000   \n",
       "25%       2.527750     2.911000     3.025750     3.097750     5.965000   \n",
       "50%       3.086500     3.521000     3.628500     3.687000     7.234500   \n",
       "75%       3.729500     4.288000     4.421000     4.488250     8.873500   \n",
       "max       6.407000     7.608000     7.611000     7.612000    17.980000   \n",
       "\n",
       "              MMEF        FEF75        EXPIR  \n",
       "count  5072.000000  5072.000000  5072.000000  \n",
       "mean      3.327736     1.230897     9.462934  \n",
       "std       1.339500     0.734718     3.864676  \n",
       "min       0.243000     0.050000     1.000000  \n",
       "25%       2.391000     0.659000     7.000000  \n",
       "50%       3.300000     1.155000     9.000000  \n",
       "75%       4.227000     1.675000    12.000000  \n",
       "max       8.913000     5.427000    20.000000  \n",
       "\n",
       "[8 rows x 89 columns]"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.79907179981488"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final.BMPHT.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5072.0</td>\n",
       "      <td>5072.0</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.0</td>\n",
       "      <td>5072.0</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.00000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "      <td>5072.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.003549</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.001183</td>\n",
       "      <td>1.980875</td>\n",
       "      <td>2.00138</td>\n",
       "      <td>2.002366</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>65.623766</td>\n",
       "      <td>2.487742</td>\n",
       "      <td>3.140080</td>\n",
       "      <td>3.618051</td>\n",
       "      <td>3.742541</td>\n",
       "      <td>3.811945</td>\n",
       "      <td>7.446075</td>\n",
       "      <td>3.327736</td>\n",
       "      <td>1.230897</td>\n",
       "      <td>9.462934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.145894</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.084248</td>\n",
       "      <td>0.172643</td>\n",
       "      <td>0.09829</td>\n",
       "      <td>0.119133</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.887579</td>\n",
       "      <td>0.684020</td>\n",
       "      <td>0.898856</td>\n",
       "      <td>1.035070</td>\n",
       "      <td>1.047891</td>\n",
       "      <td>1.048546</td>\n",
       "      <td>2.196130</td>\n",
       "      <td>1.339500</td>\n",
       "      <td>0.734718</td>\n",
       "      <td>3.864676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>22.382199</td>\n",
       "      <td>0.342000</td>\n",
       "      <td>0.624000</td>\n",
       "      <td>0.738000</td>\n",
       "      <td>0.738000</td>\n",
       "      <td>0.740000</td>\n",
       "      <td>0.668000</td>\n",
       "      <td>0.243000</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>60.678642</td>\n",
       "      <td>2.041750</td>\n",
       "      <td>2.527750</td>\n",
       "      <td>2.911000</td>\n",
       "      <td>3.025750</td>\n",
       "      <td>3.097750</td>\n",
       "      <td>5.965000</td>\n",
       "      <td>2.391000</td>\n",
       "      <td>0.659000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>66.004607</td>\n",
       "      <td>2.448000</td>\n",
       "      <td>3.086500</td>\n",
       "      <td>3.521000</td>\n",
       "      <td>3.628500</td>\n",
       "      <td>3.687000</td>\n",
       "      <td>7.234500</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>1.155000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>70.787539</td>\n",
       "      <td>2.940250</td>\n",
       "      <td>3.729500</td>\n",
       "      <td>4.288000</td>\n",
       "      <td>4.421000</td>\n",
       "      <td>4.488250</td>\n",
       "      <td>8.873500</td>\n",
       "      <td>4.227000</td>\n",
       "      <td>1.675000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.00000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>95.574163</td>\n",
       "      <td>4.941000</td>\n",
       "      <td>6.407000</td>\n",
       "      <td>7.608000</td>\n",
       "      <td>7.611000</td>\n",
       "      <td>7.612000</td>\n",
       "      <td>17.980000</td>\n",
       "      <td>8.913000</td>\n",
       "      <td>5.427000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 89 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         HAR1   HAR23        HAR26   HAC1E   HAC1F        HAC1G        HAC1O  \\\n",
       "count  5072.0  5072.0  5072.000000  5072.0  5072.0  5072.000000  5072.000000   \n",
       "mean      2.0     2.0     2.003549     2.0     2.0     2.001183     1.980875   \n",
       "std       0.0     0.0     0.145894     0.0     0.0     0.084248     0.172643   \n",
       "min       2.0     2.0     2.000000     2.0     2.0     2.000000     1.000000   \n",
       "25%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "50%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "75%       2.0     2.0     2.000000     2.0     2.0     2.000000     2.000000   \n",
       "max       2.0     2.0     8.000000     2.0     2.0     8.000000     9.000000   \n",
       "\n",
       "             HAL6        HAL10    HAL1  ...    FEV05OFVC        FEV05  \\\n",
       "count  5072.00000  5072.000000  5072.0  ...  5072.000000  5072.000000   \n",
       "mean      2.00138     2.002366     2.0  ...    65.623766     2.487742   \n",
       "std       0.09829     0.119133     0.0  ...     7.887579     0.684020   \n",
       "min       2.00000     2.000000     2.0  ...    22.382199     0.342000   \n",
       "25%       2.00000     2.000000     2.0  ...    60.678642     2.041750   \n",
       "50%       2.00000     2.000000     2.0  ...    66.004607     2.448000   \n",
       "75%       2.00000     2.000000     2.0  ...    70.787539     2.940250   \n",
       "max       9.00000     8.000000     2.0  ...    95.574163     4.941000   \n",
       "\n",
       "              FEV1         FEV3         FEV6          FVC         PEFR  \\\n",
       "count  5072.000000  5072.000000  5072.000000  5072.000000  5072.000000   \n",
       "mean      3.140080     3.618051     3.742541     3.811945     7.446075   \n",
       "std       0.898856     1.035070     1.047891     1.048546     2.196130   \n",
       "min       0.624000     0.738000     0.738000     0.740000     0.668000   \n",
       "25%       2.527750     2.911000     3.025750     3.097750     5.965000   \n",
       "50%       3.086500     3.521000     3.628500     3.687000     7.234500   \n",
       "75%       3.729500     4.288000     4.421000     4.488250     8.873500   \n",
       "max       6.407000     7.608000     7.611000     7.612000    17.980000   \n",
       "\n",
       "              MMEF        FEF75        EXPIR  \n",
       "count  5072.000000  5072.000000  5072.000000  \n",
       "mean      3.327736     1.230897     9.462934  \n",
       "std       1.339500     0.734718     3.864676  \n",
       "min       0.243000     0.050000     1.000000  \n",
       "25%       2.391000     0.659000     7.000000  \n",
       "50%       3.300000     1.155000     9.000000  \n",
       "75%       4.227000     1.675000    12.000000  \n",
       "max       8.913000     5.427000    20.000000  \n",
       "\n",
       "[8 rows x 89 columns]"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['HAR1' 'HAR23' 'HAR26' 'HAC1E' 'HAC1F' 'HAC1G' 'HAC1O' 'HAL6' 'HAL10'\n",
      " 'HAL1' 'HAL3' 'HAL5' 'DMARACER' 'DMARETHN' 'DMAETHNR' 'HSSEX' 'HSAGEIR'\n",
      " 'HSAGEU' 'HXPAXTMR' 'HXPSESSR' 'HSAITMOR' 'HAR4S' 'SPPQ1' 'SPPQ2' 'SPPQ3'\n",
      " 'SPPQ4' 'SPPQ5' 'SPPMANEU' 'MYPB1' 'MYPB3' 'MYPB11' 'MYPB27A' 'MYPB27B'\n",
      " 'HSAGEIR_exam' 'HSAGEU_exam' 'HXPAXTMR_exam' 'HXPSESSR_exam' 'HXPEJ6A2'\n",
      " 'SPPTECH1' 'SPPTRIAL' 'SPPPEAK' 'SPPFEV05' 'SPPFEV1' 'SPPFEV3' 'SPPFEV6'\n",
      " 'SPPFVC' 'SPPMMEF' 'SPPFEF75' 'SPPTYPE' 'SPPREPRO' 'SPPTIME' 'SPPEXPIR'\n",
      " 'SPPTEMP' 'HSSEX_exam' 'WTPFHX6' 'MXPAXTMR' 'BMPHT' 'BMPSITHT' 'BMPWT'\n",
      " 'DMARACER_exam' 'DMARETHN_exam' 'DMAETHNR_exam' 'HSAITMOR_exam' 'HXPG1'\n",
      " 'HXPG2A' 'HXPG2B' 'FEF75OFVC' 'FEF75OPEFR' 'FEV1OFVC' 'FEV1OFEV3'\n",
      " 'FEV1OFEV6' 'PEFROFVC' 'PEFROFEV6' 'PEFROFEV1' 'FEV3OFEV6' 'FEV3OFVC'\n",
      " 'FEV6OFVC' 'MMEFOPEFR' 'MMEFOFVC' 'FEV05OFEV3' 'FEV05OFVC' 'FEV05' 'FEV1'\n",
      " 'FEV3' 'FEV6' 'FVC' 'PEFR' 'MMEF' 'FEF75' 'EXPIR']\n"
     ]
    }
   ],
   "source": [
    "print (adult_final.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['HYE1G' 'HYE1H' 'HSSEX' 'HSAGEIR' 'HSAGEU' 'DMARACER' 'DMARETHN'\n",
      " 'DMAETHNR' 'HXPAXTMR' 'HXPSESSR' 'HYG2' 'HYG4' 'HYG7' 'HYG8' 'HYG12'\n",
      " 'HSAITMOR' 'SPPQ1' 'SPPQ2' 'SPPQ3' 'SPPQ4' 'SPPQ5' 'SPPMANEU' 'MYPB1'\n",
      " 'MYPB3' 'MYPB11' 'MYPB27A' 'MYPB27B' 'HSAGEIR_exam' 'HSAGEU_exam'\n",
      " 'HXPAXTMR_exam' 'HXPSESSR_exam' 'HXPEJ6A2' 'SPPTECH1' 'SPPTRIAL'\n",
      " 'SPPPEAK' 'SPPFEV05' 'SPPFEV1' 'SPPFEV3' 'SPPFEV6' 'SPPFVC' 'SPPMMEF'\n",
      " 'SPPFEF75' 'SPPTYPE' 'SPPREPRO' 'SPPTIME' 'SPPEXPIR' 'SPPTEMP'\n",
      " 'HSSEX_exam' 'WTPFHX6' 'MXPAXTMR' 'BMPHT' 'BMPSITHT' 'BMPWT'\n",
      " 'DMARACER_exam' 'DMARETHN_exam' 'DMAETHNR_exam' 'HSAITMOR_exam' 'HXPG1'\n",
      " 'HXPG2A' 'HXPG2B' 'FEF75OFVC' 'FEF75OPEFR' 'FEV1OFVC' 'FEV1OFEV3'\n",
      " 'FEV1OFEV6' 'PEFROFVC' 'PEFROFEV6' 'PEFROFEV1' 'FEV3OFEV6' 'FEV3OFVC'\n",
      " 'FEV6OFVC' 'MMEFOPEFR' 'MMEFOFVC' 'FEV05OFEV3' 'FEV05OFVC' 'FEV05' 'FEV1'\n",
      " 'FEV3' 'FEV6' 'FVC' 'PEFR' 'MMEF' 'FEF75' 'EXPIR']\n"
     ]
    }
   ],
   "source": [
    "print (youth_final.columns.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "youth and adult has two MXPAXTMR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HYE1G</th>\n",
       "      <th>HYE1H</th>\n",
       "      <th>HSSEX</th>\n",
       "      <th>HSAGEIR</th>\n",
       "      <th>HSAGEU</th>\n",
       "      <th>DMARACER</th>\n",
       "      <th>DMARETHN</th>\n",
       "      <th>DMAETHNR</th>\n",
       "      <th>HXPAXTMR</th>\n",
       "      <th>HXPSESSR</th>\n",
       "      <th>...</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2779.0</td>\n",
       "      <td>2779.0</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.0</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "      <td>2779.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.520331</td>\n",
       "      <td>11.549478</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.423174</td>\n",
       "      <td>2.097877</td>\n",
       "      <td>2.274559</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>69.068279</td>\n",
       "      <td>1.922562</td>\n",
       "      <td>2.465398</td>\n",
       "      <td>2.765670</td>\n",
       "      <td>2.801377</td>\n",
       "      <td>2.809476</td>\n",
       "      <td>5.395127</td>\n",
       "      <td>2.929051</td>\n",
       "      <td>1.328234</td>\n",
       "      <td>6.503059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.499676</td>\n",
       "      <td>2.485519</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.540760</td>\n",
       "      <td>0.786261</td>\n",
       "      <td>0.961743</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>7.565261</td>\n",
       "      <td>0.587375</td>\n",
       "      <td>0.782608</td>\n",
       "      <td>0.885519</td>\n",
       "      <td>0.892039</td>\n",
       "      <td>0.892893</td>\n",
       "      <td>1.724882</td>\n",
       "      <td>1.069446</td>\n",
       "      <td>0.625267</td>\n",
       "      <td>2.598577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>22.567568</td>\n",
       "      <td>0.334000</td>\n",
       "      <td>0.468000</td>\n",
       "      <td>0.734000</td>\n",
       "      <td>0.734000</td>\n",
       "      <td>0.736000</td>\n",
       "      <td>0.723000</td>\n",
       "      <td>0.144000</td>\n",
       "      <td>0.077000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>64.011496</td>\n",
       "      <td>1.473000</td>\n",
       "      <td>1.862500</td>\n",
       "      <td>2.095000</td>\n",
       "      <td>2.120000</td>\n",
       "      <td>2.128000</td>\n",
       "      <td>4.106500</td>\n",
       "      <td>2.147000</td>\n",
       "      <td>0.864000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>69.155844</td>\n",
       "      <td>1.820000</td>\n",
       "      <td>2.331000</td>\n",
       "      <td>2.615000</td>\n",
       "      <td>2.653000</td>\n",
       "      <td>2.660000</td>\n",
       "      <td>5.095000</td>\n",
       "      <td>2.752000</td>\n",
       "      <td>1.201000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>74.352009</td>\n",
       "      <td>2.307000</td>\n",
       "      <td>2.964000</td>\n",
       "      <td>3.294500</td>\n",
       "      <td>3.334000</td>\n",
       "      <td>3.341500</td>\n",
       "      <td>6.468500</td>\n",
       "      <td>3.555000</td>\n",
       "      <td>1.672500</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>96.570852</td>\n",
       "      <td>4.161000</td>\n",
       "      <td>5.683000</td>\n",
       "      <td>6.489000</td>\n",
       "      <td>6.524000</td>\n",
       "      <td>6.525000</td>\n",
       "      <td>12.396000</td>\n",
       "      <td>7.801000</td>\n",
       "      <td>4.440000</td>\n",
       "      <td>19.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 83 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        HYE1G   HYE1H        HSSEX      HSAGEIR  HSAGEU     DMARACER  \\\n",
       "count  2779.0  2779.0  2779.000000  2779.000000  2779.0  2779.000000   \n",
       "mean      2.0     2.0     1.520331    11.549478     2.0     1.423174   \n",
       "std       0.0     0.0     0.499676     2.485519     0.0     0.540760   \n",
       "min       2.0     2.0     1.000000     8.000000     2.0     1.000000   \n",
       "25%       2.0     2.0     1.000000     9.000000     2.0     1.000000   \n",
       "50%       2.0     2.0     2.000000    11.000000     2.0     1.000000   \n",
       "75%       2.0     2.0     2.000000    14.000000     2.0     2.000000   \n",
       "max       2.0     2.0     2.000000    16.000000     2.0     3.000000   \n",
       "\n",
       "          DMARETHN     DMAETHNR  HXPAXTMR  HXPSESSR  ...    FEV05OFVC  \\\n",
       "count  2779.000000  2779.000000       0.0       0.0  ...  2779.000000   \n",
       "mean      2.097877     2.274559       NaN       NaN  ...    69.068279   \n",
       "std       0.786261     0.961743       NaN       NaN  ...     7.565261   \n",
       "min       1.000000     1.000000       NaN       NaN  ...    22.567568   \n",
       "25%       1.000000     1.000000       NaN       NaN  ...    64.011496   \n",
       "50%       2.000000     3.000000       NaN       NaN  ...    69.155844   \n",
       "75%       3.000000     3.000000       NaN       NaN  ...    74.352009   \n",
       "max       3.000000     3.000000       NaN       NaN  ...    96.570852   \n",
       "\n",
       "             FEV05         FEV1         FEV3         FEV6          FVC  \\\n",
       "count  2779.000000  2779.000000  2779.000000  2779.000000  2779.000000   \n",
       "mean      1.922562     2.465398     2.765670     2.801377     2.809476   \n",
       "std       0.587375     0.782608     0.885519     0.892039     0.892893   \n",
       "min       0.334000     0.468000     0.734000     0.734000     0.736000   \n",
       "25%       1.473000     1.862500     2.095000     2.120000     2.128000   \n",
       "50%       1.820000     2.331000     2.615000     2.653000     2.660000   \n",
       "75%       2.307000     2.964000     3.294500     3.334000     3.341500   \n",
       "max       4.161000     5.683000     6.489000     6.524000     6.525000   \n",
       "\n",
       "              PEFR         MMEF        FEF75        EXPIR  \n",
       "count  2779.000000  2779.000000  2779.000000  2779.000000  \n",
       "mean      5.395127     2.929051     1.328234     6.503059  \n",
       "std       1.724882     1.069446     0.625267     2.598577  \n",
       "min       0.723000     0.144000     0.077000     1.000000  \n",
       "25%       4.106500     2.147000     0.864000     5.000000  \n",
       "50%       5.095000     2.752000     1.201000     7.000000  \n",
       "75%       6.468500     3.555000     1.672500     8.000000  \n",
       "max      12.396000     7.801000     4.440000    19.000000  \n",
       "\n",
       "[8 rows x 83 columns]"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_final.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Created other data bases to analyze"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "adult m20overb m20overcma f18overb f18overcma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "m20overb  = adult_final.query(('MXPAXTMR >= 240 & HSSEX == 1 & DMARETHN == 2'))\n",
    "m20overcma  = adult_final.query(('MXPAXTMR >= 240 & HSSEX == 1 & (DMARETHN == 1 | DMARETHN ==3)'))\n",
    "f18overcma = adult_final.query(('MXPAXTMR >= 216 & HSSEX == 2 & (DMARETHN == 1 | DMARETHN ==3)'))\n",
    "f18overb = adult_final.query(('MXPAXTMR >= 216 & HSSEX == 2 & DMARETHN == 2 '))\n",
    "m20overc  = adult_final.query(('MXPAXTMR >= 240 & HSSEX == 1 & DMARETHN == 1'))\n",
    "m20overma  = adult_final.query(('MXPAXTMR >= 240 & HSSEX == 1 & DMARETHN == 3'))\n",
    "f18overc = adult_final.query(('MXPAXTMR >= 216 & HSSEX == 2 & DMARETHN == 1 '))\n",
    "f18overma = adult_final.query(('MXPAXTMR >= 216 & HSSEX == 2 & DMARETHN == 3 '))\n",
    "# DMARETHN â€“ 1 non-Hispanic white, 2 non-hispanic black, 3 Mexican American, 4 other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>...</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>957.0</td>\n",
       "      <td>957.0</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.0</td>\n",
       "      <td>957.0</td>\n",
       "      <td>957.0</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.0</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.0</td>\n",
       "      <td>...</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "      <td>957.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.006270</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.978056</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.006270</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>68.087495</td>\n",
       "      <td>2.100803</td>\n",
       "      <td>2.596403</td>\n",
       "      <td>2.949336</td>\n",
       "      <td>3.042386</td>\n",
       "      <td>3.090070</td>\n",
       "      <td>6.507409</td>\n",
       "      <td>2.952673</td>\n",
       "      <td>1.076009</td>\n",
       "      <td>8.810867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.193952</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.146576</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.193952</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.964998</td>\n",
       "      <td>0.475912</td>\n",
       "      <td>0.590407</td>\n",
       "      <td>0.650480</td>\n",
       "      <td>0.646639</td>\n",
       "      <td>0.638462</td>\n",
       "      <td>1.562010</td>\n",
       "      <td>1.135022</td>\n",
       "      <td>0.614270</td>\n",
       "      <td>3.925132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>34.206128</td>\n",
       "      <td>0.614000</td>\n",
       "      <td>0.899000</td>\n",
       "      <td>1.029000</td>\n",
       "      <td>1.029000</td>\n",
       "      <td>1.030000</td>\n",
       "      <td>1.395000</td>\n",
       "      <td>0.272000</td>\n",
       "      <td>0.076000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>63.287207</td>\n",
       "      <td>1.788000</td>\n",
       "      <td>2.201000</td>\n",
       "      <td>2.548000</td>\n",
       "      <td>2.634000</td>\n",
       "      <td>2.670000</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>2.132000</td>\n",
       "      <td>0.607000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>68.865917</td>\n",
       "      <td>2.129000</td>\n",
       "      <td>2.634000</td>\n",
       "      <td>2.972000</td>\n",
       "      <td>3.060000</td>\n",
       "      <td>3.106000</td>\n",
       "      <td>6.588000</td>\n",
       "      <td>2.891000</td>\n",
       "      <td>0.989000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>73.349197</td>\n",
       "      <td>2.432000</td>\n",
       "      <td>3.017000</td>\n",
       "      <td>3.380000</td>\n",
       "      <td>3.459000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>7.577000</td>\n",
       "      <td>3.736000</td>\n",
       "      <td>1.450000</td>\n",
       "      <td>11.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>94.015152</td>\n",
       "      <td>3.319000</td>\n",
       "      <td>4.131000</td>\n",
       "      <td>4.685000</td>\n",
       "      <td>4.793000</td>\n",
       "      <td>4.911000</td>\n",
       "      <td>11.316000</td>\n",
       "      <td>7.062000</td>\n",
       "      <td>3.903000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 89 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        HAR1  HAR23       HAR26  HAC1E  HAC1F  HAC1G       HAC1O   HAL6  \\\n",
       "count  957.0  957.0  957.000000  957.0  957.0  957.0  957.000000  957.0   \n",
       "mean     2.0    2.0    2.006270    2.0    2.0    2.0    1.978056    2.0   \n",
       "std      0.0    0.0    0.193952    0.0    0.0    0.0    0.146576    0.0   \n",
       "min      2.0    2.0    2.000000    2.0    2.0    2.0    1.000000    2.0   \n",
       "25%      2.0    2.0    2.000000    2.0    2.0    2.0    2.000000    2.0   \n",
       "50%      2.0    2.0    2.000000    2.0    2.0    2.0    2.000000    2.0   \n",
       "75%      2.0    2.0    2.000000    2.0    2.0    2.0    2.000000    2.0   \n",
       "max      2.0    2.0    8.000000    2.0    2.0    2.0    2.000000    2.0   \n",
       "\n",
       "            HAL10   HAL1  ...   FEV05OFVC       FEV05        FEV1        FEV3  \\\n",
       "count  957.000000  957.0  ...  957.000000  957.000000  957.000000  957.000000   \n",
       "mean     2.006270    2.0  ...   68.087495    2.100803    2.596403    2.949336   \n",
       "std      0.193952    0.0  ...    7.964998    0.475912    0.590407    0.650480   \n",
       "min      2.000000    2.0  ...   34.206128    0.614000    0.899000    1.029000   \n",
       "25%      2.000000    2.0  ...   63.287207    1.788000    2.201000    2.548000   \n",
       "50%      2.000000    2.0  ...   68.865917    2.129000    2.634000    2.972000   \n",
       "75%      2.000000    2.0  ...   73.349197    2.432000    3.017000    3.380000   \n",
       "max      8.000000    2.0  ...   94.015152    3.319000    4.131000    4.685000   \n",
       "\n",
       "             FEV6         FVC        PEFR        MMEF       FEF75       EXPIR  \n",
       "count  957.000000  957.000000  957.000000  957.000000  957.000000  957.000000  \n",
       "mean     3.042386    3.090070    6.507409    2.952673    1.076009    8.810867  \n",
       "std      0.646639    0.638462    1.562010    1.135022    0.614270    3.925132  \n",
       "min      1.029000    1.030000    1.395000    0.272000    0.076000    1.000000  \n",
       "25%      2.634000    2.670000    5.500000    2.132000    0.607000    6.000000  \n",
       "50%      3.060000    3.106000    6.588000    2.891000    0.989000    8.000000  \n",
       "75%      3.459000    3.500000    7.577000    3.736000    1.450000   11.000000  \n",
       "max      4.793000    4.911000   11.316000    7.062000    3.903000   20.000000  \n",
       "\n",
       "[8 rows x 89 columns]"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f18overb.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make dataframes mlt20 and flt18 for b, c, ma and cma combining adult final and youth final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5072, 90)"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adult_final.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2779, 84)"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "youth_final.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['HAR1', 'HAR23', 'HAR26', 'HAC1E', 'HAC1F', 'HAC1G', 'HAC1O', 'HAL6',\n",
      "       'HAL10', 'HAL1', 'HAL3', 'HAL5', 'DMARACER', 'DMARETHN', 'DMAETHNR',\n",
      "       'HSSEX', 'HSAGEIR', 'HSAGEU', 'HXPAXTMR', 'HXPSESSR', 'HSAITMOR',\n",
      "       'HAR4S', 'SPPQ1', 'SPPQ2', 'SPPQ3', 'SPPQ4', 'SPPQ5', 'SPPMANEU',\n",
      "       'MYPB1', 'MYPB3', 'MYPB11', 'MYPB27A', 'MYPB27B', 'HSAGEIR_exam',\n",
      "       'HSAGEU_exam', 'HXPAXTMR_exam', 'HXPSESSR_exam', 'HXPEJ6A2', 'SPPTECH1',\n",
      "       'SPPTRIAL', 'SPPPEAK', 'SPPFEV05', 'SPPFEV1', 'SPPFEV3', 'SPPFEV6',\n",
      "       'SPPFVC', 'SPPMMEF', 'SPPFEF75', 'SPPTYPE', 'SPPREPRO', 'SPPTIME',\n",
      "       'SPPEXPIR', 'SPPTEMP', 'HSSEX_exam', 'WTPFHX6', 'MXPAXTMR', 'BMPHT',\n",
      "       'BMPSITHT', 'BMPWT', 'DMARACER_exam', 'DMARETHN_exam', 'DMAETHNR_exam',\n",
      "       'HSAITMOR_exam', 'HXPG1', 'HXPG2A', 'HXPG2B', 'FEF75OFVC', 'FEF75OPEFR',\n",
      "       'FEV1OFVC', 'FEV1OFEV3', 'FEV1OFEV6', 'PEFROFVC', 'PEFROFEV6',\n",
      "       'PEFROFEV1', 'FEV3OFEV6', 'FEV3OFVC', 'FEV6OFVC', 'MMEFOPEFR',\n",
      "       'MMEFOFVC', 'FEV05OFEV3', 'FEV05OFVC', 'FEV05', 'FEV1', 'FEV3', 'FEV6',\n",
      "       'FVC', 'PEFR', 'MMEF', 'FEF75', 'EXPIR'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print (adult_final.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlt20b = pd.concat([adult_final.query(('MXPAXTMR < 240 & HSSEX == 1 & DMARETHN == 2 ')), youth_final.query(('HSSEX == 1 & DMARETHN == 2'))])\n",
    "mlt20cma = pd.concat([adult_final.query(('MXPAXTMR < 240 & HSSEX == 1 & (DMARETHN == 1 | DMARETHN == 3) ')), youth_final.query(('HSSEX == 1 & (DMARETHN == 1 | DMARETHN == 3)'))])\n",
    "flt18b = pd.concat([adult_final.query(('MXPAXTMR < 216 & HSSEX == 2 & DMARETHN == 2 ')), youth_final.query(('HSSEX == 2 & DMARETHN == 2'))])\n",
    "flt18cma = pd.concat([adult_final.query(('MXPAXTMR < 216 & HSSEX == 2 & (DMARETHN == 1 | DMARETHN == 3) ')), youth_final.query(('HSSEX == 2 & (DMARETHN == 1 | DMARETHN == 3)'))])\n",
    "mlt20c = pd.concat([adult_final.query(('MXPAXTMR < 240 & HSSEX == 1 & DMARETHN == 1 ')), youth_final.query(('HSSEX == 1 & DMARETHN == 1'))])\n",
    "mlt20ma = pd.concat([adult_final.query(('MXPAXTMR < 240 & HSSEX == 1 & DMARETHN == 3 ')), youth_final.query(('HSSEX == 1 & DMARETHN == 3'))])\n",
    "flt18c = pd.concat([adult_final.query(('MXPAXTMR < 216 & HSSEX == 2 & DMARETHN == 1 ')), youth_final.query(('HSSEX == 2 & DMARETHN == 1'))])\n",
    "flt18ma = pd.concat([adult_final.query(('MXPAXTMR < 216 & HSSEX == 2 & DMARETHN == 3 ')), youth_final.query(('HSSEX == 2 & DMARETHN == 3'))])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create data bases for all male/female cma, black for ratios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Groups for ratios\n",
    "All male cma  mallcma = pd.concat([m20overcma, mlt20cma])\n",
    "All male black  mallb = pd.concat([m20overb, mlt20b])\n",
    "All female cma  fallcma = pd.concat([f18overcma, flt18cma])\n",
    "All female black  fallb = pd.concat([f18overb, flt18b])\n",
    "All male c  mallc = pd.concat([m20overc, mlt20c])\n",
    "All male ma  mallma = pd.concat([m20overma, mlt20ma])\n",
    "All female c  fallc = pd.concat([f18overc, flt18c])\n",
    "All female ma  fallma = pd.concat([f18overma, flt18ma])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [],
   "source": [
    "mallcma = pd.concat([m20overcma, mlt20cma])\n",
    "mallb = pd.concat([m20overb, mlt20b])\n",
    "fallcma = pd.concat([f18overcma, flt18cma])\n",
    "fallb = pd.concat([f18overb, flt18b])\n",
    "mallc = pd.concat([m20overc, mlt20c])\n",
    "mallma = pd.concat([m20overma, mlt20ma])\n",
    "fallc = pd.concat([f18overc, flt18c])\n",
    "fallma = pd.concat([f18overma, flt18ma])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check variable created"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11e146a90>"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flt18b.SPPFEV1.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11e72e7d0>"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flt18b.PEFROFVC.hist(bins='auto', range=(0,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11bdc08d0>"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flt18b.HSAITMOR.hist(bins='auto', range=(0,300))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11ac77f10>"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flt18b.BMPHT.hist(bins='auto', range=(0,300))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Frames to Analyze\n",
    "arrange so in proper order"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "framestoanalyze = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, \n",
    "                   mlt20b, mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma, \n",
    "                   mallcma, mallb, mallc, mallma, fallcma, fallb, fallc, fallma]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [],
   "source": [
    "framestoanalyze = [mlt20cma, m20overcma, mlt20b, m20overb, \n",
    "                   flt18cma,  f18overcma, flt18b, f18overb, \n",
    "                   mlt20c, m20overc, mlt20ma, m20overma, \n",
    "                   flt18c, f18overc, flt18ma, f18overma, \n",
    "                   mallcma, mallb, mallc, mallma,\n",
    "                   fallcma, fallb, fallc, fallma]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# framesto analyze names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "m20overb.name = 'm20overb'\n",
    "m20overcma.name = 'm20overcma'\n",
    "f18overb.name = 'f18overb'\n",
    "f18overcma.name = 'f18overcma'\n",
    "mlt20b.name = 'mlt20b'\n",
    "mlt20cma.name = 'mlt20cma'\n",
    "flt18b.name = 'flt18b'\n",
    "flt18cma.name = 'flt18cma'\n",
    "mallcma.name = 'mallcma'\n",
    "mallb.name = 'mallb'\n",
    "fallcma.name = 'fallcma'\n",
    "fallb.name = 'fallb'\n",
    "m20overc.name = 'm20overc'\n",
    "m20overma.name = 'm20ovecma'\n",
    "f18overc.name = 'f18overc'\n",
    "f18overma.name = 'f18overma'\n",
    "mlt20c.name = 'mlt20c'\n",
    "mlt20ma.name = 'mlt20ma'\n",
    "flt18c.name = 'flt18c'\n",
    "flt18ma.name = 'flt18ma'\n",
    "mallma.name = 'mallma'\n",
    "mallc.name = 'mallc'\n",
    "fallma.name = 'fallma'\n",
    "fallc.name = 'fallc'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "m20overb.name = 'm20overb'\n",
    "m20overcma.name = 'm20overcma'\n",
    "f18overb.name = 'f18overb'\n",
    "f18overcma.name = 'f18overcma'\n",
    "mlt20b.name = 'mlt20b'\n",
    "mlt20cma.name = 'mlt20cma'\n",
    "flt18b.name = 'flt18b'\n",
    "flt18cma.name = 'flt18cma'\n",
    "mallcma.name = 'mallcma'\n",
    "mallb.name = 'mallb'\n",
    "fallcma.name = 'fallcma'\n",
    "fallb.name = 'fallb'\n",
    "m20overc.name = 'm20overc'\n",
    "m20overma.name = 'm20overma'\n",
    "f18overc.name = 'f18overc'\n",
    "f18overma.name = 'f18overma'\n",
    "mlt20c.name = 'mlt20c'\n",
    "mlt20ma.name = 'mlt20ma'\n",
    "flt18c.name = 'flt18c'\n",
    "flt18ma.name = 'flt18ma'\n",
    "mallma.name = 'mallma'\n",
    "mallc.name = 'mallc'\n",
    "fallma.name = 'fallma'\n",
    "fallc.name = 'fallc'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Variables non-ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "# varsnonratio = [ 'SPPEXPIR','SPPFEF75', 'SPPFEV1', 'SPPFEV3', 'SPPFEV6', 'SPPFVC',  'SPPMMEF', 'SPPPEAK']\n",
    "varsnonratio = [ 'EXPIR','FEF75', 'FEV05', 'FEV1', 'FEV3', 'FEV6', 'FVC',  'MMEF', 'PEFR']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EXPIR\n"
     ]
    }
   ],
   "source": [
    "print (varsnonratio[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Variables ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [],
   "source": [
    "varsratio= ['FEF75OFVC', 'FEF75OPEFR', 'FEV05OFEV3', 'FEV05OFVC', 'FEV1OFEV3',  'FEV1OFEV6', 'FEV1OFVC', 'FEV3OFEV6','FEV3OFVC', \n",
    "            'FEV6OFVC', 'MMEFOFVC', 'MMEFOPEFR', 'PEFROFEV1', 'PEFROFEV6', 'PEFROFVC']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now fit curves"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "using example in lmfit.github.io/lmfit-py/model.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression Age  linear_regage (data, y_var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [],
   "source": [
    "# age = 'HSAGEIR'/12 - or age in months/12\n",
    "def linear_regage(data, y_var):\n",
    "    X = data['MXPAXTMR']/12  # to convert to year do months at exam\n",
    "    X = np.array(X).reshape(-1, 1)\n",
    "    y = data[y_var]\n",
    "    lr = LinearRegression().fit(X, y)\n",
    "        # do linear regression fit on X, y\n",
    " #   print(data.name, \", \",y_var, \", \",lr.intercept_, \", \", lr.coef_, \", \", lr.score(X, y), \", \", data.loc[:,y_var].std(), \", \", data.loc[:,y_var].count())\n",
    " # now returns values rather than print - intercept, slope, R2, std, count\n",
    "    return lr.intercept_, lr.coef_, lr.score(X, y),  data.loc[:,y_var].std(), data.loc[:,y_var].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FEF75OFVC\n",
      "FEF75OPEFR\n",
      "FEV05OFEV3\n",
      "FEV05OFVC\n",
      "FEV1OFEV3\n",
      "FEV1OFEV6\n",
      "FEV1OFVC\n",
      "FEV3OFEV6\n",
      "FEV3OFVC\n",
      "FEV6OFVC\n",
      "MMEFOFVC\n",
      "MMEFOPEFR\n",
      "PEFROFEV1\n",
      "PEFROFEV6\n",
      "PEFROFVC\n"
     ]
    }
   ],
   "source": [
    "for x in varsratio:\n",
    "    print (x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## For all frames, for all ratios to analyze, do regression vs age & save in resultsratioand index dfnvarn\n",
    "## Table 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "print ('Linear Regression of variables in form y = intercept + slope * age')\n",
    "print ('dataframe ,  variable,        intercept,          slope,            R squared,         standard deviation')\n",
    "for y in framestoanalyze:\n",
    "Save results in dataframe resultsratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, intercept, slope, r2, std, count]\n",
      "Index: []\n",
      "Linear Regression of variables in form y = intercept + slope * age\n",
      "dfnvarn, dataframe,  variable,        intercept,          slope,            R squared,         standard deviation,  count\n",
      "mlt20cmaFEF75OFVC , mlt20cma , FEF75OFVC , 43.997 , 0.0596 , 0.0002 , 15.638 , 1019\n",
      "mlt20cmaFEF75OPEFR , mlt20cma , FEF75OPEFR , 24.405 , 0.0162 , 0.0 , 8.179 , 1019\n",
      "mlt20cmaFEV05OFEV3 , mlt20cma , FEV05OFEV3 , 71.878 , -0.3196 , 0.0249 , 6.627 , 1019\n",
      "mlt20cmaFEV05OFVC , mlt20cma , FEV05OFVC , 70.074 , -0.2677 , 0.0159 , 6.948 , 1019\n",
      "mlt20cmaFEV1OFEV3 , mlt20cma , FEV1OFEV3 , 89.603 , -0.115 , 0.0059 , 4.887 , 1019\n",
      "mlt20cmaFEV1OFEV6 , mlt20cma , FEV1OFEV6 , 87.754 , -0.0665 , 0.0015 , 5.525 , 1019\n",
      "mlt20cmaFEV1OFVC , mlt20cma , FEV1OFVC , 87.3 , -0.0513 , 0.0009 , 5.636 , 1019\n",
      "mlt20cmaFEV3OFEV6 , mlt20cma , FEV3OFEV6 , 97.881 , 0.0536 , 0.0145 , 1.454 , 1019\n",
      "mlt20cmaFEV3OFVC , mlt20cma , FEV3OFVC , 97.36 , 0.0709 , 0.0181 , 1.725 , 1019\n",
      "mlt20cmaFEV6OFVC , mlt20cma , FEV6OFVC , 99.466 , 0.0178 , 0.0097 , 0.591 , 1019\n",
      "mlt20cmaMMEFOFVC , mlt20cma , MMEFOFVC , 1.059 , -0.0056 , 0.0057 , 0.24 , 1019\n",
      "mlt20cmaMMEFOPEFR , mlt20cma , MMEFOPEFR , 58.059 , -0.3135 , 0.0103 , 10.117 , 1019\n",
      "mlt20cmaPEFROFEV1 , mlt20cma , PEFROFEV1 , 2.091 , 0.0013 , 0.0003 , 0.275 , 1019\n",
      "mlt20cmaPEFROFEV6 , mlt20cma , PEFROFEV6 , 1.836 , -0.0001 , 0.0 , 0.288 , 1019\n",
      "mlt20cmaPEFROFVC , mlt20cma , PEFROFVC , 1.826 , 0.0002 , 0.0 , 0.288 , 1019\n",
      "m20overcmaFEF75OFVC , m20overcma , FEF75OFVC , 45.832 , -0.4383 , 0.3074 , 14.384 , 1130\n",
      "m20overcmaFEF75OPEFR , m20overcma , FEF75OPEFR , 24.252 , -0.236 , 0.3182 , 7.613 , 1130\n",
      "m20overcmaFEV05OFEV3 , m20overcma , FEV05OFEV3 , 67.031 , 0.0117 , 0.0011 , 6.434 , 1130\n",
      "m20overcmaFEV05OFVC , m20overcma , FEV05OFVC , 67.762 , -0.1077 , 0.0714 , 7.335 , 1130\n",
      "m20overcmaFEV1OFEV3 , m20overcma , FEV1OFEV3 , 88.255 , -0.063 , 0.0637 , 4.538 , 1130\n",
      "m20overcmaFEV1OFEV6 , m20overcma , FEV1OFEV6 , 87.881 , -0.1355 , 0.1786 , 5.832 , 1130\n",
      "m20overcmaFEV1OFVC , m20overcma , FEV1OFVC , 89.029 , -0.2101 , 0.2933 , 7.058 , 1130\n",
      "m20overcmaFEV3OFEV6 , m20overcma , FEV3OFEV6 , 99.721 , -0.0904 , 0.4341 , 2.497 , 1130\n",
      "m20overcmaFEV3OFVC , m20overcma , FEV3OFVC , 101.185 , -0.1817 , 0.4988 , 4.68 , 1130\n",
      "m20overcmaFEV6OFVC , m20overcma , FEV6OFVC , 101.663 , -0.0997 , 0.4286 , 2.771 , 1130\n",
      "m20overcmaMMEFOFVC , m20overcma , MMEFOFVC , 1.075 , -0.0068 , 0.2275 , 0.26 , 1130\n",
      "m20overcmaMMEFOPEFR , m20overcma , MMEFOPEFR , 56.78 , -0.379 , 0.3166 , 12.257 , 1130\n",
      "m20overcmaPEFROFEV1 , m20overcma , PEFROFEV1 , 2.107 , 0.0073 , 0.1334 , 0.365 , 1130\n",
      "m20overcmaPEFROFEV6 , m20overcma , PEFROFEV6 , 1.872 , 0.0027 , 0.0219 , 0.333 , 1130\n",
      "m20overcmaPEFROFVC , m20overcma , PEFROFVC , 1.905 , 0.0007 , 0.0017 , 0.329 , 1130\n",
      "mlt20bFEF75OFVC , mlt20b , FEF75OFVC , 39.781 , 0.3217 , 0.0037 , 17.871 , 599\n",
      "mlt20bFEF75OPEFR , mlt20b , FEF75OPEFR , 19.477 , 0.1415 , 0.0039 , 7.647 , 599\n",
      "mlt20bFEV05OFEV3 , mlt20b , FEV05OFEV3 , 73.201 , -0.2265 , 0.0115 , 7.172 , 599\n",
      "mlt20bFEV05OFVC , mlt20b , FEV05OFVC , 71.206 , -0.177 , 0.0061 , 7.671 , 599\n",
      "mlt20bFEV1OFEV3 , mlt20b , FEV1OFEV3 , 89.225 , -0.0421 , 0.0007 , 5.329 , 599\n",
      "mlt20bFEV1OFEV6 , mlt20b , FEV1OFEV6 , 87.122 , 0.0107 , 0.0 , 6.134 , 599\n",
      "mlt20bFEV1OFVC , mlt20b , FEV1OFVC , 86.746 , 0.0159 , 0.0001 , 6.285 , 599\n",
      "mlt20bFEV3OFEV6 , mlt20b , FEV3OFEV6 , 97.59 , 0.0583 , 0.0136 , 1.698 , 599\n",
      "mlt20bFEV3OFVC , mlt20b , FEV3OFVC , 97.164 , 0.0638 , 0.0117 , 1.994 , 599\n",
      "mlt20bFEV6OFVC , mlt20b , FEV6OFVC , 99.563 , 0.0055 , 0.0009 , 0.621 , 599\n",
      "mlt20bMMEFOFVC , mlt20b , MMEFOFVC , 1.045 , -0.0018 , 0.0004 , 0.287 , 599\n",
      "mlt20bMMEFOPEFR , mlt20b , MMEFOPEFR , 51.284 , -0.1295 , 0.0017 , 10.528 , 599\n",
      "mlt20bPEFROFEV1 , mlt20b , PEFROFEV1 , 2.329 , 0.002 , 0.0005 , 0.299 , 599\n",
      "mlt20bPEFROFEV6 , mlt20b , PEFROFEV6 , 2.032 , 0.0022 , 0.0005 , 0.332 , 599\n",
      "mlt20bPEFROFVC , mlt20b , PEFROFVC , 2.023 , 0.0023 , 0.0006 , 0.334 , 599\n",
      "m20overbFEF75OFVC , m20overb , FEF75OFVC , 48.851 , -0.4627 , 0.1767 , 15.919 , 477\n",
      "m20overbFEF75OPEFR , m20overb , FEF75OPEFR , 22.613 , -0.2046 , 0.1633 , 7.323 , 477\n",
      "m20overbFEV05OFEV3 , m20overb , FEV05OFEV3 , 69.097 , 0.0063 , 0.0002 , 7.214 , 477\n",
      "m20overbFEV05OFVC , m20overb , FEV05OFVC , 69.653 , -0.1045 , 0.0351 , 8.069 , 477\n",
      "m20overbFEV1OFEV3 , m20overb , FEV1OFEV3 , 88.816 , -0.0565 , 0.0257 , 5.098 , 477\n",
      "m20overbFEV1OFEV6 , m20overb , FEV1OFEV6 , 88.504 , -0.1287 , 0.087 , 6.312 , 477\n",
      "m20overbFEV1OFVC , m20overb , FEV1OFVC , 89.359 , -0.1913 , 0.1513 , 7.113 , 477\n",
      "m20overbFEV3OFEV6 , m20overb , FEV3OFEV6 , 99.68 , -0.0867 , 0.2819 , 2.363 , 477\n",
      "m20overbFEV3OFVC , m20overb , FEV3OFVC , 100.709 , -0.161 , 0.353 , 3.919 , 477\n",
      "m20overbFEV6OFVC , m20overb , FEV6OFVC , 101.14 , -0.0799 , 0.2917 , 2.139 , 477\n",
      "m20overbMMEFOFVC , m20overb , MMEFOFVC , 1.111 , -0.0064 , 0.1117 , 0.278 , 477\n",
      "m20overbMMEFOPEFR , m20overb , MMEFOPEFR , 51.249 , -0.2701 , 0.1236 , 11.11 , 477\n",
      "m20overbPEFROFEV1 , m20overb , PEFROFEV1 , 2.4 , 0.0046 , 0.0304 , 0.383 , 477\n",
      "m20overbPEFROFEV6 , m20overb , PEFROFEV6 , 2.134 , 0.0007 , 0.0006 , 0.382 , 477\n",
      "m20overbPEFROFVC , m20overb , PEFROFVC , 2.158 , -0.001 , 0.0015 , 0.382 , 477\n",
      "flt18cmaFEF75OFVC , flt18cma , FEF75OFVC , 46.537 , 0.3862 , 0.0042 , 16.799 , 966\n",
      "flt18cmaFEF75OPEFR , flt18cma , FEF75OPEFR , 22.292 , 0.3985 , 0.0157 , 8.949 , 966\n",
      "flt18cmaFEV05OFEV3 , flt18cma , FEV05OFEV3 , 76.192 , -0.4317 , 0.0303 , 6.972 , 966\n",
      "flt18cmaFEV05OFVC , flt18cma , FEV05OFVC , 74.665 , -0.3772 , 0.0217 , 7.188 , 966\n",
      "flt18cmaFEV1OFEV3 , flt18cma , FEV1OFEV3 , 90.868 , -0.0469 , 0.0008 , 4.711 , 966\n",
      "flt18cmaFEV1OFEV6 , flt18cma , FEV1OFEV6 , 89.3 , 0.0088 , 0.0 , 5.218 , 966\n",
      "flt18cmaFEV1OFVC , flt18cma , FEV1OFVC , 88.991 , 0.0168 , 0.0001 , 5.305 , 966\n",
      "flt18cmaFEV3OFEV6 , flt18cma , FEV3OFEV6 , 98.241 , 0.0613 , 0.0169 , 1.325 , 966\n",
      "flt18cmaFEV3OFVC , flt18cma , FEV3OFVC , 97.91 , 0.069 , 0.016 , 1.535 , 966\n",
      "flt18cmaFEV6OFVC , flt18cma , FEV6OFVC , 99.665 , 0.0076 , 0.0021 , 0.461 , 966\n",
      "flt18cmaMMEFOFVC , flt18cma , MMEFOFVC , 1.202 , -0.0076 , 0.007 , 0.255 , 966\n",
      "flt18cmaMMEFOPEFR , flt18cma , MMEFOPEFR , 58.309 , 0.001 , 0.0 , 10.519 , 966\n",
      "flt18cmaPEFROFEV1 , flt18cma , PEFROFEV1 , 2.311 , -0.0144 , 0.0192 , 0.292 , 966\n",
      "flt18cmaPEFROFEV6 , flt18cma , PEFROFEV6 , 2.068 , -0.0128 , 0.014 , 0.305 , 966\n",
      "flt18cmaPEFROFVC , flt18cma , PEFROFVC , 2.061 , -0.0126 , 0.0135 , 0.304 , 966\n",
      "f18overcmaFEF75OFVC , f18overcma , FEF75OFVC , 54.149 , -0.5276 , 0.3089 , 18.804 , 2113\n",
      "f18overcmaFEF75OPEFR , f18overcma , FEF75OPEFR , 29.483 , -0.2941 , 0.3499 , 9.849 , 2113\n",
      "f18overcmaFEV05OFEV3 , f18overcma , FEV05OFEV3 , 69.255 , 0.0001 , 0.0 , 6.656 , 2113\n",
      "f18overcmaFEV05OFVC , f18overcma , FEV05OFVC , 70.424 , -0.1138 , 0.0868 , 7.654 , 2113\n",
      "f18overcmaFEV1OFEV3 , f18overcma , FEV1OFEV3 , 90.133 , -0.0781 , 0.1063 , 4.746 , 2113\n",
      "f18overcmaFEV1OFEV6 , f18overcma , FEV1OFEV6 , 90.359 , -0.1544 , 0.2424 , 6.213 , 2113\n",
      "f18overcmaFEV1OFVC , f18overcma , FEV1OFVC , 91.465 , -0.2168 , 0.3297 , 7.481 , 2113\n",
      "f18overcmaFEV3OFEV6 , f18overcma , FEV3OFEV6 , 100.405 , -0.0933 , 0.4655 , 2.708 , 2113\n",
      "f18overcmaFEV3OFVC , f18overcma , FEV3OFVC , 101.786 , -0.1687 , 0.4784 , 4.832 , 2113\n",
      "f18overcmaFEV6OFVC , f18overcma , FEV6OFVC , 101.545 , -0.0821 , 0.3569 , 2.722 , 2113\n",
      "f18overcmaMMEFOFVC , f18overcma , MMEFOFVC , 1.195 , -0.0074 , 0.2338 , 0.305 , 2113\n",
      "f18overcmaMMEFOPEFR , f18overcma , MMEFOPEFR , 64.557 , -0.421 , 0.3354 , 14.402 , 2113\n",
      "f18overcmaPEFROFEV1 , f18overcma , PEFROFEV1 , 1.986 , 0.0075 , 0.1423 , 0.395 , 2113\n",
      "f18overcmaPEFROFEV6 , f18overcma , PEFROFEV6 , 1.819 , 0.0027 , 0.0224 , 0.351 , 2113\n",
      "f18overcmaPEFROFVC , f18overcma , PEFROFVC , 1.849 , 0.001 , 0.0036 , 0.347 , 2113\n",
      "flt18bFEF75OFVC , flt18b , FEF75OFVC , 40.506 , 0.7691 , 0.0118 , 19.86 , 590\n",
      "flt18bFEF75OPEFR , flt18b , FEF75OPEFR , 17.952 , 0.4659 , 0.0228 , 8.637 , 590\n",
      "flt18bFEV05OFEV3 , flt18b , FEV05OFEV3 , 72.419 , -0.0144 , 0.0 , 7.825 , 590\n",
      "flt18bFEV05OFVC , flt18b , FEV05OFVC , 70.335 , 0.0686 , 0.0005 , 8.398 , 590\n",
      "flt18bFEV1OFEV3 , flt18b , FEV1OFEV3 , 87.727 , 0.199 , 0.0089 , 5.911 , 590\n",
      "flt18bFEV1OFEV6 , flt18b , FEV1OFEV6 , 85.695 , 0.2765 , 0.0134 , 6.692 , 590\n",
      "flt18bFEV1OFVC , flt18b , FEV1OFVC , 85.074 , 0.3049 , 0.0149 , 6.993 , 590\n",
      "flt18bFEV3OFEV6 , flt18b , FEV3OFEV6 , 97.526 , 0.0985 , 0.0238 , 1.786 , 590\n",
      "flt18bFEV3OFVC , flt18b , FEV3OFVC , 96.711 , 0.1382 , 0.0235 , 2.525 , 590\n",
      "flt18bFEV6OFVC , flt18b , FEV6OFVC , 99.095 , 0.0456 , 0.0111 , 1.213 , 590\n",
      "flt18bMMEFOFVC , flt18b , MMEFOFVC , 1.067 , 0.0042 , 0.0014 , 0.314 , 590\n",
      "flt18bMMEFOPEFR , flt18b , MMEFOPEFR , 48.716 , 0.3384 , 0.0072 , 11.151 , 590\n",
      "flt18bPEFROFEV1 , flt18b , PEFROFEV1 , 2.495 , -0.0103 , 0.0074 , 0.337 , 590\n",
      "flt18bPEFROFEV6 , flt18b , PEFROFEV6 , 2.161 , -0.0036 , 0.0007 , 0.372 , 590\n",
      "flt18bPEFROFVC , flt18b , PEFROFVC , 2.148 , -0.003 , 0.0005 , 0.375 , 590\n",
      "f18overbFEF75OFVC , f18overb , FEF75OFVC , 54.312 , -0.5219 , 0.2085 , 19.162 , 957\n",
      "f18overbFEF75OPEFR , f18overb , FEF75OPEFR , 25.84 , -0.2491 , 0.2188 , 8.927 , 957\n",
      "f18overbFEV05OFEV3 , f18overb , FEV05OFEV3 , 72.37 , -0.0255 , 0.0038 , 6.882 , 957\n",
      "f18overbFEV05OFVC , f18overb , FEV05OFVC , 73.17 , -0.1347 , 0.0804 , 7.965 , 957\n",
      "f18overbFEV1OFEV3 , f18overb , FEV1OFEV3 , 91.109 , -0.083 , 0.0858 , 4.751 , 957\n",
      "f18overbFEV1OFEV6 , f18overb , FEV1OFEV6 , 91.227 , -0.1593 , 0.1857 , 6.197 , 957\n",
      "f18overbFEV1OFVC , f18overb , FEV1OFVC , 92.023 , -0.2156 , 0.2494 , 7.237 , 957\n",
      "f18overbFEV3OFEV6 , f18overb , FEV3OFEV6 , 100.231 , -0.0915 , 0.3277 , 2.679 , 957\n",
      "f18overbFEV3OFVC , f18overb , FEV3OFVC , 101.221 , -0.1588 , 0.3726 , 4.361 , 957\n",
      "f18overbFEV6OFVC , f18overb , FEV6OFVC , 101.105 , -0.0728 , 0.2673 , 2.36 , 957\n",
      "f18overbMMEFOFVC , f18overb , MMEFOFVC , 1.239 , -0.0075 , 0.1507 , 0.325 , 957\n",
      "f18overbMMEFOPEFR , f18overb , MMEFOPEFR , 58.565 , -0.3579 , 0.2026 , 13.327 , 957\n",
      "f18overbPEFROFEV1 , f18overb , PEFROFEV1 , 2.29 , 0.0064 , 0.0633 , 0.426 , 957\n",
      "f18overbPEFROFEV6 , f18overb , PEFROFEV6 , 2.104 , 0.0014 , 0.0037 , 0.397 , 957\n",
      "f18overbPEFROFVC , f18overb , PEFROFVC , 2.126 , -0.0001 , 0.0 , 0.398 , 957\n",
      "mlt20cFEF75OFVC , mlt20c , FEF75OFVC , 39.944 , 0.1976 , 0.0019 , 14.912 , 419\n",
      "mlt20cFEF75OPEFR , mlt20c , FEF75OPEFR , 21.389 , 0.163 , 0.0054 , 7.3 , 419\n",
      "mlt20cFEV05OFEV3 , mlt20c , FEV05OFEV3 , 71.624 , -0.3939 , 0.0395 , 6.508 , 419\n",
      "mlt20cFEV05OFVC , mlt20c , FEV05OFVC , 69.479 , -0.3174 , 0.0231 , 6.855 , 419\n",
      "mlt20cFEV1OFEV3 , mlt20c , FEV1OFEV3 , 88.835 , -0.1283 , 0.0072 , 4.948 , 419\n",
      "mlt20cFEV1OFEV6 , mlt20c , FEV1OFEV6 , 86.625 , -0.0562 , 0.0011 , 5.601 , 419\n",
      "mlt20cFEV1OFVC , mlt20c , FEV1OFVC , 86.09 , -0.0336 , 0.0004 , 5.708 , 419\n",
      "mlt20cFEV3OFEV6 , mlt20c , FEV3OFEV6 , 97.452 , 0.0804 , 0.0341 , 1.43 , 419\n",
      "mlt20cFEV3OFVC , mlt20c , FEV3OFVC , 96.837 , 0.1062 , 0.041 , 1.722 , 419\n",
      "mlt20cFEV6OFVC , mlt20c , FEV6OFVC , 99.367 , 0.0265 , 0.0182 , 0.645 , 419\n",
      "mlt20cMMEFOFVC , mlt20c , MMEFOFVC , 0.995 , -0.0042 , 0.0034 , 0.233 , 419\n",
      "mlt20cMMEFOPEFR , mlt20c , MMEFOPEFR , 53.715 , -0.1329 , 0.0021 , 9.527 , 419\n",
      "mlt20cPEFROFEV1 , mlt20c , PEFROFEV1 , 2.165 , -0.0043 , 0.003 , 0.257 , 419\n",
      "mlt20cPEFROFEV6 , mlt20c , PEFROFEV6 , 1.872 , -0.0044 , 0.0028 , 0.276 , 419\n",
      "mlt20cPEFROFVC , mlt20c , PEFROFVC , 1.861 , -0.0039 , 0.0022 , 0.276 , 419\n",
      "m20overcFEF75OFVC , m20overc , FEF75OFVC , 42.802 , -0.3949 , 0.3608 , 13.007 , 528\n",
      "m20overcFEF75OPEFR , m20overc , FEF75OPEFR , 23.118 , -0.217 , 0.3526 , 7.228 , 528\n",
      "m20overcFEV05OFEV3 , m20overc , FEV05OFEV3 , 64.193 , 0.0412 , 0.0168 , 6.277 , 528\n",
      "m20overcFEV05OFVC , m20overc , FEV05OFVC , 64.949 , -0.0777 , 0.0466 , 7.121 , 528\n",
      "m20overcFEV1OFEV3 , m20overc , FEV1OFEV3 , 86.492 , -0.0434 , 0.0367 , 4.478 , 528\n",
      "m20overcFEV1OFEV6 , m20overc , FEV1OFEV6 , 85.974 , -0.1132 , 0.1492 , 5.797 , 528\n",
      "m20overcFEV1OFVC , m20overc , FEV1OFVC , 87.235 , -0.1895 , 0.2728 , 7.178 , 528\n",
      "m20overcFEV3OFEV6 , m20overc , FEV3OFEV6 , 99.527 , -0.0874 , 0.4148 , 2.684 , 528\n",
      "m20overcFEV3OFVC , m20overc , FEV3OFVC , 101.14 , -0.1813 , 0.4831 , 5.161 , 528\n",
      "m20overcFEV6OFVC , m20overc , FEV6OFVC , 101.837 , -0.1029 , 0.4114 , 3.176 , 528\n",
      "m20overcMMEFOFVC , m20overc , MMEFOFVC , 0.994 , -0.0059 , 0.2255 , 0.248 , 528\n",
      "m20overcMMEFOPEFR , m20overc , MMEFOPEFR , 53.62 , -0.3412 , 0.3394 , 11.589 , 528\n",
      "m20overcPEFROFEV1 , m20overc , PEFROFEV1 , 2.085 , 0.0073 , 0.172 , 0.347 , 528\n",
      "m20overcPEFROFEV6 , m20overc , PEFROFEV6 , 1.811 , 0.0031 , 0.0384 , 0.314 , 528\n",
      "m20overcPEFROFVC , m20overc , PEFROFVC , 1.848 , 0.0011 , 0.0049 , 0.309 , 528\n",
      "mlt20maFEF75OFVC , mlt20ma , FEF75OFVC , 47.289 , -0.0705 , 0.0002 , 15.945 , 600\n",
      "mlt20maFEF75OPEFR , mlt20ma , FEF75OPEFR , 26.76 , -0.1038 , 0.0015 , 8.66 , 600\n",
      "mlt20maFEV05OFEV3 , mlt20ma , FEV05OFEV3 , 72.261 , -0.2843 , 0.0198 , 6.593 , 600\n",
      "mlt20maFEV05OFVC , mlt20ma , FEV05OFVC , 70.706 , -0.2501 , 0.014 , 6.895 , 600\n",
      "mlt20maFEV1OFEV3 , mlt20ma , FEV1OFEV3 , 90.311 , -0.119 , 0.0067 , 4.742 , 600\n",
      "mlt20maFEV1OFEV6 , mlt20ma , FEV1OFEV6 , 88.73 , -0.088 , 0.0029 , 5.369 , 600\n",
      "mlt20maFEV1OFVC , mlt20ma , FEV1OFVC , 88.333 , -0.0778 , 0.0021 , 5.488 , 600\n",
      "mlt20maFEV3OFEV6 , mlt20ma , FEV3OFEV6 , 98.204 , 0.0334 , 0.0055 , 1.469 , 600\n",
      "mlt20maFEV3OFVC , mlt20ma , FEV3OFVC , 97.748 , 0.045 , 0.0072 , 1.727 , 600\n",
      "mlt20maFEV6OFVC , mlt20ma , FEV6OFVC , 99.535 , 0.0118 , 0.0049 , 0.552 , 600\n",
      "mlt20maMMEFOFVC , mlt20ma , MMEFOFVC , 1.112 , -0.0072 , 0.0095 , 0.24 , 600\n",
      "mlt20maMMEFOPEFR , mlt20ma , MMEFOPEFR , 61.519 , -0.4702 , 0.0222 , 10.294 , 600\n",
      "mlt20maPEFROFEV1 , mlt20ma , PEFROFEV1 , 2.037 , 0.0054 , 0.0037 , 0.287 , 600\n",
      "mlt20maPEFROFEV6 , mlt20ma , PEFROFEV6 , 1.813 , 0.0027 , 0.0009 , 0.295 , 600\n",
      "mlt20maPEFROFVC , mlt20ma , PEFROFVC , 1.805 , 0.0029 , 0.001 , 0.295 , 600\n",
      "m20overmaFEF75OFVC , m20overma , FEF75OFVC , 47.631 , -0.4634 , 0.223 , 14.872 , 602\n",
      "m20overmaFEF75OPEFR , m20overma , FEF75OPEFR , 25.15 , -0.2548 , 0.252 , 7.692 , 602\n",
      "m20overmaFEV05OFEV3 , m20overma , FEV05OFEV3 , 67.834 , 0.025 , 0.0036 , 6.322 , 602\n",
      "m20overmaFEV05OFVC , m20overma , FEV05OFVC , 68.617 , -0.0969 , 0.0432 , 7.067 , 602\n",
      "m20overmaFEV1OFEV3 , m20overma , FEV1OFEV3 , 88.854 , -0.0588 , 0.0424 , 4.33 , 602\n",
      "m20overmaFEV1OFEV6 , m20overma , FEV1OFEV6 , 88.615 , -0.1346 , 0.138 , 5.49 , 602\n",
      "m20overmaFEV1OFVC , m20overma , FEV1OFVC , 89.691 , -0.2081 , 0.2372 , 6.474 , 602\n",
      "m20overmaFEV3OFEV6 , m20overma , FEV3OFEV6 , 99.856 , -0.0928 , 0.4041 , 2.214 , 602\n",
      "m20overmaFEV3OFVC , m20overma , FEV3OFVC , 101.188 , -0.181 , 0.4683 , 4.009 , 602\n",
      "m20overmaFEV6OFVC , m20overma , FEV6OFVC , 101.5 , -0.0957 , 0.4099 , 2.266 , 602\n",
      "m20overmaMMEFOFVC , m20overma , MMEFOFVC , 1.1 , -0.0065 , 0.1548 , 0.252 , 602\n",
      "m20overmaMMEFOPEFR , m20overma , MMEFOPEFR , 58.063 , -0.3804 , 0.2299 , 12.024 , 602\n",
      "m20overmaPEFROFEV1 , m20overma , PEFROFEV1 , 2.091 , 0.0084 , 0.1118 , 0.38 , 602\n",
      "m20overmaPEFROFEV6 , m20overma , PEFROFEV6 , 1.871 , 0.0037 , 0.0268 , 0.347 , 602\n",
      "m20overmaPEFROFVC , m20overma , PEFROFVC , 1.902 , 0.0018 , 0.0064 , 0.342 , 602\n",
      "flt18cFEF75OFVC , flt18c , FEF75OFVC , 44.109 , 0.4136 , 0.0052 , 16.065 , 409\n",
      "flt18cFEF75OPEFR , flt18c , FEF75OPEFR , 22.367 , 0.3249 , 0.0133 , 7.919 , 409\n",
      "flt18cFEV05OFEV3 , flt18c , FEV05OFEV3 , 75.065 , -0.4399 , 0.0322 , 6.896 , 409\n",
      "flt18cFEV05OFVC , flt18c , FEV05OFVC , 73.304 , -0.3665 , 0.021 , 7.113 , 409\n",
      "flt18cFEV1OFEV3 , flt18c , FEV1OFEV3 , 89.999 , -0.0409 , 0.0006 , 4.89 , 409\n",
      "flt18cFEV1OFEV6 , flt18c , FEV1OFEV6 , 88.138 , 0.0376 , 0.0004 , 5.394 , 409\n",
      "flt18cFEV1OFVC , flt18c , FEV1OFVC , 87.819 , 0.0464 , 0.0006 , 5.476 , 409\n",
      "flt18cFEV3OFEV6 , flt18c , FEV3OFEV6 , 97.89 , 0.0877 , 0.0379 , 1.267 , 409\n",
      "flt18cFEV3OFVC , flt18c , FEV3OFVC , 97.551 , 0.0959 , 0.0329 , 1.487 , 409\n",
      "flt18cFEV6OFVC , flt18c , FEV6OFVC , 99.658 , 0.008 , 0.0023 , 0.474 , 409\n",
      "flt18cMMEFOFVC , flt18c , MMEFOFVC , 1.172 , -0.0086 , 0.0093 , 0.252 , 409\n",
      "flt18cMMEFOPEFR , flt18c , MMEFOPEFR , 59.455 , -0.2136 , 0.0037 , 9.867 , 409\n",
      "flt18cPEFROFEV1 , flt18c , PEFROFEV1 , 2.238 , -0.0101 , 0.0122 , 0.256 , 409\n",
      "flt18cPEFROFEV6 , flt18c , PEFROFEV6 , 1.979 , -0.0083 , 0.0072 , 0.276 , 409\n",
      "flt18cPEFROFVC , flt18c , PEFROFVC , 1.972 , -0.0081 , 0.0068 , 0.276 , 409\n",
      "f18overcFEF75OFVC , f18overc , FEF75OFVC , 51.267 , -0.4817 , 0.3207 , 17.501 , 1108\n",
      "f18overcFEF75OPEFR , f18overc , FEF75OPEFR , 27.922 , -0.2681 , 0.3696 , 9.072 , 1108\n",
      "f18overcFEV05OFEV3 , f18overc , FEV05OFEV3 , 67.098 , 0.023 , 0.0056 , 6.321 , 1108\n",
      "f18overcFEV05OFVC , f18overc , FEV05OFVC , 68.349 , -0.0897 , 0.0623 , 7.387 , 1108\n",
      "f18overcFEV1OFEV3 , f18overc , FEV1OFEV3 , 88.902 , -0.0634 , 0.081 , 4.583 , 1108\n",
      "f18overcFEV1OFEV6 , f18overc , FEV1OFEV6 , 89.19 , -0.1399 , 0.2203 , 6.131 , 1108\n",
      "f18overcFEV1OFVC , f18overc , FEV1OFVC , 90.29 , -0.2003 , 0.2996 , 7.529 , 1108\n",
      "f18overcFEV3OFEV6 , f18overc , FEV3OFEV6 , 100.45 , -0.0932 , 0.4505 , 2.856 , 1108\n",
      "f18overcFEV3OFVC , f18overc , FEV3OFVC , 101.826 , -0.1665 , 0.4383 , 5.176 , 1108\n",
      "f18overcFEV6OFVC , f18overc , FEV6OFVC , 101.548 , -0.0801 , 0.3031 , 2.991 , 1108\n",
      "f18overcMMEFOFVC , f18overc , MMEFOFVC , 1.122 , -0.0066 , 0.2191 , 0.291 , 1108\n",
      "f18overcMMEFOPEFR , f18overc , MMEFOPEFR , 60.999 , -0.3789 , 0.3172 , 13.839 , 1108\n",
      "f18overcPEFROFEV1 , f18overc , PEFROFEV1 , 1.984 , 0.0074 , 0.1542 , 0.39 , 1108\n",
      "f18overcPEFROFEV6 , f18overc , PEFROFEV6 , 1.795 , 0.0028 , 0.029 , 0.339 , 1108\n",
      "f18overcPEFROFVC , f18overc , PEFROFVC , 1.825 , 0.0012 , 0.0059 , 0.336 , 1108\n",
      "flt18maFEF75OFVC , flt18ma , FEF75OFVC , 48.731 , 0.3336 , 0.003 , 17.165 , 557\n",
      "flt18maFEF75OPEFR , flt18ma , FEF75OPEFR , 22.391 , 0.4396 , 0.0166 , 9.592 , 557\n",
      "flt18maFEV05OFEV3 , flt18ma , FEV05OFEV3 , 77.258 , -0.4448 , 0.0327 , 6.905 , 557\n",
      "flt18maFEV05OFVC , flt18ma , FEV05OFVC , 75.906 , -0.4041 , 0.0254 , 7.124 , 557\n",
      "flt18maFEV1OFEV3 , flt18ma , FEV1OFEV3 , 91.661 , -0.0636 , 0.0016 , 4.492 , 557\n",
      "flt18maFEV1OFEV6 , flt18ma , FEV1OFEV6 , 90.314 , -0.0249 , 0.0002 , 5.008 , 557\n",
      "flt18maFEV1OFVC , flt18ma , FEV1OFVC , 90.013 , -0.0175 , 0.0001 , 5.1 , 557\n",
      "flt18maFEV3OFEV6 , flt18ma , FEV3OFEV6 , 98.507 , 0.0415 , 0.0073 , 1.367 , 557\n",
      "flt18maFEV3OFVC , flt18ma , FEV3OFVC , 98.182 , 0.0488 , 0.0076 , 1.57 , 557\n",
      "flt18maFEV6OFVC , flt18ma , FEV6OFVC , 99.671 , 0.0072 , 0.002 , 0.451 , 557\n",
      "flt18maMMEFOFVC , flt18ma , MMEFOFVC , 1.233 , -0.0075 , 0.0069 , 0.254 , 557\n",
      "flt18maMMEFOPEFR , flt18ma , MMEFOPEFR , 57.733 , 0.1353 , 0.0012 , 10.849 , 557\n",
      "flt18maPEFROFEV1 , flt18ma , PEFROFEV1 , 2.368 , -0.0179 , 0.0255 , 0.315 , 557\n",
      "flt18maPEFROFEV6 , flt18ma , PEFROFEV6 , 2.142 , -0.0166 , 0.0211 , 0.322 , 557\n",
      "flt18maPEFROFVC , flt18ma , PEFROFVC , 2.134 , -0.0164 , 0.0206 , 0.321 , 557\n",
      "f18overmaFEF75OFVC , f18overma , FEF75OFVC , 56.699 , -0.5792 , 0.2402 , 19.277 , 1005\n",
      "f18overmaFEF75OPEFR , f18overma , FEF75OPEFR , 31.01 , -0.3277 , 0.2767 , 10.163 , 1005\n",
      "f18overmaFEV05OFEV3 , f18overma , FEV05OFEV3 , 69.815 , 0.0135 , 0.001 , 6.851 , 1005\n",
      "f18overmaFEV05OFVC , f18overma , FEV05OFVC , 71.213 , -0.1106 , 0.0566 , 7.582 , 1005\n",
      "f18overmaFEV1OFEV3 , f18overma , FEV1OFEV3 , 90.642 , -0.0777 , 0.0729 , 4.696 , 1005\n",
      "f18overmaFEV1OFEV6 , f18overma , FEV1OFEV6 , 90.915 , -0.1569 , 0.1859 , 5.936 , 1005\n",
      "f18overmaFEV1OFVC , f18overma , FEV1OFVC , 92.249 , -0.228 , 0.2848 , 6.97 , 1005\n",
      "f18overmaFEV3OFEV6 , f18overma , FEV3OFEV6 , 100.459 , -0.0961 , 0.4271 , 2.398 , 1005\n",
      "f18overmaFEV3OFVC , f18overma , FEV3OFVC , 102.085 , -0.1809 , 0.4936 , 4.2 , 1005\n",
      "f18overmaFEV6OFVC , f18overma , FEV6OFVC , 101.791 , -0.0917 , 0.4194 , 2.308 , 1005\n",
      "f18overmaMMEFOFVC , f18overma , MMEFOFVC , 1.22 , -0.0072 , 0.1566 , 0.297 , 1005\n",
      "f18overmaMMEFOPEFR , f18overma , MMEFOPEFR , 65.992 , -0.4186 , 0.2491 , 13.681 , 1005\n",
      "f18overmaPEFROFEV1 , f18overma , PEFROFEV1 , 1.974 , 0.008 , 0.108 , 0.396 , 1005\n",
      "f18overmaPEFROFEV6 , f18overma , PEFROFEV6 , 1.813 , 0.0033 , 0.0212 , 0.365 , 1005\n",
      "f18overmaPEFROFVC , f18overma , PEFROFVC , 1.849 , 0.0014 , 0.0043 , 0.359 , 1005\n",
      "mallcmaFEF75OFVC , mallcma , FEF75OFVC , 50.236 , -0.5179 , 0.3396 , 17.203 , 2149\n",
      "mallcmaFEF75OPEFR , mallcma , FEF75OPEFR , 27.555 , -0.2965 , 0.3774 , 9.344 , 2149\n",
      "mallcmaFEV05OFEV3 , mallcma , FEV05OFEV3 , 67.694 , -0.003 , 0.0001 , 6.526 , 2149\n",
      "mallcmaFEV05OFVC , mallcma , FEV05OFVC , 68.053 , -0.1142 , 0.0908 , 7.334 , 2149\n",
      "mallcmaFEV1OFEV3 , mallcma , FEV1OFEV3 , 88.94 , -0.0762 , 0.0921 , 4.86 , 2149\n",
      "mallcmaFEV1OFEV6 , mallcma , FEV1OFEV6 , 88.616 , -0.1488 , 0.2212 , 6.127 , 2149\n",
      "mallcmaFEV1OFVC , mallcma , FEV1OFVC , 89.3 , -0.2141 , 0.3377 , 7.133 , 2149\n",
      "mallcmaFEV3OFEV6 , mallcma , FEV3OFEV6 , 99.697 , -0.089 , 0.502 , 2.433 , 2149\n",
      "mallcmaFEV3OFVC , mallcma , FEV3OFVC , 100.552 , -0.1681 , 0.5859 , 4.251 , 2149\n",
      "mallcmaFEV6OFVC , mallcma , FEV6OFVC , 100.954 , -0.0856 , 0.5157 , 2.307 , 2149\n",
      "mallcmaMMEFOFVC , mallcma , MMEFOFVC , 1.075 , -0.0068 , 0.2407 , 0.268 , 2149\n",
      "mallcmaMMEFOPEFR , mallcma , MMEFOPEFR , 58.866 , -0.4178 , 0.3894 , 12.961 , 2149\n",
      "mallcmaPEFROFEV1 , mallcma , PEFROFEV1 , 2.016 , 0.009 , 0.2371 , 0.358 , 2149\n",
      "mallcmaPEFROFEV6 , mallcma , PEFROFEV6 , 1.801 , 0.004 , 0.0588 , 0.321 , 2149\n",
      "mallcmaPEFROFVC , mallcma , PEFROFVC , 1.821 , 0.0023 , 0.0203 , 0.314 , 2149\n",
      "mallbFEF75OFVC , mallb , FEF75OFVC , 49.933 , -0.4755 , 0.1584 , 18.036 , 1076\n",
      "mallbFEF75OPEFR , mallb , FEF75OPEFR , 24.076 , -0.2317 , 0.1864 , 8.102 , 1076\n",
      "mallbFEV05OFEV3 , mallb , FEV05OFEV3 , 70.383 , -0.0249 , 0.0027 , 7.2 , 1076\n",
      "mallbFEV05OFVC , mallb , FEV05OFVC , 70.366 , -0.121 , 0.0523 , 7.984 , 1076\n",
      "mallbFEV1OFEV3 , mallb , FEV1OFEV3 , 89.49 , -0.0709 , 0.0407 , 5.309 , 1076\n",
      "mallbFEV1OFEV6 , mallb , FEV1OFEV6 , 88.958 , -0.1367 , 0.1027 , 6.439 , 1076\n",
      "mallbFEV1OFVC , mallb , FEV1OFVC , 89.398 , -0.1893 , 0.1652 , 7.031 , 1076\n",
      "mallbFEV3OFEV6 , mallb , FEV3OFEV6 , 99.411 , -0.0789 , 0.2894 , 2.214 , 1076\n",
      "mallbFEV3OFVC , mallb , FEV3OFVC , 99.943 , -0.1413 , 0.3975 , 3.383 , 1076\n",
      "mallbFEV6OFVC , mallb , FEV6OFVC , 100.587 , -0.0667 , 0.373 , 1.648 , 1076\n",
      "mallbMMEFOFVC , mallb , MMEFOFVC , 1.104 , -0.0062 , 0.103 , 0.291 , 1076\n",
      "mallbMMEFOPEFR , mallb , MMEFOPEFR , 53.333 , -0.3135 , 0.1691 , 11.509 , 1076\n",
      "mallbPEFROFEV1 , mallb , PEFROFEV1 , 2.282 , 0.0071 , 0.0925 , 0.355 , 1076\n",
      "mallbPEFROFEV6 , mallb , PEFROFEV6 , 2.041 , 0.0027 , 0.0131 , 0.358 , 1076\n",
      "mallbPEFROFVC , mallb , PEFROFVC , 2.054 , 0.0013 , 0.003 , 0.357 , 1076\n",
      "mallcFEF75OFVC , mallc , FEF75OFVC , 47.221 , -0.4681 , 0.4027 , 16.515 , 947\n",
      "mallcFEF75OPEFR , mallc , FEF75OPEFR , 26.052 , -0.2656 , 0.4443 , 8.922 , 947\n",
      "mallcFEV05OFEV3 , mallc , FEV05OFEV3 , 66.093 , 0.0067 , 0.0006 , 6.381 , 947\n",
      "mallcFEV05OFVC , mallc , FEV05OFVC , 66.417 , -0.1039 , 0.1019 , 7.286 , 947\n",
      "mallcFEV1OFEV3 , mallc , FEV1OFEV3 , 87.725 , -0.0649 , 0.0887 , 4.878 , 947\n",
      "mallcFEV1OFEV6 , mallc , FEV1OFEV6 , 87.293 , -0.1355 , 0.2348 , 6.263 , 947\n",
      "mallcFEV1OFVC , mallc , FEV1OFVC , 88.018 , -0.2022 , 0.3662 , 7.482 , 947\n",
      "mallcFEV3OFEV6 , mallc , FEV3OFEV6 , 99.557 , -0.0872 , 0.5315 , 2.677 , 947\n",
      "mallcFEV3OFVC , mallc , FEV3OFVC , 100.469 , -0.1686 , 0.6042 , 4.855 , 947\n",
      "mallcFEV6OFVC , mallc , FEV6OFVC , 101.022 , -0.0884 , 0.5198 , 2.746 , 947\n",
      "mallcMMEFOFVC , mallc , MMEFOFVC , 1.017 , -0.0063 , 0.2849 , 0.266 , 947\n",
      "mallcMMEFOPEFR , mallc , MMEFOPEFR , 56.236 , -0.3852 , 0.4509 , 12.844 , 947\n",
      "mallcPEFROFEV1 , mallc , PEFROFEV1 , 2.021 , 0.0083 , 0.2876 , 0.347 , 947\n",
      "mallcPEFROFEV6 , mallc , PEFROFEV6 , 1.779 , 0.0036 , 0.0711 , 0.305 , 947\n",
      "mallcPEFROFVC , mallc , PEFROFVC , 1.799 , 0.0019 , 0.0203 , 0.298 , 947\n",
      "mallmaFEF75OFVC , mallma , FEF75OFVC , 52.518 , -0.5644 , 0.2719 , 17.255 , 1202\n",
      "mallmaFEF75OPEFR , mallma , FEF75OPEFR , 28.876 , -0.3333 , 0.3154 , 9.46 , 1202\n",
      "mallmaFEV05OFEV3 , mallma , FEV05OFEV3 , 68.398 , 0.0099 , 0.0006 , 6.457 , 1202\n",
      "mallmaFEV05OFVC , mallma , FEV05OFVC , 68.786 , -0.102 , 0.0528 , 7.075 , 1202\n",
      "mallmaFEV1OFEV3 , mallma , FEV1OFEV3 , 89.595 , -0.0753 , 0.0666 , 4.65 , 1202\n",
      "mallmaFEV1OFEV6 , mallma , FEV1OFEV6 , 89.359 , -0.1501 , 0.1727 , 5.757 , 1202\n",
      "mallmaFEV1OFVC , mallma , FEV1OFVC , 89.99 , -0.2132 , 0.2708 , 6.531 , 1202\n",
      "mallmaFEV3OFEV6 , mallma , FEV3OFEV6 , 99.79 , -0.0902 , 0.4416 , 2.164 , 1202\n",
      "mallmaFEV3OFVC , mallma , FEV3OFVC , 100.559 , -0.1653 , 0.5357 , 3.601 , 1202\n",
      "mallmaFEV6OFVC , mallma , FEV6OFVC , 100.852 , -0.0808 , 0.4866 , 1.846 , 1202\n",
      "mallmaMMEFOFVC , mallma , MMEFOFVC , 1.104 , -0.0066 , 0.1671 , 0.258 , 1202\n",
      "mallmaMMEFOPEFR , mallma , MMEFOPEFR , 60.53 , -0.4342 , 0.3073 , 12.487 , 1202\n",
      "mallmaPEFROFEV1 , mallma , PEFROFEV1 , 1.994 , 0.0104 , 0.2069 , 0.366 , 1202\n",
      "mallmaPEFROFEV6 , mallma , PEFROFEV6 , 1.796 , 0.0054 , 0.0662 , 0.332 , 1202\n",
      "mallmaPEFROFVC , mallma , PEFROFVC , 1.814 , 0.0037 , 0.033 , 0.325 , 1202\n",
      "fallcmaFEF75OFVC , fallcma , FEF75OFVC , 57.036 , -0.5762 , 0.3911 , 20.654 , 3079\n",
      "fallcmaFEF75OPEFR , fallcma , FEF75OPEFR , 30.53 , -0.311 , 0.4117 , 10.867 , 3079\n",
      "fallcmaFEV05OFEV3 , fallcma , FEV05OFEV3 , 70.576 , -0.0238 , 0.0062 , 6.794 , 3079\n",
      "fallcmaFEV05OFVC , fallcma , FEV05OFVC , 71.238 , -0.1286 , 0.1359 , 7.818 , 3079\n",
      "fallcmaFEV1OFEV3 , fallcma , FEV1OFEV3 , 91.032 , -0.0937 , 0.1742 , 5.033 , 3079\n",
      "fallcmaFEV1OFEV6 , fallcma , FEV1OFEV6 , 91.116 , -0.1673 , 0.3283 , 6.547 , 3079\n",
      "fallcmaFEV1OFVC , fallcma , FEV1OFVC , 91.779 , -0.2219 , 0.416 , 7.712 , 3079\n",
      "fallcmaFEV3OFEV6 , fallcma , FEV3OFEV6 , 100.189 , -0.0892 , 0.5483 , 2.7 , 3079\n",
      "fallcmaFEV3OFVC , fallcma , FEV3OFVC , 101.013 , -0.1548 , 0.564 , 4.62 , 3079\n",
      "fallcmaFEV6OFVC , fallcma , FEV6OFVC , 100.918 , -0.071 , 0.4255 , 2.439 , 3079\n",
      "fallcmaMMEFOFVC , fallcma , MMEFOFVC , 1.2 , -0.0075 , 0.291 , 0.312 , 3079\n",
      "fallcmaMMEFOPEFR , fallcma , MMEFOPEFR , 63.694 , -0.4052 , 0.3886 , 14.571 , 3079\n",
      "fallcmaPEFROFEV1 , fallcma , PEFROFEV1 , 2.031 , 0.0067 , 0.1587 , 0.377 , 3079\n",
      "fallcmaPEFROFEV6 , fallcma , PEFROFEV6 , 1.867 , 0.0018 , 0.014 , 0.338 , 3079\n",
      "fallcmaPEFROFVC , fallcma , PEFROFVC , 1.885 , 0.0004 , 0.0007 , 0.334 , 3079\n",
      "fallbFEF75OFVC , fallb , FEF75OFVC , 56.199 , -0.5553 , 0.2309 , 20.849 , 1547\n",
      "fallbFEF75OPEFR , fallb , FEF75OPEFR , 26.669 , -0.2632 , 0.2489 , 9.517 , 1547\n",
      "fallbFEV05OFEV3 , fallb , FEV05OFEV3 , 72.535 , -0.0288 , 0.0051 , 7.265 , 1547\n",
      "fallbFEV05OFVC , fallb , FEV05OFVC , 72.878 , -0.128 , 0.078 , 8.27 , 1547\n",
      "fallbFEV1OFEV3 , fallb , FEV1OFEV3 , 91.194 , -0.0836 , 0.0799 , 5.336 , 1547\n",
      "fallbFEV1OFEV6 , fallb , FEV1OFEV6 , 91.085 , -0.1547 , 0.175 , 6.672 , 1547\n",
      "fallbFEV1OFVC , fallb , FEV1OFVC , 91.549 , -0.2039 , 0.2374 , 7.549 , 1547\n",
      "fallbFEV3OFEV6 , fallb , FEV3OFEV6 , 99.906 , -0.0841 , 0.3497 , 2.566 , 1547\n",
      "fallbFEV3OFVC , fallb , FEV3OFVC , 100.464 , -0.1422 , 0.3955 , 4.08 , 1547\n",
      "fallbFEV6OFVC , fallb , FEV6OFVC , 100.613 , -0.0623 , 0.2864 , 2.101 , 1547\n",
      "fallbMMEFOFVC , fallb , MMEFOFVC , 1.215 , -0.007 , 0.1458 , 0.331 , 1547\n",
      "fallbMMEFOPEFR , fallb , MMEFOPEFR , 57.435 , -0.3321 , 0.2088 , 13.115 , 1547\n",
      "fallbPEFROFEV1 , fallb , PEFROFEV1 , 2.29 , 0.0063 , 0.0808 , 0.403 , 1547\n",
      "fallbPEFROFEV6 , fallb , PEFROFEV6 , 2.1 , 0.0015 , 0.0049 , 0.388 , 1547\n",
      "fallbPEFROFVC , fallb , PEFROFVC , 2.114 , 0.0002 , 0.0001 , 0.389 , 1547\n",
      "fallcFEF75OFVC , fallc , FEF75OFVC , 54.221 , -0.528 , 0.4324 , 19.885 , 1517\n",
      "fallcFEF75OPEFR , fallc , FEF75OPEFR , 29.239 , -0.2885 , 0.4783 , 10.329 , 1517\n",
      "fallcFEV05OFEV3 , fallc , FEV05OFEV3 , 68.92 , -0.0067 , 0.0007 , 6.506 , 1517\n",
      "fallcFEV05OFVC , fallc , FEV05OFVC , 69.588 , -0.1098 , 0.1266 , 7.646 , 1517\n",
      "fallcFEV1OFEV3 , fallc , FEV1OFEV3 , 89.979 , -0.0806 , 0.1614 , 4.971 , 1517\n",
      "fallcFEV1OFEV6 , fallc , FEV1OFEV6 , 90.063 , -0.1536 , 0.3297 , 6.627 , 1517\n",
      "fallcFEV1OFVC , fallc , FEV1OFVC , 90.713 , -0.2068 , 0.4133 , 7.965 , 1517\n",
      "fallcFEV3OFEV6 , fallc , FEV3OFEV6 , 100.173 , -0.0885 , 0.5607 , 2.928 , 1517\n",
      "fallcFEV3OFVC , fallc , FEV3OFVC , 100.983 , -0.1527 , 0.5479 , 5.109 , 1517\n",
      "fallcFEV6OFVC , fallc , FEV6OFVC , 100.908 , -0.0697 , 0.3883 , 2.769 , 1517\n",
      "fallcMMEFOFVC , fallc , MMEFOFVC , 1.142 , -0.0069 , 0.3113 , 0.308 , 1517\n",
      "fallcMMEFOPEFR , fallc , MMEFOPEFR , 61.37 , -0.3846 , 0.4271 , 14.574 , 1517\n",
      "fallcPEFROFEV1 , fallc , PEFROFEV1 , 2.016 , 0.0069 , 0.2075 , 0.376 , 1517\n",
      "fallcPEFROFEV6 , fallc , PEFROFEV6 , 1.832 , 0.0022 , 0.028 , 0.325 , 1517\n",
      "fallcPEFROFVC , fallc , PEFROFVC , 1.85 , 0.0008 , 0.0041 , 0.321 , 1517\n",
      "fallmaFEF75OFVC , fallma , FEF75OFVC , 59.547 , -0.6345 , 0.3109 , 20.527 , 1562\n",
      "fallmaFEF75OPEFR , fallma , FEF75OPEFR , 31.709 , -0.3394 , 0.3134 , 10.937 , 1562\n",
      "fallmaFEV05OFEV3 , fallma , FEV05OFEV3 , 71.426 , -0.0211 , 0.003 , 6.898 , 1562\n",
      "fallmaFEV05OFVC , fallma , FEV05OFVC , 72.179 , -0.1314 , 0.0961 , 7.646 , 1562\n",
      "fallmaFEV1OFEV3 , fallma , FEV1OFEV3 , 91.696 , -0.0993 , 0.1353 , 4.869 , 1562\n",
      "fallmaFEV1OFEV6 , fallma , FEV1OFEV6 , 91.814 , -0.1749 , 0.2652 , 6.127 , 1562\n",
      "fallmaFEV1OFVC , fallma , FEV1OFVC , 92.554 , -0.2336 , 0.3586 , 7.037 , 1562\n",
      "fallmaFEV3OFEV6 , fallma , FEV3OFEV6 , 100.225 , -0.0908 , 0.4861 , 2.349 , 1562\n",
      "fallmaFEV3OFVC , fallma , FEV3OFVC , 101.125 , -0.1604 , 0.5495 , 3.905 , 1562\n",
      "fallmaFEV6OFVC , fallma , FEV6OFVC , 100.989 , -0.0749 , 0.4561 , 2.0 , 1562\n",
      "fallmaMMEFOFVC , fallma , MMEFOFVC , 1.229 , -0.0074 , 0.2008 , 0.298 , 1562\n",
      "fallmaMMEFOPEFR , fallma , MMEFOPEFR , 64.696 , -0.3901 , 0.271 , 13.52 , 1562\n",
      "fallmaPEFROFEV1 , fallma , PEFROFEV1 , 2.042 , 0.0065 , 0.098 , 0.375 , 1562\n",
      "fallmaPEFROFEV6 , fallma , PEFROFEV6 , 1.888 , 0.0017 , 0.0073 , 0.35 , 1562\n",
      "fallmaPEFROFVC , fallma , PEFROFVC , 1.908 , 0.0002 , 0.0001 , 0.346 , 1562\n",
      "at end\n",
      "                      dfname         var  intercept     slope        r2  \\\n",
      "dfnvarn                                                                   \n",
      "mlt20cmaFEF75OFVC   mlt20cma   FEF75OFVC  43.997043  0.059610  0.000155   \n",
      "mlt20cmaFEF75OPEFR  mlt20cma  FEF75OPEFR  24.404570  0.016176  0.000042   \n",
      "mlt20cmaFEV05OFEV3  mlt20cma  FEV05OFEV3  71.878072 -0.319622  0.024857   \n",
      "mlt20cmaFEV05OFVC   mlt20cma   FEV05OFVC  70.074012 -0.267688  0.015863   \n",
      "mlt20cmaFEV1OFEV3   mlt20cma   FEV1OFEV3  89.603159 -0.115008  0.005920   \n",
      "...                      ...         ...        ...       ...       ...   \n",
      "fallmaMMEFOFVC        fallma    MMEFOFVC   1.228693 -0.007390  0.200766   \n",
      "fallmaMMEFOPEFR       fallma   MMEFOPEFR  64.696127 -0.390138  0.271009   \n",
      "fallmaPEFROFEV1       fallma   PEFROFEV1   2.042195  0.006506  0.098032   \n",
      "fallmaPEFROFEV6       fallma   PEFROFEV6   1.887790  0.001661  0.007330   \n",
      "fallmaPEFROFVC        fallma    PEFROFVC   1.907593  0.000180  0.000088   \n",
      "\n",
      "                          std count  \n",
      "dfnvarn                              \n",
      "mlt20cmaFEF75OFVC   15.638493  1019  \n",
      "mlt20cmaFEF75OPEFR   8.179056  1019  \n",
      "mlt20cmaFEV05OFEV3   6.627458  1019  \n",
      "mlt20cmaFEV05OFVC    6.948080  1019  \n",
      "mlt20cmaFEV1OFEV3    4.886543  1019  \n",
      "...                       ...   ...  \n",
      "fallmaMMEFOFVC       0.297563  1562  \n",
      "fallmaMMEFOPEFR     13.520153  1562  \n",
      "fallmaPEFROFEV1      0.374904  1562  \n",
      "fallmaPEFROFEV6      0.349914  1562  \n",
      "fallmaPEFROFVC       0.346332  1562  \n",
      "\n",
      "[360 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "# First initialize resultsratio dataframe\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"intercept\", \"slope\", \"r2\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "resultsratio = pd.DataFrame(columns = column_names)\n",
    "resultsratio.name = 'resultsratio'\n",
    "print (resultsratio)\n",
    "print ('Linear Regression of variables in form y = intercept + slope * age')\n",
    "print ('dfnvarn, dataframe,  variable,        intercept,          slope,            R squared,         standard deviation,  count')\n",
    "for y in framestoanalyze:\n",
    "  #  print (y.name)\n",
    "    for xx in varsratio:\n",
    " #       print(y, \" \", xx)\n",
    "        reg = linear_regage (y,xx)\n",
    "        intercept, slope, r2, std, count = reg\n",
    "        slope, = slope\n",
    "        dfnvarn = y.name + xx\n",
    "        print (dfnvarn, ',', y.name, ',', xx, ',', round(intercept,3), ',', round(slope,4), ',', \n",
    "               round(r2,4), ',', round(std,3), ',',count)\n",
    "    #   now need save these in array of dataframe.variable, intercept slope\n",
    "        var = y.name\n",
    "    \n",
    "#  Columns: [dfnvarn, dfname, var, intercept, slope, r2, std, count] \n",
    "\n",
    "        df2 = {'dfnvarn': dfnvarn, 'dfname': y.name, 'var': xx, 'intercept': intercept, 'slope':slope, 'r2':r2, 'std':std, 'count':count}                          \n",
    "        resultsratio = resultsratio.append(df2, ignore_index=True)    \n",
    "print ('at end')\n",
    "resultsratio.set_index('dfnvarn', inplace=True)\n",
    "print (resultsratio)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# regression for non-ratios height_age_reg(data, y_var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [],
   "source": [
    "def height_age_reg(data, y_var):\n",
    "# convert agemonths to years\n",
    "    X_age = data['MXPAXTMR']/12\n",
    "    X_age = np.array(X_age).reshape(-1, 1)\n",
    "    X_age = np.hstack((X_age, X_age**2))\n",
    "    X_height = data['BMPHT']**2\n",
    "    X_height = np.array(X_height).reshape(-1, 1)\n",
    "    X = np.concatenate((X_age, X_height), axis=1)\n",
    "    y = data[y_var]\n",
    "    lr = LinearRegression().fit(X, y)\n",
    "        # do linear regression fit on X, y\n",
    " #   print(data.name, \", \",y_var, \", \",lr.intercept_, \",\", lr.coef_, \",\", lr.score(X, y), \",\",  data.loc[:,y_var].std(), \",\",  data.loc[:,y_var].count())\n",
    "    return data.name, y_var, lr.intercept_, lr.coef_, lr.score(X, y), data.loc[:,y_var].std(), data.loc[:,y_var].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EXPIR\n",
      "FEF75\n",
      "FEV05\n",
      "FEV1\n",
      "FEV3\n",
      "FEV6\n",
      "FVC\n",
      "MMEF\n",
      "PEFR\n"
     ]
    }
   ],
   "source": [
    "for x in varsnonratio:\n",
    "    print (x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Resultsnonratio with all of regression results for all dataframes all nonratio variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, intercept, b1, b2, b3, r2, std, count]\n",
      "Index: []\n",
      "Linear Regression of variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height\n",
      "dfnvarn, dataframe ,  variable,        intercept,   [b1. b2. b3]. ,            R squared,         standard deviation   count\n",
      "mlt20cmaEXPIR , mlt20cma , EXPIR , 4.2507 , 0.23852 , -0.0027296 , 2.39e-06 , 0.04774 , 2.50577 , 1019\n",
      "mlt20cmaFEF75 , mlt20cma , FEF75 , -0.16266 , -0.08964 , 0.0045808 , 8.45e-05 , 0.51921 , 0.74895 , 1019\n",
      "mlt20cmaFEV05 , mlt20cma , FEV05 , -0.02278 , -0.09372 , 0.0061888 , 9.929e-05 , 0.86286 , 0.79308 , 1019\n",
      "mlt20cmaFEV1 , mlt20cma , FEV1 , -0.12327 , -0.15548 , 0.0087919 , 0.00014659 , 0.89895 , 1.06123 , 1019\n",
      "mlt20cmaFEV3 , mlt20cma , FEV3 , -0.03847 , -0.20932 , 0.0110769 , 0.00017218 , 0.90726 , 1.22065 , 1019\n",
      "mlt20cmaFEV6 , mlt20cma , FEV6 , -0.0028 , -0.21192 , 0.0112363 , 0.00017284 , 0.90532 , 1.2311 , 1019\n",
      "mlt20cmaFVC , mlt20cma , FVC , 0.01195 , -0.21296 , 0.011291 , 0.00017278 , 0.90454 , 1.23275 , 1019\n",
      "mlt20cmaMMEF , mlt20cma , MMEF , -0.20835 , -0.09687 , 0.0077037 , 0.0001418 , 0.6401 , 1.33846 , 1019\n",
      "mlt20cmaPEFR , mlt20cma , PEFR , 0.55271 , -0.33295 , 0.0220001 , 0.00025096 , 0.80633 , 2.34186 , 1019\n",
      "m20overcmaEXPIR , m20overcma , EXPIR , 3.40624 , 0.33373 , -0.0025631 , -4.622e-05 , 0.1937 , 3.83724 , 1130\n",
      "m20overcmaFEF75 , m20overcma , FEF75 , 2.14008 , -0.06326 , 0.0003688 , 3.639e-05 , 0.49088 , 0.74126 , 1130\n",
      "m20overcmaFEV05 , m20overcma , FEV05 , 0.91978 , 0.00191 , -0.0002283 , 8.489e-05 , 0.56387 , 0.61762 , 1130\n",
      "m20overcmaFEV1 , m20overcma , FEV1 , 0.98398 , -0.01653 , -0.0001309 , 0.00012975 , 0.67009 , 0.81546 , 1130\n",
      "m20overcmaFEV3 , m20overcma , FEV3 , 0.56288 , -0.02137 , -0.0001038 , 0.00017052 , 0.68221 , 0.93103 , 1130\n",
      "m20overcmaFEV6 , m20overcma , FEV6 , 0.24546 , -0.01196 , -0.0001723 , 0.0001789 , 0.65253 , 0.9271 , 1130\n",
      "m20overcmaFVC , m20overcma , FVC , -0.01376 , -0.00264 , -0.0002275 , 0.00018221 , 0.6085 , 0.90512 , 1130\n",
      "m20overcmaMMEF , m20overcma , MMEF , 3.70737 , -0.03441 , -0.0001627 , 6.407e-05 , 0.46399 , 1.39554 , 1130\n",
      "m20overcmaPEFR , m20overcma , PEFR , 1.04681 , 0.07164 , -0.0011848 , 0.00025889 , 0.37909 , 1.94632 , 1130\n",
      "mlt20bEXPIR , mlt20b , EXPIR , -1.16585 , 1.0584 , -0.0335478 , 1.41e-06 , 0.03837 , 2.78273 , 599\n",
      "mlt20bFEF75 , mlt20b , FEF75 , -0.01076 , -0.07806 , 0.0047796 , 5.921e-05 , 0.43935 , 0.73086 , 599\n",
      "mlt20bFEV05 , mlt20b , FEV05 , -0.20729 , -0.07896 , 0.0047614 , 9.731e-05 , 0.81825 , 0.75236 , 599\n",
      "mlt20bFEV1 , mlt20b , FEV1 , -0.26449 , -0.14508 , 0.0071577 , 0.00013919 , 0.85134 , 0.97863 , 599\n",
      "mlt20bFEV3 , mlt20b , FEV3 , -0.36084 , -0.18293 , 0.0082296 , 0.00016891 , 0.86316 , 1.11481 , 599\n",
      "mlt20bFEV6 , mlt20b , FEV6 , -0.35098 , -0.18691 , 0.0083064 , 0.00017199 , 0.86231 , 1.12684 , 599\n",
      "mlt20bFVC , mlt20b , FVC , -0.34495 , -0.18819 , 0.0083586 , 0.00017247 , 0.862 , 1.13035 , 599\n",
      "mlt20bMMEF , mlt20b , MMEF , -0.55326 , -0.01181 , 0.0048576 , 0.00011409 , 0.55414 , 1.33263 , 599\n",
      "mlt20bPEFR , mlt20b , PEFR , -0.2718 , -0.23969 , 0.0167515 , 0.00025955 , 0.76633 , 2.3747 , 599\n",
      "m20overbEXPIR , m20overb , EXPIR , 0.95647 , 0.24478 , -0.0016948 , 6.92e-05 , 0.14504 , 3.63188 , 477\n",
      "m20overbFEF75 , m20overb , FEF75 , 2.00297 , -0.04776 , 0.0002398 , 2.45e-05 , 0.30381 , 0.71266 , 477\n",
      "m20overbFEV05 , m20overb , FEV05 , 0.61979 , -0.00642 , -0.0001309 , 8.605e-05 , 0.38441 , 0.58556 , 477\n",
      "m20overbFEV1 , m20overb , FEV1 , 0.82517 , -0.02465 , -8.5e-06 , 0.00011813 , 0.47603 , 0.72169 , 477\n",
      "m20overbFEV3 , m20overb , FEV3 , 0.68374 , -0.0315 , 5.08e-05 , 0.00014534 , 0.4986 , 0.7956 , 477\n",
      "m20overbFEV6 , m20overb , FEV6 , 0.46874 , -0.02688 , 2.73e-05 , 0.00015267 , 0.47012 , 0.80014 , 477\n",
      "m20overbFVC , m20overb , FVC , 0.24263 , -0.02183 , 3.7e-06 , 0.00015761 , 0.43703 , 0.80028 , 477\n",
      "m20overbMMEF , m20overb , MMEF , 2.44193 , -0.00918 , -0.0003896 , 7.423e-05 , 0.27717 , 1.32605 , 477\n",
      "m20overbPEFR , m20overb , PEFR , 1.31568 , 0.00498 , -0.0005885 , 0.00027615 , 0.26659 , 2.04716 , 477\n",
      "flt18cmaEXPIR , flt18cma , EXPIR , 3.73575 , 0.21001 , -0.0094292 , 7.52e-05 , 0.0092 , 2.64036 , 966\n",
      "flt18cmaFEF75 , flt18cma , FEF75 , -0.77122 , 0.04738 , -0.0001678 , 7.382e-05 , 0.41561 , 0.6007 , 966\n",
      "flt18cmaFEV05 , flt18cma , FEV05 , -1.11841 , 0.14061 , -0.0034854 , 8.481e-05 , 0.75393 , 0.52287 , 966\n",
      "flt18cmaFEV1 , flt18cma , FEV1 , -1.26127 , 0.09815 , -0.0014094 , 0.00012443 , 0.81971 , 0.69314 , 966\n",
      "flt18cmaFEV3 , flt18cma , FEV3 , -1.23687 , 0.06806 , -0.0001246 , 0.00014304 , 0.82608 , 0.77379 , 966\n",
      "flt18cmaFEV6 , flt18cma , FEV6 , -1.17151 , 0.05717 , 0.0002509 , 0.00014467 , 0.82128 , 0.77885 , 966\n",
      "flt18cmaFVC , flt18cma , FVC , -1.1732 , 0.05817 , 0.000224 , 0.00014468 , 0.8212 , 0.77983 , 966\n",
      "flt18cmaMMEF , flt18cma , MMEF , -2.28745 , 0.36871 , -0.0105031 , 0.00011163 , 0.49386 , 0.97962 , 966\n",
      "flt18cmaPEFR , flt18cma , PEFR , -4.37345 , 0.67357 , -0.0201231 , 0.00020547 , 0.62724 , 1.52114 , 966\n",
      "f18overcmaEXPIR , f18overcma , EXPIR , 2.72097 , 0.27649 , -0.0020855 , -2.138e-05 , 0.15396 , 3.83825 , 2113\n",
      "f18overcmaFEF75 , f18overcma , FEF75 , 1.97121 , -0.05319 , 0.0003013 , 2.872e-05 , 0.53352 , 0.65502 , 2113\n",
      "f18overcmaFEV05 , f18overcma , FEV05 , 0.69228 , 0.00282 , -0.0001934 , 7.177e-05 , 0.64335 , 0.4991 , 2113\n",
      "f18overcmaFEV1 , f18overcma , FEV1 , 0.77674 , -0.00921 , -0.0001374 , 0.00010647 , 0.72003 , 0.65502 , 2113\n",
      "f18overcmaFEV3 , f18overcma , FEV3 , 0.43792 , -0.0069 , -0.00017 , 0.00013529 , 0.70941 , 0.72931 , 2113\n",
      "f18overcmaFEV6 , f18overcma , FEV6 , 0.21042 , 0.00025 , -0.0002216 , 0.00014105 , 0.6764 , 0.72082 , 2113\n",
      "f18overcmaFVC , f18overcma , FVC , 0.02895 , 0.00588 , -0.0002559 , 0.00014407 , 0.64144 , 0.70495 , 2113\n",
      "f18overcmaMMEF , f18overcma , MMEF , 3.12159 , -0.02647 , -0.0001425 , 5.124e-05 , 0.53442 , 1.14733 , 2113\n",
      "f18overcmaPEFR , f18overcma , PEFR , 1.02891 , 0.05084 , -0.0008555 , 0.00019732 , 0.4222 , 1.46687 , 2113\n",
      "flt18bEXPIR , flt18b , EXPIR , 6.95062 , -0.22114 , 0.0102789 , 1.273e-05 , 0.00405 , 2.7202 , 590\n",
      "flt18bFEF75 , flt18b , FEF75 , -0.43678 , -0.01396 , 0.0023239 , 6.395e-05 , 0.35955 , 0.58172 , 590\n",
      "flt18bFEV05 , flt18b , FEV05 , -0.80025 , 0.07436 , -0.0009263 , 7.802e-05 , 0.72016 , 0.48978 , 590\n",
      "flt18bFEV1 , flt18b , FEV1 , -1.09687 , 0.07939 , -0.0008047 , 0.00010671 , 0.76385 , 0.62003 , 590\n",
      "flt18bFEV3 , flt18b , FEV3 , -1.11238 , 0.0711 , -0.0005303 , 0.0001204 , 0.76284 , 0.67473 , 590\n",
      "flt18bFEV6 , flt18b , FEV6 , -1.08878 , 0.06843 , -0.0004901 , 0.00012183 , 0.7588 , 0.67795 , 590\n",
      "flt18bFVC , flt18b , FVC , -1.05111 , 0.06463 , -0.0003505 , 0.00012161 , 0.75653 , 0.67722 , 590\n",
      "flt18bMMEF , flt18b , MMEF , -1.36029 , 0.12216 , -0.0012925 , 0.00012258 , 0.44585 , 1.0136 , 590\n",
      "flt18bPEFR , flt18b , PEFR , -3.28646 , 0.49615 , -0.0123598 , 0.00018946 , 0.59678 , 1.50588 , 590\n",
      "f18overbEXPIR , f18overb , EXPIR , 2.00395 , 0.26391 , -0.0021709 , 2.071e-05 , 0.10208 , 3.92513 , 957\n",
      "f18overbFEF75 , f18overb , FEF75 , 1.81301 , -0.05565 , 0.000369 , 2.76e-05 , 0.4149 , 0.61427 , 957\n",
      "f18overbFEV05 , f18overb , FEV05 , 0.55146 , -0.00803 , -8.75e-05 , 7.53e-05 , 0.5111 , 0.47591 , 957\n",
      "f18overbFEV1 , f18overb , FEV1 , 0.45512 , -0.01787 , -3.41e-05 , 0.0001081 , 0.59601 , 0.59041 , 957\n",
      "f18overbFEV3 , f18overb , FEV3 , 0.04483 , -0.01405 , -7.84e-05 , 0.00013424 , 0.58501 , 0.65048 , 957\n",
      "f18overbFEV6 , f18overb , FEV6 , -0.1812 , -0.00723 , -0.0001318 , 0.00013999 , 0.55445 , 0.64664 , 957\n",
      "f18overbFVC , f18overb , FVC , -0.32 , -0.00221 , -0.0001663 , 0.0001421 , 0.52306 , 0.63846 , 957\n",
      "f18overbMMEF , f18overb , MMEF , 2.79809 , -0.04689 , 8.17e-05 , 6.712e-05 , 0.38365 , 1.13502 , 957\n",
      "f18overbPEFR , f18overb , PEFR , 1.90294 , 0.02095 , -0.000662 , 0.00018594 , 0.30739 , 1.56201 , 957\n",
      "mlt20cEXPIR , mlt20c , EXPIR , 7.15071 , -0.24651 , 0.0125545 , 3.473e-05 , 0.04131 , 2.46813 , 419\n",
      "mlt20cFEF75 , mlt20c , FEF75 , 0.17265 , -0.1587 , 0.0066891 , 8.789e-05 , 0.5731 , 0.73519 , 419\n",
      "mlt20cFEV05 , mlt20c , FEV05 , 0.09351 , -0.12087 , 0.0066918 , 0.00010263 , 0.87849 , 0.80562 , 419\n",
      "mlt20cFEV1 , mlt20c , FEV1 , 0.07798 , -0.20132 , 0.009955 , 0.00015123 , 0.91106 , 1.09857 , 419\n",
      "mlt20cFEV3 , mlt20c , FEV3 , 0.14185 , -0.25078 , 0.0122109 , 0.0001765 , 0.91873 , 1.27751 , 419\n",
      "mlt20cFEV6 , mlt20c , FEV6 , 0.1318 , -0.24505 , 0.0120444 , 0.0001771 , 0.91513 , 1.28745 , 419\n",
      "mlt20cFVC , mlt20c , FVC , 0.17246 , -0.25126 , 0.0122529 , 0.00017758 , 0.91391 , 1.2893 , 419\n",
      "mlt20cMMEF , mlt20c , MMEF , 0.00448 , -0.15815 , 0.0090163 , 0.00014881 , 0.66624 , 1.33569 , 419\n",
      "mlt20cPEFR , mlt20c , PEFR , 0.99302 , -0.39163 , 0.023371 , 0.00024908 , 0.82329 , 2.34952 , 419\n",
      "m20overcEXPIR , m20overc , EXPIR , 3.16456 , 0.30967 , -0.0022553 , -2.512e-05 , 0.17246 , 4.0761 , 528\n",
      "m20overcFEF75 , m20overc , FEF75 , 2.38094 , -0.06258 , 0.0003544 , 2.815e-05 , 0.55266 , 0.74223 , 528\n",
      "m20overcFEV05 , m20overc , FEV05 , 0.74224 , 0.00846 , -0.0002779 , 8.418e-05 , 0.59324 , 0.67741 , 528\n",
      "m20overcFEV1 , m20overc , FEV1 , 1.01215 , -0.01366 , -0.0001555 , 0.00012629 , 0.69381 , 0.91035 , 528\n",
      "m20overcFEV3 , m20overc , FEV3 , 0.67935 , -0.02325 , -9.1e-05 , 0.00016889 , 0.7125 , 1.04634 , 528\n",
      "m20overcFEV6 , m20overc , FEV6 , 0.23443 , -0.0112 , -0.0001817 , 0.00017924 , 0.68736 , 1.03462 , 528\n",
      "m20overcFVC , m20overc , FVC , -0.18871 , -0.00014 , -0.0002483 , 0.00018611 , 0.64179 , 1.00222 , 528\n",
      "m20overcMMEF , m20overc , MMEF , 3.82344 , -0.02908 , -0.0001939 , 5.256e-05 , 0.50544 , 1.44463 , 528\n",
      "m20overcPEFR , m20overc , PEFR , 1.70607 , 0.08491 , -0.0012858 , 0.00022445 , 0.43797 , 2.01352 , 528\n",
      "mlt20maEXPIR , mlt20ma , EXPIR , 1.93088 , 0.65684 , -0.0155372 , -3.706e-05 , 0.05905 , 2.53017 , 600\n",
      "mlt20maFEF75 , mlt20ma , FEF75 , -0.20351 , -0.11406 , 0.0048111 , 0.000101 , 0.50499 , 0.7568 , 600\n",
      "mlt20maFEV05 , mlt20ma , FEV05 , 0.02086 , -0.12395 , 0.0069624 , 0.00011017 , 0.8613 , 0.78473 , 600\n",
      "mlt20maFEV1 , mlt20ma , FEV1 , -0.12192 , -0.17737 , 0.0092247 , 0.00015748 , 0.89612 , 1.03527 , 600\n",
      "mlt20maFEV3 , mlt20ma , FEV3 , -0.06555 , -0.21682 , 0.0111308 , 0.00017851 , 0.90003 , 1.1795 , 600\n",
      "mlt20maFEV6 , mlt20ma , FEV6 , -0.0028 , -0.2238 , 0.0114793 , 0.00017892 , 0.89921 , 1.19023 , 600\n",
      "mlt20maFVC , mlt20ma , FVC , -0.00505 , -0.22166 , 0.0114347 , 0.00017859 , 0.89883 , 1.19176 , 600\n",
      "mlt20maMMEF , mlt20ma , MMEF , -0.00959 , -0.18402 , 0.0098129 , 0.00017073 , 0.64309 , 1.33674 , 600\n",
      "mlt20maPEFR , mlt20ma , PEFR , 0.44986 , -0.38734 , 0.0231754 , 0.00028011 , 0.79962 , 2.33845 , 600\n",
      "m20overmaEXPIR , m20overma , EXPIR , 3.88411 , 0.41054 , -0.0035744 , -0.00010801 , 0.20773 , 3.56827 , 602\n",
      "m20overmaFEF75 , m20overma , FEF75 , 1.71127 , -0.06919 , 0.0004559 , 5.479e-05 , 0.41831 , 0.72489 , 602\n",
      "m20overmaFEV05 , m20overma , FEV05 , 0.62309 , 0.00012 , -0.0002194 , 9.768e-05 , 0.53479 , 0.55999 , 602\n",
      "m20overmaFEV1 , m20overma , FEV1 , 0.79143 , -0.01841 , -0.0001116 , 0.00013809 , 0.63842 , 0.72278 , 602\n",
      "m20overmaFEV3 , m20overma , FEV3 , 0.66125 , -0.02097 , -0.0001059 , 0.00016638 , 0.63496 , 0.81263 , 602\n",
      "m20overmaFEV6 , m20overma , FEV6 , 0.42487 , -0.01318 , -0.0001609 , 0.00017327 , 0.59574 , 0.81297 , 602\n",
      "m20overmaFVC , m20overma , FVC , 0.24474 , -0.00352 , -0.000227 , 0.000174 , 0.54865 , 0.7964 , 602\n",
      "m20overmaMMEF , m20overma , MMEF , 2.33293 , -0.03385 , -0.0001662 , 0.00011369 , 0.39857 , 1.30901 , 602\n",
      "m20overmaPEFR , m20overma , PEFR , -0.70082 , 0.07249 , -0.001223 , 0.0003225 , 0.33186 , 1.88615 , 602\n",
      "flt18cEXPIR , flt18c , EXPIR , 2.01431 , 0.68276 , -0.0254803 , 1.879e-05 , 0.00925 , 2.6355 , 409\n",
      "flt18cFEF75 , flt18c , FEF75 , -0.86175 , 0.04226 , -0.0006757 , 8.12e-05 , 0.45227 , 0.59526 , 409\n",
      "flt18cFEV05 , flt18c , FEV05 , -0.95897 , 0.08303 , -0.0021837 , 9.808e-05 , 0.80235 , 0.53346 , 409\n",
      "flt18cFEV1 , flt18c , FEV1 , -0.9308 , 0.00857 , 0.0009929 , 0.00013997 , 0.8503 , 0.72064 , 409\n",
      "flt18cFEV3 , flt18c , FEV3 , -0.70461 , -0.05864 , 0.0036226 , 0.00016118 , 0.85598 , 0.81031 , 409\n",
      "flt18cFEV6 , flt18c , FEV6 , -0.62323 , -0.06934 , 0.0040048 , 0.00016195 , 0.85022 , 0.81357 , 409\n",
      "flt18cFVC , flt18c , FVC , -0.641 , -0.06551 , 0.0038683 , 0.00016192 , 0.85036 , 0.8144 , 409\n",
      "flt18cMMEF , flt18c , MMEF , -2.31735 , 0.31924 , -0.0103304 , 0.00013304 , 0.53043 , 0.96902 , 409\n",
      "flt18cPEFR , flt18c , PEFR , -3.78115 , 0.50043 , -0.0149636 , 0.00023274 , 0.72283 , 1.50932 , 409\n",
      "f18overcEXPIR , f18overc , EXPIR , -0.03208 , 0.32896 , -0.0025221 , 2.61e-05 , 0.15571 , 3.9433 , 1108\n",
      "f18overcFEF75 , f18overc , FEF75 , 2.17342 , -0.05761 , 0.0003375 , 2.538e-05 , 0.58673 , 0.64162 , 1108\n",
      "f18overcFEV05 , f18overc , FEV05 , 0.76252 , 0.00563 , -0.0002148 , 6.581e-05 , 0.68464 , 0.53481 , 1108\n",
      "f18overcFEV1 , f18overc , FEV1 , 0.92979 , -0.00685 , -0.0001603 , 9.875e-05 , 0.75206 , 0.71404 , 1108\n",
      "f18overcFEV3 , f18overc , FEV3 , 0.6091 , -0.00423 , -0.0001989 , 0.00012727 , 0.74506 , 0.80445 , 1108\n",
      "f18overcFEV6 , f18overc , FEV6 , 0.2853 , 0.00484 , -0.0002657 , 0.00013466 , 0.71441 , 0.79644 , 1108\n",
      "f18overcFVC , f18overc , FVC , -0.0036 , 0.01198 , -0.0003119 , 0.0001401 , 0.68288 , 0.78064 , 1108\n",
      "f18overcMMEF , f18overc , MMEF , 3.29092 , -0.03209 , -7.64e-05 , 4.683e-05 , 0.56473 , 1.16476 , 1108\n",
      "f18overcPEFR , f18overc , PEFR , 1.8281 , 0.06141 , -0.0009549 , 0.00015864 , 0.49894 , 1.52783 , 1108\n",
      "flt18maEXPIR , flt18ma , EXPIR , 4.43015 , 0.03045 , -0.0023731 , 8.436e-05 , 0.00875 , 2.62669 , 557\n",
      "flt18maFEF75 , flt18ma , FEF75 , -0.49862 , -0.01779 , 0.0022272 , 8.275e-05 , 0.40431 , 0.60295 , 557\n",
      "flt18maFEV05 , flt18ma , FEV05 , -1.12125 , 0.14237 , -0.003346 , 8.424e-05 , 0.72712 , 0.51509 , 557\n",
      "flt18maFEV1 , flt18ma , FEV1 , -1.40423 , 0.12722 , -0.0022156 , 0.00012166 , 0.80071 , 0.67288 , 557\n",
      "flt18maFEV3 , flt18ma , FEV3 , -1.58885 , 0.1432 , -0.0025181 , 0.00013486 , 0.80407 , 0.74607 , 557\n",
      "flt18maFEV6 , flt18ma , FEV6 , -1.53108 , 0.13054 , -0.0020896 , 0.00013745 , 0.80028 , 0.75255 , 557\n",
      "flt18maFVC , flt18ma , FVC , -1.5209 , 0.12939 , -0.0020339 , 0.00013752 , 0.79998 , 0.75365 , 557\n",
      "flt18maMMEF , flt18ma , MMEF , -1.88906 , 0.27729 , -0.0069641 , 0.00012313 , 0.48739 , 0.982 , 557\n",
      "flt18maPEFR , flt18ma , PEFR , -4.56767 , 0.7221 , -0.0217568 , 0.00020218 , 0.56486 , 1.53031 , 557\n",
      "f18overmaEXPIR , f18overma , EXPIR , 3.21631 , 0.20224 , -0.0012535 , 2.23e-05 , 0.15479 , 3.70263 , 1005\n",
      "f18overmaFEF75 , f18overma , FEF75 , 1.75877 , -0.04967 , 0.0002739 , 3.39e-05 , 0.43842 , 0.64374 , 1005\n",
      "f18overmaFEV05 , f18overma , FEV05 , 0.35951 , 0.00363 , -0.0002094 , 8.553e-05 , 0.57369 , 0.44872 , 1005\n",
      "f18overmaFEV1 , f18overma , FEV1 , 0.5771 , -0.01053 , -0.0001268 , 0.00011584 , 0.66115 , 0.57632 , 1005\n",
      "f18overmaFEV3 , f18overma , FEV3 , 0.40367 , -0.00989 , -0.0001423 , 0.00013892 , 0.64615 , 0.63448 , 1005\n",
      "f18overmaFEV6 , f18overma , FEV6 , 0.23148 , -0.00428 , -0.0001806 , 0.00014399 , 0.61034 , 0.62664 , 1005\n",
      "f18overmaFVC , f18overma , FVC , 0.11011 , -0.00062 , -0.0001939 , 0.00014631 , 0.56964 , 0.61101 , 1005\n",
      "f18overmaMMEF , f18overma , MMEF , 2.09105 , -0.00965 , -0.0003273 , 8.152e-05 , 0.44378 , 1.06204 , 1005\n",
      "f18overmaPEFR , f18overma , PEFR , 0.15653 , 0.05142 , -0.0009002 , 0.00023404 , 0.33009 , 1.39561 , 1005\n",
      "mallcmaEXPIR , mallcma , EXPIR , 4.65955 , 0.27626 , -0.0020282 , -4.334e-05 , 0.35005 , 3.74242 , 2149\n",
      "mallcmaFEF75 , mallcma , FEF75 , -0.48204 , -0.03152 , 7.14e-05 , 0.00010036 , 0.44821 , 0.74772 , 2149\n",
      "mallcmaFEV05 , mallcma , FEV05 , -1.02274 , 0.04078 , -0.0005909 , 0.00012011 , 0.7783 , 0.82144 , 2149\n",
      "mallcmaFEV1 , mallcma , FEV1 , -1.54024 , 0.03542 , -0.0006155 , 0.00017437 , 0.8174 , 1.06294 , 2149\n",
      "mallcmaFEV3 , mallcma , FEV3 , -1.96337 , 0.04038 , -0.0006797 , 0.00020749 , 0.8346 , 1.24393 , 2149\n",
      "mallcmaFEV6 , mallcma , FEV6 , -2.02905 , 0.04874 , -0.0007381 , 0.00020816 , 0.83744 , 1.28228 , 2149\n",
      "mallcmaFVC , mallcma , FVC , -2.05031 , 0.05409 , -0.0007564 , 0.00020657 , 0.83805 , 1.30276 , 2149\n",
      "mallcmaMMEF , mallcma , MMEF , -1.02071 , 0.035 , -0.0008098 , 0.00016947 , 0.51283 , 1.39965 , 2149\n",
      "mallcmaPEFR , mallcma , PEFR , -3.43398 , 0.18366 , -0.0022312 , 0.00032279 , 0.73298 , 2.66872 , 2149\n",
      "mallbEXPIR , mallb , EXPIR , 4.23058 , 0.18347 , -0.0010767 , 5.86e-06 , 0.23379 , 3.46969 , 1076\n",
      "mallbFEF75 , mallb , FEF75 , -0.58561 , -0.01071 , -0.0001397 , 8.323e-05 , 0.32809 , 0.72323 , 1076\n",
      "mallbFEV05 , mallb , FEV05 , -1.07853 , 0.03521 , -0.0005524 , 0.00011208 , 0.73753 , 0.78868 , 1076\n",
      "mallbFEV1 , mallb , FEV1 , -1.53649 , 0.03174 , -0.0005776 , 0.0001552 , 0.77523 , 0.99579 , 1076\n",
      "mallbFEV3 , mallb , FEV3 , -1.87077 , 0.03447 , -0.0006123 , 0.00018161 , 0.79932 , 1.14297 , 1076\n",
      "mallbFEV6 , mallb , FEV6 , -1.91858 , 0.0396 , -0.0006402 , 0.00018307 , 0.80243 , 1.17595 , 1076\n",
      "mallbFVC , mallb , FVC , -1.94431 , 0.04257 , -0.0006431 , 0.00018298 , 0.80291 , 1.19512 , 1076\n",
      "mallbMMEF , mallb , MMEF , -1.23464 , 0.05167 , -0.0010117 , 0.00015182 , 0.44605 , 1.38221 , 1076\n",
      "mallbPEFR , mallb , PEFR , -3.65565 , 0.16695 , -0.002233 , 0.00032463 , 0.68845 , 2.68834 , 1076\n",
      "mallcEXPIR , mallc , EXPIR , 4.98601 , 0.25393 , -0.0017613 , -3.933e-05 , 0.35156 , 3.98101 , 947\n",
      "mallcFEF75 , mallc , FEF75 , -0.55398 , -0.03691 , 0.0001458 , 0.00010079 , 0.5183 , 0.74538 , 947\n",
      "mallcFEV05 , mallc , FEV05 , -1.02598 , 0.03575 , -0.0005115 , 0.00011872 , 0.78775 , 0.84532 , 947\n",
      "mallcFEV1 , mallc , FEV1 , -1.58549 , 0.02906 , -0.0005223 , 0.00017494 , 0.82514 , 1.11319 , 947\n",
      "mallcFEV3 , mallc , FEV3 , -2.03995 , 0.0331 , -0.0005812 , 0.00021074 , 0.84175 , 1.31515 , 947\n",
      "mallcFEV6 , mallc , FEV6 , -2.09829 , 0.04314 , -0.0006569 , 0.00021046 , 0.84494 , 1.35391 , 947\n",
      "mallcFVC , mallc , FVC , -2.12331 , 0.04919 , -0.0006816 , 0.00020872 , 0.84442 , 1.37538 , 947\n",
      "mallcMMEF , mallc , MMEF , -1.06866 , 0.01906 , -0.0005894 , 0.00016931 , 0.54369 , 1.41284 , 947\n",
      "mallcPEFR , mallc , PEFR , -3.19539 , 0.17614 , -0.0020761 , 0.00030816 , 0.74911 , 2.69864 , 947\n",
      "mallmaEXPIR , mallma , EXPIR , 4.65089 , 0.3312 , -0.0027807 , -7.412e-05 , 0.34105 , 3.50785 , 1202\n",
      "mallmaFEF75 , mallma , FEF75 , -0.70348 , -0.03951 , 0.0001653 , 0.00011688 , 0.42389 , 0.74141 , 1202\n",
      "mallmaFEV05 , mallma , FEV05 , -1.21913 , 0.04155 , -0.0006298 , 0.00013067 , 0.79255 , 0.8024 , 1202\n",
      "mallmaFEV1 , mallma , FEV1 , -1.7175 , 0.03631 , -0.0006533 , 0.0001843 , 0.82542 , 1.02111 , 1202\n",
      "mallmaFEV3 , mallma , FEV3 , -2.05494 , 0.04486 , -0.0007587 , 0.0002114 , 0.83302 , 1.17977 , 1202\n",
      "mallmaFEV6 , mallma , FEV6 , -2.10688 , 0.05297 , -0.0008175 , 0.00021156 , 0.83356 , 1.21556 , 1202\n",
      "mallmaFVC , mallma , FVC , -2.1117 , 0.05888 , -0.0008464 , 0.00020901 , 0.83422 , 1.23292 , 1202\n",
      "mallmaMMEF , mallma , MMEF , -1.53018 , 0.03193 , -0.000813 , 0.0001988 , 0.52747 , 1.37423 , 1202\n",
      "mallmaPEFR , mallma , PEFR , -4.09566 , 0.18667 , -0.0023657 , 0.00035516 , 0.73214 , 2.64183 , 1202\n",
      "fallcmaEXPIR , fallcma , EXPIR , 5.10932 , 0.20319 , -0.0014199 , -4.636e-05 , 0.24653 , 3.7886 , 3079\n",
      "fallcmaFEF75 , fallcma , FEF75 , -0.03455 , -0.02593 , 6.01e-05 , 8.167e-05 , 0.48613 , 0.66787 , 3079\n",
      "fallcmaFEV05 , fallcma , FEV05 , -0.37555 , 0.02056 , -0.0003512 , 9.687e-05 , 0.66276 , 0.51487 , 3079\n",
      "fallcmaFEV1 , fallcma , FEV1 , -0.74494 , 0.01781 , -0.0003783 , 0.00014058 , 0.72481 , 0.6734 , 3079\n",
      "fallcmaFEV3 , fallcma , FEV3 , -1.05229 , 0.02442 , -0.0004504 , 0.00016403 , 0.73177 , 0.7598 , 3079\n",
      "fallcmaFEV6 , fallcma , FEV6 , -1.10971 , 0.02943 , -0.0004831 , 0.00016515 , 0.72235 , 0.76548 , 3079\n",
      "fallcmaFVC , fallcma , FVC , -1.13803 , 0.03207 , -0.0004908 , 0.00016503 , 0.71313 , 0.76334 , 3079\n",
      "fallcmaMMEF , fallcma , MMEF , 0.1821 , 0.0137 , -0.0004975 , 0.00012851 , 0.48436 , 1.10233 , 3079\n",
      "fallcmaPEFR , fallcma , PEFR , -1.00384 , 0.08192 , -0.0011319 , 0.00024776 , 0.51349 , 1.54075 , 3079\n",
      "fallbEXPIR , fallb , EXPIR , 4.76335 , 0.21953 , -0.0017426 , -4.67e-05 , 0.18413 , 3.73934 , 1547\n",
      "fallbFEF75 , fallb , FEF75 , -0.36167 , -0.02411 , 6.72e-05 , 8.335e-05 , 0.35056 , 0.61043 , 1547\n",
      "fallbFEV05 , fallb , FEV05 , -0.65292 , 0.01729 , -0.000332 , 9.954e-05 , 0.5883 , 0.4993 , 1547\n",
      "fallbFEV1 , fallb , FEV1 , -0.99466 , 0.01446 , -0.0003467 , 0.00013576 , 0.64799 , 0.61977 , 1547\n",
      "fallbFEV3 , fallb , FEV3 , -1.19292 , 0.01975 , -0.0004065 , 0.00015263 , 0.65674 , 0.68901 , 1547\n",
      "fallbFEV6 , fallb , FEV6 , -1.22495 , 0.0242 , -0.0004375 , 0.00015304 , 0.65317 , 0.69741 , 1547\n",
      "fallbFVC , fallb , FVC , -1.22677 , 0.02687 , -0.0004495 , 0.00015197 , 0.64715 , 0.69913 , 1547\n",
      "fallbMMEF , fallb , MMEF , -0.70771 , 0.00949 , -0.0004573 , 0.00015203 , 0.35904 , 1.0909 , 1547\n",
      "fallbPEFR , fallb , PEFR , -1.46464 , 0.08978 , -0.0013259 , 0.00025535 , 0.45369 , 1.63425 , 1547\n",
      "fallcEXPIR , fallc , EXPIR , 5.70868 , 0.20427 , -0.0014795 , -6.609e-05 , 0.22487 , 3.88026 , 1517\n",
      "fallcFEF75 , fallc , FEF75 , -0.11442 , -0.03134 , 0.0001315 , 8.463e-05 , 0.55152 , 0.66699 , 1517\n",
      "fallcFEV05 , fallc , FEV05 , -0.37252 , 0.01863 , -0.0003164 , 9.518e-05 , 0.70245 , 0.5389 , 1517\n",
      "fallcFEV1 , fallc , FEV1 , -0.74308 , 0.01498 , -0.0003341 , 0.0001395 , 0.75723 , 0.71823 , 1517\n",
      "fallcFEV3 , fallc , FEV3 , -1.04389 , 0.02157 , -0.0004084 , 0.00016346 , 0.76141 , 0.81523 , 1517\n",
      "fallcFEV6 , fallc , FEV6 , -1.09798 , 0.02752 , -0.0004507 , 0.00016389 , 0.749 , 0.81861 , 1517\n",
      "fallcFVC , fallc , FVC , -1.13656 , 0.03077 , -0.0004654 , 0.00016383 , 0.73776 , 0.81499 , 1517\n",
      "fallcMMEF , fallc , MMEF , 0.08367 , 0.00279 , -0.0003472 , 0.00013163 , 0.53246 , 1.12766 , 1517\n",
      "fallcPEFR , fallc , PEFR , -0.8639 , 0.08712 , -0.0011503 , 0.00023327 , 0.5725 , 1.57302 , 1517\n",
      "fallmaEXPIR , fallma , EXPIR , 4.42309 , 0.18054 , -0.001032 , -9.12e-06 , 0.25802 , 3.65905 , 1562\n",
      "fallmaFEF75 , fallma , FEF75 , -0.29186 , -0.02299 , 1.95e-05 , 9.351e-05 , 0.41146 , 0.64804 , 1562\n",
      "fallmaFEV05 , fallma , FEV05 , -0.59054 , 0.0234 , -0.0004025 , 0.00010657 , 0.63655 , 0.48792 , 1562\n",
      "fallmaFEV1 , fallma , FEV1 , -0.96763 , 0.02154 , -0.0004395 , 0.00015006 , 0.69755 , 0.62517 , 1562\n",
      "fallmaFEV3 , fallma , FEV3 , -1.21166 , 0.02932 , -0.0005263 , 0.00016959 , 0.70085 , 0.70204 , 1562\n",
      "fallmaFEV6 , fallma , FEV6 , -1.25744 , 0.03367 , -0.0005528 , 0.00017063 , 0.69485 , 0.71018 , 1562\n",
      "fallmaFVC , fallma , FVC , -1.27016 , 0.03525 , -0.0005461 , 0.00017042 , 0.68696 , 0.70914 , 1562\n",
      "fallmaMMEF , fallma , MMEF , -0.38248 , 0.02365 , -0.0006457 , 0.00015246 , 0.42962 , 1.03395 , 1562\n",
      "fallmaPEFR , fallma , PEFR , -1.44316 , 0.08379 , -0.0012172 , 0.00027048 , 0.4623 , 1.50923 , 1562\n",
      "at end\n",
      "                 dfname    var  intercept        b1        b2        b3  \\\n",
      "dfnvarn                                                                   \n",
      "mlt20cmaEXPIR  mlt20cma  EXPIR   4.250705  0.238521 -0.002730  0.000002   \n",
      "mlt20cmaFEF75  mlt20cma  FEF75  -0.162655 -0.089642  0.004581  0.000084   \n",
      "mlt20cmaFEV05  mlt20cma  FEV05  -0.022779 -0.093723  0.006189  0.000099   \n",
      "mlt20cmaFEV1   mlt20cma   FEV1  -0.123267 -0.155483  0.008792  0.000147   \n",
      "mlt20cmaFEV3   mlt20cma   FEV3  -0.038465 -0.209320  0.011077  0.000172   \n",
      "...                 ...    ...        ...       ...       ...       ...   \n",
      "fallmaFEV3       fallma   FEV3  -1.211661  0.029324 -0.000526  0.000170   \n",
      "fallmaFEV6       fallma   FEV6  -1.257441  0.033674 -0.000553  0.000171   \n",
      "fallmaFVC        fallma    FVC  -1.270163  0.035250 -0.000546  0.000170   \n",
      "fallmaMMEF       fallma   MMEF  -0.382485  0.023652 -0.000646  0.000152   \n",
      "fallmaPEFR       fallma   PEFR  -1.443157  0.083787 -0.001217  0.000270   \n",
      "\n",
      "                     r2       std count  \n",
      "dfnvarn                                  \n",
      "mlt20cmaEXPIR  0.047742  2.505771  1019  \n",
      "mlt20cmaFEF75  0.519212  0.748954  1019  \n",
      "mlt20cmaFEV05  0.862858  0.793078  1019  \n",
      "mlt20cmaFEV1   0.898951  1.061234  1019  \n",
      "mlt20cmaFEV3   0.907262  1.220654  1019  \n",
      "...                 ...       ...   ...  \n",
      "fallmaFEV3     0.700850  0.702037  1562  \n",
      "fallmaFEV6     0.694852  0.710179  1562  \n",
      "fallmaFVC      0.686958  0.709138  1562  \n",
      "fallmaMMEF     0.429617  1.033947  1562  \n",
      "fallmaPEFR     0.462304  1.509235  1562  \n",
      "\n",
      "[216 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "# First initialize resultsratio dataframe\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"intercept\", \"b1\", \"b2\", \"b3\", \"r2\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "resultsnonratio = pd.DataFrame(columns = column_names)\n",
    "resultsnonratio.name = 'resultsnonratio'\n",
    "print (resultsnonratio)\n",
    "print ('Linear Regression of variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height')\n",
    "print ('dfnvarn, dataframe ,  variable,        intercept,   [b1. b2. b3]. ,            R squared,         standard deviation   count')\n",
    "for y in framestoanalyze:\n",
    "  #  print (y.name)\n",
    "    for xx in varsnonratio:\n",
    "  #       print(y, \" \", xx)\n",
    "         reg = height_age_reg(y,xx)\n",
    "         dbname, var, intercept, coef, r2, std, count = reg\n",
    "         b1, b2, b3, = coef \n",
    "                  \n",
    "         dfnvarn = y.name + xx\n",
    "         print (dfnvarn, ',', dbname, ',', var, ',',round(intercept,5), ',',round(b1,5), ',',round(b2,7), ',',\n",
    "                round(b3,8), ',',round(r2,5), ',',round(std,5), ',',count)\n",
    "         #  Columns: [dfnvarn, dfname, var, intercept, b1, b2, b3, r2, std, count]  \n",
    "            \n",
    "         df2 = {'dfnvarn': dfnvarn, 'dfname': y.name, 'var': xx, 'intercept': intercept, 'b1': b1, 'b2': b2, 'b3': b3, 'r2':r2, 'std':std, 'count':count}                          \n",
    "         resultsnonratio = resultsnonratio.append(df2, ignore_index=True)\n",
    "print ('at end')\n",
    "resultsnonratio.set_index('dfnvarn', inplace=True)\n",
    "print (resultsnonratio)            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ****** Now percent predicted - create variables for ratios first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarspp(df):\n",
    "    vn = df.name + 'FEV05OFEV3'\n",
    "    df['FEV05OFEV3PP'] = 100 * df.FEV05OFEV3 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "    vn = df.name + 'FEV05OFVC'\n",
    "    df['FEV05OFVCPP'] = 100 * df.FEV05OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "    vn = df.name + 'FEV1OFVC'\n",
    "    df['FEV1OFVCPP'] = 100 * df.FEV1OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "    vn = df.name + 'FEF75OFVC'\n",
    "    df['FEF75OFVCPP'] = 100 * df.FEF75OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))  \n",
    "    vn = df.name + 'FEF75OPEFR'\n",
    "    df['FEF75OPEFRPP'] = 100 * df.FEF75OPEFR / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))  \n",
    "    vn = df.name + 'FEV05OFVC'\n",
    "    df['FEV05OFVCPP'] = 100 * df.FEV05OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))  \n",
    " #   print (vn)\n",
    " #   vn = df.name + 'FEV1OFEV6'\n",
    "#    print (vn)\n",
    "    vn = df.name + 'FEV1OFEV3'\n",
    "    df['FEV1OFEV3PP']= 100 * df.FEV1OFEV3 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "\n",
    "    vn = df.name + 'FEV1OFEV6'\n",
    "    df['FEV1OFEV6PP']= 100 * df.FEV1OFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "    vn = df.name + 'PEFROFVC'\n",
    "    df['PEFROFVCPP'] = 100 * df.PEFROFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'PEFROFEV6'\n",
    "    df['PEFROFEV6PP']= 100 * df.PEFROFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "    vn = df.name + 'PEFROFEV1'\n",
    "    df['PEFROFEV1PP'] = 100 * df.PEFROFEV1 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                        + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV3OFEV6'\n",
    "    df['FEV3OFEV6PP'] = 100 * df.FEV3OFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "    vn = df.name + 'FEV3OFVC'\n",
    "    df['FEV3OFVCPP'] = 100 * df.FEV3OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "    vn = df.name + 'FEV6OFVC'\n",
    "    df['FEV6OFVCPP'] = 100 * df.FEV6OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'MMEFOFVC'\n",
    "    df['MMEFOFVCPP'] = 100 * df.MMEFOFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'MMEFOPEFR'\n",
    "    df['MMEFOPEFRPP'] = 100 * df.MMEFOPEFR / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For all dataframes, create ppvar values (shows caveat but works)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # Remove the CWD from sys.path while we load stuff.\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  app.launch_new_instance()\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:25: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:29: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:32: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:35: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:38: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:44: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:47: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:50: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:53: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "for y in framestoanalyze:\n",
    "    createvarspp(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsPred(df):\n",
    "    vn = df.name + 'FEF75OFVC'\n",
    "    df['FEF75OFVCPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEF75OPEFR'\n",
    "    df['FEF75OPEFRPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV1OFVC'\n",
    "    df['FEV1OFVCPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV05OFEV3'\n",
    "    df['FEV05OFEV3Pred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV05OFVC'\n",
    "    df['FEV05OFVCPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "\n",
    "#    print (vn)\n",
    " #   vn = df.name + 'PEFROFVC'\n",
    " #   df['PEFROFVCPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV1OFEV3'\n",
    "    df['FEV1OFEV3Pred']= (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "\n",
    "    vn = df.name + 'FEV1OFEV6'\n",
    "    df['FEV1OFEV6Pred']= (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'PEFROFVC'\n",
    "    df['PEFROFVCPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'PEFROFEV6'\n",
    "    df['PEFROFEV6Pred']= (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'PEFROFEV1'\n",
    "    df['PEFROFEV1Pred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV3OFEV6'\n",
    "    df['FEV3OFEV6Pred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV6OFVC'\n",
    "    df['FEV3OFVCPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV6OFVC'\n",
    "    df['FEV6OFVCPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'MMEFOFVC'\n",
    "    df['MMEFOFVCPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'MMEFOPEFR'\n",
    "    df['MMEFOPEFRPred'] = (resultsratio.loc[vn, 'intercept'] + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:22: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:24: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:30: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:32: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:34: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:36: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "for y in framestoanalyze:\n",
    "    createvarsPred(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['HAR1' 'HAR23' 'HAR26' 'HAC1E' 'HAC1F' 'HAC1G' 'HAC1O' 'HAL6' 'HAL10'\n",
      " 'HAL1' 'HAL3' 'HAL5' 'DMARACER' 'DMARETHN' 'DMAETHNR' 'HSSEX' 'HSAGEIR'\n",
      " 'HSAGEU' 'HXPAXTMR' 'HXPSESSR' 'HSAITMOR' 'HAR4S' 'SPPQ1' 'SPPQ2' 'SPPQ3'\n",
      " 'SPPQ4' 'SPPQ5' 'SPPMANEU' 'MYPB1' 'MYPB3' 'MYPB11' 'MYPB27A' 'MYPB27B'\n",
      " 'HSAGEIR_exam' 'HSAGEU_exam' 'HXPAXTMR_exam' 'HXPSESSR_exam' 'HXPEJ6A2'\n",
      " 'SPPTECH1' 'SPPTRIAL' 'SPPPEAK' 'SPPFEV05' 'SPPFEV1' 'SPPFEV3' 'SPPFEV6'\n",
      " 'SPPFVC' 'SPPMMEF' 'SPPFEF75' 'SPPTYPE' 'SPPREPRO' 'SPPTIME' 'SPPEXPIR'\n",
      " 'SPPTEMP' 'HSSEX_exam' 'WTPFHX6' 'MXPAXTMR' 'BMPHT' 'BMPSITHT' 'BMPWT'\n",
      " 'DMARACER_exam' 'DMARETHN_exam' 'DMAETHNR_exam' 'HSAITMOR_exam' 'HXPG1'\n",
      " 'HXPG2A' 'HXPG2B' 'FEF75OFVC' 'FEF75OPEFR' 'FEV1OFVC' 'FEV1OFEV3'\n",
      " 'FEV1OFEV6' 'PEFROFVC' 'PEFROFEV6' 'PEFROFEV1' 'FEV3OFEV6' 'FEV3OFVC'\n",
      " 'FEV6OFVC' 'MMEFOPEFR' 'MMEFOFVC' 'FEV05OFEV3' 'FEV05OFVC' 'FEV05' 'FEV1'\n",
      " 'FEV3' 'FEV6' 'FVC' 'PEFR' 'MMEF' 'FEF75' 'EXPIR' 'FEV05OFEV3PP'\n",
      " 'FEV05OFVCPP' 'FEV1OFVCPP' 'FEF75OFVCPP' 'FEF75OPEFRPP' 'FEV1OFEV3PP'\n",
      " 'FEV1OFEV6PP' 'PEFROFVCPP' 'PEFROFEV6PP' 'PEFROFEV1PP' 'FEV3OFEV6PP'\n",
      " 'FEV3OFVCPP' 'FEV6OFVCPP' 'MMEFOFVCPP' 'MMEFOPEFRPP' 'FEF75OFVCPred'\n",
      " 'FEF75OPEFRPred' 'FEV1OFVCPred' 'FEV05OFEV3Pred' 'FEV05OFVCPred'\n",
      " 'FEV1OFEV3Pred' 'FEV1OFEV6Pred' 'PEFROFVCPred' 'PEFROFEV6Pred'\n",
      " 'PEFROFEV1Pred' 'FEV3OFEV6Pred' 'FEV3OFVCPred' 'FEV6OFVCPred'\n",
      " 'MMEFOFVCPred' 'MMEFOPEFRPred']\n"
     ]
    }
   ],
   "source": [
    "print (m20overb.columns.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check can refer to resultsratio value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      dfname         var  intercept     slope        r2  \\\n",
      "dfnvarn                                                                   \n",
      "mlt20cmaFEF75OFVC   mlt20cma   FEF75OFVC  43.997043  0.059610  0.000155   \n",
      "mlt20cmaFEF75OPEFR  mlt20cma  FEF75OPEFR  24.404570  0.016176  0.000042   \n",
      "mlt20cmaFEV05OFEV3  mlt20cma  FEV05OFEV3  71.878072 -0.319622  0.024857   \n",
      "mlt20cmaFEV05OFVC   mlt20cma   FEV05OFVC  70.074012 -0.267688  0.015863   \n",
      "mlt20cmaFEV1OFEV3   mlt20cma   FEV1OFEV3  89.603159 -0.115008  0.005920   \n",
      "...                      ...         ...        ...       ...       ...   \n",
      "fallmaMMEFOFVC        fallma    MMEFOFVC   1.228693 -0.007390  0.200766   \n",
      "fallmaMMEFOPEFR       fallma   MMEFOPEFR  64.696127 -0.390138  0.271009   \n",
      "fallmaPEFROFEV1       fallma   PEFROFEV1   2.042195  0.006506  0.098032   \n",
      "fallmaPEFROFEV6       fallma   PEFROFEV6   1.887790  0.001661  0.007330   \n",
      "fallmaPEFROFVC        fallma    PEFROFVC   1.907593  0.000180  0.000088   \n",
      "\n",
      "                          std count  \n",
      "dfnvarn                              \n",
      "mlt20cmaFEF75OFVC   15.638493  1019  \n",
      "mlt20cmaFEF75OPEFR   8.179056  1019  \n",
      "mlt20cmaFEV05OFEV3   6.627458  1019  \n",
      "mlt20cmaFEV05OFVC    6.948080  1019  \n",
      "mlt20cmaFEV1OFEV3    4.886543  1019  \n",
      "...                       ...   ...  \n",
      "fallmaMMEFOFVC       0.297563  1562  \n",
      "fallmaMMEFOPEFR     13.520153  1562  \n",
      "fallmaPEFROFEV1      0.374904  1562  \n",
      "fallmaPEFROFEV6      0.349914  1562  \n",
      "fallmaPEFROFVC       0.346332  1562  \n",
      "\n",
      "[360 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "print(resultsratio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "89.35850283626387\n"
     ]
    }
   ],
   "source": [
    "vn = 'm20overbFEV1OFVC'\n",
    "print(resultsratio.loc[vn, 'intercept'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 dfname    var  intercept        b1        b2        b3  \\\n",
      "dfnvarn                                                                   \n",
      "mlt20cmaEXPIR  mlt20cma  EXPIR   4.250705  0.238521 -0.002730  0.000002   \n",
      "mlt20cmaFEF75  mlt20cma  FEF75  -0.162655 -0.089642  0.004581  0.000084   \n",
      "mlt20cmaFEV05  mlt20cma  FEV05  -0.022779 -0.093723  0.006189  0.000099   \n",
      "mlt20cmaFEV1   mlt20cma   FEV1  -0.123267 -0.155483  0.008792  0.000147   \n",
      "mlt20cmaFEV3   mlt20cma   FEV3  -0.038465 -0.209320  0.011077  0.000172   \n",
      "...                 ...    ...        ...       ...       ...       ...   \n",
      "fallmaFEV3       fallma   FEV3  -1.211661  0.029324 -0.000526  0.000170   \n",
      "fallmaFEV6       fallma   FEV6  -1.257441  0.033674 -0.000553  0.000171   \n",
      "fallmaFVC        fallma    FVC  -1.270163  0.035250 -0.000546  0.000170   \n",
      "fallmaMMEF       fallma   MMEF  -0.382485  0.023652 -0.000646  0.000152   \n",
      "fallmaPEFR       fallma   PEFR  -1.443157  0.083787 -0.001217  0.000270   \n",
      "\n",
      "                     r2       std count  \n",
      "dfnvarn                                  \n",
      "mlt20cmaEXPIR  0.047742  2.505771  1019  \n",
      "mlt20cmaFEF75  0.519212  0.748954  1019  \n",
      "mlt20cmaFEV05  0.862858  0.793078  1019  \n",
      "mlt20cmaFEV1   0.898951  1.061234  1019  \n",
      "mlt20cmaFEV3   0.907262  1.220654  1019  \n",
      "...                 ...       ...   ...  \n",
      "fallmaFEV3     0.700850  0.702037  1562  \n",
      "fallmaFEV6     0.694852  0.710179  1562  \n",
      "fallmaFVC      0.686958  0.709138  1562  \n",
      "fallmaMMEF     0.429617  1.033947  1562  \n",
      "fallmaPEFR     0.462304  1.509235  1562  \n",
      "\n",
      "[216 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "print(resultsnonratio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8251704909398718\n"
     ]
    }
   ],
   "source": [
    "vn = 'm20overbFEV1'\n",
    "print(resultsnonratio.loc[vn, 'intercept'] )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now create PP Nonratio PP  FEV1PP, PEFRPP, FVCPP, FEV3PP, FEV6PP, MMEFPP, FEF75PP, EXPIRPP  from resultsnonratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dfname</th>\n",
       "      <th>var</th>\n",
       "      <th>intercept</th>\n",
       "      <th>b1</th>\n",
       "      <th>b2</th>\n",
       "      <th>b3</th>\n",
       "      <th>r2</th>\n",
       "      <th>std</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dfnvarn</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mlt20cmaEXPIR</th>\n",
       "      <td>mlt20cma</td>\n",
       "      <td>EXPIR</td>\n",
       "      <td>4.250705</td>\n",
       "      <td>0.238521</td>\n",
       "      <td>-0.002730</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.047742</td>\n",
       "      <td>2.505771</td>\n",
       "      <td>1019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mlt20cmaFEF75</th>\n",
       "      <td>mlt20cma</td>\n",
       "      <td>FEF75</td>\n",
       "      <td>-0.162655</td>\n",
       "      <td>-0.089642</td>\n",
       "      <td>0.004581</td>\n",
       "      <td>0.000084</td>\n",
       "      <td>0.519212</td>\n",
       "      <td>0.748954</td>\n",
       "      <td>1019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mlt20cmaFEV05</th>\n",
       "      <td>mlt20cma</td>\n",
       "      <td>FEV05</td>\n",
       "      <td>-0.022779</td>\n",
       "      <td>-0.093723</td>\n",
       "      <td>0.006189</td>\n",
       "      <td>0.000099</td>\n",
       "      <td>0.862858</td>\n",
       "      <td>0.793078</td>\n",
       "      <td>1019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mlt20cmaFEV1</th>\n",
       "      <td>mlt20cma</td>\n",
       "      <td>FEV1</td>\n",
       "      <td>-0.123267</td>\n",
       "      <td>-0.155483</td>\n",
       "      <td>0.008792</td>\n",
       "      <td>0.000147</td>\n",
       "      <td>0.898951</td>\n",
       "      <td>1.061234</td>\n",
       "      <td>1019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mlt20cmaFEV3</th>\n",
       "      <td>mlt20cma</td>\n",
       "      <td>FEV3</td>\n",
       "      <td>-0.038465</td>\n",
       "      <td>-0.209320</td>\n",
       "      <td>0.011077</td>\n",
       "      <td>0.000172</td>\n",
       "      <td>0.907262</td>\n",
       "      <td>1.220654</td>\n",
       "      <td>1019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fallmaFEV3</th>\n",
       "      <td>fallma</td>\n",
       "      <td>FEV3</td>\n",
       "      <td>-1.211661</td>\n",
       "      <td>0.029324</td>\n",
       "      <td>-0.000526</td>\n",
       "      <td>0.000170</td>\n",
       "      <td>0.700850</td>\n",
       "      <td>0.702037</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fallmaFEV6</th>\n",
       "      <td>fallma</td>\n",
       "      <td>FEV6</td>\n",
       "      <td>-1.257441</td>\n",
       "      <td>0.033674</td>\n",
       "      <td>-0.000553</td>\n",
       "      <td>0.000171</td>\n",
       "      <td>0.694852</td>\n",
       "      <td>0.710179</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fallmaFVC</th>\n",
       "      <td>fallma</td>\n",
       "      <td>FVC</td>\n",
       "      <td>-1.270163</td>\n",
       "      <td>0.035250</td>\n",
       "      <td>-0.000546</td>\n",
       "      <td>0.000170</td>\n",
       "      <td>0.686958</td>\n",
       "      <td>0.709138</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fallmaMMEF</th>\n",
       "      <td>fallma</td>\n",
       "      <td>MMEF</td>\n",
       "      <td>-0.382485</td>\n",
       "      <td>0.023652</td>\n",
       "      <td>-0.000646</td>\n",
       "      <td>0.000152</td>\n",
       "      <td>0.429617</td>\n",
       "      <td>1.033947</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fallmaPEFR</th>\n",
       "      <td>fallma</td>\n",
       "      <td>PEFR</td>\n",
       "      <td>-1.443157</td>\n",
       "      <td>0.083787</td>\n",
       "      <td>-0.001217</td>\n",
       "      <td>0.000270</td>\n",
       "      <td>0.462304</td>\n",
       "      <td>1.509235</td>\n",
       "      <td>1562</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>216 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 dfname    var  intercept        b1        b2        b3  \\\n",
       "dfnvarn                                                                   \n",
       "mlt20cmaEXPIR  mlt20cma  EXPIR   4.250705  0.238521 -0.002730  0.000002   \n",
       "mlt20cmaFEF75  mlt20cma  FEF75  -0.162655 -0.089642  0.004581  0.000084   \n",
       "mlt20cmaFEV05  mlt20cma  FEV05  -0.022779 -0.093723  0.006189  0.000099   \n",
       "mlt20cmaFEV1   mlt20cma   FEV1  -0.123267 -0.155483  0.008792  0.000147   \n",
       "mlt20cmaFEV3   mlt20cma   FEV3  -0.038465 -0.209320  0.011077  0.000172   \n",
       "...                 ...    ...        ...       ...       ...       ...   \n",
       "fallmaFEV3       fallma   FEV3  -1.211661  0.029324 -0.000526  0.000170   \n",
       "fallmaFEV6       fallma   FEV6  -1.257441  0.033674 -0.000553  0.000171   \n",
       "fallmaFVC        fallma    FVC  -1.270163  0.035250 -0.000546  0.000170   \n",
       "fallmaMMEF       fallma   MMEF  -0.382485  0.023652 -0.000646  0.000152   \n",
       "fallmaPEFR       fallma   PEFR  -1.443157  0.083787 -0.001217  0.000270   \n",
       "\n",
       "                     r2       std count  \n",
       "dfnvarn                                  \n",
       "mlt20cmaEXPIR  0.047742  2.505771  1019  \n",
       "mlt20cmaFEF75  0.519212  0.748954  1019  \n",
       "mlt20cmaFEV05  0.862858  0.793078  1019  \n",
       "mlt20cmaFEV1   0.898951  1.061234  1019  \n",
       "mlt20cmaFEV3   0.907262  1.220654  1019  \n",
       "...                 ...       ...   ...  \n",
       "fallmaFEV3     0.700850  0.702037  1562  \n",
       "fallmaFEV6     0.694852  0.710179  1562  \n",
       "fallmaFVC      0.686958  0.709138  1562  \n",
       "fallmaMMEF     0.429617  1.033947  1562  \n",
       "fallmaPEFR     0.462304  1.509235  1562  \n",
       "\n",
       "[216 rows x 9 columns]"
      ]
     },
     "execution_count": 270,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resultsnonratio  # sometimes has not set dfnvarn as target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height')\n",
    "\n",
    "def createvarsnonratiopp(df):\n",
    "    vn = df.name + 'FEV1'\n",
    "    print (vn)\n",
    "    df['FEV1PP'] = 100 * df.FEV1 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV05'\n",
    "    df['FEV05PP'] = 100 * df.FEV05 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FVC'\n",
    "    df['FVCPP'] =  100 * df.FVC /  (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'PEFR'\n",
    "    df['PEFRPP'] = 100 * df.PEFR / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV3'\n",
    "    df['FEV3PP'] = 100 * df.FEV3 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV6'\n",
    "    df['FEV6PP'] = 100 * df.FEV6 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR/ 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'MMEF'\n",
    "    df['MMEFPP'] = 100 * df.MMEF / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEF75'\n",
    "    df['FEF75PP'] = 100 * df.FEF75 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                   + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                   + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                   + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'EXPIR'\n",
    "    df['EXPIRPP'] = 100 * df.EXPIR / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                   + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                   + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                   + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create predFVCmFEV6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height')\n",
    "\n",
    "def createvarsnonratioPred(df):\n",
    "    vn = df.name + 'FEV1'\n",
    "    df['FEV1Pred'] = (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV05'\n",
    "    df['FEV05Pred'] = (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FVC'\n",
    "    df['FVCPred'] =  (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'PEFR'\n",
    "    df['PEFRPred'] = (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV3'\n",
    "    df['FEV3Pred'] =  (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV6'\n",
    "    df['FEV6Pred'] = (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'MMEF'\n",
    "    df['MMEFPred'] = (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEF75'\n",
    "    df['FEF75Pred'] = (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                   + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                   + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR / 12) \n",
    "                                   + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'EXPIR'\n",
    "    df['EXPIRPred'] = (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                   + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                   + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                   + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height')\n",
    "\n",
    "def createvarpredFVCmFEV6(df):\n",
    "        vn = df.name + 'FVC'\n",
    "        vnb = df.name + 'FEV6'\n",
    "        df['predFVCmFEV6'] = (resultsnonratio.loc[vn, 'intercept'] \n",
    "                          + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                          + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                          + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT ) \n",
    "        - (resultsnonratio.loc[vnb, 'intercept'] \n",
    "                          + resultsnonratio.loc[vnb, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                          + resultsnonratio.loc[vnb, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                          + resultsnonratio.loc[vnb, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>intercept</th>\n",
       "      <th>b1</th>\n",
       "      <th>b2</th>\n",
       "      <th>b3</th>\n",
       "      <th>r2</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>216.000000</td>\n",
       "      <td>216.000000</td>\n",
       "      <td>216.000000</td>\n",
       "      <td>216.000000</td>\n",
       "      <td>216.000000</td>\n",
       "      <td>216.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.098325</td>\n",
       "      <td>0.033909</td>\n",
       "      <td>0.000333</td>\n",
       "      <td>0.000129</td>\n",
       "      <td>0.594591</td>\n",
       "      <td>1.267834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.927275</td>\n",
       "      <td>0.177227</td>\n",
       "      <td>0.006179</td>\n",
       "      <td>0.000076</td>\n",
       "      <td>0.224327</td>\n",
       "      <td>0.884679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-4.567670</td>\n",
       "      <td>-0.391629</td>\n",
       "      <td>-0.033548</td>\n",
       "      <td>-0.000108</td>\n",
       "      <td>0.004053</td>\n",
       "      <td>0.448722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-1.100910</td>\n",
       "      <td>-0.027427</td>\n",
       "      <td>-0.000849</td>\n",
       "      <td>0.000085</td>\n",
       "      <td>0.451255</td>\n",
       "      <td>0.713697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-0.122592</td>\n",
       "      <td>0.014082</td>\n",
       "      <td>-0.000330</td>\n",
       "      <td>0.000138</td>\n",
       "      <td>0.640770</td>\n",
       "      <td>0.929064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.704769</td>\n",
       "      <td>0.062217</td>\n",
       "      <td>0.000074</td>\n",
       "      <td>0.000172</td>\n",
       "      <td>0.775998</td>\n",
       "      <td>1.374519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.150709</td>\n",
       "      <td>1.058396</td>\n",
       "      <td>0.023371</td>\n",
       "      <td>0.000355</td>\n",
       "      <td>0.918735</td>\n",
       "      <td>4.076097</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        intercept          b1          b2          b3          r2         std\n",
       "count  216.000000  216.000000  216.000000  216.000000  216.000000  216.000000\n",
       "mean     0.098325    0.033909    0.000333    0.000129    0.594591    1.267834\n",
       "std      1.927275    0.177227    0.006179    0.000076    0.224327    0.884679\n",
       "min     -4.567670   -0.391629   -0.033548   -0.000108    0.004053    0.448722\n",
       "25%     -1.100910   -0.027427   -0.000849    0.000085    0.451255    0.713697\n",
       "50%     -0.122592    0.014082   -0.000330    0.000138    0.640770    0.929064\n",
       "75%      0.704769    0.062217    0.000074    0.000172    0.775998    1.374519\n",
       "max      7.150709    1.058396    0.023371    0.000355    0.918735    4.076097"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resultsnonratio.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For all dataframes create varsnonratiopp and varsnonratioPred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mlt20cma\n",
      "mlt20cmaFEV1\n",
      "m20overcma\n",
      "m20overcmaFEV1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:24: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:29: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:34: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:39: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:44: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:49: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:33: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:38: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:43: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:48: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mlt20b\n",
      "mlt20bFEV1\n",
      "m20overb\n",
      "m20overbFEV1\n",
      "flt18cma\n",
      "flt18cmaFEV1\n",
      "f18overcma\n",
      "f18overcmaFEV1\n",
      "flt18b\n",
      "flt18bFEV1\n",
      "f18overb\n",
      "f18overbFEV1\n",
      "mlt20c\n",
      "mlt20cFEV1\n",
      "m20overc\n",
      "m20overcFEV1\n",
      "mlt20ma\n",
      "mlt20maFEV1\n",
      "m20overma\n",
      "m20overmaFEV1\n",
      "flt18c\n",
      "flt18cFEV1\n",
      "f18overc\n",
      "f18overcFEV1\n",
      "flt18ma\n",
      "flt18maFEV1\n",
      "f18overma\n",
      "f18overmaFEV1\n",
      "mallcma\n",
      "mallcmaFEV1\n",
      "mallb\n",
      "mallbFEV1\n",
      "mallc\n",
      "mallcFEV1\n",
      "mallma\n",
      "mallmaFEV1\n",
      "fallcma\n",
      "fallcmaFEV1\n",
      "fallb\n",
      "fallbFEV1\n",
      "fallc\n",
      "fallcFEV1\n",
      "fallma\n",
      "fallmaFEV1\n"
     ]
    }
   ],
   "source": [
    "for y in framestoanalyze:\n",
    "    print(y.name)\n",
    "    createvarsnonratiopp(y)\n",
    "    createvarsnonratioPred(y)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "for y in framestoanalyze:\n",
    " #   print(y.name)\n",
    "    createvarpredFVCmFEV6(y)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11f60ba10>"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overb.FEV1PP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11f255a50>"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overb.PEFRPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11ed68990>"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overb.MMEFPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11f012b50>"
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAATYklEQVR4nO3dfYxldX3H8fdXHuqW0V0QOm4W2iWBYJAp6E5QgjUzIA2KAZISiqF2MZhNG7WYbtOu/tFE06ZrGrS0NbYbULctOpAVCgWhJetOrUlBdwEdYTFQulS2uKu4LAxuNGu//WPO4HB3du6ZmXMffjPvVzK59zzcez579t7PnHvmnHMjM5Eklec1vQ4gSVoYC1ySCmWBS1KhLHBJKpQFLkmFOrabCzv55JNz7dq13VzkK15++WVOOOGEniy7LjM2w4zNKSHncsi4a9euH2XmKUdMyMyu/axbty57ZceOHT1bdl1mbIYZm1NCzuWQEdiZs3Squ1AkqVAWuCQVygKXpEJZ4JJUKAtckgplgUtSoSxwSSqUBS5JhbLAJalQXT2VXlou1m66d87pG4cOc13LPHs2X9bJSFqC3AKXpEJZ4JJUKAtckgplgUtSodoWeEScFRGPzvh5MSI+GhEnRcQDEfFkdXtiNwJLkqa0LfDM/F5mnpeZ5wHrgJ8AdwKbgO2ZeSawvRqWJHXJfHehXAz8V2Y+A1wBbK3GbwWubDKYJGluMfVlDzVnjvg88HBm/m1EvJCZq6rxARyYHm55zAZgA8Dg4OC6sbGxZpLP0+TkJAMDAz1Zdl1mbEY/ZJzYe3DO6YMrYN+hV48bWrOyg4kWph/WZTvLIePo6OiuzBxuHV+7wCPieOB/gTdn5r6ZBV5NP5CZc+4HHx4ezp07d84zejPGx8cZGRnpybLrMmMz+iFjnRN5bpx49Xl0/XgiTz+sy3aWQ8aImLXA57ML5d1MbX3vq4b3RcTq6slXA/sXnE6SNG/zKfD3AV+eMXw3sL66vx64q6lQkqT2ahV4RJwAXALcMWP0ZuCSiHgSeFc1LEnqkloXs8rMl4E3tIx7nqmjUiRJPeCZmJJUKAtckgplgUtSoSxwSSqUBS5JhbLAJalQFrgkFcoCl6RCWeCSVCgLXJIKZYFLUqFqXQtFUue1u4b40fTjdcTVHW6BS1KhLHBJKpQFLkmFssAlqVAWuCQVygKXpEJZ4JJUqLpfarwqIrZFxBMRsTsiLoiIkyLigYh4sro9sdNhJUm/UHcL/Cbg/sx8E3AusBvYBGzPzDOB7dWwJKlL2hZ4RKwE3gncApCZP8vMF4ArgK3VbFuBKzsVUpJ0pDpb4KcDPwS+EBGPRMTNEXECMJiZz1Xz/AAY7FRISdKRIjPnniFiGHgQuDAzH4qIm4AXgY9k5qoZ8x3IzCP2g0fEBmADwODg4LqxsbEm89c2OTnJwMBAT5Zdlxmb0Q8ZJ/YenHP64ArYd6iZZQ2tWdnME82iH9ZlO8sh4+jo6K7MHG4dX6fA3wg8mJlrq+HfYGp/9xnASGY+FxGrgfHMPGuu5xoeHs6dO3cu8J+wOOPj44yMjPRk2XWZsRn9kLHdhak2Dh3mxolmriXXyYtZ9cO6bGc5ZIyIWQu87SsoM38QEd+PiLMy83vAxcDj1c96YHN1e9eC00l9bKFXCZQ6re4mwEeAWyPieOBp4ANM7T+/PSKuB54Bru5MREnSbGoVeGY+Chyx+c7U1rgkqQc8E1OSCmWBS1KhLHBJKpQFLkmFssAlqVAWuCQVygKXpEJZ4JJUKAtckgplgUtSoSxwSSqUBS5JhbLAJalQFrgkFcoCl6RCWeCSVCgLXJIKZYFLUqEscEkqlAUuSYWq9aXGEbEHeAn4OXA4M4cj4iTgNmAtsAe4OjMPdCamJKnVfLbARzPzvMyc/nb6TcD2zDwT2F4NS5K6ZDG7UK4Atlb3twJXLj6OJKmuyMz2M0X8N3AASODvM3NLRLyQmauq6QEcmB5ueewGYAPA4ODgurGxsSbz1zY5OcnAwEBPll2XGZvRdMaJvQcbe65pgytg36FmnmtozcpmnmgWy/H/uxMWm3F0dHTXjL0fr6i1Dxx4R2bujYhfAR6IiCdmTszMjIhZfxNk5hZgC8Dw8HCOjIzML3lDxsfH6dWy6zJjM5rOeN2mext7rmkbhw5z40Tdt9/c9lw70sjzzGY5/n93Qqcy1tqFkpl7q9v9wJ3A+cC+iFgNUN3ubzydJOmo2m4CRMQJwGsy86Xq/m8CnwTuBtYDm6vbuzoZVNLs1i7gE8KezZd1IIm6rc5nuEHgzqnd3BwLfCkz74+IbwG3R8T1wDPA1Z2LKUlq1bbAM/Np4NxZxj8PXNyJUJKk9jwTU5IKZYFLUqEscEkqlAUuSYWywCWpUBa4JBXKApekQlngklQoC1ySCmWBS1KhLHBJKpQFLkmFssAlqVAWuCQVygKXpEJZ4JJUKAtckgplgUtSoSxwSSpU7QKPiGMi4pGIuKcaPj0iHoqIpyLitog4vnMxJUmt5rMFfgOwe8bwp4DPZOYZwAHg+iaDSZLmVqvAI+JU4DLg5mo4gIuAbdUsW4ErOxFQkjS7yMz2M0VsA/4CeB3wR8B1wIPV1jcRcRpwX2aeM8tjNwAbAAYHB9eNjY01Fn4+JicnGRgY6Mmy6zJjM5rOOLH3YGPPNW1wBew71PjT1ja0ZmWt+Zbj/3cnLDbj6Ojorswcbh1/bLsHRsR7gf2ZuSsiRua74MzcAmwBGB4ezpGReT9FI8bHx+nVsusyYzOaznjdpnsbe65pG4cOc+NE27dfx+y5dqTWfMvx/7sTOpWxzivoQuDyiHgP8Frg9cBNwKqIODYzDwOnAnsbTydJOqq2+8Az82OZeWpmrgWuAb6WmdcCO4CrqtnWA3d1LKUk6QiLOQ78T4A/jIingDcAtzQTSZJUx7x2wmXmODBe3X8aOL/5SJKkOjwTU5IKZYFLUqEscEkqlAUuSYWywCWpUBa4JBWqd+fySouwdo7T2zcOHe7I6e9Sv3ELXJIKZYFLUqEscEkqlAUuSYWywCWpUBa4JBXKApekQlngklQoC1ySCmWBS1KhPJVeWobmuhTBTDMvS7Bn82WdjKQFcAtckgplgUtSodoWeES8NiK+GRHfjojHIuIT1fjTI+KhiHgqIm6LiOM7H1eSNK3OFvhPgYsy81zgPODSiHg78CngM5l5BnAAuL5zMSVJrdoWeE6ZrAaPq34SuAjYVo3fClzZkYSSpFlFZrafKeIYYBdwBvBZ4C+BB6utbyLiNOC+zDxnlsduADYADA4OrhsbG2su/TxMTk4yMDDQk2XXZcb6JvYePOq0wRWw71AXwyxACRnh1TmH1qzsbZij6JfX5FwWm3F0dHRXZg63jq91GGFm/hw4LyJWAXcCb6q74MzcAmwBGB4ezpGRkboPbdT4+Di9WnZdZqxvrm/c2Th0mBsn+vsI2RIywqtz7rl2pLdhjqJfXpNz6VTGeR2FkpkvADuAC4BVETH9CjwV2NtwNknSHOochXJKteVNRKwALgF2M1XkV1WzrQfu6lRISdKR6nyGWw1srfaDvwa4PTPviYjHgbGI+DPgEeCWDuaUJLVoW+CZ+R3gLbOMfxo4vxOhJEnteSamJBXKApekQvX/cUxa8upeGU/Sq7kFLkmFssAlqVDuQlGj3B0idY9b4JJUKAtckgplgUtSoSxwSSqUBS5JhbLAJalQFrgkFcoCl6RCWeCSVCgLXJIKZYFLUqEscEkqlAUuSYWq8630p0XEjoh4PCIei4gbqvEnRcQDEfFkdXti5+NKkqbV2QI/DGzMzLOBtwMfioizgU3A9sw8E9heDUuSuqRtgWfmc5n5cHX/JWA3sAa4AthazbYVuLJTISVJR4rMrD9zxFrg68A5wP9k5qpqfAAHpodbHrMB2AAwODi4bmxsbPGpF2BycpKBgYGeLLuupZBxYu/BLqaZ3eAK2Heo1ynmVkJGeHXOoTUr5/34hbwe5rucpfC+aWd0dHRXZg63jq9d4BExAPw78OeZeUdEvDCzsCPiQGbOuR98eHg4d+7cOc/ozRgfH2dkZKQny65rKWTsh2/k2Th0mBsn+vvLpkrICK/OuWfzZfN+/EJeD/NdzlJ437QTEbMWeK2jUCLiOOArwK2ZeUc1el9ErK6mrwb2LzidJGne6hyFEsAtwO7M/PSMSXcD66v764G7mo8nSTqaOp/hLgTeD0xExKPVuI8Dm4HbI+J64Bng6s5ElCTNpm2BZ+Y3gDjK5IubjSNJqsszMSWpUBa4JBXKApekQlngklQoC1ySCmWBS1KhLHBJKpQFLkmFssAlqVAWuCQVygKXpEL1/wWJ1TOzXct549BhruuDa35LcgtckoplgUtSoSxwSSqUBS5JhbLAJalQFrgkFcoCl6RC1flW+s9HxP6I+O6McSdFxAMR8WR1e2JnY0qSWtXZAv8icGnLuE3A9sw8E9heDUuSuqhtgWfm14Eft4y+Atha3d8KXNlwLklSG5GZ7WeKWAvck5nnVMMvZOaq6n4AB6aHZ3nsBmADwODg4LqxsbFmks/T5OQkAwMDPVl2XXUyTuw9OO/nHVqzckF5ZlvW4ArYd2hBT9c1ZmxOL3LO9/W6VN7bcxkdHd2VmcOt4xd9LZTMzIg46m+BzNwCbAEYHh7OkZGRxS5yQcbHx+nVsuuqk3Eh1yHZc+3czzmfZW0cOsyNE/19CR0zNqcXOef7el0q7+2FWOhRKPsiYjVAdbu/uUiSpDoWWuB3A+ur++uBu5qJI0mqq85hhF8G/hM4KyKejYjrgc3AJRHxJPCualiS1EVtd25l5vuOMunihrNIkuah//+KokWb7YsZJJXPU+klqVAWuCQVygKXpEJZ4JJUKAtckgplgUtSoSxwSSqUBS5JhbLAJalQFrgkFcpT6SX1lfle+mHj0GGu23QvezZf1qFE/cstcEkqlAUuSYWywCWpUBa4JBXKApekQnkUyiy69QUIy/Gv5lKnLOR9W/p70C1wSSqUBS5JhVrULpSIuBS4CTgGuDkzO/bt9Mvx45GkzurW7tIvXnpCR553wVvgEXEM8Fng3cDZwPsi4uymgkmS5raYXSjnA09l5tOZ+TNgDLiimViSpHYiMxf2wIirgEsz84PV8PuBt2Xmh1vm2wBsqAbPAr638LiLcjLwox4tuy4zNsOMzSkh53LI+GuZeUrryI4fRpiZW4AtnV5OOxGxMzOHe51jLmZshhmbU0LO5ZxxMbtQ9gKnzRg+tRonSeqCxRT4t4AzI+L0iDgeuAa4u5lYkqR2FrwLJTMPR8SHgX9l6jDCz2fmY40la17Pd+PUYMZmmLE5JeRcthkX/EdMSVJveSamJBXKApekQi2ZAo+I0yJiR0Q8HhGPRcQNs8wzEhEHI+LR6udPe5DztRHxzYj4dpXzE7PM80sRcVtEPBURD0XE2j7MeF1E/HDGuvxgNzPOyHFMRDwSEffMMq2n63FGjrky9st63BMRE1WGnbNMj4j462pdfici3tqHGfvh/b0qIrZFxBMRsTsiLmiZ3uh6XEqXkz0MbMzMhyPidcCuiHggMx9vme8/MvO9Pcg37afARZk5GRHHAd+IiPsy88EZ81wPHMjMMyLiGuBTwG/3WUaA21pP3OqBG4DdwOtnmdbr9ThtrozQH+sRYDQzj3ayybuBM6uftwGfq267ba6M0Pv3903A/Zl5VXV03i+3TG90PS6ZLfDMfC4zH67uv8TUG2ZNb1MdKadMVoPHVT+tf0m+Atha3d8GXBwR0aWIdTP2XEScClwG3HyUWXq6HqFWxlJcAfxD9dp4EFgVEat7HaqfRMRK4J3ALQCZ+bPMfKFltkbX45Ip8Jmqj8pvAR6aZfIF1a6B+yLizV0NVqk+Uj8K7AceyMzWnGuA78PU4ZrAQeANfZYR4Leqj4HbIuK0WaZ32l8Bfwz831Gm93w90j4j9H49wtQv6H+LiF3V5S9avbIuK8/S/Q2kdhmht+/v04EfAl+odpndHBGtlyFsdD0uuQKPiAHgK8BHM/PFlskPM3VNgXOBvwH+udv5ADLz55l5HlNnr54fEef0IsdcamT8F2BtZv468AC/2NLtioh4L7A/M3d1c7nzUTNjT9fjDO/IzLcy9RH/QxHxzh7lmEu7jL1+fx8LvBX4XGa+BXgZ2NTJBS6pAq/2134FuDUz72idnpkvTu8ayMyvAsdFxMldjjkzzwvADuDSlkmvXKYgIo4FVgLPdzfdlKNlzMznM/On1eDNwLouR7sQuDwi9jB1JcyLIuKfWubp9Xpsm7EP1uN0jr3V7X7gTqauNjpTzy+d0S5jH7y/nwWenfFpdRtThT5To+txyRR4tW/zFmB3Zn76KPO8cXofaEScz9S/v6vFGBGnRMSq6v4K4BLgiZbZ7gbWV/evAr6WXTzjqk7Glv12lzP1N4euycyPZeapmbmWqcs4fC0zf6dltp6uxzoZe70eqwwnVH/4p/rI/5vAd1tmuxv43eooircDBzPzuX7K2Ov3d2b+APh+RJxVjboYaD2IotH1uJSOQrkQeD8wUe27Bfg48KsAmfl3TL2Jfz8iDgOHgGu6+YaurAa2xtQXYrwGuD0z74mITwI7M/Nupn4R/WNEPAX8mKk3f79l/IOIuJypo39+DFzX5Yyz6rP1OKs+XI+DwJ1V9x0LfCkz74+I34NX3jtfBd4DPAX8BPhAH2bsh/f3R4BbqyNQngY+0Mn16Kn0klSoJbMLRZKWGwtckgplgUtSoSxwSSqUBS5JhbLAJalQFrgkFer/ATm4elSkOmlwAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overb.predFVCmFEV6.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    477.000000\n",
       "mean     100.045530\n",
       "std       29.565351\n",
       "min       27.320472\n",
       "25%       80.107790\n",
       "50%       97.874427\n",
       "75%      118.790969\n",
       "max      193.526496\n",
       "Name: MMEFPP, dtype: float64"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m20overb.MMEFPP.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 999)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>HAL3</th>\n",
       "      <th>HAL5</th>\n",
       "      <th>DMARACER</th>\n",
       "      <th>DMARETHN</th>\n",
       "      <th>DMAETHNR</th>\n",
       "      <th>HSSEX</th>\n",
       "      <th>HSAGEIR</th>\n",
       "      <th>HSAGEU</th>\n",
       "      <th>HXPAXTMR</th>\n",
       "      <th>HXPSESSR</th>\n",
       "      <th>HSAITMOR</th>\n",
       "      <th>HAR4S</th>\n",
       "      <th>SPPQ1</th>\n",
       "      <th>SPPQ2</th>\n",
       "      <th>SPPQ3</th>\n",
       "      <th>SPPQ4</th>\n",
       "      <th>SPPQ5</th>\n",
       "      <th>SPPMANEU</th>\n",
       "      <th>MYPB1</th>\n",
       "      <th>MYPB3</th>\n",
       "      <th>MYPB11</th>\n",
       "      <th>MYPB27A</th>\n",
       "      <th>MYPB27B</th>\n",
       "      <th>HSAGEIR_exam</th>\n",
       "      <th>HSAGEU_exam</th>\n",
       "      <th>HXPAXTMR_exam</th>\n",
       "      <th>HXPSESSR_exam</th>\n",
       "      <th>HXPEJ6A2</th>\n",
       "      <th>SPPTECH1</th>\n",
       "      <th>SPPTRIAL</th>\n",
       "      <th>SPPPEAK</th>\n",
       "      <th>SPPFEV05</th>\n",
       "      <th>SPPFEV1</th>\n",
       "      <th>SPPFEV3</th>\n",
       "      <th>SPPFEV6</th>\n",
       "      <th>SPPFVC</th>\n",
       "      <th>SPPMMEF</th>\n",
       "      <th>SPPFEF75</th>\n",
       "      <th>SPPTYPE</th>\n",
       "      <th>SPPREPRO</th>\n",
       "      <th>SPPTIME</th>\n",
       "      <th>SPPEXPIR</th>\n",
       "      <th>SPPTEMP</th>\n",
       "      <th>HSSEX_exam</th>\n",
       "      <th>WTPFHX6</th>\n",
       "      <th>MXPAXTMR</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "      <th>FEF75OFVC</th>\n",
       "      <th>FEF75OPEFR</th>\n",
       "      <th>FEV1OFVC</th>\n",
       "      <th>FEV1OFEV3</th>\n",
       "      <th>FEV1OFEV6</th>\n",
       "      <th>PEFROFVC</th>\n",
       "      <th>PEFROFEV6</th>\n",
       "      <th>PEFROFEV1</th>\n",
       "      <th>FEV3OFEV6</th>\n",
       "      <th>FEV3OFVC</th>\n",
       "      <th>FEV6OFVC</th>\n",
       "      <th>MMEFOPEFR</th>\n",
       "      <th>MMEFOFVC</th>\n",
       "      <th>FEV05OFEV3</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "      <th>FEV05OFEV3PP</th>\n",
       "      <th>FEV05OFVCPP</th>\n",
       "      <th>FEV1OFVCPP</th>\n",
       "      <th>FEF75OFVCPP</th>\n",
       "      <th>FEF75OPEFRPP</th>\n",
       "      <th>FEV1OFEV3PP</th>\n",
       "      <th>FEV1OFEV6PP</th>\n",
       "      <th>PEFROFVCPP</th>\n",
       "      <th>PEFROFEV6PP</th>\n",
       "      <th>PEFROFEV1PP</th>\n",
       "      <th>FEV3OFEV6PP</th>\n",
       "      <th>FEV3OFVCPP</th>\n",
       "      <th>FEV6OFVCPP</th>\n",
       "      <th>MMEFOFVCPP</th>\n",
       "      <th>MMEFOPEFRPP</th>\n",
       "      <th>FEF75OFVCPred</th>\n",
       "      <th>FEF75OPEFRPred</th>\n",
       "      <th>FEV1OFVCPred</th>\n",
       "      <th>FEV05OFEV3Pred</th>\n",
       "      <th>FEV05OFVCPred</th>\n",
       "      <th>FEV1OFEV3Pred</th>\n",
       "      <th>FEV1OFEV6Pred</th>\n",
       "      <th>PEFROFVCPred</th>\n",
       "      <th>PEFROFEV6Pred</th>\n",
       "      <th>PEFROFEV1Pred</th>\n",
       "      <th>FEV3OFEV6Pred</th>\n",
       "      <th>FEV3OFVCPred</th>\n",
       "      <th>FEV6OFVCPred</th>\n",
       "      <th>MMEFOFVCPred</th>\n",
       "      <th>MMEFOPEFRPred</th>\n",
       "      <th>FEV1PP</th>\n",
       "      <th>FEV05PP</th>\n",
       "      <th>FVCPP</th>\n",
       "      <th>PEFRPP</th>\n",
       "      <th>FEV3PP</th>\n",
       "      <th>FEV6PP</th>\n",
       "      <th>MMEFPP</th>\n",
       "      <th>FEF75PP</th>\n",
       "      <th>EXPIRPP</th>\n",
       "      <th>FEV1Pred</th>\n",
       "      <th>FEV05Pred</th>\n",
       "      <th>FVCPred</th>\n",
       "      <th>PEFRPred</th>\n",
       "      <th>FEV3Pred</th>\n",
       "      <th>FEV6Pred</th>\n",
       "      <th>MMEFPred</th>\n",
       "      <th>FEF75Pred</th>\n",
       "      <th>EXPIRPred</th>\n",
       "      <th>predFVCmFEV6</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>388.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7938.0</td>\n",
       "      <td>2706.0</td>\n",
       "      <td>3408.0</td>\n",
       "      <td>3948.0</td>\n",
       "      <td>4129.0</td>\n",
       "      <td>4250.0</td>\n",
       "      <td>3244.0</td>\n",
       "      <td>974.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4821.01</td>\n",
       "      <td>389.0</td>\n",
       "      <td>172.5</td>\n",
       "      <td>84.9</td>\n",
       "      <td>80.25</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>388.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.917647</td>\n",
       "      <td>12.270093</td>\n",
       "      <td>80.188235</td>\n",
       "      <td>86.322188</td>\n",
       "      <td>82.538145</td>\n",
       "      <td>1.867765</td>\n",
       "      <td>1.922499</td>\n",
       "      <td>2.329225</td>\n",
       "      <td>95.616372</td>\n",
       "      <td>92.894118</td>\n",
       "      <td>97.152941</td>\n",
       "      <td>40.866717</td>\n",
       "      <td>0.763294</td>\n",
       "      <td>68.541033</td>\n",
       "      <td>63.670588</td>\n",
       "      <td>2.706</td>\n",
       "      <td>3.408</td>\n",
       "      <td>3.948</td>\n",
       "      <td>4.129</td>\n",
       "      <td>4.250</td>\n",
       "      <td>7.938</td>\n",
       "      <td>3.244</td>\n",
       "      <td>0.974</td>\n",
       "      <td>12.0</td>\n",
       "      <td>98.904067</td>\n",
       "      <td>96.081811</td>\n",
       "      <td>96.429821</td>\n",
       "      <td>67.701526</td>\n",
       "      <td>76.785924</td>\n",
       "      <td>99.237247</td>\n",
       "      <td>97.873915</td>\n",
       "      <td>87.891905</td>\n",
       "      <td>89.193275</td>\n",
       "      <td>91.359263</td>\n",
       "      <td>98.708094</td>\n",
       "      <td>97.282441</td>\n",
       "      <td>98.581924</td>\n",
       "      <td>84.502510</td>\n",
       "      <td>96.173029</td>\n",
       "      <td>33.851005</td>\n",
       "      <td>15.979613</td>\n",
       "      <td>83.157092</td>\n",
       "      <td>69.300521</td>\n",
       "      <td>66.267056</td>\n",
       "      <td>86.985674</td>\n",
       "      <td>84.331096</td>\n",
       "      <td>2.125070</td>\n",
       "      <td>2.155431</td>\n",
       "      <td>2.549523</td>\n",
       "      <td>96.867813</td>\n",
       "      <td>98.550462</td>\n",
       "      <td>98.550462</td>\n",
       "      <td>0.903280</td>\n",
       "      <td>42.492908</td>\n",
       "      <td>96.476640</td>\n",
       "      <td>95.463627</td>\n",
       "      <td>100.498374</td>\n",
       "      <td>87.462163</td>\n",
       "      <td>97.704425</td>\n",
       "      <td>99.037933</td>\n",
       "      <td>82.257043</td>\n",
       "      <td>67.843411</td>\n",
       "      <td>130.864301</td>\n",
       "      <td>3.532461</td>\n",
       "      <td>2.834587</td>\n",
       "      <td>4.228924</td>\n",
       "      <td>9.075925</td>\n",
       "      <td>4.040759</td>\n",
       "      <td>4.169110</td>\n",
       "      <td>3.943735</td>\n",
       "      <td>1.435659</td>\n",
       "      <td>9.169804</td>\n",
       "      <td>4.228924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>460</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>265.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10720.0</td>\n",
       "      <td>3546.0</td>\n",
       "      <td>4603.0</td>\n",
       "      <td>4746.0</td>\n",
       "      <td>4735.0</td>\n",
       "      <td>4832.0</td>\n",
       "      <td>5822.0</td>\n",
       "      <td>2986.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:35</td>\n",
       "      <td>11.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4695.57</td>\n",
       "      <td>265.0</td>\n",
       "      <td>173.8</td>\n",
       "      <td>91.7</td>\n",
       "      <td>60.10</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>265.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>61.796358</td>\n",
       "      <td>27.854478</td>\n",
       "      <td>95.260762</td>\n",
       "      <td>96.986936</td>\n",
       "      <td>97.212249</td>\n",
       "      <td>2.218543</td>\n",
       "      <td>2.263992</td>\n",
       "      <td>2.328916</td>\n",
       "      <td>100.232313</td>\n",
       "      <td>98.220199</td>\n",
       "      <td>97.992550</td>\n",
       "      <td>54.309701</td>\n",
       "      <td>1.204884</td>\n",
       "      <td>74.715550</td>\n",
       "      <td>73.385762</td>\n",
       "      <td>3.546</td>\n",
       "      <td>4.603</td>\n",
       "      <td>4.746</td>\n",
       "      <td>4.735</td>\n",
       "      <td>4.832</td>\n",
       "      <td>10.720</td>\n",
       "      <td>5.822</td>\n",
       "      <td>2.986</td>\n",
       "      <td>11.0</td>\n",
       "      <td>107.914841</td>\n",
       "      <td>108.967489</td>\n",
       "      <td>111.895228</td>\n",
       "      <td>159.959650</td>\n",
       "      <td>153.942102</td>\n",
       "      <td>110.754600</td>\n",
       "      <td>113.484530</td>\n",
       "      <td>103.879235</td>\n",
       "      <td>105.373190</td>\n",
       "      <td>93.088933</td>\n",
       "      <td>102.524553</td>\n",
       "      <td>101.098462</td>\n",
       "      <td>98.607971</td>\n",
       "      <td>124.272417</td>\n",
       "      <td>119.931435</td>\n",
       "      <td>38.632466</td>\n",
       "      <td>18.094126</td>\n",
       "      <td>85.133891</td>\n",
       "      <td>69.235658</td>\n",
       "      <td>67.346474</td>\n",
       "      <td>87.569218</td>\n",
       "      <td>85.661234</td>\n",
       "      <td>2.135694</td>\n",
       "      <td>2.148546</td>\n",
       "      <td>2.501818</td>\n",
       "      <td>97.764203</td>\n",
       "      <td>99.375891</td>\n",
       "      <td>99.375891</td>\n",
       "      <td>0.969551</td>\n",
       "      <td>45.283959</td>\n",
       "      <td>119.711023</td>\n",
       "      <td>117.675463</td>\n",
       "      <td>106.823621</td>\n",
       "      <td>113.078171</td>\n",
       "      <td>107.787457</td>\n",
       "      <td>105.217419</td>\n",
       "      <td>135.665202</td>\n",
       "      <td>165.413740</td>\n",
       "      <td>144.243196</td>\n",
       "      <td>3.845093</td>\n",
       "      <td>3.013372</td>\n",
       "      <td>4.523344</td>\n",
       "      <td>9.480168</td>\n",
       "      <td>4.403110</td>\n",
       "      <td>4.500205</td>\n",
       "      <td>4.291447</td>\n",
       "      <td>1.805170</td>\n",
       "      <td>7.626010</td>\n",
       "      <td>4.523344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>576</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>256.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1011.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8707.0</td>\n",
       "      <td>2940.0</td>\n",
       "      <td>3682.0</td>\n",
       "      <td>4239.0</td>\n",
       "      <td>4310.0</td>\n",
       "      <td>4334.0</td>\n",
       "      <td>4197.0</td>\n",
       "      <td>1525.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:39</td>\n",
       "      <td>9.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3925.56</td>\n",
       "      <td>256.0</td>\n",
       "      <td>167.9</td>\n",
       "      <td>84.7</td>\n",
       "      <td>73.15</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.186894</td>\n",
       "      <td>17.514643</td>\n",
       "      <td>84.956161</td>\n",
       "      <td>86.860109</td>\n",
       "      <td>85.429234</td>\n",
       "      <td>2.008999</td>\n",
       "      <td>2.020186</td>\n",
       "      <td>2.364747</td>\n",
       "      <td>98.352668</td>\n",
       "      <td>97.808030</td>\n",
       "      <td>99.446239</td>\n",
       "      <td>48.202596</td>\n",
       "      <td>0.968389</td>\n",
       "      <td>69.355980</td>\n",
       "      <td>67.835718</td>\n",
       "      <td>2.940</td>\n",
       "      <td>3.682</td>\n",
       "      <td>4.239</td>\n",
       "      <td>4.310</td>\n",
       "      <td>4.334</td>\n",
       "      <td>8.707</td>\n",
       "      <td>4.197</td>\n",
       "      <td>1.525</td>\n",
       "      <td>9.0</td>\n",
       "      <td>100.180598</td>\n",
       "      <td>100.609418</td>\n",
       "      <td>99.623337</td>\n",
       "      <td>90.270238</td>\n",
       "      <td>95.983279</td>\n",
       "      <td>99.142279</td>\n",
       "      <td>99.616895</td>\n",
       "      <td>94.033747</td>\n",
       "      <td>94.047579</td>\n",
       "      <td>94.652146</td>\n",
       "      <td>100.535018</td>\n",
       "      <td>100.549224</td>\n",
       "      <td>100.010497</td>\n",
       "      <td>99.387166</td>\n",
       "      <td>105.971131</td>\n",
       "      <td>38.979508</td>\n",
       "      <td>18.247599</td>\n",
       "      <td>85.277369</td>\n",
       "      <td>69.230950</td>\n",
       "      <td>67.424819</td>\n",
       "      <td>87.611572</td>\n",
       "      <td>85.757777</td>\n",
       "      <td>2.136466</td>\n",
       "      <td>2.148046</td>\n",
       "      <td>2.498356</td>\n",
       "      <td>97.829264</td>\n",
       "      <td>99.435801</td>\n",
       "      <td>99.435801</td>\n",
       "      <td>0.974361</td>\n",
       "      <td>45.486535</td>\n",
       "      <td>101.552903</td>\n",
       "      <td>103.195021</td>\n",
       "      <td>102.656633</td>\n",
       "      <td>97.406047</td>\n",
       "      <td>102.587862</td>\n",
       "      <td>102.334385</td>\n",
       "      <td>100.856282</td>\n",
       "      <td>85.491865</td>\n",
       "      <td>122.314332</td>\n",
       "      <td>3.625696</td>\n",
       "      <td>2.848975</td>\n",
       "      <td>4.221841</td>\n",
       "      <td>8.938870</td>\n",
       "      <td>4.132068</td>\n",
       "      <td>4.211683</td>\n",
       "      <td>4.161367</td>\n",
       "      <td>1.783795</td>\n",
       "      <td>7.358091</td>\n",
       "      <td>4.221841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>580</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>260.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1008.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10553.0</td>\n",
       "      <td>3296.0</td>\n",
       "      <td>4014.0</td>\n",
       "      <td>4409.0</td>\n",
       "      <td>4508.0</td>\n",
       "      <td>4509.0</td>\n",
       "      <td>4378.0</td>\n",
       "      <td>2467.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>08:56</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3822.33</td>\n",
       "      <td>260.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>86.7</td>\n",
       "      <td>73.45</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>260.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>54.712797</td>\n",
       "      <td>23.377239</td>\n",
       "      <td>89.021956</td>\n",
       "      <td>91.041052</td>\n",
       "      <td>89.041704</td>\n",
       "      <td>2.340430</td>\n",
       "      <td>2.340949</td>\n",
       "      <td>2.629048</td>\n",
       "      <td>97.803904</td>\n",
       "      <td>97.782213</td>\n",
       "      <td>99.977822</td>\n",
       "      <td>41.485833</td>\n",
       "      <td>0.970947</td>\n",
       "      <td>74.756181</td>\n",
       "      <td>73.098248</td>\n",
       "      <td>3.296</td>\n",
       "      <td>4.014</td>\n",
       "      <td>4.409</td>\n",
       "      <td>4.508</td>\n",
       "      <td>4.509</td>\n",
       "      <td>10.553</td>\n",
       "      <td>4.378</td>\n",
       "      <td>2.467</td>\n",
       "      <td>6.0</td>\n",
       "      <td>107.977604</td>\n",
       "      <td>108.470469</td>\n",
       "      <td>104.469187</td>\n",
       "      <td>140.920593</td>\n",
       "      <td>128.591997</td>\n",
       "      <td>103.936747</td>\n",
       "      <td>103.881281</td>\n",
       "      <td>109.564404</td>\n",
       "      <td>108.969128</td>\n",
       "      <td>105.166363</td>\n",
       "      <td>100.003636</td>\n",
       "      <td>100.578183</td>\n",
       "      <td>100.572027</td>\n",
       "      <td>99.868761</td>\n",
       "      <td>91.385531</td>\n",
       "      <td>38.825267</td>\n",
       "      <td>18.179388</td>\n",
       "      <td>85.213601</td>\n",
       "      <td>69.233043</td>\n",
       "      <td>67.389999</td>\n",
       "      <td>87.592748</td>\n",
       "      <td>85.714869</td>\n",
       "      <td>2.136123</td>\n",
       "      <td>2.148268</td>\n",
       "      <td>2.499895</td>\n",
       "      <td>97.800348</td>\n",
       "      <td>99.409174</td>\n",
       "      <td>99.409174</td>\n",
       "      <td>0.972223</td>\n",
       "      <td>45.396501</td>\n",
       "      <td>107.284106</td>\n",
       "      <td>112.286076</td>\n",
       "      <td>102.940380</td>\n",
       "      <td>114.430217</td>\n",
       "      <td>103.134735</td>\n",
       "      <td>103.311302</td>\n",
       "      <td>103.481479</td>\n",
       "      <td>137.280630</td>\n",
       "      <td>80.127147</td>\n",
       "      <td>3.741468</td>\n",
       "      <td>2.935359</td>\n",
       "      <td>4.380205</td>\n",
       "      <td>9.222214</td>\n",
       "      <td>4.274990</td>\n",
       "      <td>4.363511</td>\n",
       "      <td>4.230709</td>\n",
       "      <td>1.797049</td>\n",
       "      <td>7.488099</td>\n",
       "      <td>4.380205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>43</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>518.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1604.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6370.0</td>\n",
       "      <td>2139.0</td>\n",
       "      <td>2785.0</td>\n",
       "      <td>3376.0</td>\n",
       "      <td>3552.0</td>\n",
       "      <td>3738.0</td>\n",
       "      <td>2065.0</td>\n",
       "      <td>587.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:47</td>\n",
       "      <td>11.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4728.02</td>\n",
       "      <td>519.0</td>\n",
       "      <td>175.3</td>\n",
       "      <td>90.4</td>\n",
       "      <td>79.45</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>518.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15.703585</td>\n",
       "      <td>9.215071</td>\n",
       "      <td>74.505083</td>\n",
       "      <td>82.494076</td>\n",
       "      <td>78.406532</td>\n",
       "      <td>1.704120</td>\n",
       "      <td>1.793356</td>\n",
       "      <td>2.287253</td>\n",
       "      <td>95.045045</td>\n",
       "      <td>90.315677</td>\n",
       "      <td>95.024077</td>\n",
       "      <td>32.417582</td>\n",
       "      <td>0.552434</td>\n",
       "      <td>63.359005</td>\n",
       "      <td>57.223114</td>\n",
       "      <td>2.139</td>\n",
       "      <td>2.785</td>\n",
       "      <td>3.376</td>\n",
       "      <td>3.552</td>\n",
       "      <td>3.738</td>\n",
       "      <td>6.370</td>\n",
       "      <td>2.065</td>\n",
       "      <td>0.587</td>\n",
       "      <td>11.0</td>\n",
       "      <td>91.336823</td>\n",
       "      <td>87.852544</td>\n",
       "      <td>91.885568</td>\n",
       "      <td>54.454140</td>\n",
       "      <td>66.956441</td>\n",
       "      <td>95.508112</td>\n",
       "      <td>94.537919</td>\n",
       "      <td>80.613753</td>\n",
       "      <td>82.924045</td>\n",
       "      <td>87.986982</td>\n",
       "      <td>99.079515</td>\n",
       "      <td>96.342212</td>\n",
       "      <td>97.275925</td>\n",
       "      <td>66.254851</td>\n",
       "      <td>81.931257</td>\n",
       "      <td>28.838183</td>\n",
       "      <td>13.762784</td>\n",
       "      <td>81.084641</td>\n",
       "      <td>69.368522</td>\n",
       "      <td>65.135409</td>\n",
       "      <td>86.373895</td>\n",
       "      <td>82.936595</td>\n",
       "      <td>2.113932</td>\n",
       "      <td>2.162649</td>\n",
       "      <td>2.599536</td>\n",
       "      <td>95.928049</td>\n",
       "      <td>97.685092</td>\n",
       "      <td>97.685092</td>\n",
       "      <td>0.833802</td>\n",
       "      <td>39.566807</td>\n",
       "      <td>82.553729</td>\n",
       "      <td>78.021455</td>\n",
       "      <td>90.094238</td>\n",
       "      <td>71.441040</td>\n",
       "      <td>86.950650</td>\n",
       "      <td>87.725776</td>\n",
       "      <td>57.406129</td>\n",
       "      <td>51.551211</td>\n",
       "      <td>104.764695</td>\n",
       "      <td>3.373561</td>\n",
       "      <td>2.741554</td>\n",
       "      <td>4.148989</td>\n",
       "      <td>8.916444</td>\n",
       "      <td>3.882662</td>\n",
       "      <td>4.048981</td>\n",
       "      <td>3.597177</td>\n",
       "      <td>1.138674</td>\n",
       "      <td>10.499720</td>\n",
       "      <td>4.148989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53262</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>812.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1501.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8743.0</td>\n",
       "      <td>2518.0</td>\n",
       "      <td>2961.0</td>\n",
       "      <td>3413.0</td>\n",
       "      <td>3592.0</td>\n",
       "      <td>3748.0</td>\n",
       "      <td>2272.0</td>\n",
       "      <td>460.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10:21</td>\n",
       "      <td>10.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2529.02</td>\n",
       "      <td>813.0</td>\n",
       "      <td>167.5</td>\n",
       "      <td>87.1</td>\n",
       "      <td>84.05</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>812.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.273212</td>\n",
       "      <td>5.261352</td>\n",
       "      <td>79.002134</td>\n",
       "      <td>86.756519</td>\n",
       "      <td>82.433185</td>\n",
       "      <td>2.332711</td>\n",
       "      <td>2.434020</td>\n",
       "      <td>2.952719</td>\n",
       "      <td>95.016704</td>\n",
       "      <td>91.061900</td>\n",
       "      <td>95.837780</td>\n",
       "      <td>25.986503</td>\n",
       "      <td>0.606190</td>\n",
       "      <td>73.776736</td>\n",
       "      <td>67.182497</td>\n",
       "      <td>2.518</td>\n",
       "      <td>2.961</td>\n",
       "      <td>3.413</td>\n",
       "      <td>3.592</td>\n",
       "      <td>3.748</td>\n",
       "      <td>8.743</td>\n",
       "      <td>2.272</td>\n",
       "      <td>0.460</td>\n",
       "      <td>10.0</td>\n",
       "      <td>106.119512</td>\n",
       "      <td>107.361196</td>\n",
       "      <td>103.409029</td>\n",
       "      <td>70.126656</td>\n",
       "      <td>60.134258</td>\n",
       "      <td>102.078104</td>\n",
       "      <td>103.321897</td>\n",
       "      <td>111.680165</td>\n",
       "      <td>111.704950</td>\n",
       "      <td>108.850289</td>\n",
       "      <td>101.294171</td>\n",
       "      <td>101.405733</td>\n",
       "      <td>100.114652</td>\n",
       "      <td>89.583471</td>\n",
       "      <td>78.868110</td>\n",
       "      <td>17.501494</td>\n",
       "      <td>8.749342</td>\n",
       "      <td>76.397714</td>\n",
       "      <td>69.522310</td>\n",
       "      <td>62.576145</td>\n",
       "      <td>84.990332</td>\n",
       "      <td>79.782880</td>\n",
       "      <td>2.088742</td>\n",
       "      <td>2.178972</td>\n",
       "      <td>2.712642</td>\n",
       "      <td>93.802736</td>\n",
       "      <td>95.728026</td>\n",
       "      <td>95.728026</td>\n",
       "      <td>0.676676</td>\n",
       "      <td>32.949317</td>\n",
       "      <td>121.809431</td>\n",
       "      <td>126.008009</td>\n",
       "      <td>117.019991</td>\n",
       "      <td>130.496366</td>\n",
       "      <td>119.319866</td>\n",
       "      <td>117.522064</td>\n",
       "      <td>107.466096</td>\n",
       "      <td>82.858783</td>\n",
       "      <td>85.449963</td>\n",
       "      <td>2.430846</td>\n",
       "      <td>1.998286</td>\n",
       "      <td>3.202872</td>\n",
       "      <td>6.699803</td>\n",
       "      <td>2.860379</td>\n",
       "      <td>3.056447</td>\n",
       "      <td>2.114155</td>\n",
       "      <td>0.555161</td>\n",
       "      <td>11.702755</td>\n",
       "      <td>3.202872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53371</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>689.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>57.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1023.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>8628.0</td>\n",
       "      <td>2617.0</td>\n",
       "      <td>2894.0</td>\n",
       "      <td>3112.0</td>\n",
       "      <td>3254.0</td>\n",
       "      <td>3388.0</td>\n",
       "      <td>4082.0</td>\n",
       "      <td>1489.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:09</td>\n",
       "      <td>14.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4345.78</td>\n",
       "      <td>691.0</td>\n",
       "      <td>167.1</td>\n",
       "      <td>89.6</td>\n",
       "      <td>84.19</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>689.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.949233</td>\n",
       "      <td>17.257765</td>\n",
       "      <td>85.419126</td>\n",
       "      <td>92.994859</td>\n",
       "      <td>88.936693</td>\n",
       "      <td>2.546635</td>\n",
       "      <td>2.651506</td>\n",
       "      <td>2.981341</td>\n",
       "      <td>95.636140</td>\n",
       "      <td>91.853601</td>\n",
       "      <td>96.044864</td>\n",
       "      <td>47.311080</td>\n",
       "      <td>1.204841</td>\n",
       "      <td>84.093830</td>\n",
       "      <td>77.243211</td>\n",
       "      <td>2.617</td>\n",
       "      <td>2.894</td>\n",
       "      <td>3.112</td>\n",
       "      <td>3.254</td>\n",
       "      <td>3.388</td>\n",
       "      <td>8.628</td>\n",
       "      <td>4.082</td>\n",
       "      <td>1.489</td>\n",
       "      <td>14.0</td>\n",
       "      <td>121.070622</td>\n",
       "      <td>121.378778</td>\n",
       "      <td>109.032754</td>\n",
       "      <td>197.917501</td>\n",
       "      <td>159.355158</td>\n",
       "      <td>108.683974</td>\n",
       "      <td>109.674408</td>\n",
       "      <td>121.314840</td>\n",
       "      <td>122.065531</td>\n",
       "      <td>111.840534</td>\n",
       "      <td>101.004885</td>\n",
       "      <td>100.456011</td>\n",
       "      <td>99.486972</td>\n",
       "      <td>162.404114</td>\n",
       "      <td>132.541297</td>\n",
       "      <td>22.205834</td>\n",
       "      <td>10.829750</td>\n",
       "      <td>78.342629</td>\n",
       "      <td>69.458493</td>\n",
       "      <td>63.638152</td>\n",
       "      <td>85.564463</td>\n",
       "      <td>81.091564</td>\n",
       "      <td>2.099195</td>\n",
       "      <td>2.172199</td>\n",
       "      <td>2.665707</td>\n",
       "      <td>94.684668</td>\n",
       "      <td>96.540142</td>\n",
       "      <td>96.540142</td>\n",
       "      <td>0.741878</td>\n",
       "      <td>35.695350</td>\n",
       "      <td>108.130798</td>\n",
       "      <td>117.946921</td>\n",
       "      <td>99.677497</td>\n",
       "      <td>117.196022</td>\n",
       "      <td>100.501521</td>\n",
       "      <td>99.373640</td>\n",
       "      <td>151.519692</td>\n",
       "      <td>203.444393</td>\n",
       "      <td>123.191038</td>\n",
       "      <td>2.676388</td>\n",
       "      <td>2.218795</td>\n",
       "      <td>3.398962</td>\n",
       "      <td>7.362025</td>\n",
       "      <td>3.096471</td>\n",
       "      <td>3.274510</td>\n",
       "      <td>2.694039</td>\n",
       "      <td>0.731895</td>\n",
       "      <td>11.364463</td>\n",
       "      <td>3.398962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53446</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>288.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1013.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>11144.0</td>\n",
       "      <td>3579.0</td>\n",
       "      <td>4389.0</td>\n",
       "      <td>4775.0</td>\n",
       "      <td>4813.0</td>\n",
       "      <td>4815.0</td>\n",
       "      <td>5801.0</td>\n",
       "      <td>2391.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:22</td>\n",
       "      <td>6.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5214.70</td>\n",
       "      <td>289.0</td>\n",
       "      <td>175.6</td>\n",
       "      <td>90.2</td>\n",
       "      <td>63.95</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>288.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49.657321</td>\n",
       "      <td>21.455492</td>\n",
       "      <td>91.152648</td>\n",
       "      <td>91.916230</td>\n",
       "      <td>91.190526</td>\n",
       "      <td>2.314434</td>\n",
       "      <td>2.315396</td>\n",
       "      <td>2.539075</td>\n",
       "      <td>99.210472</td>\n",
       "      <td>99.169263</td>\n",
       "      <td>99.958463</td>\n",
       "      <td>52.054917</td>\n",
       "      <td>1.204777</td>\n",
       "      <td>74.952880</td>\n",
       "      <td>74.330218</td>\n",
       "      <td>3.579</td>\n",
       "      <td>4.389</td>\n",
       "      <td>4.775</td>\n",
       "      <td>4.813</td>\n",
       "      <td>4.815</td>\n",
       "      <td>11.144</td>\n",
       "      <td>5.801</td>\n",
       "      <td>2.391</td>\n",
       "      <td>6.0</td>\n",
       "      <td>108.238000</td>\n",
       "      <td>110.713324</td>\n",
       "      <td>107.553116</td>\n",
       "      <td>131.692502</td>\n",
       "      <td>121.321206</td>\n",
       "      <td>105.099642</td>\n",
       "      <td>106.775739</td>\n",
       "      <td>108.473598</td>\n",
       "      <td>107.698908</td>\n",
       "      <td>101.116008</td>\n",
       "      <td>101.659751</td>\n",
       "      <td>102.414829</td>\n",
       "      <td>100.748198</td>\n",
       "      <td>125.927292</td>\n",
       "      <td>116.340073</td>\n",
       "      <td>37.707022</td>\n",
       "      <td>17.684865</td>\n",
       "      <td>84.751285</td>\n",
       "      <td>69.248212</td>\n",
       "      <td>67.137554</td>\n",
       "      <td>87.456274</td>\n",
       "      <td>85.403788</td>\n",
       "      <td>2.133638</td>\n",
       "      <td>2.149879</td>\n",
       "      <td>2.511051</td>\n",
       "      <td>97.590708</td>\n",
       "      <td>99.216130</td>\n",
       "      <td>99.216130</td>\n",
       "      <td>0.956724</td>\n",
       "      <td>44.743755</td>\n",
       "      <td>113.430986</td>\n",
       "      <td>117.631024</td>\n",
       "      <td>105.150353</td>\n",
       "      <td>115.968917</td>\n",
       "      <td>107.637082</td>\n",
       "      <td>105.896838</td>\n",
       "      <td>135.417298</td>\n",
       "      <td>136.847775</td>\n",
       "      <td>74.975537</td>\n",
       "      <td>3.869313</td>\n",
       "      <td>3.042565</td>\n",
       "      <td>4.579157</td>\n",
       "      <td>9.609471</td>\n",
       "      <td>4.436204</td>\n",
       "      <td>4.544989</td>\n",
       "      <td>4.283795</td>\n",
       "      <td>1.747197</td>\n",
       "      <td>8.002610</td>\n",
       "      <td>4.579157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53490</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>336.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1021.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10680.0</td>\n",
       "      <td>3109.0</td>\n",
       "      <td>3803.0</td>\n",
       "      <td>4118.0</td>\n",
       "      <td>4118.0</td>\n",
       "      <td>4120.0</td>\n",
       "      <td>5086.0</td>\n",
       "      <td>2093.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11:36</td>\n",
       "      <td>2.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3575.18</td>\n",
       "      <td>338.0</td>\n",
       "      <td>176.6</td>\n",
       "      <td>89.1</td>\n",
       "      <td>73.20</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>336.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.800971</td>\n",
       "      <td>19.597378</td>\n",
       "      <td>92.305825</td>\n",
       "      <td>92.350656</td>\n",
       "      <td>92.350656</td>\n",
       "      <td>2.592233</td>\n",
       "      <td>2.593492</td>\n",
       "      <td>2.808309</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>99.951456</td>\n",
       "      <td>99.951456</td>\n",
       "      <td>47.621723</td>\n",
       "      <td>1.234466</td>\n",
       "      <td>75.497814</td>\n",
       "      <td>75.461165</td>\n",
       "      <td>3.109</td>\n",
       "      <td>3.803</td>\n",
       "      <td>4.118</td>\n",
       "      <td>4.118</td>\n",
       "      <td>4.120</td>\n",
       "      <td>10.680</td>\n",
       "      <td>5.086</td>\n",
       "      <td>2.093</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.984590</td>\n",
       "      <td>113.116507</td>\n",
       "      <td>109.926976</td>\n",
       "      <td>141.832529</td>\n",
       "      <td>116.309806</td>\n",
       "      <td>105.875535</td>\n",
       "      <td>108.803780</td>\n",
       "      <td>121.733093</td>\n",
       "      <td>120.481879</td>\n",
       "      <td>111.004645</td>\n",
       "      <td>102.842051</td>\n",
       "      <td>103.928332</td>\n",
       "      <td>101.073419</td>\n",
       "      <td>132.661766</td>\n",
       "      <td>109.121920</td>\n",
       "      <td>35.817574</td>\n",
       "      <td>16.849292</td>\n",
       "      <td>83.970131</td>\n",
       "      <td>69.273843</td>\n",
       "      <td>66.711010</td>\n",
       "      <td>87.225680</td>\n",
       "      <td>84.878169</td>\n",
       "      <td>2.129440</td>\n",
       "      <td>2.152599</td>\n",
       "      <td>2.529902</td>\n",
       "      <td>97.236490</td>\n",
       "      <td>98.889953</td>\n",
       "      <td>98.889953</td>\n",
       "      <td>0.930536</td>\n",
       "      <td>43.640840</td>\n",
       "      <td>99.856314</td>\n",
       "      <td>102.990271</td>\n",
       "      <td>90.622544</td>\n",
       "      <td>111.232362</td>\n",
       "      <td>94.242136</td>\n",
       "      <td>91.616293</td>\n",
       "      <td>121.403866</td>\n",
       "      <td>129.841690</td>\n",
       "      <td>23.081589</td>\n",
       "      <td>3.808472</td>\n",
       "      <td>3.018732</td>\n",
       "      <td>4.546330</td>\n",
       "      <td>9.601522</td>\n",
       "      <td>4.369595</td>\n",
       "      <td>4.494834</td>\n",
       "      <td>4.189323</td>\n",
       "      <td>1.611963</td>\n",
       "      <td>8.664915</td>\n",
       "      <td>4.546330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53495</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>352.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1013.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>13246.0</td>\n",
       "      <td>3631.0</td>\n",
       "      <td>4263.0</td>\n",
       "      <td>4709.0</td>\n",
       "      <td>4801.0</td>\n",
       "      <td>4814.0</td>\n",
       "      <td>5914.0</td>\n",
       "      <td>2323.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>15:54</td>\n",
       "      <td>7.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5080.12</td>\n",
       "      <td>353.0</td>\n",
       "      <td>178.9</td>\n",
       "      <td>93.0</td>\n",
       "      <td>86.30</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>352.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48.255089</td>\n",
       "      <td>17.537370</td>\n",
       "      <td>88.554217</td>\n",
       "      <td>90.528775</td>\n",
       "      <td>88.794001</td>\n",
       "      <td>2.751558</td>\n",
       "      <td>2.759009</td>\n",
       "      <td>3.107202</td>\n",
       "      <td>98.083733</td>\n",
       "      <td>97.818862</td>\n",
       "      <td>99.729954</td>\n",
       "      <td>44.647441</td>\n",
       "      <td>1.228500</td>\n",
       "      <td>77.107666</td>\n",
       "      <td>75.425841</td>\n",
       "      <td>3.631</td>\n",
       "      <td>4.263</td>\n",
       "      <td>4.709</td>\n",
       "      <td>4.801</td>\n",
       "      <td>4.814</td>\n",
       "      <td>13.246</td>\n",
       "      <td>5.914</td>\n",
       "      <td>2.323</td>\n",
       "      <td>7.0</td>\n",
       "      <td>111.295880</td>\n",
       "      <td>113.285292</td>\n",
       "      <td>105.760370</td>\n",
       "      <td>136.935936</td>\n",
       "      <td>105.688167</td>\n",
       "      <td>103.870898</td>\n",
       "      <td>104.812167</td>\n",
       "      <td>129.293138</td>\n",
       "      <td>128.121457</td>\n",
       "      <td>122.539511</td>\n",
       "      <td>100.983935</td>\n",
       "      <td>101.924202</td>\n",
       "      <td>100.951362</td>\n",
       "      <td>133.167902</td>\n",
       "      <td>103.104221</td>\n",
       "      <td>35.239171</td>\n",
       "      <td>16.593504</td>\n",
       "      <td>83.731002</td>\n",
       "      <td>69.281690</td>\n",
       "      <td>66.580436</td>\n",
       "      <td>87.155090</td>\n",
       "      <td>84.717265</td>\n",
       "      <td>2.128155</td>\n",
       "      <td>2.153432</td>\n",
       "      <td>2.535673</td>\n",
       "      <td>97.128055</td>\n",
       "      <td>98.790102</td>\n",
       "      <td>98.790102</td>\n",
       "      <td>0.922520</td>\n",
       "      <td>43.303213</td>\n",
       "      <td>110.051384</td>\n",
       "      <td>118.210349</td>\n",
       "      <td>103.567308</td>\n",
       "      <td>135.284952</td>\n",
       "      <td>105.755754</td>\n",
       "      <td>104.641781</td>\n",
       "      <td>140.458476</td>\n",
       "      <td>146.141756</td>\n",
       "      <td>78.603233</td>\n",
       "      <td>3.873645</td>\n",
       "      <td>3.071643</td>\n",
       "      <td>4.648185</td>\n",
       "      <td>9.791185</td>\n",
       "      <td>4.452713</td>\n",
       "      <td>4.588034</td>\n",
       "      <td>4.210497</td>\n",
       "      <td>1.589553</td>\n",
       "      <td>8.905486</td>\n",
       "      <td>4.648185</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>477 rows Ã— 139 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HAR1  HAR23  HAR26  HAC1E  HAC1F  HAC1G  HAC1O  HAL6  HAL10  HAL1  \\\n",
       "SEQN                                                                       \n",
       "215       2      2      2      2      2      2      2     2      2     2   \n",
       "460       2      2      2      2      2      2      2     2      2     2   \n",
       "576       2      2      2      2      2      2      2     2      2     2   \n",
       "580       2      2      2      2      2      2      2     2      2     2   \n",
       "876       2      2      2      2      2      2      2     2      2     2   \n",
       "...     ...    ...    ...    ...    ...    ...    ...   ...    ...   ...   \n",
       "53262     2      2      2      2      2      2      2     2      2     2   \n",
       "53371     2      2      2      2      2      2      2     2      2     2   \n",
       "53446     2      2      2      2      2      2      2     2      2     2   \n",
       "53490     2      2      2      2      2      2      2     2      2     2   \n",
       "53495     2      2      2      2      2      2      2     2      2     2   \n",
       "\n",
       "       HAL3  HAL5  DMARACER  DMARETHN  DMAETHNR  HSSEX  HSAGEIR  HSAGEU  \\\n",
       "SEQN                                                                      \n",
       "215       2     2         2         2         3      1       32       2   \n",
       "460       2     2         2         2         3      1       22       2   \n",
       "576       2     2         2         2         3      1       21       2   \n",
       "580       2     2         2         2         3      1       21       2   \n",
       "876       2     2         2         2         3      1       43       2   \n",
       "...     ...   ...       ...       ...       ...    ...      ...     ...   \n",
       "53262     2     2         2         2         3      1       67       2   \n",
       "53371     2     2         2         2         3      1       57       2   \n",
       "53446     2     2         2         2         3      1       24       2   \n",
       "53490     2     2         2         2         3      1       28       2   \n",
       "53495     2     2         2         2         3      1       29       2   \n",
       "\n",
       "       HXPAXTMR  HXPSESSR  HSAITMOR  HAR4S  SPPQ1  SPPQ2  SPPQ3  SPPQ4  SPPQ5  \\\n",
       "SEQN                                                                            \n",
       "215         NaN       NaN     388.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "460         NaN       NaN     265.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "576         NaN       NaN     256.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "580         NaN       NaN     260.0    NaN    2.0    2.0    2.0    1.0    2.0   \n",
       "876         NaN       NaN     518.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "...         ...       ...       ...    ...    ...    ...    ...    ...    ...   \n",
       "53262       NaN       NaN     812.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53371       NaN       NaN     689.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53446       NaN       NaN     288.0    NaN    2.0    2.0    2.0    1.0    2.0   \n",
       "53490       NaN       NaN     336.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53495       NaN       NaN     352.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "\n",
       "       SPPMANEU  MYPB1  MYPB3  MYPB11  MYPB27A  MYPB27B  HSAGEIR_exam  \\\n",
       "SEQN                                                                    \n",
       "215         5.0    NaN    NaN     NaN      NaN      NaN          32.0   \n",
       "460         7.0    NaN    NaN     NaN      NaN      NaN          22.0   \n",
       "576         7.0    NaN    NaN     NaN      NaN      NaN          21.0   \n",
       "580         8.0    NaN    NaN     NaN      NaN      NaN          21.0   \n",
       "876         5.0    NaN    NaN     NaN      NaN      NaN          43.0   \n",
       "...         ...    ...    ...     ...      ...      ...           ...   \n",
       "53262       6.0    NaN    NaN     NaN      NaN      NaN          67.0   \n",
       "53371       6.0    NaN    NaN     NaN      NaN      NaN          57.0   \n",
       "53446       6.0    NaN    NaN     NaN      NaN      NaN          24.0   \n",
       "53490       8.0    NaN    NaN     NaN      NaN      NaN          28.0   \n",
       "53495       4.0    NaN    NaN     NaN      NaN      NaN          29.0   \n",
       "\n",
       "       HSAGEU_exam  HXPAXTMR_exam  HXPSESSR_exam  HXPEJ6A2  SPPTECH1  \\\n",
       "SEQN                                                                   \n",
       "215            2.0            NaN            NaN       NaN    1003.0   \n",
       "460            2.0            NaN            NaN       NaN    1006.0   \n",
       "576            2.0            NaN            NaN       NaN    1011.0   \n",
       "580            2.0            NaN            NaN       NaN    1008.0   \n",
       "876            2.0            NaN            NaN       NaN    1604.0   \n",
       "...            ...            ...            ...       ...       ...   \n",
       "53262          2.0            NaN            NaN       NaN    1501.0   \n",
       "53371          2.0            NaN            NaN       NaN    1023.0   \n",
       "53446          2.0            NaN            NaN       NaN    1013.0   \n",
       "53490          2.0            NaN            NaN       NaN    1021.0   \n",
       "53495          2.0            NaN            NaN       NaN    1013.0   \n",
       "\n",
       "       SPPTRIAL  SPPPEAK  SPPFEV05  SPPFEV1  SPPFEV3  SPPFEV6  SPPFVC  \\\n",
       "SEQN                                                                    \n",
       "215         5.0   7938.0    2706.0   3408.0   3948.0   4129.0  4250.0   \n",
       "460         8.0  10720.0    3546.0   4603.0   4746.0   4735.0  4832.0   \n",
       "576        10.0   8707.0    2940.0   3682.0   4239.0   4310.0  4334.0   \n",
       "580         8.0  10553.0    3296.0   4014.0   4409.0   4508.0  4509.0   \n",
       "876         5.0   6370.0    2139.0   2785.0   3376.0   3552.0  3738.0   \n",
       "...         ...      ...       ...      ...      ...      ...     ...   \n",
       "53262       7.0   8743.0    2518.0   2961.0   3413.0   3592.0  3748.0   \n",
       "53371       6.0   8628.0    2617.0   2894.0   3112.0   3254.0  3388.0   \n",
       "53446       6.0  11144.0    3579.0   4389.0   4775.0   4813.0  4815.0   \n",
       "53490       9.0  10680.0    3109.0   3803.0   4118.0   4118.0  4120.0   \n",
       "53495       5.0  13246.0    3631.0   4263.0   4709.0   4801.0  4814.0   \n",
       "\n",
       "       SPPMMEF  SPPFEF75  SPPTYPE  SPPREPRO SPPTIME  SPPEXPIR  SPPTEMP  \\\n",
       "SEQN                                                                     \n",
       "215     3244.0     974.0      1.0       4.0   09:00      12.0     24.0   \n",
       "460     5822.0    2986.0      1.0       4.0   14:35      11.0     25.0   \n",
       "576     4197.0    1525.0      1.0       4.0   14:39       9.0     30.0   \n",
       "580     4378.0    2467.0      1.0       4.0   08:56       6.0     22.0   \n",
       "876     2065.0     587.0      1.0       4.0   09:47      11.0     24.0   \n",
       "...        ...       ...      ...       ...     ...       ...      ...   \n",
       "53262   2272.0     460.0      1.0       4.0   10:21      10.0     22.0   \n",
       "53371   4082.0    1489.0      1.0       4.0   09:09      14.0     24.0   \n",
       "53446   5801.0    2391.0      1.0       4.0   14:22       6.0     23.0   \n",
       "53490   5086.0    2093.0      1.0       4.0   11:36       2.0     24.0   \n",
       "53495   5914.0    2323.0      1.0       4.0   15:54       7.0     23.0   \n",
       "\n",
       "       HSSEX_exam  WTPFHX6  MXPAXTMR  BMPHT  BMPSITHT  BMPWT  DMARACER_exam  \\\n",
       "SEQN                                                                          \n",
       "215           1.0  4821.01     389.0  172.5      84.9  80.25              2   \n",
       "460           1.0  4695.57     265.0  173.8      91.7  60.10              2   \n",
       "576           1.0  3925.56     256.0  167.9      84.7  73.15              2   \n",
       "580           1.0  3822.33     260.0  171.0      86.7  73.45              2   \n",
       "876           1.0  4728.02     519.0  175.3      90.4  79.45              2   \n",
       "...           ...      ...       ...    ...       ...    ...            ...   \n",
       "53262         1.0  2529.02     813.0  167.5      87.1  84.05              2   \n",
       "53371         1.0  4345.78     691.0  167.1      89.6  84.19              2   \n",
       "53446         1.0  5214.70     289.0  175.6      90.2  63.95              2   \n",
       "53490         1.0  3575.18     338.0  176.6      89.1  73.20              2   \n",
       "53495         1.0  5080.12     353.0  178.9      93.0  86.30              2   \n",
       "\n",
       "       DMARETHN_exam  DMAETHNR_exam  HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \\\n",
       "SEQN                                                                        \n",
       "215              2.0            3.0          388.0    NaN     NaN     NaN   \n",
       "460              2.0            3.0          265.0    NaN     NaN     NaN   \n",
       "576              2.0            3.0          256.0    NaN     NaN     NaN   \n",
       "580              2.0            3.0          260.0    NaN     NaN     NaN   \n",
       "876              2.0            3.0          518.0    NaN     NaN     NaN   \n",
       "...              ...            ...            ...    ...     ...     ...   \n",
       "53262            2.0            3.0          812.0    NaN     NaN     NaN   \n",
       "53371            2.0            3.0          689.0    NaN     NaN     NaN   \n",
       "53446            2.0            3.0          288.0    NaN     NaN     NaN   \n",
       "53490            2.0            3.0          336.0    NaN     NaN     NaN   \n",
       "53495            2.0            3.0          352.0    NaN     NaN     NaN   \n",
       "\n",
       "       FEF75OFVC  FEF75OPEFR   FEV1OFVC  FEV1OFEV3  FEV1OFEV6  PEFROFVC  \\\n",
       "SEQN                                                                      \n",
       "215    22.917647   12.270093  80.188235  86.322188  82.538145  1.867765   \n",
       "460    61.796358   27.854478  95.260762  96.986936  97.212249  2.218543   \n",
       "576    35.186894   17.514643  84.956161  86.860109  85.429234  2.008999   \n",
       "580    54.712797   23.377239  89.021956  91.041052  89.041704  2.340430   \n",
       "876    15.703585    9.215071  74.505083  82.494076  78.406532  1.704120   \n",
       "...          ...         ...        ...        ...        ...       ...   \n",
       "53262  12.273212    5.261352  79.002134  86.756519  82.433185  2.332711   \n",
       "53371  43.949233   17.257765  85.419126  92.994859  88.936693  2.546635   \n",
       "53446  49.657321   21.455492  91.152648  91.916230  91.190526  2.314434   \n",
       "53490  50.800971   19.597378  92.305825  92.350656  92.350656  2.592233   \n",
       "53495  48.255089   17.537370  88.554217  90.528775  88.794001  2.751558   \n",
       "\n",
       "       PEFROFEV6  PEFROFEV1   FEV3OFEV6   FEV3OFVC   FEV6OFVC  MMEFOPEFR  \\\n",
       "SEQN                                                                       \n",
       "215     1.922499   2.329225   95.616372  92.894118  97.152941  40.866717   \n",
       "460     2.263992   2.328916  100.232313  98.220199  97.992550  54.309701   \n",
       "576     2.020186   2.364747   98.352668  97.808030  99.446239  48.202596   \n",
       "580     2.340949   2.629048   97.803904  97.782213  99.977822  41.485833   \n",
       "876     1.793356   2.287253   95.045045  90.315677  95.024077  32.417582   \n",
       "...          ...        ...         ...        ...        ...        ...   \n",
       "53262   2.434020   2.952719   95.016704  91.061900  95.837780  25.986503   \n",
       "53371   2.651506   2.981341   95.636140  91.853601  96.044864  47.311080   \n",
       "53446   2.315396   2.539075   99.210472  99.169263  99.958463  52.054917   \n",
       "53490   2.593492   2.808309  100.000000  99.951456  99.951456  47.621723   \n",
       "53495   2.759009   3.107202   98.083733  97.818862  99.729954  44.647441   \n",
       "\n",
       "       MMEFOFVC  FEV05OFEV3  FEV05OFVC  FEV05   FEV1   FEV3   FEV6    FVC  \\\n",
       "SEQN                                                                        \n",
       "215    0.763294   68.541033  63.670588  2.706  3.408  3.948  4.129  4.250   \n",
       "460    1.204884   74.715550  73.385762  3.546  4.603  4.746  4.735  4.832   \n",
       "576    0.968389   69.355980  67.835718  2.940  3.682  4.239  4.310  4.334   \n",
       "580    0.970947   74.756181  73.098248  3.296  4.014  4.409  4.508  4.509   \n",
       "876    0.552434   63.359005  57.223114  2.139  2.785  3.376  3.552  3.738   \n",
       "...         ...         ...        ...    ...    ...    ...    ...    ...   \n",
       "53262  0.606190   73.776736  67.182497  2.518  2.961  3.413  3.592  3.748   \n",
       "53371  1.204841   84.093830  77.243211  2.617  2.894  3.112  3.254  3.388   \n",
       "53446  1.204777   74.952880  74.330218  3.579  4.389  4.775  4.813  4.815   \n",
       "53490  1.234466   75.497814  75.461165  3.109  3.803  4.118  4.118  4.120   \n",
       "53495  1.228500   77.107666  75.425841  3.631  4.263  4.709  4.801  4.814   \n",
       "\n",
       "         PEFR   MMEF  FEF75  EXPIR  FEV05OFEV3PP  FEV05OFVCPP  FEV1OFVCPP  \\\n",
       "SEQN                                                                        \n",
       "215     7.938  3.244  0.974   12.0     98.904067    96.081811   96.429821   \n",
       "460    10.720  5.822  2.986   11.0    107.914841   108.967489  111.895228   \n",
       "576     8.707  4.197  1.525    9.0    100.180598   100.609418   99.623337   \n",
       "580    10.553  4.378  2.467    6.0    107.977604   108.470469  104.469187   \n",
       "876     6.370  2.065  0.587   11.0     91.336823    87.852544   91.885568   \n",
       "...       ...    ...    ...    ...           ...          ...         ...   \n",
       "53262   8.743  2.272  0.460   10.0    106.119512   107.361196  103.409029   \n",
       "53371   8.628  4.082  1.489   14.0    121.070622   121.378778  109.032754   \n",
       "53446  11.144  5.801  2.391    6.0    108.238000   110.713324  107.553116   \n",
       "53490  10.680  5.086  2.093    2.0    108.984590   113.116507  109.926976   \n",
       "53495  13.246  5.914  2.323    7.0    111.295880   113.285292  105.760370   \n",
       "\n",
       "       FEF75OFVCPP  FEF75OPEFRPP  FEV1OFEV3PP  FEV1OFEV6PP  PEFROFVCPP  \\\n",
       "SEQN                                                                     \n",
       "215      67.701526     76.785924    99.237247    97.873915   87.891905   \n",
       "460     159.959650    153.942102   110.754600   113.484530  103.879235   \n",
       "576      90.270238     95.983279    99.142279    99.616895   94.033747   \n",
       "580     140.920593    128.591997   103.936747   103.881281  109.564404   \n",
       "876      54.454140     66.956441    95.508112    94.537919   80.613753   \n",
       "...            ...           ...          ...          ...         ...   \n",
       "53262    70.126656     60.134258   102.078104   103.321897  111.680165   \n",
       "53371   197.917501    159.355158   108.683974   109.674408  121.314840   \n",
       "53446   131.692502    121.321206   105.099642   106.775739  108.473598   \n",
       "53490   141.832529    116.309806   105.875535   108.803780  121.733093   \n",
       "53495   136.935936    105.688167   103.870898   104.812167  129.293138   \n",
       "\n",
       "       PEFROFEV6PP  PEFROFEV1PP  FEV3OFEV6PP  FEV3OFVCPP  FEV6OFVCPP  \\\n",
       "SEQN                                                                   \n",
       "215      89.193275    91.359263    98.708094   97.282441   98.581924   \n",
       "460     105.373190    93.088933   102.524553  101.098462   98.607971   \n",
       "576      94.047579    94.652146   100.535018  100.549224  100.010497   \n",
       "580     108.969128   105.166363   100.003636  100.578183  100.572027   \n",
       "876      82.924045    87.986982    99.079515   96.342212   97.275925   \n",
       "...            ...          ...          ...         ...         ...   \n",
       "53262   111.704950   108.850289   101.294171  101.405733  100.114652   \n",
       "53371   122.065531   111.840534   101.004885  100.456011   99.486972   \n",
       "53446   107.698908   101.116008   101.659751  102.414829  100.748198   \n",
       "53490   120.481879   111.004645   102.842051  103.928332  101.073419   \n",
       "53495   128.121457   122.539511   100.983935  101.924202  100.951362   \n",
       "\n",
       "       MMEFOFVCPP  MMEFOPEFRPP  FEF75OFVCPred  FEF75OPEFRPred  FEV1OFVCPred  \\\n",
       "SEQN                                                                          \n",
       "215     84.502510    96.173029      33.851005       15.979613     83.157092   \n",
       "460    124.272417   119.931435      38.632466       18.094126     85.133891   \n",
       "576     99.387166   105.971131      38.979508       18.247599     85.277369   \n",
       "580     99.868761    91.385531      38.825267       18.179388     85.213601   \n",
       "876     66.254851    81.931257      28.838183       13.762784     81.084641   \n",
       "...           ...          ...            ...             ...           ...   \n",
       "53262   89.583471    78.868110      17.501494        8.749342     76.397714   \n",
       "53371  162.404114   132.541297      22.205834       10.829750     78.342629   \n",
       "53446  125.927292   116.340073      37.707022       17.684865     84.751285   \n",
       "53490  132.661766   109.121920      35.817574       16.849292     83.970131   \n",
       "53495  133.167902   103.104221      35.239171       16.593504     83.731002   \n",
       "\n",
       "       FEV05OFEV3Pred  FEV05OFVCPred  FEV1OFEV3Pred  FEV1OFEV6Pred  \\\n",
       "SEQN                                                                 \n",
       "215         69.300521      66.267056      86.985674      84.331096   \n",
       "460         69.235658      67.346474      87.569218      85.661234   \n",
       "576         69.230950      67.424819      87.611572      85.757777   \n",
       "580         69.233043      67.389999      87.592748      85.714869   \n",
       "876         69.368522      65.135409      86.373895      82.936595   \n",
       "...               ...            ...            ...            ...   \n",
       "53262       69.522310      62.576145      84.990332      79.782880   \n",
       "53371       69.458493      63.638152      85.564463      81.091564   \n",
       "53446       69.248212      67.137554      87.456274      85.403788   \n",
       "53490       69.273843      66.711010      87.225680      84.878169   \n",
       "53495       69.281690      66.580436      87.155090      84.717265   \n",
       "\n",
       "       PEFROFVCPred  PEFROFEV6Pred  PEFROFEV1Pred  FEV3OFEV6Pred  \\\n",
       "SEQN                                                               \n",
       "215        2.125070       2.155431       2.549523      96.867813   \n",
       "460        2.135694       2.148546       2.501818      97.764203   \n",
       "576        2.136466       2.148046       2.498356      97.829264   \n",
       "580        2.136123       2.148268       2.499895      97.800348   \n",
       "876        2.113932       2.162649       2.599536      95.928049   \n",
       "...             ...            ...            ...            ...   \n",
       "53262      2.088742       2.178972       2.712642      93.802736   \n",
       "53371      2.099195       2.172199       2.665707      94.684668   \n",
       "53446      2.133638       2.149879       2.511051      97.590708   \n",
       "53490      2.129440       2.152599       2.529902      97.236490   \n",
       "53495      2.128155       2.153432       2.535673      97.128055   \n",
       "\n",
       "       FEV3OFVCPred  FEV6OFVCPred  MMEFOFVCPred  MMEFOPEFRPred      FEV1PP  \\\n",
       "SEQN                                                                         \n",
       "215       98.550462     98.550462      0.903280      42.492908   96.476640   \n",
       "460       99.375891     99.375891      0.969551      45.283959  119.711023   \n",
       "576       99.435801     99.435801      0.974361      45.486535  101.552903   \n",
       "580       99.409174     99.409174      0.972223      45.396501  107.284106   \n",
       "876       97.685092     97.685092      0.833802      39.566807   82.553729   \n",
       "...             ...           ...           ...            ...         ...   \n",
       "53262     95.728026     95.728026      0.676676      32.949317  121.809431   \n",
       "53371     96.540142     96.540142      0.741878      35.695350  108.130798   \n",
       "53446     99.216130     99.216130      0.956724      44.743755  113.430986   \n",
       "53490     98.889953     98.889953      0.930536      43.640840   99.856314   \n",
       "53495     98.790102     98.790102      0.922520      43.303213  110.051384   \n",
       "\n",
       "          FEV05PP       FVCPP      PEFRPP      FEV3PP      FEV6PP      MMEFPP  \\\n",
       "SEQN                                                                            \n",
       "215     95.463627  100.498374   87.462163   97.704425   99.037933   82.257043   \n",
       "460    117.675463  106.823621  113.078171  107.787457  105.217419  135.665202   \n",
       "576    103.195021  102.656633   97.406047  102.587862  102.334385  100.856282   \n",
       "580    112.286076  102.940380  114.430217  103.134735  103.311302  103.481479   \n",
       "876     78.021455   90.094238   71.441040   86.950650   87.725776   57.406129   \n",
       "...           ...         ...         ...         ...         ...         ...   \n",
       "53262  126.008009  117.019991  130.496366  119.319866  117.522064  107.466096   \n",
       "53371  117.946921   99.677497  117.196022  100.501521   99.373640  151.519692   \n",
       "53446  117.631024  105.150353  115.968917  107.637082  105.896838  135.417298   \n",
       "53490  102.990271   90.622544  111.232362   94.242136   91.616293  121.403866   \n",
       "53495  118.210349  103.567308  135.284952  105.755754  104.641781  140.458476   \n",
       "\n",
       "          FEF75PP     EXPIRPP  FEV1Pred  FEV05Pred   FVCPred  PEFRPred  \\\n",
       "SEQN                                                                     \n",
       "215     67.843411  130.864301  3.532461   2.834587  4.228924  9.075925   \n",
       "460    165.413740  144.243196  3.845093   3.013372  4.523344  9.480168   \n",
       "576     85.491865  122.314332  3.625696   2.848975  4.221841  8.938870   \n",
       "580    137.280630   80.127147  3.741468   2.935359  4.380205  9.222214   \n",
       "876     51.551211  104.764695  3.373561   2.741554  4.148989  8.916444   \n",
       "...           ...         ...       ...        ...       ...       ...   \n",
       "53262   82.858783   85.449963  2.430846   1.998286  3.202872  6.699803   \n",
       "53371  203.444393  123.191038  2.676388   2.218795  3.398962  7.362025   \n",
       "53446  136.847775   74.975537  3.869313   3.042565  4.579157  9.609471   \n",
       "53490  129.841690   23.081589  3.808472   3.018732  4.546330  9.601522   \n",
       "53495  146.141756   78.603233  3.873645   3.071643  4.648185  9.791185   \n",
       "\n",
       "       FEV3Pred  FEV6Pred  MMEFPred  FEF75Pred  EXPIRPred  predFVCmFEV6  \n",
       "SEQN                                                                     \n",
       "215    4.040759  4.169110  3.943735   1.435659   9.169804      4.228924  \n",
       "460    4.403110  4.500205  4.291447   1.805170   7.626010      4.523344  \n",
       "576    4.132068  4.211683  4.161367   1.783795   7.358091      4.221841  \n",
       "580    4.274990  4.363511  4.230709   1.797049   7.488099      4.380205  \n",
       "876    3.882662  4.048981  3.597177   1.138674  10.499720      4.148989  \n",
       "...         ...       ...       ...        ...        ...           ...  \n",
       "53262  2.860379  3.056447  2.114155   0.555161  11.702755      3.202872  \n",
       "53371  3.096471  3.274510  2.694039   0.731895  11.364463      3.398962  \n",
       "53446  4.436204  4.544989  4.283795   1.747197   8.002610      4.579157  \n",
       "53490  4.369595  4.494834  4.189323   1.611963   8.664915      4.546330  \n",
       "53495  4.452713  4.588034  4.210497   1.589553   8.905486      4.648185  \n",
       "\n",
       "[477 rows x 139 columns]"
      ]
     },
     "execution_count": 283,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m20overb[m20overb.MMEFPP > 20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Has many values as 88888 for SPPTIME, and 8888.0 SPPFEF75 AND SPPFEV05, 88888.0 for SPPMMEF, SPPFEV3, SPPFEV05, SPPFEV6\n",
    "  from NHANES doc, SPPPEAK 1596 with 8888\n",
    "  SPPFEV05 1832 with 8888\n",
    "  SPPFEV1 1596 with 8888\n",
    "  SPPFEV3 1832 with 88888\n",
    "  SPPFEV6 1832 with 88888\n",
    "  SPPFVC 1596 with 88888\n",
    "  SPPMMEF 1832 with 88888\n",
    "  SPPEXPIR 1638 with 88\n",
    "  so need replace those in adult and youth files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So when doing analysis need ignore values of 8888"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>HAL3</th>\n",
       "      <th>HAL5</th>\n",
       "      <th>DMARACER</th>\n",
       "      <th>DMARETHN</th>\n",
       "      <th>DMAETHNR</th>\n",
       "      <th>HSSEX</th>\n",
       "      <th>HSAGEIR</th>\n",
       "      <th>HSAGEU</th>\n",
       "      <th>HXPAXTMR</th>\n",
       "      <th>HXPSESSR</th>\n",
       "      <th>HSAITMOR</th>\n",
       "      <th>HAR4S</th>\n",
       "      <th>SPPQ1</th>\n",
       "      <th>SPPQ2</th>\n",
       "      <th>SPPQ3</th>\n",
       "      <th>SPPQ4</th>\n",
       "      <th>SPPQ5</th>\n",
       "      <th>SPPMANEU</th>\n",
       "      <th>MYPB1</th>\n",
       "      <th>MYPB3</th>\n",
       "      <th>MYPB11</th>\n",
       "      <th>MYPB27A</th>\n",
       "      <th>MYPB27B</th>\n",
       "      <th>HSAGEIR_exam</th>\n",
       "      <th>HSAGEU_exam</th>\n",
       "      <th>HXPAXTMR_exam</th>\n",
       "      <th>HXPSESSR_exam</th>\n",
       "      <th>HXPEJ6A2</th>\n",
       "      <th>SPPTECH1</th>\n",
       "      <th>SPPTRIAL</th>\n",
       "      <th>SPPPEAK</th>\n",
       "      <th>SPPFEV05</th>\n",
       "      <th>SPPFEV1</th>\n",
       "      <th>SPPFEV3</th>\n",
       "      <th>SPPFEV6</th>\n",
       "      <th>SPPFVC</th>\n",
       "      <th>SPPMMEF</th>\n",
       "      <th>SPPFEF75</th>\n",
       "      <th>SPPTYPE</th>\n",
       "      <th>SPPREPRO</th>\n",
       "      <th>SPPTIME</th>\n",
       "      <th>SPPEXPIR</th>\n",
       "      <th>SPPTEMP</th>\n",
       "      <th>HSSEX_exam</th>\n",
       "      <th>WTPFHX6</th>\n",
       "      <th>MXPAXTMR</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "      <th>FEF75OFVC</th>\n",
       "      <th>FEF75OPEFR</th>\n",
       "      <th>FEV1OFVC</th>\n",
       "      <th>FEV1OFEV3</th>\n",
       "      <th>FEV1OFEV6</th>\n",
       "      <th>PEFROFVC</th>\n",
       "      <th>PEFROFEV6</th>\n",
       "      <th>PEFROFEV1</th>\n",
       "      <th>FEV3OFEV6</th>\n",
       "      <th>FEV3OFVC</th>\n",
       "      <th>FEV6OFVC</th>\n",
       "      <th>MMEFOPEFR</th>\n",
       "      <th>MMEFOFVC</th>\n",
       "      <th>FEV05OFEV3</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "      <th>FEV05OFEV3PP</th>\n",
       "      <th>FEV05OFVCPP</th>\n",
       "      <th>FEV1OFVCPP</th>\n",
       "      <th>FEF75OFVCPP</th>\n",
       "      <th>FEF75OPEFRPP</th>\n",
       "      <th>FEV1OFEV3PP</th>\n",
       "      <th>FEV1OFEV6PP</th>\n",
       "      <th>PEFROFVCPP</th>\n",
       "      <th>PEFROFEV6PP</th>\n",
       "      <th>PEFROFEV1PP</th>\n",
       "      <th>FEV3OFEV6PP</th>\n",
       "      <th>FEV3OFVCPP</th>\n",
       "      <th>FEV6OFVCPP</th>\n",
       "      <th>MMEFOFVCPP</th>\n",
       "      <th>MMEFOPEFRPP</th>\n",
       "      <th>FEF75OFVCPred</th>\n",
       "      <th>FEF75OPEFRPred</th>\n",
       "      <th>FEV1OFVCPred</th>\n",
       "      <th>FEV05OFEV3Pred</th>\n",
       "      <th>FEV05OFVCPred</th>\n",
       "      <th>FEV1OFEV3Pred</th>\n",
       "      <th>FEV1OFEV6Pred</th>\n",
       "      <th>PEFROFVCPred</th>\n",
       "      <th>PEFROFEV6Pred</th>\n",
       "      <th>PEFROFEV1Pred</th>\n",
       "      <th>FEV3OFEV6Pred</th>\n",
       "      <th>FEV3OFVCPred</th>\n",
       "      <th>FEV6OFVCPred</th>\n",
       "      <th>MMEFOFVCPred</th>\n",
       "      <th>MMEFOPEFRPred</th>\n",
       "      <th>FEV1PP</th>\n",
       "      <th>FEV05PP</th>\n",
       "      <th>FVCPP</th>\n",
       "      <th>PEFRPP</th>\n",
       "      <th>FEV3PP</th>\n",
       "      <th>FEV6PP</th>\n",
       "      <th>MMEFPP</th>\n",
       "      <th>FEF75PP</th>\n",
       "      <th>EXPIRPP</th>\n",
       "      <th>FEV1Pred</th>\n",
       "      <th>FEV05Pred</th>\n",
       "      <th>FVCPred</th>\n",
       "      <th>PEFRPred</th>\n",
       "      <th>FEV3Pred</th>\n",
       "      <th>FEV6Pred</th>\n",
       "      <th>MMEFPred</th>\n",
       "      <th>FEF75Pred</th>\n",
       "      <th>EXPIRPred</th>\n",
       "      <th>predFVCmFEV6</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>388.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7938.0</td>\n",
       "      <td>2706.0</td>\n",
       "      <td>3408.0</td>\n",
       "      <td>3948.0</td>\n",
       "      <td>4129.0</td>\n",
       "      <td>4250.0</td>\n",
       "      <td>3244.0</td>\n",
       "      <td>974.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4821.01</td>\n",
       "      <td>389.0</td>\n",
       "      <td>172.5</td>\n",
       "      <td>84.9</td>\n",
       "      <td>80.25</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>388.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.917647</td>\n",
       "      <td>12.270093</td>\n",
       "      <td>80.188235</td>\n",
       "      <td>86.322188</td>\n",
       "      <td>82.538145</td>\n",
       "      <td>1.867765</td>\n",
       "      <td>1.922499</td>\n",
       "      <td>2.329225</td>\n",
       "      <td>95.616372</td>\n",
       "      <td>92.894118</td>\n",
       "      <td>97.152941</td>\n",
       "      <td>40.866717</td>\n",
       "      <td>0.763294</td>\n",
       "      <td>68.541033</td>\n",
       "      <td>63.670588</td>\n",
       "      <td>2.706</td>\n",
       "      <td>3.408</td>\n",
       "      <td>3.948</td>\n",
       "      <td>4.129</td>\n",
       "      <td>4.250</td>\n",
       "      <td>7.938</td>\n",
       "      <td>3.244</td>\n",
       "      <td>0.974</td>\n",
       "      <td>12.0</td>\n",
       "      <td>98.904067</td>\n",
       "      <td>96.081811</td>\n",
       "      <td>96.429821</td>\n",
       "      <td>67.701526</td>\n",
       "      <td>76.785924</td>\n",
       "      <td>99.237247</td>\n",
       "      <td>97.873915</td>\n",
       "      <td>87.891905</td>\n",
       "      <td>89.193275</td>\n",
       "      <td>91.359263</td>\n",
       "      <td>98.708094</td>\n",
       "      <td>97.282441</td>\n",
       "      <td>98.581924</td>\n",
       "      <td>84.502510</td>\n",
       "      <td>96.173029</td>\n",
       "      <td>33.851005</td>\n",
       "      <td>15.979613</td>\n",
       "      <td>83.157092</td>\n",
       "      <td>69.300521</td>\n",
       "      <td>66.267056</td>\n",
       "      <td>86.985674</td>\n",
       "      <td>84.331096</td>\n",
       "      <td>2.125070</td>\n",
       "      <td>2.155431</td>\n",
       "      <td>2.549523</td>\n",
       "      <td>96.867813</td>\n",
       "      <td>98.550462</td>\n",
       "      <td>98.550462</td>\n",
       "      <td>0.903280</td>\n",
       "      <td>42.492908</td>\n",
       "      <td>96.476640</td>\n",
       "      <td>95.463627</td>\n",
       "      <td>100.498374</td>\n",
       "      <td>87.462163</td>\n",
       "      <td>97.704425</td>\n",
       "      <td>99.037933</td>\n",
       "      <td>82.257043</td>\n",
       "      <td>67.843411</td>\n",
       "      <td>130.864301</td>\n",
       "      <td>3.532461</td>\n",
       "      <td>2.834587</td>\n",
       "      <td>4.228924</td>\n",
       "      <td>9.075925</td>\n",
       "      <td>4.040759</td>\n",
       "      <td>4.169110</td>\n",
       "      <td>3.943735</td>\n",
       "      <td>1.435659</td>\n",
       "      <td>9.169804</td>\n",
       "      <td>4.228924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>460</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>265.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10720.0</td>\n",
       "      <td>3546.0</td>\n",
       "      <td>4603.0</td>\n",
       "      <td>4746.0</td>\n",
       "      <td>4735.0</td>\n",
       "      <td>4832.0</td>\n",
       "      <td>5822.0</td>\n",
       "      <td>2986.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:35</td>\n",
       "      <td>11.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4695.57</td>\n",
       "      <td>265.0</td>\n",
       "      <td>173.8</td>\n",
       "      <td>91.7</td>\n",
       "      <td>60.10</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>265.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>61.796358</td>\n",
       "      <td>27.854478</td>\n",
       "      <td>95.260762</td>\n",
       "      <td>96.986936</td>\n",
       "      <td>97.212249</td>\n",
       "      <td>2.218543</td>\n",
       "      <td>2.263992</td>\n",
       "      <td>2.328916</td>\n",
       "      <td>100.232313</td>\n",
       "      <td>98.220199</td>\n",
       "      <td>97.992550</td>\n",
       "      <td>54.309701</td>\n",
       "      <td>1.204884</td>\n",
       "      <td>74.715550</td>\n",
       "      <td>73.385762</td>\n",
       "      <td>3.546</td>\n",
       "      <td>4.603</td>\n",
       "      <td>4.746</td>\n",
       "      <td>4.735</td>\n",
       "      <td>4.832</td>\n",
       "      <td>10.720</td>\n",
       "      <td>5.822</td>\n",
       "      <td>2.986</td>\n",
       "      <td>11.0</td>\n",
       "      <td>107.914841</td>\n",
       "      <td>108.967489</td>\n",
       "      <td>111.895228</td>\n",
       "      <td>159.959650</td>\n",
       "      <td>153.942102</td>\n",
       "      <td>110.754600</td>\n",
       "      <td>113.484530</td>\n",
       "      <td>103.879235</td>\n",
       "      <td>105.373190</td>\n",
       "      <td>93.088933</td>\n",
       "      <td>102.524553</td>\n",
       "      <td>101.098462</td>\n",
       "      <td>98.607971</td>\n",
       "      <td>124.272417</td>\n",
       "      <td>119.931435</td>\n",
       "      <td>38.632466</td>\n",
       "      <td>18.094126</td>\n",
       "      <td>85.133891</td>\n",
       "      <td>69.235658</td>\n",
       "      <td>67.346474</td>\n",
       "      <td>87.569218</td>\n",
       "      <td>85.661234</td>\n",
       "      <td>2.135694</td>\n",
       "      <td>2.148546</td>\n",
       "      <td>2.501818</td>\n",
       "      <td>97.764203</td>\n",
       "      <td>99.375891</td>\n",
       "      <td>99.375891</td>\n",
       "      <td>0.969551</td>\n",
       "      <td>45.283959</td>\n",
       "      <td>119.711023</td>\n",
       "      <td>117.675463</td>\n",
       "      <td>106.823621</td>\n",
       "      <td>113.078171</td>\n",
       "      <td>107.787457</td>\n",
       "      <td>105.217419</td>\n",
       "      <td>135.665202</td>\n",
       "      <td>165.413740</td>\n",
       "      <td>144.243196</td>\n",
       "      <td>3.845093</td>\n",
       "      <td>3.013372</td>\n",
       "      <td>4.523344</td>\n",
       "      <td>9.480168</td>\n",
       "      <td>4.403110</td>\n",
       "      <td>4.500205</td>\n",
       "      <td>4.291447</td>\n",
       "      <td>1.805170</td>\n",
       "      <td>7.626010</td>\n",
       "      <td>4.523344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>576</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>256.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1011.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8707.0</td>\n",
       "      <td>2940.0</td>\n",
       "      <td>3682.0</td>\n",
       "      <td>4239.0</td>\n",
       "      <td>4310.0</td>\n",
       "      <td>4334.0</td>\n",
       "      <td>4197.0</td>\n",
       "      <td>1525.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:39</td>\n",
       "      <td>9.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3925.56</td>\n",
       "      <td>256.0</td>\n",
       "      <td>167.9</td>\n",
       "      <td>84.7</td>\n",
       "      <td>73.15</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.186894</td>\n",
       "      <td>17.514643</td>\n",
       "      <td>84.956161</td>\n",
       "      <td>86.860109</td>\n",
       "      <td>85.429234</td>\n",
       "      <td>2.008999</td>\n",
       "      <td>2.020186</td>\n",
       "      <td>2.364747</td>\n",
       "      <td>98.352668</td>\n",
       "      <td>97.808030</td>\n",
       "      <td>99.446239</td>\n",
       "      <td>48.202596</td>\n",
       "      <td>0.968389</td>\n",
       "      <td>69.355980</td>\n",
       "      <td>67.835718</td>\n",
       "      <td>2.940</td>\n",
       "      <td>3.682</td>\n",
       "      <td>4.239</td>\n",
       "      <td>4.310</td>\n",
       "      <td>4.334</td>\n",
       "      <td>8.707</td>\n",
       "      <td>4.197</td>\n",
       "      <td>1.525</td>\n",
       "      <td>9.0</td>\n",
       "      <td>100.180598</td>\n",
       "      <td>100.609418</td>\n",
       "      <td>99.623337</td>\n",
       "      <td>90.270238</td>\n",
       "      <td>95.983279</td>\n",
       "      <td>99.142279</td>\n",
       "      <td>99.616895</td>\n",
       "      <td>94.033747</td>\n",
       "      <td>94.047579</td>\n",
       "      <td>94.652146</td>\n",
       "      <td>100.535018</td>\n",
       "      <td>100.549224</td>\n",
       "      <td>100.010497</td>\n",
       "      <td>99.387166</td>\n",
       "      <td>105.971131</td>\n",
       "      <td>38.979508</td>\n",
       "      <td>18.247599</td>\n",
       "      <td>85.277369</td>\n",
       "      <td>69.230950</td>\n",
       "      <td>67.424819</td>\n",
       "      <td>87.611572</td>\n",
       "      <td>85.757777</td>\n",
       "      <td>2.136466</td>\n",
       "      <td>2.148046</td>\n",
       "      <td>2.498356</td>\n",
       "      <td>97.829264</td>\n",
       "      <td>99.435801</td>\n",
       "      <td>99.435801</td>\n",
       "      <td>0.974361</td>\n",
       "      <td>45.486535</td>\n",
       "      <td>101.552903</td>\n",
       "      <td>103.195021</td>\n",
       "      <td>102.656633</td>\n",
       "      <td>97.406047</td>\n",
       "      <td>102.587862</td>\n",
       "      <td>102.334385</td>\n",
       "      <td>100.856282</td>\n",
       "      <td>85.491865</td>\n",
       "      <td>122.314332</td>\n",
       "      <td>3.625696</td>\n",
       "      <td>2.848975</td>\n",
       "      <td>4.221841</td>\n",
       "      <td>8.938870</td>\n",
       "      <td>4.132068</td>\n",
       "      <td>4.211683</td>\n",
       "      <td>4.161367</td>\n",
       "      <td>1.783795</td>\n",
       "      <td>7.358091</td>\n",
       "      <td>4.221841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>580</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>260.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1008.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10553.0</td>\n",
       "      <td>3296.0</td>\n",
       "      <td>4014.0</td>\n",
       "      <td>4409.0</td>\n",
       "      <td>4508.0</td>\n",
       "      <td>4509.0</td>\n",
       "      <td>4378.0</td>\n",
       "      <td>2467.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>08:56</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3822.33</td>\n",
       "      <td>260.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>86.7</td>\n",
       "      <td>73.45</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>260.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>54.712797</td>\n",
       "      <td>23.377239</td>\n",
       "      <td>89.021956</td>\n",
       "      <td>91.041052</td>\n",
       "      <td>89.041704</td>\n",
       "      <td>2.340430</td>\n",
       "      <td>2.340949</td>\n",
       "      <td>2.629048</td>\n",
       "      <td>97.803904</td>\n",
       "      <td>97.782213</td>\n",
       "      <td>99.977822</td>\n",
       "      <td>41.485833</td>\n",
       "      <td>0.970947</td>\n",
       "      <td>74.756181</td>\n",
       "      <td>73.098248</td>\n",
       "      <td>3.296</td>\n",
       "      <td>4.014</td>\n",
       "      <td>4.409</td>\n",
       "      <td>4.508</td>\n",
       "      <td>4.509</td>\n",
       "      <td>10.553</td>\n",
       "      <td>4.378</td>\n",
       "      <td>2.467</td>\n",
       "      <td>6.0</td>\n",
       "      <td>107.977604</td>\n",
       "      <td>108.470469</td>\n",
       "      <td>104.469187</td>\n",
       "      <td>140.920593</td>\n",
       "      <td>128.591997</td>\n",
       "      <td>103.936747</td>\n",
       "      <td>103.881281</td>\n",
       "      <td>109.564404</td>\n",
       "      <td>108.969128</td>\n",
       "      <td>105.166363</td>\n",
       "      <td>100.003636</td>\n",
       "      <td>100.578183</td>\n",
       "      <td>100.572027</td>\n",
       "      <td>99.868761</td>\n",
       "      <td>91.385531</td>\n",
       "      <td>38.825267</td>\n",
       "      <td>18.179388</td>\n",
       "      <td>85.213601</td>\n",
       "      <td>69.233043</td>\n",
       "      <td>67.389999</td>\n",
       "      <td>87.592748</td>\n",
       "      <td>85.714869</td>\n",
       "      <td>2.136123</td>\n",
       "      <td>2.148268</td>\n",
       "      <td>2.499895</td>\n",
       "      <td>97.800348</td>\n",
       "      <td>99.409174</td>\n",
       "      <td>99.409174</td>\n",
       "      <td>0.972223</td>\n",
       "      <td>45.396501</td>\n",
       "      <td>107.284106</td>\n",
       "      <td>112.286076</td>\n",
       "      <td>102.940380</td>\n",
       "      <td>114.430217</td>\n",
       "      <td>103.134735</td>\n",
       "      <td>103.311302</td>\n",
       "      <td>103.481479</td>\n",
       "      <td>137.280630</td>\n",
       "      <td>80.127147</td>\n",
       "      <td>3.741468</td>\n",
       "      <td>2.935359</td>\n",
       "      <td>4.380205</td>\n",
       "      <td>9.222214</td>\n",
       "      <td>4.274990</td>\n",
       "      <td>4.363511</td>\n",
       "      <td>4.230709</td>\n",
       "      <td>1.797049</td>\n",
       "      <td>7.488099</td>\n",
       "      <td>4.380205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>43</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>518.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1604.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6370.0</td>\n",
       "      <td>2139.0</td>\n",
       "      <td>2785.0</td>\n",
       "      <td>3376.0</td>\n",
       "      <td>3552.0</td>\n",
       "      <td>3738.0</td>\n",
       "      <td>2065.0</td>\n",
       "      <td>587.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:47</td>\n",
       "      <td>11.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4728.02</td>\n",
       "      <td>519.0</td>\n",
       "      <td>175.3</td>\n",
       "      <td>90.4</td>\n",
       "      <td>79.45</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>518.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15.703585</td>\n",
       "      <td>9.215071</td>\n",
       "      <td>74.505083</td>\n",
       "      <td>82.494076</td>\n",
       "      <td>78.406532</td>\n",
       "      <td>1.704120</td>\n",
       "      <td>1.793356</td>\n",
       "      <td>2.287253</td>\n",
       "      <td>95.045045</td>\n",
       "      <td>90.315677</td>\n",
       "      <td>95.024077</td>\n",
       "      <td>32.417582</td>\n",
       "      <td>0.552434</td>\n",
       "      <td>63.359005</td>\n",
       "      <td>57.223114</td>\n",
       "      <td>2.139</td>\n",
       "      <td>2.785</td>\n",
       "      <td>3.376</td>\n",
       "      <td>3.552</td>\n",
       "      <td>3.738</td>\n",
       "      <td>6.370</td>\n",
       "      <td>2.065</td>\n",
       "      <td>0.587</td>\n",
       "      <td>11.0</td>\n",
       "      <td>91.336823</td>\n",
       "      <td>87.852544</td>\n",
       "      <td>91.885568</td>\n",
       "      <td>54.454140</td>\n",
       "      <td>66.956441</td>\n",
       "      <td>95.508112</td>\n",
       "      <td>94.537919</td>\n",
       "      <td>80.613753</td>\n",
       "      <td>82.924045</td>\n",
       "      <td>87.986982</td>\n",
       "      <td>99.079515</td>\n",
       "      <td>96.342212</td>\n",
       "      <td>97.275925</td>\n",
       "      <td>66.254851</td>\n",
       "      <td>81.931257</td>\n",
       "      <td>28.838183</td>\n",
       "      <td>13.762784</td>\n",
       "      <td>81.084641</td>\n",
       "      <td>69.368522</td>\n",
       "      <td>65.135409</td>\n",
       "      <td>86.373895</td>\n",
       "      <td>82.936595</td>\n",
       "      <td>2.113932</td>\n",
       "      <td>2.162649</td>\n",
       "      <td>2.599536</td>\n",
       "      <td>95.928049</td>\n",
       "      <td>97.685092</td>\n",
       "      <td>97.685092</td>\n",
       "      <td>0.833802</td>\n",
       "      <td>39.566807</td>\n",
       "      <td>82.553729</td>\n",
       "      <td>78.021455</td>\n",
       "      <td>90.094238</td>\n",
       "      <td>71.441040</td>\n",
       "      <td>86.950650</td>\n",
       "      <td>87.725776</td>\n",
       "      <td>57.406129</td>\n",
       "      <td>51.551211</td>\n",
       "      <td>104.764695</td>\n",
       "      <td>3.373561</td>\n",
       "      <td>2.741554</td>\n",
       "      <td>4.148989</td>\n",
       "      <td>8.916444</td>\n",
       "      <td>3.882662</td>\n",
       "      <td>4.048981</td>\n",
       "      <td>3.597177</td>\n",
       "      <td>1.138674</td>\n",
       "      <td>10.499720</td>\n",
       "      <td>4.148989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53262</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>812.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1501.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8743.0</td>\n",
       "      <td>2518.0</td>\n",
       "      <td>2961.0</td>\n",
       "      <td>3413.0</td>\n",
       "      <td>3592.0</td>\n",
       "      <td>3748.0</td>\n",
       "      <td>2272.0</td>\n",
       "      <td>460.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10:21</td>\n",
       "      <td>10.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2529.02</td>\n",
       "      <td>813.0</td>\n",
       "      <td>167.5</td>\n",
       "      <td>87.1</td>\n",
       "      <td>84.05</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>812.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.273212</td>\n",
       "      <td>5.261352</td>\n",
       "      <td>79.002134</td>\n",
       "      <td>86.756519</td>\n",
       "      <td>82.433185</td>\n",
       "      <td>2.332711</td>\n",
       "      <td>2.434020</td>\n",
       "      <td>2.952719</td>\n",
       "      <td>95.016704</td>\n",
       "      <td>91.061900</td>\n",
       "      <td>95.837780</td>\n",
       "      <td>25.986503</td>\n",
       "      <td>0.606190</td>\n",
       "      <td>73.776736</td>\n",
       "      <td>67.182497</td>\n",
       "      <td>2.518</td>\n",
       "      <td>2.961</td>\n",
       "      <td>3.413</td>\n",
       "      <td>3.592</td>\n",
       "      <td>3.748</td>\n",
       "      <td>8.743</td>\n",
       "      <td>2.272</td>\n",
       "      <td>0.460</td>\n",
       "      <td>10.0</td>\n",
       "      <td>106.119512</td>\n",
       "      <td>107.361196</td>\n",
       "      <td>103.409029</td>\n",
       "      <td>70.126656</td>\n",
       "      <td>60.134258</td>\n",
       "      <td>102.078104</td>\n",
       "      <td>103.321897</td>\n",
       "      <td>111.680165</td>\n",
       "      <td>111.704950</td>\n",
       "      <td>108.850289</td>\n",
       "      <td>101.294171</td>\n",
       "      <td>101.405733</td>\n",
       "      <td>100.114652</td>\n",
       "      <td>89.583471</td>\n",
       "      <td>78.868110</td>\n",
       "      <td>17.501494</td>\n",
       "      <td>8.749342</td>\n",
       "      <td>76.397714</td>\n",
       "      <td>69.522310</td>\n",
       "      <td>62.576145</td>\n",
       "      <td>84.990332</td>\n",
       "      <td>79.782880</td>\n",
       "      <td>2.088742</td>\n",
       "      <td>2.178972</td>\n",
       "      <td>2.712642</td>\n",
       "      <td>93.802736</td>\n",
       "      <td>95.728026</td>\n",
       "      <td>95.728026</td>\n",
       "      <td>0.676676</td>\n",
       "      <td>32.949317</td>\n",
       "      <td>121.809431</td>\n",
       "      <td>126.008009</td>\n",
       "      <td>117.019991</td>\n",
       "      <td>130.496366</td>\n",
       "      <td>119.319866</td>\n",
       "      <td>117.522064</td>\n",
       "      <td>107.466096</td>\n",
       "      <td>82.858783</td>\n",
       "      <td>85.449963</td>\n",
       "      <td>2.430846</td>\n",
       "      <td>1.998286</td>\n",
       "      <td>3.202872</td>\n",
       "      <td>6.699803</td>\n",
       "      <td>2.860379</td>\n",
       "      <td>3.056447</td>\n",
       "      <td>2.114155</td>\n",
       "      <td>0.555161</td>\n",
       "      <td>11.702755</td>\n",
       "      <td>3.202872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53371</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>689.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>57.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1023.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>8628.0</td>\n",
       "      <td>2617.0</td>\n",
       "      <td>2894.0</td>\n",
       "      <td>3112.0</td>\n",
       "      <td>3254.0</td>\n",
       "      <td>3388.0</td>\n",
       "      <td>4082.0</td>\n",
       "      <td>1489.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:09</td>\n",
       "      <td>14.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4345.78</td>\n",
       "      <td>691.0</td>\n",
       "      <td>167.1</td>\n",
       "      <td>89.6</td>\n",
       "      <td>84.19</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>689.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.949233</td>\n",
       "      <td>17.257765</td>\n",
       "      <td>85.419126</td>\n",
       "      <td>92.994859</td>\n",
       "      <td>88.936693</td>\n",
       "      <td>2.546635</td>\n",
       "      <td>2.651506</td>\n",
       "      <td>2.981341</td>\n",
       "      <td>95.636140</td>\n",
       "      <td>91.853601</td>\n",
       "      <td>96.044864</td>\n",
       "      <td>47.311080</td>\n",
       "      <td>1.204841</td>\n",
       "      <td>84.093830</td>\n",
       "      <td>77.243211</td>\n",
       "      <td>2.617</td>\n",
       "      <td>2.894</td>\n",
       "      <td>3.112</td>\n",
       "      <td>3.254</td>\n",
       "      <td>3.388</td>\n",
       "      <td>8.628</td>\n",
       "      <td>4.082</td>\n",
       "      <td>1.489</td>\n",
       "      <td>14.0</td>\n",
       "      <td>121.070622</td>\n",
       "      <td>121.378778</td>\n",
       "      <td>109.032754</td>\n",
       "      <td>197.917501</td>\n",
       "      <td>159.355158</td>\n",
       "      <td>108.683974</td>\n",
       "      <td>109.674408</td>\n",
       "      <td>121.314840</td>\n",
       "      <td>122.065531</td>\n",
       "      <td>111.840534</td>\n",
       "      <td>101.004885</td>\n",
       "      <td>100.456011</td>\n",
       "      <td>99.486972</td>\n",
       "      <td>162.404114</td>\n",
       "      <td>132.541297</td>\n",
       "      <td>22.205834</td>\n",
       "      <td>10.829750</td>\n",
       "      <td>78.342629</td>\n",
       "      <td>69.458493</td>\n",
       "      <td>63.638152</td>\n",
       "      <td>85.564463</td>\n",
       "      <td>81.091564</td>\n",
       "      <td>2.099195</td>\n",
       "      <td>2.172199</td>\n",
       "      <td>2.665707</td>\n",
       "      <td>94.684668</td>\n",
       "      <td>96.540142</td>\n",
       "      <td>96.540142</td>\n",
       "      <td>0.741878</td>\n",
       "      <td>35.695350</td>\n",
       "      <td>108.130798</td>\n",
       "      <td>117.946921</td>\n",
       "      <td>99.677497</td>\n",
       "      <td>117.196022</td>\n",
       "      <td>100.501521</td>\n",
       "      <td>99.373640</td>\n",
       "      <td>151.519692</td>\n",
       "      <td>203.444393</td>\n",
       "      <td>123.191038</td>\n",
       "      <td>2.676388</td>\n",
       "      <td>2.218795</td>\n",
       "      <td>3.398962</td>\n",
       "      <td>7.362025</td>\n",
       "      <td>3.096471</td>\n",
       "      <td>3.274510</td>\n",
       "      <td>2.694039</td>\n",
       "      <td>0.731895</td>\n",
       "      <td>11.364463</td>\n",
       "      <td>3.398962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53446</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>288.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1013.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>11144.0</td>\n",
       "      <td>3579.0</td>\n",
       "      <td>4389.0</td>\n",
       "      <td>4775.0</td>\n",
       "      <td>4813.0</td>\n",
       "      <td>4815.0</td>\n",
       "      <td>5801.0</td>\n",
       "      <td>2391.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:22</td>\n",
       "      <td>6.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5214.70</td>\n",
       "      <td>289.0</td>\n",
       "      <td>175.6</td>\n",
       "      <td>90.2</td>\n",
       "      <td>63.95</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>288.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49.657321</td>\n",
       "      <td>21.455492</td>\n",
       "      <td>91.152648</td>\n",
       "      <td>91.916230</td>\n",
       "      <td>91.190526</td>\n",
       "      <td>2.314434</td>\n",
       "      <td>2.315396</td>\n",
       "      <td>2.539075</td>\n",
       "      <td>99.210472</td>\n",
       "      <td>99.169263</td>\n",
       "      <td>99.958463</td>\n",
       "      <td>52.054917</td>\n",
       "      <td>1.204777</td>\n",
       "      <td>74.952880</td>\n",
       "      <td>74.330218</td>\n",
       "      <td>3.579</td>\n",
       "      <td>4.389</td>\n",
       "      <td>4.775</td>\n",
       "      <td>4.813</td>\n",
       "      <td>4.815</td>\n",
       "      <td>11.144</td>\n",
       "      <td>5.801</td>\n",
       "      <td>2.391</td>\n",
       "      <td>6.0</td>\n",
       "      <td>108.238000</td>\n",
       "      <td>110.713324</td>\n",
       "      <td>107.553116</td>\n",
       "      <td>131.692502</td>\n",
       "      <td>121.321206</td>\n",
       "      <td>105.099642</td>\n",
       "      <td>106.775739</td>\n",
       "      <td>108.473598</td>\n",
       "      <td>107.698908</td>\n",
       "      <td>101.116008</td>\n",
       "      <td>101.659751</td>\n",
       "      <td>102.414829</td>\n",
       "      <td>100.748198</td>\n",
       "      <td>125.927292</td>\n",
       "      <td>116.340073</td>\n",
       "      <td>37.707022</td>\n",
       "      <td>17.684865</td>\n",
       "      <td>84.751285</td>\n",
       "      <td>69.248212</td>\n",
       "      <td>67.137554</td>\n",
       "      <td>87.456274</td>\n",
       "      <td>85.403788</td>\n",
       "      <td>2.133638</td>\n",
       "      <td>2.149879</td>\n",
       "      <td>2.511051</td>\n",
       "      <td>97.590708</td>\n",
       "      <td>99.216130</td>\n",
       "      <td>99.216130</td>\n",
       "      <td>0.956724</td>\n",
       "      <td>44.743755</td>\n",
       "      <td>113.430986</td>\n",
       "      <td>117.631024</td>\n",
       "      <td>105.150353</td>\n",
       "      <td>115.968917</td>\n",
       "      <td>107.637082</td>\n",
       "      <td>105.896838</td>\n",
       "      <td>135.417298</td>\n",
       "      <td>136.847775</td>\n",
       "      <td>74.975537</td>\n",
       "      <td>3.869313</td>\n",
       "      <td>3.042565</td>\n",
       "      <td>4.579157</td>\n",
       "      <td>9.609471</td>\n",
       "      <td>4.436204</td>\n",
       "      <td>4.544989</td>\n",
       "      <td>4.283795</td>\n",
       "      <td>1.747197</td>\n",
       "      <td>8.002610</td>\n",
       "      <td>4.579157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53490</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>336.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1021.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10680.0</td>\n",
       "      <td>3109.0</td>\n",
       "      <td>3803.0</td>\n",
       "      <td>4118.0</td>\n",
       "      <td>4118.0</td>\n",
       "      <td>4120.0</td>\n",
       "      <td>5086.0</td>\n",
       "      <td>2093.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11:36</td>\n",
       "      <td>2.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3575.18</td>\n",
       "      <td>338.0</td>\n",
       "      <td>176.6</td>\n",
       "      <td>89.1</td>\n",
       "      <td>73.20</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>336.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.800971</td>\n",
       "      <td>19.597378</td>\n",
       "      <td>92.305825</td>\n",
       "      <td>92.350656</td>\n",
       "      <td>92.350656</td>\n",
       "      <td>2.592233</td>\n",
       "      <td>2.593492</td>\n",
       "      <td>2.808309</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>99.951456</td>\n",
       "      <td>99.951456</td>\n",
       "      <td>47.621723</td>\n",
       "      <td>1.234466</td>\n",
       "      <td>75.497814</td>\n",
       "      <td>75.461165</td>\n",
       "      <td>3.109</td>\n",
       "      <td>3.803</td>\n",
       "      <td>4.118</td>\n",
       "      <td>4.118</td>\n",
       "      <td>4.120</td>\n",
       "      <td>10.680</td>\n",
       "      <td>5.086</td>\n",
       "      <td>2.093</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.984590</td>\n",
       "      <td>113.116507</td>\n",
       "      <td>109.926976</td>\n",
       "      <td>141.832529</td>\n",
       "      <td>116.309806</td>\n",
       "      <td>105.875535</td>\n",
       "      <td>108.803780</td>\n",
       "      <td>121.733093</td>\n",
       "      <td>120.481879</td>\n",
       "      <td>111.004645</td>\n",
       "      <td>102.842051</td>\n",
       "      <td>103.928332</td>\n",
       "      <td>101.073419</td>\n",
       "      <td>132.661766</td>\n",
       "      <td>109.121920</td>\n",
       "      <td>35.817574</td>\n",
       "      <td>16.849292</td>\n",
       "      <td>83.970131</td>\n",
       "      <td>69.273843</td>\n",
       "      <td>66.711010</td>\n",
       "      <td>87.225680</td>\n",
       "      <td>84.878169</td>\n",
       "      <td>2.129440</td>\n",
       "      <td>2.152599</td>\n",
       "      <td>2.529902</td>\n",
       "      <td>97.236490</td>\n",
       "      <td>98.889953</td>\n",
       "      <td>98.889953</td>\n",
       "      <td>0.930536</td>\n",
       "      <td>43.640840</td>\n",
       "      <td>99.856314</td>\n",
       "      <td>102.990271</td>\n",
       "      <td>90.622544</td>\n",
       "      <td>111.232362</td>\n",
       "      <td>94.242136</td>\n",
       "      <td>91.616293</td>\n",
       "      <td>121.403866</td>\n",
       "      <td>129.841690</td>\n",
       "      <td>23.081589</td>\n",
       "      <td>3.808472</td>\n",
       "      <td>3.018732</td>\n",
       "      <td>4.546330</td>\n",
       "      <td>9.601522</td>\n",
       "      <td>4.369595</td>\n",
       "      <td>4.494834</td>\n",
       "      <td>4.189323</td>\n",
       "      <td>1.611963</td>\n",
       "      <td>8.664915</td>\n",
       "      <td>4.546330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53495</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>352.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1013.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>13246.0</td>\n",
       "      <td>3631.0</td>\n",
       "      <td>4263.0</td>\n",
       "      <td>4709.0</td>\n",
       "      <td>4801.0</td>\n",
       "      <td>4814.0</td>\n",
       "      <td>5914.0</td>\n",
       "      <td>2323.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>15:54</td>\n",
       "      <td>7.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5080.12</td>\n",
       "      <td>353.0</td>\n",
       "      <td>178.9</td>\n",
       "      <td>93.0</td>\n",
       "      <td>86.30</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>352.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48.255089</td>\n",
       "      <td>17.537370</td>\n",
       "      <td>88.554217</td>\n",
       "      <td>90.528775</td>\n",
       "      <td>88.794001</td>\n",
       "      <td>2.751558</td>\n",
       "      <td>2.759009</td>\n",
       "      <td>3.107202</td>\n",
       "      <td>98.083733</td>\n",
       "      <td>97.818862</td>\n",
       "      <td>99.729954</td>\n",
       "      <td>44.647441</td>\n",
       "      <td>1.228500</td>\n",
       "      <td>77.107666</td>\n",
       "      <td>75.425841</td>\n",
       "      <td>3.631</td>\n",
       "      <td>4.263</td>\n",
       "      <td>4.709</td>\n",
       "      <td>4.801</td>\n",
       "      <td>4.814</td>\n",
       "      <td>13.246</td>\n",
       "      <td>5.914</td>\n",
       "      <td>2.323</td>\n",
       "      <td>7.0</td>\n",
       "      <td>111.295880</td>\n",
       "      <td>113.285292</td>\n",
       "      <td>105.760370</td>\n",
       "      <td>136.935936</td>\n",
       "      <td>105.688167</td>\n",
       "      <td>103.870898</td>\n",
       "      <td>104.812167</td>\n",
       "      <td>129.293138</td>\n",
       "      <td>128.121457</td>\n",
       "      <td>122.539511</td>\n",
       "      <td>100.983935</td>\n",
       "      <td>101.924202</td>\n",
       "      <td>100.951362</td>\n",
       "      <td>133.167902</td>\n",
       "      <td>103.104221</td>\n",
       "      <td>35.239171</td>\n",
       "      <td>16.593504</td>\n",
       "      <td>83.731002</td>\n",
       "      <td>69.281690</td>\n",
       "      <td>66.580436</td>\n",
       "      <td>87.155090</td>\n",
       "      <td>84.717265</td>\n",
       "      <td>2.128155</td>\n",
       "      <td>2.153432</td>\n",
       "      <td>2.535673</td>\n",
       "      <td>97.128055</td>\n",
       "      <td>98.790102</td>\n",
       "      <td>98.790102</td>\n",
       "      <td>0.922520</td>\n",
       "      <td>43.303213</td>\n",
       "      <td>110.051384</td>\n",
       "      <td>118.210349</td>\n",
       "      <td>103.567308</td>\n",
       "      <td>135.284952</td>\n",
       "      <td>105.755754</td>\n",
       "      <td>104.641781</td>\n",
       "      <td>140.458476</td>\n",
       "      <td>146.141756</td>\n",
       "      <td>78.603233</td>\n",
       "      <td>3.873645</td>\n",
       "      <td>3.071643</td>\n",
       "      <td>4.648185</td>\n",
       "      <td>9.791185</td>\n",
       "      <td>4.452713</td>\n",
       "      <td>4.588034</td>\n",
       "      <td>4.210497</td>\n",
       "      <td>1.589553</td>\n",
       "      <td>8.905486</td>\n",
       "      <td>4.648185</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>477 rows Ã— 139 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HAR1  HAR23  HAR26  HAC1E  HAC1F  HAC1G  HAC1O  HAL6  HAL10  HAL1  \\\n",
       "SEQN                                                                       \n",
       "215       2      2      2      2      2      2      2     2      2     2   \n",
       "460       2      2      2      2      2      2      2     2      2     2   \n",
       "576       2      2      2      2      2      2      2     2      2     2   \n",
       "580       2      2      2      2      2      2      2     2      2     2   \n",
       "876       2      2      2      2      2      2      2     2      2     2   \n",
       "...     ...    ...    ...    ...    ...    ...    ...   ...    ...   ...   \n",
       "53262     2      2      2      2      2      2      2     2      2     2   \n",
       "53371     2      2      2      2      2      2      2     2      2     2   \n",
       "53446     2      2      2      2      2      2      2     2      2     2   \n",
       "53490     2      2      2      2      2      2      2     2      2     2   \n",
       "53495     2      2      2      2      2      2      2     2      2     2   \n",
       "\n",
       "       HAL3  HAL5  DMARACER  DMARETHN  DMAETHNR  HSSEX  HSAGEIR  HSAGEU  \\\n",
       "SEQN                                                                      \n",
       "215       2     2         2         2         3      1       32       2   \n",
       "460       2     2         2         2         3      1       22       2   \n",
       "576       2     2         2         2         3      1       21       2   \n",
       "580       2     2         2         2         3      1       21       2   \n",
       "876       2     2         2         2         3      1       43       2   \n",
       "...     ...   ...       ...       ...       ...    ...      ...     ...   \n",
       "53262     2     2         2         2         3      1       67       2   \n",
       "53371     2     2         2         2         3      1       57       2   \n",
       "53446     2     2         2         2         3      1       24       2   \n",
       "53490     2     2         2         2         3      1       28       2   \n",
       "53495     2     2         2         2         3      1       29       2   \n",
       "\n",
       "       HXPAXTMR  HXPSESSR  HSAITMOR  HAR4S  SPPQ1  SPPQ2  SPPQ3  SPPQ4  SPPQ5  \\\n",
       "SEQN                                                                            \n",
       "215         NaN       NaN     388.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "460         NaN       NaN     265.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "576         NaN       NaN     256.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "580         NaN       NaN     260.0    NaN    2.0    2.0    2.0    1.0    2.0   \n",
       "876         NaN       NaN     518.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "...         ...       ...       ...    ...    ...    ...    ...    ...    ...   \n",
       "53262       NaN       NaN     812.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53371       NaN       NaN     689.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53446       NaN       NaN     288.0    NaN    2.0    2.0    2.0    1.0    2.0   \n",
       "53490       NaN       NaN     336.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53495       NaN       NaN     352.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "\n",
       "       SPPMANEU  MYPB1  MYPB3  MYPB11  MYPB27A  MYPB27B  HSAGEIR_exam  \\\n",
       "SEQN                                                                    \n",
       "215         5.0    NaN    NaN     NaN      NaN      NaN          32.0   \n",
       "460         7.0    NaN    NaN     NaN      NaN      NaN          22.0   \n",
       "576         7.0    NaN    NaN     NaN      NaN      NaN          21.0   \n",
       "580         8.0    NaN    NaN     NaN      NaN      NaN          21.0   \n",
       "876         5.0    NaN    NaN     NaN      NaN      NaN          43.0   \n",
       "...         ...    ...    ...     ...      ...      ...           ...   \n",
       "53262       6.0    NaN    NaN     NaN      NaN      NaN          67.0   \n",
       "53371       6.0    NaN    NaN     NaN      NaN      NaN          57.0   \n",
       "53446       6.0    NaN    NaN     NaN      NaN      NaN          24.0   \n",
       "53490       8.0    NaN    NaN     NaN      NaN      NaN          28.0   \n",
       "53495       4.0    NaN    NaN     NaN      NaN      NaN          29.0   \n",
       "\n",
       "       HSAGEU_exam  HXPAXTMR_exam  HXPSESSR_exam  HXPEJ6A2  SPPTECH1  \\\n",
       "SEQN                                                                   \n",
       "215            2.0            NaN            NaN       NaN    1003.0   \n",
       "460            2.0            NaN            NaN       NaN    1006.0   \n",
       "576            2.0            NaN            NaN       NaN    1011.0   \n",
       "580            2.0            NaN            NaN       NaN    1008.0   \n",
       "876            2.0            NaN            NaN       NaN    1604.0   \n",
       "...            ...            ...            ...       ...       ...   \n",
       "53262          2.0            NaN            NaN       NaN    1501.0   \n",
       "53371          2.0            NaN            NaN       NaN    1023.0   \n",
       "53446          2.0            NaN            NaN       NaN    1013.0   \n",
       "53490          2.0            NaN            NaN       NaN    1021.0   \n",
       "53495          2.0            NaN            NaN       NaN    1013.0   \n",
       "\n",
       "       SPPTRIAL  SPPPEAK  SPPFEV05  SPPFEV1  SPPFEV3  SPPFEV6  SPPFVC  \\\n",
       "SEQN                                                                    \n",
       "215         5.0   7938.0    2706.0   3408.0   3948.0   4129.0  4250.0   \n",
       "460         8.0  10720.0    3546.0   4603.0   4746.0   4735.0  4832.0   \n",
       "576        10.0   8707.0    2940.0   3682.0   4239.0   4310.0  4334.0   \n",
       "580         8.0  10553.0    3296.0   4014.0   4409.0   4508.0  4509.0   \n",
       "876         5.0   6370.0    2139.0   2785.0   3376.0   3552.0  3738.0   \n",
       "...         ...      ...       ...      ...      ...      ...     ...   \n",
       "53262       7.0   8743.0    2518.0   2961.0   3413.0   3592.0  3748.0   \n",
       "53371       6.0   8628.0    2617.0   2894.0   3112.0   3254.0  3388.0   \n",
       "53446       6.0  11144.0    3579.0   4389.0   4775.0   4813.0  4815.0   \n",
       "53490       9.0  10680.0    3109.0   3803.0   4118.0   4118.0  4120.0   \n",
       "53495       5.0  13246.0    3631.0   4263.0   4709.0   4801.0  4814.0   \n",
       "\n",
       "       SPPMMEF  SPPFEF75  SPPTYPE  SPPREPRO SPPTIME  SPPEXPIR  SPPTEMP  \\\n",
       "SEQN                                                                     \n",
       "215     3244.0     974.0      1.0       4.0   09:00      12.0     24.0   \n",
       "460     5822.0    2986.0      1.0       4.0   14:35      11.0     25.0   \n",
       "576     4197.0    1525.0      1.0       4.0   14:39       9.0     30.0   \n",
       "580     4378.0    2467.0      1.0       4.0   08:56       6.0     22.0   \n",
       "876     2065.0     587.0      1.0       4.0   09:47      11.0     24.0   \n",
       "...        ...       ...      ...       ...     ...       ...      ...   \n",
       "53262   2272.0     460.0      1.0       4.0   10:21      10.0     22.0   \n",
       "53371   4082.0    1489.0      1.0       4.0   09:09      14.0     24.0   \n",
       "53446   5801.0    2391.0      1.0       4.0   14:22       6.0     23.0   \n",
       "53490   5086.0    2093.0      1.0       4.0   11:36       2.0     24.0   \n",
       "53495   5914.0    2323.0      1.0       4.0   15:54       7.0     23.0   \n",
       "\n",
       "       HSSEX_exam  WTPFHX6  MXPAXTMR  BMPHT  BMPSITHT  BMPWT  DMARACER_exam  \\\n",
       "SEQN                                                                          \n",
       "215           1.0  4821.01     389.0  172.5      84.9  80.25              2   \n",
       "460           1.0  4695.57     265.0  173.8      91.7  60.10              2   \n",
       "576           1.0  3925.56     256.0  167.9      84.7  73.15              2   \n",
       "580           1.0  3822.33     260.0  171.0      86.7  73.45              2   \n",
       "876           1.0  4728.02     519.0  175.3      90.4  79.45              2   \n",
       "...           ...      ...       ...    ...       ...    ...            ...   \n",
       "53262         1.0  2529.02     813.0  167.5      87.1  84.05              2   \n",
       "53371         1.0  4345.78     691.0  167.1      89.6  84.19              2   \n",
       "53446         1.0  5214.70     289.0  175.6      90.2  63.95              2   \n",
       "53490         1.0  3575.18     338.0  176.6      89.1  73.20              2   \n",
       "53495         1.0  5080.12     353.0  178.9      93.0  86.30              2   \n",
       "\n",
       "       DMARETHN_exam  DMAETHNR_exam  HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \\\n",
       "SEQN                                                                        \n",
       "215              2.0            3.0          388.0    NaN     NaN     NaN   \n",
       "460              2.0            3.0          265.0    NaN     NaN     NaN   \n",
       "576              2.0            3.0          256.0    NaN     NaN     NaN   \n",
       "580              2.0            3.0          260.0    NaN     NaN     NaN   \n",
       "876              2.0            3.0          518.0    NaN     NaN     NaN   \n",
       "...              ...            ...            ...    ...     ...     ...   \n",
       "53262            2.0            3.0          812.0    NaN     NaN     NaN   \n",
       "53371            2.0            3.0          689.0    NaN     NaN     NaN   \n",
       "53446            2.0            3.0          288.0    NaN     NaN     NaN   \n",
       "53490            2.0            3.0          336.0    NaN     NaN     NaN   \n",
       "53495            2.0            3.0          352.0    NaN     NaN     NaN   \n",
       "\n",
       "       FEF75OFVC  FEF75OPEFR   FEV1OFVC  FEV1OFEV3  FEV1OFEV6  PEFROFVC  \\\n",
       "SEQN                                                                      \n",
       "215    22.917647   12.270093  80.188235  86.322188  82.538145  1.867765   \n",
       "460    61.796358   27.854478  95.260762  96.986936  97.212249  2.218543   \n",
       "576    35.186894   17.514643  84.956161  86.860109  85.429234  2.008999   \n",
       "580    54.712797   23.377239  89.021956  91.041052  89.041704  2.340430   \n",
       "876    15.703585    9.215071  74.505083  82.494076  78.406532  1.704120   \n",
       "...          ...         ...        ...        ...        ...       ...   \n",
       "53262  12.273212    5.261352  79.002134  86.756519  82.433185  2.332711   \n",
       "53371  43.949233   17.257765  85.419126  92.994859  88.936693  2.546635   \n",
       "53446  49.657321   21.455492  91.152648  91.916230  91.190526  2.314434   \n",
       "53490  50.800971   19.597378  92.305825  92.350656  92.350656  2.592233   \n",
       "53495  48.255089   17.537370  88.554217  90.528775  88.794001  2.751558   \n",
       "\n",
       "       PEFROFEV6  PEFROFEV1   FEV3OFEV6   FEV3OFVC   FEV6OFVC  MMEFOPEFR  \\\n",
       "SEQN                                                                       \n",
       "215     1.922499   2.329225   95.616372  92.894118  97.152941  40.866717   \n",
       "460     2.263992   2.328916  100.232313  98.220199  97.992550  54.309701   \n",
       "576     2.020186   2.364747   98.352668  97.808030  99.446239  48.202596   \n",
       "580     2.340949   2.629048   97.803904  97.782213  99.977822  41.485833   \n",
       "876     1.793356   2.287253   95.045045  90.315677  95.024077  32.417582   \n",
       "...          ...        ...         ...        ...        ...        ...   \n",
       "53262   2.434020   2.952719   95.016704  91.061900  95.837780  25.986503   \n",
       "53371   2.651506   2.981341   95.636140  91.853601  96.044864  47.311080   \n",
       "53446   2.315396   2.539075   99.210472  99.169263  99.958463  52.054917   \n",
       "53490   2.593492   2.808309  100.000000  99.951456  99.951456  47.621723   \n",
       "53495   2.759009   3.107202   98.083733  97.818862  99.729954  44.647441   \n",
       "\n",
       "       MMEFOFVC  FEV05OFEV3  FEV05OFVC  FEV05   FEV1   FEV3   FEV6    FVC  \\\n",
       "SEQN                                                                        \n",
       "215    0.763294   68.541033  63.670588  2.706  3.408  3.948  4.129  4.250   \n",
       "460    1.204884   74.715550  73.385762  3.546  4.603  4.746  4.735  4.832   \n",
       "576    0.968389   69.355980  67.835718  2.940  3.682  4.239  4.310  4.334   \n",
       "580    0.970947   74.756181  73.098248  3.296  4.014  4.409  4.508  4.509   \n",
       "876    0.552434   63.359005  57.223114  2.139  2.785  3.376  3.552  3.738   \n",
       "...         ...         ...        ...    ...    ...    ...    ...    ...   \n",
       "53262  0.606190   73.776736  67.182497  2.518  2.961  3.413  3.592  3.748   \n",
       "53371  1.204841   84.093830  77.243211  2.617  2.894  3.112  3.254  3.388   \n",
       "53446  1.204777   74.952880  74.330218  3.579  4.389  4.775  4.813  4.815   \n",
       "53490  1.234466   75.497814  75.461165  3.109  3.803  4.118  4.118  4.120   \n",
       "53495  1.228500   77.107666  75.425841  3.631  4.263  4.709  4.801  4.814   \n",
       "\n",
       "         PEFR   MMEF  FEF75  EXPIR  FEV05OFEV3PP  FEV05OFVCPP  FEV1OFVCPP  \\\n",
       "SEQN                                                                        \n",
       "215     7.938  3.244  0.974   12.0     98.904067    96.081811   96.429821   \n",
       "460    10.720  5.822  2.986   11.0    107.914841   108.967489  111.895228   \n",
       "576     8.707  4.197  1.525    9.0    100.180598   100.609418   99.623337   \n",
       "580    10.553  4.378  2.467    6.0    107.977604   108.470469  104.469187   \n",
       "876     6.370  2.065  0.587   11.0     91.336823    87.852544   91.885568   \n",
       "...       ...    ...    ...    ...           ...          ...         ...   \n",
       "53262   8.743  2.272  0.460   10.0    106.119512   107.361196  103.409029   \n",
       "53371   8.628  4.082  1.489   14.0    121.070622   121.378778  109.032754   \n",
       "53446  11.144  5.801  2.391    6.0    108.238000   110.713324  107.553116   \n",
       "53490  10.680  5.086  2.093    2.0    108.984590   113.116507  109.926976   \n",
       "53495  13.246  5.914  2.323    7.0    111.295880   113.285292  105.760370   \n",
       "\n",
       "       FEF75OFVCPP  FEF75OPEFRPP  FEV1OFEV3PP  FEV1OFEV6PP  PEFROFVCPP  \\\n",
       "SEQN                                                                     \n",
       "215      67.701526     76.785924    99.237247    97.873915   87.891905   \n",
       "460     159.959650    153.942102   110.754600   113.484530  103.879235   \n",
       "576      90.270238     95.983279    99.142279    99.616895   94.033747   \n",
       "580     140.920593    128.591997   103.936747   103.881281  109.564404   \n",
       "876      54.454140     66.956441    95.508112    94.537919   80.613753   \n",
       "...            ...           ...          ...          ...         ...   \n",
       "53262    70.126656     60.134258   102.078104   103.321897  111.680165   \n",
       "53371   197.917501    159.355158   108.683974   109.674408  121.314840   \n",
       "53446   131.692502    121.321206   105.099642   106.775739  108.473598   \n",
       "53490   141.832529    116.309806   105.875535   108.803780  121.733093   \n",
       "53495   136.935936    105.688167   103.870898   104.812167  129.293138   \n",
       "\n",
       "       PEFROFEV6PP  PEFROFEV1PP  FEV3OFEV6PP  FEV3OFVCPP  FEV6OFVCPP  \\\n",
       "SEQN                                                                   \n",
       "215      89.193275    91.359263    98.708094   97.282441   98.581924   \n",
       "460     105.373190    93.088933   102.524553  101.098462   98.607971   \n",
       "576      94.047579    94.652146   100.535018  100.549224  100.010497   \n",
       "580     108.969128   105.166363   100.003636  100.578183  100.572027   \n",
       "876      82.924045    87.986982    99.079515   96.342212   97.275925   \n",
       "...            ...          ...          ...         ...         ...   \n",
       "53262   111.704950   108.850289   101.294171  101.405733  100.114652   \n",
       "53371   122.065531   111.840534   101.004885  100.456011   99.486972   \n",
       "53446   107.698908   101.116008   101.659751  102.414829  100.748198   \n",
       "53490   120.481879   111.004645   102.842051  103.928332  101.073419   \n",
       "53495   128.121457   122.539511   100.983935  101.924202  100.951362   \n",
       "\n",
       "       MMEFOFVCPP  MMEFOPEFRPP  FEF75OFVCPred  FEF75OPEFRPred  FEV1OFVCPred  \\\n",
       "SEQN                                                                          \n",
       "215     84.502510    96.173029      33.851005       15.979613     83.157092   \n",
       "460    124.272417   119.931435      38.632466       18.094126     85.133891   \n",
       "576     99.387166   105.971131      38.979508       18.247599     85.277369   \n",
       "580     99.868761    91.385531      38.825267       18.179388     85.213601   \n",
       "876     66.254851    81.931257      28.838183       13.762784     81.084641   \n",
       "...           ...          ...            ...             ...           ...   \n",
       "53262   89.583471    78.868110      17.501494        8.749342     76.397714   \n",
       "53371  162.404114   132.541297      22.205834       10.829750     78.342629   \n",
       "53446  125.927292   116.340073      37.707022       17.684865     84.751285   \n",
       "53490  132.661766   109.121920      35.817574       16.849292     83.970131   \n",
       "53495  133.167902   103.104221      35.239171       16.593504     83.731002   \n",
       "\n",
       "       FEV05OFEV3Pred  FEV05OFVCPred  FEV1OFEV3Pred  FEV1OFEV6Pred  \\\n",
       "SEQN                                                                 \n",
       "215         69.300521      66.267056      86.985674      84.331096   \n",
       "460         69.235658      67.346474      87.569218      85.661234   \n",
       "576         69.230950      67.424819      87.611572      85.757777   \n",
       "580         69.233043      67.389999      87.592748      85.714869   \n",
       "876         69.368522      65.135409      86.373895      82.936595   \n",
       "...               ...            ...            ...            ...   \n",
       "53262       69.522310      62.576145      84.990332      79.782880   \n",
       "53371       69.458493      63.638152      85.564463      81.091564   \n",
       "53446       69.248212      67.137554      87.456274      85.403788   \n",
       "53490       69.273843      66.711010      87.225680      84.878169   \n",
       "53495       69.281690      66.580436      87.155090      84.717265   \n",
       "\n",
       "       PEFROFVCPred  PEFROFEV6Pred  PEFROFEV1Pred  FEV3OFEV6Pred  \\\n",
       "SEQN                                                               \n",
       "215        2.125070       2.155431       2.549523      96.867813   \n",
       "460        2.135694       2.148546       2.501818      97.764203   \n",
       "576        2.136466       2.148046       2.498356      97.829264   \n",
       "580        2.136123       2.148268       2.499895      97.800348   \n",
       "876        2.113932       2.162649       2.599536      95.928049   \n",
       "...             ...            ...            ...            ...   \n",
       "53262      2.088742       2.178972       2.712642      93.802736   \n",
       "53371      2.099195       2.172199       2.665707      94.684668   \n",
       "53446      2.133638       2.149879       2.511051      97.590708   \n",
       "53490      2.129440       2.152599       2.529902      97.236490   \n",
       "53495      2.128155       2.153432       2.535673      97.128055   \n",
       "\n",
       "       FEV3OFVCPred  FEV6OFVCPred  MMEFOFVCPred  MMEFOPEFRPred      FEV1PP  \\\n",
       "SEQN                                                                         \n",
       "215       98.550462     98.550462      0.903280      42.492908   96.476640   \n",
       "460       99.375891     99.375891      0.969551      45.283959  119.711023   \n",
       "576       99.435801     99.435801      0.974361      45.486535  101.552903   \n",
       "580       99.409174     99.409174      0.972223      45.396501  107.284106   \n",
       "876       97.685092     97.685092      0.833802      39.566807   82.553729   \n",
       "...             ...           ...           ...            ...         ...   \n",
       "53262     95.728026     95.728026      0.676676      32.949317  121.809431   \n",
       "53371     96.540142     96.540142      0.741878      35.695350  108.130798   \n",
       "53446     99.216130     99.216130      0.956724      44.743755  113.430986   \n",
       "53490     98.889953     98.889953      0.930536      43.640840   99.856314   \n",
       "53495     98.790102     98.790102      0.922520      43.303213  110.051384   \n",
       "\n",
       "          FEV05PP       FVCPP      PEFRPP      FEV3PP      FEV6PP      MMEFPP  \\\n",
       "SEQN                                                                            \n",
       "215     95.463627  100.498374   87.462163   97.704425   99.037933   82.257043   \n",
       "460    117.675463  106.823621  113.078171  107.787457  105.217419  135.665202   \n",
       "576    103.195021  102.656633   97.406047  102.587862  102.334385  100.856282   \n",
       "580    112.286076  102.940380  114.430217  103.134735  103.311302  103.481479   \n",
       "876     78.021455   90.094238   71.441040   86.950650   87.725776   57.406129   \n",
       "...           ...         ...         ...         ...         ...         ...   \n",
       "53262  126.008009  117.019991  130.496366  119.319866  117.522064  107.466096   \n",
       "53371  117.946921   99.677497  117.196022  100.501521   99.373640  151.519692   \n",
       "53446  117.631024  105.150353  115.968917  107.637082  105.896838  135.417298   \n",
       "53490  102.990271   90.622544  111.232362   94.242136   91.616293  121.403866   \n",
       "53495  118.210349  103.567308  135.284952  105.755754  104.641781  140.458476   \n",
       "\n",
       "          FEF75PP     EXPIRPP  FEV1Pred  FEV05Pred   FVCPred  PEFRPred  \\\n",
       "SEQN                                                                     \n",
       "215     67.843411  130.864301  3.532461   2.834587  4.228924  9.075925   \n",
       "460    165.413740  144.243196  3.845093   3.013372  4.523344  9.480168   \n",
       "576     85.491865  122.314332  3.625696   2.848975  4.221841  8.938870   \n",
       "580    137.280630   80.127147  3.741468   2.935359  4.380205  9.222214   \n",
       "876     51.551211  104.764695  3.373561   2.741554  4.148989  8.916444   \n",
       "...           ...         ...       ...        ...       ...       ...   \n",
       "53262   82.858783   85.449963  2.430846   1.998286  3.202872  6.699803   \n",
       "53371  203.444393  123.191038  2.676388   2.218795  3.398962  7.362025   \n",
       "53446  136.847775   74.975537  3.869313   3.042565  4.579157  9.609471   \n",
       "53490  129.841690   23.081589  3.808472   3.018732  4.546330  9.601522   \n",
       "53495  146.141756   78.603233  3.873645   3.071643  4.648185  9.791185   \n",
       "\n",
       "       FEV3Pred  FEV6Pred  MMEFPred  FEF75Pred  EXPIRPred  predFVCmFEV6  \n",
       "SEQN                                                                     \n",
       "215    4.040759  4.169110  3.943735   1.435659   9.169804      4.228924  \n",
       "460    4.403110  4.500205  4.291447   1.805170   7.626010      4.523344  \n",
       "576    4.132068  4.211683  4.161367   1.783795   7.358091      4.221841  \n",
       "580    4.274990  4.363511  4.230709   1.797049   7.488099      4.380205  \n",
       "876    3.882662  4.048981  3.597177   1.138674  10.499720      4.148989  \n",
       "...         ...       ...       ...        ...        ...           ...  \n",
       "53262  2.860379  3.056447  2.114155   0.555161  11.702755      3.202872  \n",
       "53371  3.096471  3.274510  2.694039   0.731895  11.364463      3.398962  \n",
       "53446  4.436204  4.544989  4.283795   1.747197   8.002610      4.579157  \n",
       "53490  4.369595  4.494834  4.189323   1.611963   8.664915      4.546330  \n",
       "53495  4.452713  4.588034  4.210497   1.589553   8.905486      4.648185  \n",
       "\n",
       "[477 rows x 139 columns]"
      ]
     },
     "execution_count": 284,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m20overb[m20overb.MMEFPP > 20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now create variables that depend on PP - PEFRPPOFVCPP, and PEFRPPOFEV1PP, \n",
    "then regression vs age in resultsppvars in form dfvartnam, bo, b1\n",
    "then new value %pred\n",
    "then "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "create PEFRpp/FEV1pp and PEFRpp/FVCpp for all dataframes # need add MMEFpp/FVCpp and FEF75ppOFVCpp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Should this be ppopppp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvariablesppopp(df):\n",
    "    df['PEFRPPOFEV1PP'] = 100 * df.PEFRPP / df.FEV1PP\n",
    "    df['PEFRPPOFVCPP']= 100 * df.PEFRPP/ df.FVCPP\n",
    "    df['MMEFPPOFVCPP']= 100 * df.MMEFPP/ df.FVCPP\n",
    "    df['FEF75PPOFVCPP']= 100 * df.FEF75PP/ df.FVCPP\n",
    "    df['MMEFPPOPEFRPP']= 100 * df.MMEFPP/ df.PEFRPP\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "for y in framestoanalyze:\n",
    "    createvariablesppopp(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "linear regression of PEFRpp/FEV1pP, PEFRpp/FVCpp, MMEFpp/FVCpp, FEF75pp/FVCpp vs age into resultsratiopp; for all dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "varsratioppopp= ['FEF75PPOFVCPP','MMEFPPOFVCPP','MMEFPPOPEFRPP','PEFRPPOFEV1PP', 'PEFRPPOFVCPP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, intercept, slope, r2, std, count]\n",
      "Index: []\n",
      "Linear Regression of variables in form y = intercept + slope * age\n",
      "dataframe ,  variable,        intercept,          slope,            R squared,         standard deviation,  count\n",
      "mlt20cmaFEF75PPOFVCPP , mlt20cma , FEF75PPOFVCPP , 103.802 , -0.20723 , 0.0004 , 35.562 , 1019\n",
      "mlt20cmaMMEFPPOFVCPP , mlt20cma , MMEFPPOFVCPP , 101.93 , -0.09154 , 0.0002 , 24.317 , 1019\n",
      "mlt20cmaMMEFPPOPEFRPP , mlt20cma , MMEFPPOPEFRPP , 101.474 , -0.08512 , 0.0002 , 18.756 , 1019\n",
      "mlt20cmaPEFRPPOFEV1PP , mlt20cma , PEFRPPOFEV1PP , 100.226 , -0.00993 , 0.0 , 12.798 , 1019\n",
      "mlt20cmaPEFRPPOFVCPP , mlt20cma , PEFRPPOFVCPP , 100.754 , -0.02255 , 0.0 , 15.529 , 1019\n",
      "m20overcmaFEF75PPOFVCPP , m20overcma , FEF75PPOFVCPP , 96.629 , 0.12811 , 0.0017 , 56.614 , 1130\n",
      "m20overcmaMMEFPPOFVCPP , m20overcma , MMEFPPOFVCPP , 98.55 , 0.06342 , 0.0013 , 32.091 , 1130\n",
      "m20overcmaMMEFPPOPEFRPP , m20overcma , MMEFPPOPEFRPP , 99.131 , 0.03725 , 0.0006 , 27.322 , 1130\n",
      "m20overcmaPEFRPPOFEV1PP , m20overcma , PEFRPPOFEV1PP , 100.418 , -0.00507 , 0.0 , 13.746 , 1130\n",
      "m20overcmaPEFRPPOFVCPP , m20overcma , PEFRPPOFVCPP , 100.465 , 0.00361 , 0.0 , 16.78 , 1130\n",
      "mlt20bFEF75PPOFVCPP , mlt20b , FEF75PPOFVCPP , 103.521 , -0.18625 , 0.0002 , 40.978 , 599\n",
      "mlt20bMMEFPPOFVCPP , mlt20b , MMEFPPOFVCPP , 100.783 , -0.00689 , 0.0 , 28.17 , 599\n",
      "mlt20bMMEFPPOPEFRPP , mlt20b , MMEFPPOPEFRPP , 100.35 , -0.03391 , 0.0 , 21.266 , 599\n",
      "mlt20bPEFRPPOFEV1PP , mlt20b , PEFRPPOFEV1PP , 99.338 , 0.05045 , 0.0002 , 12.496 , 599\n",
      "mlt20bPEFRPPOFVCPP , mlt20b , PEFRPPOFVCPP , 99.793 , 0.04743 , 0.0001 , 16.054 , 599\n",
      "m20overbFEF75PPOFVCPP , m20overb , FEF75PPOFVCPP , 98.639 , 0.08857 , 0.0007 , 46.994 , 477\n",
      "m20overbMMEFPPOFVCPP , m20overb , MMEFPPOFVCPP , 100.258 , 0.01801 , 0.0001 , 29.316 , 477\n",
      "m20overbMMEFPPOPEFRPP , m20overb , MMEFPPOPEFRPP , 96.475 , 0.11603 , 0.0043 , 25.685 , 477\n",
      "m20overbPEFRPPOFEV1PP , m20overb , PEFRPPOFEV1PP , 101.19 , -0.03188 , 0.001 , 14.462 , 477\n",
      "m20overbPEFRPPOFVCPP , m20overb , PEFRPPOFVCPP , 101.203 , -0.01632 , 0.0002 , 17.996 , 477\n",
      "flt18cmaFEF75PPOFVCPP , flt18cma , FEF75PPOFVCPP , 101.672 , -0.04986 , 0.0 , 33.079 , 966\n",
      "flt18cmaMMEFPPOFVCPP , flt18cma , MMEFPPOFVCPP , 99.987 , 0.05471 , 0.0 , 22.909 , 966\n",
      "flt18cmaMMEFPPOPEFRPP , flt18cma , MMEFPPOPEFRPP , 100.025 , 0.0438 , 0.0 , 18.107 , 966\n",
      "flt18cmaPEFRPPOFEV1PP , flt18cma , PEFRPPOFEV1PP , 99.468 , 0.04343 , 0.0001 , 13.329 , 966\n",
      "flt18cmaPEFRPPOFVCPP , flt18cma , PEFRPPOFVCPP , 99.925 , 0.03429 , 0.0 , 15.661 , 966\n",
      "f18overcmaFEF75PPOFVCPP , f18overcma , FEF75PPOFVCPP , 96.903 , 0.14048 , 0.0018 , 64.809 , 2113\n",
      "f18overcmaMMEFPPOFVCPP , f18overcma , MMEFPPOFVCPP , 98.709 , 0.06228 , 0.0013 , 34.133 , 2113\n",
      "f18overcmaMMEFPPOPEFRPP , f18overcma , MMEFPPOPEFRPP , 98.495 , 0.06082 , 0.0017 , 29.122 , 2113\n",
      "f18overcmaPEFRPPOFEV1PP , f18overcma , PEFRPPOFEV1PP , 100.433 , -0.00497 , 0.0 , 15.395 , 2113\n",
      "f18overcmaPEFRPPOFVCPP , f18overcma , PEFRPPOFVCPP , 100.504 , 0.00361 , 0.0 , 18.09 , 2113\n",
      "flt18bFEF75PPOFVCPP , flt18b , FEF75PPOFVCPP , 105.557 , -0.29643 , 0.0004 , 40.506 , 590\n",
      "flt18bMMEFPPOFVCPP , flt18b , MMEFPPOFVCPP , 103.005 , -0.14004 , 0.0002 , 28.424 , 590\n",
      "flt18bMMEFPPOPEFRPP , flt18b , MMEFPPOPEFRPP , 100.452 , -0.01794 , 0.0 , 21.036 , 590\n",
      "flt18bPEFRPPOFEV1PP , flt18b , PEFRPPOFEV1PP , 99.097 , 0.07823 , 0.0002 , 13.976 , 590\n",
      "flt18bPEFRPPOFVCPP , flt18b , PEFRPPOFVCPP , 100.723 , -0.0005 , 0.0 , 17.694 , 590\n",
      "f18overbFEF75PPOFVCPP , f18overb , FEF75PPOFVCPP , 97.287 , 0.13827 , 0.0017 , 56.925 , 957\n",
      "f18overbMMEFPPOFVCPP , f18overb , MMEFPPOFVCPP , 98.884 , 0.06198 , 0.001 , 33.542 , 957\n",
      "f18overbMMEFPPOPEFRPP , f18overb , MMEFPPOPEFRPP , 98.874 , 0.05413 , 0.001 , 28.721 , 957\n",
      "f18overbPEFRPPOFEV1PP , f18overb , PEFRPPOFEV1PP , 100.361 , -0.00687 , 0.0001 , 15.693 , 957\n",
      "f18overbPEFRPPOFVCPP , f18overb , PEFRPPOFVCPP , 100.26 , 0.00793 , 0.0001 , 18.423 , 957\n",
      "mlt20cFEF75PPOFVCPP , mlt20c , FEF75PPOFVCPP , 102.493 , -0.10567 , 0.0001 , 35.726 , 419\n",
      "mlt20cMMEFPPOFVCPP , mlt20c , MMEFPPOFVCPP , 100.814 , -0.0058 , 0.0 , 24.808 , 419\n",
      "mlt20cMMEFPPOPEFRPP , mlt20c , MMEFPPOPEFRPP , 101.213 , -0.0801 , 0.0002 , 18.254 , 419\n",
      "mlt20cPEFRPPOFEV1PP , mlt20c , PEFRPPOFEV1PP , 99.796 , 0.01701 , 0.0 , 11.759 , 419\n",
      "mlt20cPEFRPPOFVCPP , mlt20c , PEFRPPOFVCPP , 99.849 , 0.04396 , 0.0001 , 14.974 , 419\n",
      "m20overcFEF75PPOFVCPP , m20overc , FEF75PPOFVCPP , 97.134 , 0.09539 , 0.0014 , 50.622 , 528\n",
      "m20overcMMEFPPOFVCPP , m20overc , MMEFPPOFVCPP , 98.084 , 0.06606 , 0.0015 , 34.205 , 528\n",
      "m20overcMMEFPPOPEFRPP , m20overc , MMEFPPOPEFRPP , 98.235 , 0.04192 , 0.0009 , 28.338 , 528\n",
      "m20overcPEFRPPOFEV1PP , m20overc , PEFRPPOFEV1PP , 100.397 , -0.00382 , 0.0 , 12.49 , 528\n",
      "m20overcPEFRPPOFVCPP , m20overc , PEFRPPOFVCPP , 100.271 , 0.00631 , 0.0001 , 15.877 , 528\n",
      "mlt20maFEF75PPOFVCPP , mlt20ma , FEF75PPOFVCPP , 105.295 , -0.30655 , 0.0008 , 35.054 , 600\n",
      "mlt20maMMEFPPOFVCPP , mlt20ma , MMEFPPOFVCPP , 102.982 , -0.16305 , 0.0005 , 23.609 , 600\n",
      "mlt20maMMEFPPOPEFRPP , mlt20ma , MMEFPPOPEFRPP , 101.726 , -0.0882 , 0.0002 , 18.546 , 600\n",
      "mlt20maPEFRPPOFEV1PP , mlt20ma , PEFRPPOFEV1PP , 100.467 , -0.0252 , 0.0 , 13.46 , 600\n",
      "mlt20maPEFRPPOFVCPP , mlt20ma , PEFRPPOFVCPP , 101.482 , -0.07345 , 0.0002 , 15.914 , 600\n",
      "m20overmaFEF75PPOFVCPP , m20overma , FEF75PPOFVCPP , 96.527 , 0.14415 , 0.0016 , 54.315 , 602\n",
      "m20overmaMMEFPPOFVCPP , m20overma , MMEFPPOFVCPP , 98.168 , 0.0834 , 0.0018 , 29.949 , 602\n",
      "m20overmaMMEFPPOPEFRPP , m20overma , MMEFPPOPEFRPP , 98.864 , 0.06244 , 0.0013 , 26.33 , 602\n",
      "m20overmaPEFRPPOFEV1PP , m20overma , PEFRPPOFEV1PP , 100.421 , -0.00551 , 0.0 , 14.672 , 602\n",
      "m20overmaPEFRPPOFVCPP , m20overma , PEFRPPOFVCPP , 100.498 , 0.00452 , 0.0 , 17.336 , 602\n",
      "flt18cFEF75PPOFVCPP , flt18c , FEF75PPOFVCPP , 102.619 , -0.11866 , 0.0001 , 32.971 , 409\n",
      "flt18cMMEFPPOFVCPP , flt18c , MMEFPPOFVCPP , 100.374 , 0.03134 , 0.0 , 23.306 , 409\n",
      "flt18cMMEFPPOPEFRPP , flt18c , MMEFPPOPEFRPP , 100.946 , -0.05589 , 0.0001 , 17.358 , 409\n",
      "flt18cPEFRPPOFEV1PP , flt18c , PEFRPPOFEV1PP , 98.888 , 0.09253 , 0.0005 , 11.901 , 409\n",
      "flt18cPEFRPPOFVCPP , flt18c , PEFRPPOFVCPP , 99.533 , 0.0692 , 0.0002 , 14.538 , 409\n",
      "f18overcFEF75PPOFVCPP , f18overc , FEF75PPOFVCPP , 97.004 , 0.12415 , 0.0015 , 66.872 , 1108\n",
      "f18overcMMEFPPOFVCPP , f18overc , MMEFPPOFVCPP , 98.835 , 0.05288 , 0.0009 , 35.946 , 1108\n",
      "f18overcMMEFPPOPEFRPP , f18overc , MMEFPPOPEFRPP , 97.811 , 0.06225 , 0.0017 , 31.086 , 1108\n",
      "f18overcPEFRPPOFEV1PP , f18overc , PEFRPPOFEV1PP , 100.546 , -0.00569 , 0.0001 , 14.687 , 1108\n",
      "f18overcPEFRPPOFVCPP , f18overc , PEFRPPOFVCPP , 100.686 , -0.00023 , 0.0 , 17.442 , 1108\n",
      "flt18maFEF75PPOFVCPP , flt18ma , FEF75PPOFVCPP , 101.479 , -0.03383 , 0.0 , 32.729 , 557\n",
      "flt18maMMEFPPOFVCPP , flt18ma , MMEFPPOFVCPP , 99.821 , 0.06493 , 0.0001 , 22.237 , 557\n",
      "flt18maMMEFPPOPEFRPP , flt18ma , MMEFPPOPEFRPP , 99.782 , 0.08668 , 0.0002 , 18.317 , 557\n",
      "flt18maPEFRPPOFEV1PP , flt18ma , PEFRPPOFEV1PP , 99.788 , 0.01536 , 0.0 , 14.26 , 557\n",
      "flt18maPEFRPPOFVCPP , flt18ma , PEFRPPOFVCPP , 100.11 , 0.01656 , 0.0 , 16.326 , 557\n",
      "f18overmaFEF75PPOFVCPP , f18overma , FEF75PPOFVCPP , 95.951 , 0.18143 , 0.0023 , 62.223 , 1005\n",
      "f18overmaMMEFPPOFVCPP , f18overma , MMEFPPOFVCPP , 95.136 , 0.17703 , 0.0057 , 38.294 , 1005\n",
      "f18overmaMMEFPPOPEFRPP , f18overma , MMEFPPOPEFRPP , 96.826 , 0.12662 , 0.0053 , 28.247 , 1005\n",
      "f18overmaPEFRPPOFEV1PP , f18overma , PEFRPPOFEV1PP , 100.32 , -0.00343 , 0.0 , 16.133 , 1005\n",
      "f18overmaPEFRPPOFVCPP , f18overma , PEFRPPOFVCPP , 100.132 , 0.01451 , 0.0002 , 18.846 , 1005\n",
      "mallcmaFEF75PPOFVCPP , mallcma , FEF75PPOFVCPP , 108.02 , -0.31637 , 0.0001 , 699.99 , 2149\n",
      "mallcmaMMEFPPOFVCPP , mallcma , MMEFPPOFVCPP , 1258.974 , -54.77306 , 0.004 , 16722.567 , 2149\n",
      "mallcmaMMEFPPOPEFRPP , mallcma , MMEFPPOPEFRPP , 1600.719 , -70.93348 , 0.004 , 21623.092 , 2149\n",
      "mallcmaPEFRPPOFEV1PP , mallcma , PEFRPPOFEV1PP , 100.537 , -0.01284 , 0.0003 , 13.394 , 2149\n",
      "mallcmaPEFRPPOFVCPP , mallcma , PEFRPPOFVCPP , 100.015 , 0.01591 , 0.0004 , 16.225 , 2149\n",
      "mallbFEF75PPOFVCPP , mallb , FEF75PPOFVCPP , 96.89 , 0.18804 , 0.0031 , 50.583 , 1076\n",
      "mallbMMEFPPOFVCPP , mallb , MMEFPPOFVCPP , 91.059 , 0.47375 , 0.0207 , 49.699 , 1076\n",
      "mallbMMEFPPOPEFRPP , mallb , MMEFPPOPEFRPP , 89.606 , 0.51474 , 0.027 , 47.322 , 1076\n",
      "mallbPEFRPPOFEV1PP , mallb , PEFRPPOFEV1PP , 100.448 , -0.01715 , 0.0004 , 13.42 , 1076\n",
      "mallbPEFRPPOFVCPP , mallb , PEFRPPOFVCPP , 100.136 , 0.01382 , 0.0002 , 16.966 , 1076\n",
      "mallcFEF75PPOFVCPP , mallc , FEF75PPOFVCPP , 73.892 , 1.20581 , 0.0113 , 253.901 , 947\n",
      "mallcMMEFPPOFVCPP , mallc , MMEFPPOFVCPP , 96.633 , 0.15067 , 0.0107 , 32.689 , 947\n",
      "mallcMMEFPPOPEFRPP , mallc , MMEFPPOPEFRPP , 96.859 , 0.12134 , 0.0101 , 27.067 , 947\n",
      "mallcPEFRPPOFEV1PP , mallc , PEFRPPOFEV1PP , 100.263 , -0.00499 , 0.0001 , 12.194 , 947\n",
      "mallcPEFRPPOFVCPP , mallc , PEFRPPOFVCPP , 99.822 , 0.01746 , 0.0006 , 15.537 , 947\n",
      "mallmaFEF75PPOFVCPP , mallma , FEF75PPOFVCPP , 81.949 , 0.93153 , 0.0222 , 99.62 , 1202\n",
      "mallmaMMEFPPOFVCPP , mallma , MMEFPPOFVCPP , 98.383 , 0.1067 , 0.0019 , 38.691 , 1202\n",
      "mallmaMMEFPPOPEFRPP , mallma , MMEFPPOPEFRPP , 99.278 , 0.05332 , 0.0005 , 37.407 , 1202\n",
      "mallmaPEFRPPOFEV1PP , mallma , PEFRPPOFEV1PP , 100.874 , -0.02408 , 0.0007 , 14.254 , 1202\n",
      "mallmaPEFRPPOFVCPP , mallma , PEFRPPOFVCPP , 100.65 , 0.00013 , 0.0 , 16.713 , 1202\n",
      "fallcmaFEF75PPOFVCPP , fallcma , FEF75PPOFVCPP , 148.665 , -1.90075 , 0.001 , 1375.867 , 3079\n",
      "fallcmaMMEFPPOFVCPP , fallcma , MMEFPPOFVCPP , 100.671 , -0.00315 , 0.0 , 215.886 , 3079\n",
      "fallcmaMMEFPPOPEFRPP , fallcma , MMEFPPOPEFRPP , 102.743 , -0.09085 , 0.0001 , 202.832 , 3079\n",
      "fallcmaPEFRPPOFEV1PP , fallcma , PEFRPPOFEV1PP , 100.759 , -0.01789 , 0.0007 , 15.044 , 3079\n",
      "fallcmaPEFRPPOFVCPP , fallcma , PEFRPPOFVCPP , 100.355 , 0.00551 , 0.0 , 17.481 , 3079\n",
      "fallbFEF75PPOFVCPP , fallb , FEF75PPOFVCPP , 87.797 , 0.62423 , 0.0125 , 100.86 , 1547\n",
      "fallbMMEFPPOFVCPP , fallb , MMEFPPOFVCPP , 89.125 , 0.5158 , 0.0229 , 61.447 , 1547\n",
      "fallbMMEFPPOPEFRPP , fallb , MMEFPPOPEFRPP , 89.104 , 0.49493 , 0.0211 , 61.521 , 1547\n",
      "fallbPEFRPPOFEV1PP , fallb , PEFRPPOFEV1PP , 100.247 , -0.00688 , 0.0001 , 15.126 , 1547\n",
      "fallbPEFRPPOFVCPP , fallb , PEFRPPOFVCPP , 99.954 , 0.02137 , 0.0004 , 18.253 , 1547\n",
      "fallcFEF75PPOFVCPP , fallc , FEF75PPOFVCPP , 86.223 , 0.5771 , 0.0123 , 128.992 , 1517\n",
      "fallcMMEFPPOFVCPP , fallc , MMEFPPOFVCPP , 96.233 , 0.15484 , 0.0098 , 38.735 , 1517\n",
      "fallcMMEFPPOPEFRPP , fallc , MMEFPPOPEFRPP , 95.443 , 0.16438 , 0.0124 , 36.614 , 1517\n",
      "fallcPEFRPPOFEV1PP , fallc , PEFRPPOFEV1PP , 100.582 , -0.01131 , 0.0004 , 14.205 , 1517\n",
      "fallcPEFRPPOFVCPP , fallc , PEFRPPOFVCPP , 100.192 , 0.00834 , 0.0002 , 16.848 , 1517\n",
      "fallmaFEF75PPOFVCPP , fallma , FEF75PPOFVCPP , 174.371 , -3.37861 , 0.0031 , 1094.791 , 1562\n",
      "fallmaMMEFPPOFVCPP , fallma , MMEFPPOFVCPP , 99.097 , 0.07196 , 0.0012 , 37.38 , 1562\n",
      "fallmaMMEFPPOPEFRPP , fallma , MMEFPPOPEFRPP , 98.028 , 0.12041 , 0.004 , 34.251 , 1562\n",
      "fallmaPEFRPPOFEV1PP , fallma , PEFRPPOFEV1PP , 100.91 , -0.02718 , 0.001 , 15.782 , 1562\n",
      "fallmaPEFRPPOFVCPP , fallma , PEFRPPOFVCPP , 100.503 , 0.00251 , 0.0 , 18.059 , 1562\n",
      "at end\n",
      "                         dfname            var   intercept     slope  \\\n",
      "dfnvarn                                                                \n",
      "mlt20cmaFEF75PPOFVCPP  mlt20cma  FEF75PPOFVCPP  103.801851 -0.207227   \n",
      "mlt20cmaMMEFPPOFVCPP   mlt20cma   MMEFPPOFVCPP  101.929837 -0.091544   \n",
      "mlt20cmaMMEFPPOPEFRPP  mlt20cma  MMEFPPOPEFRPP  101.473672 -0.085116   \n",
      "mlt20cmaPEFRPPOFEV1PP  mlt20cma  PEFRPPOFEV1PP  100.225956 -0.009930   \n",
      "mlt20cmaPEFRPPOFVCPP   mlt20cma   PEFRPPOFVCPP  100.754160 -0.022553   \n",
      "...                         ...            ...         ...       ...   \n",
      "fallmaFEF75PPOFVCPP      fallma  FEF75PPOFVCPP  174.370631 -3.378614   \n",
      "fallmaMMEFPPOFVCPP       fallma   MMEFPPOFVCPP   99.097477  0.071956   \n",
      "fallmaMMEFPPOPEFRPP      fallma  MMEFPPOPEFRPP   98.028239  0.120410   \n",
      "fallmaPEFRPPOFEV1PP      fallma  PEFRPPOFEV1PP  100.910158 -0.027185   \n",
      "fallmaPEFRPPOFVCPP       fallma   PEFRPPOFVCPP  100.503253  0.002508   \n",
      "\n",
      "                             r2          std count  \n",
      "dfnvarn                                             \n",
      "mlt20cmaFEF75PPOFVCPP  0.000363    35.562466  1019  \n",
      "mlt20cmaMMEFPPOFVCPP   0.000151    24.316881  1019  \n",
      "mlt20cmaMMEFPPOPEFRPP  0.000220    18.755999  1019  \n",
      "mlt20cmaPEFRPPOFEV1PP  0.000006    12.798109  1019  \n",
      "mlt20cmaPEFRPPOFVCPP   0.000023    15.529011  1019  \n",
      "...                         ...          ...   ...  \n",
      "fallmaFEF75PPOFVCPP    0.003100  1094.791045  1562  \n",
      "fallmaMMEFPPOFVCPP     0.001206    37.379636  1562  \n",
      "fallmaMMEFPPOPEFRPP    0.004022    34.251445  1562  \n",
      "fallmaPEFRPPOFEV1PP    0.000966    15.781556  1562  \n",
      "fallmaPEFRPPOFVCPP     0.000006    18.058691  1562  \n",
      "\n",
      "[120 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "# First initialize resultsratiopp dataframe\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"intercept\", \"slope\", \"r2\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "resultsratioppopp = pd.DataFrame(columns = column_names)\n",
    "resultsratioppopp.name = 'resultsratiopp'\n",
    "print (resultsratioppopp)\n",
    "print ('Linear Regression of variables in form y = intercept + slope * age')\n",
    "print ('dataframe ,  variable,        intercept,          slope,            R squared,         standard deviation,  count')\n",
    "for y in framestoanalyze:\n",
    "  #  print (y.name)\n",
    "    for xx in varsratioppopp:\n",
    " #       print(y, \" \", xx)\n",
    "        reg = linear_regage (y,xx)\n",
    "        intercept, slope, r2, std, count = reg\n",
    "        slope, = slope\n",
    "        dfnvarn = y.name + xx\n",
    "        print (dfnvarn, ',', y.name, ',', xx, ',', round(intercept,3), ',', round(slope,5), ',',\n",
    "               round(r2,4), ',', round(std,3), ',',count)\n",
    "    #   now need save these in array of dataframe.variable, intercept slope\n",
    "        var = y.name\n",
    "    \n",
    "#  Columns: [dfnvarn, dfname, var, intercept, slope, r2, std, count] \n",
    "\n",
    "        df2 = {'dfnvarn': dfnvarn, 'dfname': y.name, 'var': xx, 'intercept': intercept, 'slope':slope, 'r2':r2, 'std':std, 'count':count}                          \n",
    "        resultsratioppopp = resultsratioppopp.append(df2, ignore_index=True)    \n",
    "print ('at end')\n",
    "resultsratioppopp.set_index('dfnvarn', inplace=True)\n",
    "print (resultsratioppopp)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11eabdc50>"
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overc.FEV1PP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11e242050>"
      ]
     },
     "execution_count": 290,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAUdUlEQVR4nO3df5Bd9VnH8fcjkTawmvCjvcaEMShIhxJBckU6qLMLRWnpNPmDYegwNWicnVHbokbbVGd0nNGZVEXEUasZqI1aWRDBMHSoYsq244zQJpSy/JQUQsvaJlWT6CLTNvr4xz2RZbObe+/u/XG+yfs1s3PvOfecm+fZc+8nZ7/33HMiM5Eklefbhl2AJGlxDHBJKpQBLkmFMsAlqVAGuCQVatkg/7Gzzz47165d29U6r7zyCqeffnp/ChoQe6gHe6iHE6EHGGwfe/bs+bfMfNPc+QMN8LVr17J79+6u1pmcnGR0dLQ/BQ2IPdSDPdTDidADDLaPiHhpvvkOoUhSoQxwSSqUAS5JhTLAJalQBrgkFcoAl6RCGeCSVCgDXJIK1VGAR8QvRsRTEfFkRNwZEW+MiHMj4tGI2BsRd0XEqf0uVpL0mrbfxIyI1cAHgAsz89WIuBu4AXgncGtmTkTEnwKbgY/2tVqd1NZu/WRXy+/bdm2fKpHqodMhlGXA8ohYBpwGfBW4ErinenwHsLH35UmSFhKdXFItIm4Gfht4FfgH4Gbgkcw8r3r8HODBzLxonnXHgXGARqOxfmJioqsCZ2ZmGBkZ6WqdurGH3piaPtzV8utWr3jddB16WCp7qI9B9jE2NrYnM5tz53cyhHIGsAE4FzgE/A1wTaf/cGZuB7YDNJvN7PbkLyfCiW/soTdu6nYI5cbR103XoYelsof6qEMfnQyhvB14MTO/npnfAu4FrgBWVkMqAGuA6T7VKEmaRycB/mXg8og4LSICuAp4GngYuK5aZhOwsz8lSpLm0zbAM/NRWh9WPgZMVetsBz4E/FJE7AXOAu7oY52SpDk6uqBDZv4G8BtzZr8AXNbziiRJHfGbmJJUKANckgplgEtSoQxwSSqUAS5JhTLAJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklSotgEeERdExOOzfv4zIn4hIs6MiIci4vnq9oxBFCxJaunkmpjPZeYlmXkJsB74b+A+YCuwKzPPB3ZV05KkAel2COUq4EuZ+RKwAdhRzd8BbOxlYZKk44vM7HzhiI8Bj2XmH0XEocxcWc0P4ODR6TnrjAPjAI1GY/3ExERXBc7MzDAyMtLVOnVjD70xNX24q+XXrV7xuuk69LBU9lAfg+xjbGxsT2Y2587vOMAj4lTgX4G3Zub+2QFePX4wM487Dt5sNnP37t1dFT45Ocno6GhX69SNPfTG2q2f7Gr5fduufd10HXpYKnuoj0H2ERHzBng3QyjvoLX3vb+a3h8Rq6onXwUcWHqZkqROdRPg7wHunDV9P7Cpur8J2NmroiRJ7XUU4BFxOnA1cO+s2duAqyPieeDt1bQkaUCWdbJQZr4CnDVn3r/TOipFkjQEfhNTkgplgEtSoToaQpFOdEs9RFEaBvfAJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqE8jFBD0+2he5Jezz1wSSqUAS5JhTLAJalQBrgkFcoAl6RCGeCSVKhOr8izMiLuiYhnI+KZiHhbRJwZEQ9FxPPV7XEvaCxJ6q1O98BvAz6VmW8BLgaeAbYCuzLzfGBXNS1JGpC2AR4RK4AfA+4AyMxvZuYhYAOwo1psB7CxX0VKko4VmXn8BSIuAbYDT9Pa+94D3AxMZ+bKapkADh6dnrP+ODAO0Gg01k9MTHRV4MzMDCMjI12tUzf2ML+p6cM9fb52Gsth/6u9ea51q1f05om65GupPgbZx9jY2J7MbM6d30mAN4FHgCsy89GIuA34T+D9swM7Ig5m5nHHwZvNZu7evburwicnJxkdHe1qnbqxh/kN+qv0W9Yd4Zap3pw9YlhX5PG1VB+D7CMi5g3wTsbAXwZezsxHq+l7gEuB/RGxqnryVcCBXhUrSWqvbYBn5teAr0TEBdWsq2gNp9wPbKrmbQJ29qVCSdK8Ov178v3AJyLiVOAF4Kdohf/dEbEZeAm4vj8lSpLm01GAZ+bjwDHjL7T2xiVJQ+A3MSWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpQBLkmFMsAlqVAGuCQVygCXpEIZ4JJUKANckgplgEtSoQxwSSqUAS5JhTLAJalQHV2RJyL2Af8F/A9wJDObEXEmcBewFtgHXJ+ZB/tTpiRprm72wMcy85JZl7bfCuzKzPOBXdW0JGlAljKEsgHYUd3fAWxcejmSpE5FZrZfKOJF4CCQwJ9l5vaIOJSZK6vHAzh4dHrOuuPAOECj0Vg/MTHRVYEzMzOMjIx0tU7d2MP8pqYP9/T52mksh/2v9ua51q1e0Zsn6pKvpfoYZB9jY2N7Zo1+/L+OxsCBH8nM6Yh4M/BQRDw7+8HMzIiY93+CzNwObAdoNps5OjraVeGTk5N0u07d2MP8btr6yZ4+Xztb1h3hlqlOX/LHt+/G0Z48T7d8LdVHHfroaAglM6er2wPAfcBlwP6IWAVQ3R7oV5GSpGO1DfCIOD0ivuPofeDHgSeB+4FN1WKbgJ39KlKSdKxO/p5sAPe1hrlZBvx1Zn4qIj4P3B0Rm4GXgOv7V6Ykaa62AZ6ZLwAXzzP/34Gr+lGUJKk9v4kpSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpQBLkmF6s2p2SRg7YDPLjhM3fa6b9u1fapEJzP3wCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhOg7wiDglIr4QEQ9U0+dGxKMRsTci7oqIU/tXpiRprm72wG8Gnpk1/RHg1sw8DzgIbO5lYZKk4+sowCNiDXAtcHs1HcCVwD3VIjuAjf0oUJI0v073wP8A+CDwv9X0WcChzDxSTb8MrO5xbZKk44jMPP4CEe8C3pmZPxcRo8AvAzcBj1TDJ0TEOcCDmXnRPOuPA+MAjUZj/cTERFcFzszMMDIy0tU6dXOy9DA1fXhA1SxOYznsf3U4//a61St68jwny2upBIPsY2xsbE9mNufO7+RcKFcA746IdwJvBL4TuA1YGRHLqr3wNcD0fCtn5nZgO0Cz2czR0dGuCp+cnKTbdermZOnhppqfC2XLuiPcMjWc0//su3G0J89zsryWSlCHPtoOoWTmhzNzTWauBW4APp2ZNwIPA9dVi20CdvatSknSMZZyHPiHgF+KiL20xsTv6E1JkqROdPX3ZGZOApPV/ReAy3pfkiSpE54PXBqAbs4f7rnD1Sm/Si9JhTLAJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKlTbAI+IN0bE5yLiixHxVET8ZjX/3Ih4NCL2RsRdEXFq/8uVJB3VyR74N4ArM/Ni4BLgmoi4HPgIcGtmngccBDb3r0xJ0lydXJU+M3Ommvz26ieBK4F7qvk7gI19qVCSNK/IzPYLRZwC7AHOA/4Y+F3gkWrvm4g4B3gwMy+aZ91xYByg0Wisn5iY6KrAmZkZRkZGulqnbk6WHqamDw+omsVpLIf9rw67iqWZr4d1q1cMp5hFOhHeDzDYPsbGxvZkZnPu/I4uapyZ/wNcEhErgfuAt3T6D2fmdmA7QLPZzNHR0U5XBWBycpJu16mbk6WHm7q4cO8wbFl3hFumyr6O93w97LtxdDjFLNKJ8H6AevTR1VEomXkIeBh4G7AyIo6+ktYA0z2uTZJ0HJ0chfKmas+biFgOXA08QyvIr6sW2wTs7FeRkqRjdfL35CpgRzUO/m3A3Zn5QEQ8DUxExG8BXwDu6GOdkqQ52gZ4Zj4B/OA8818ALutHUZKk9vwmpiQVygCXpEKVfUyV+m5tdWjglnVHan+YoHSycQ9ckgplgEtSoQxwSSqUAS5JhTLAJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBWqk2tinhMRD0fE0xHxVETcXM0/MyIeiojnq9sz+l+uJOmoTvbAjwBbMvNC4HLg5yPiQmArsCszzwd2VdOSpAFpG+CZ+dXMfKy6/1+0rki/GtgA7KgW2wFs7FeRkqRjRWZ2vnDEWuCzwEXAlzNzZTU/gINHp+esMw6MAzQajfUTExNdFTgzM8PIyEhX69RNyT1MTR8GoLEc9r865GKW6ETtYd3qFcMpZpFKfj/MNsg+xsbG9mRmc+78jgM8IkaAzwC/nZn3RsSh2YEdEQcz87jj4M1mM3fv3t1V4ZOTk4yOjna1Tt2U3MPsS6rdMlX2FfhO1B72bbt2SNUsTsnvh9kG2UdEzBvgHR2FEhHfDvwt8InMvLeavT8iVlWPrwIO9KpYSVJ7nRyFEsAdwDOZ+fuzHrof2FTd3wTs7H15kqSFdPL35BXAe4GpiHi8mverwDbg7ojYDLwEXN+fEiVJ82kb4Jn5T0As8PBVvS1HktQpv4kpSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpQBLkmFMsAlqVAGuCQVygCXpEKVfXZ7Sf9/0Y1OlXYBCC3MPXBJKpQBLkmFMsAlqVCdXFLtYxFxICKenDXvzIh4KCKer26PezFjSVLvdfIh5seBPwL+Yta8rcCuzNwWEVur6Q/1vjz1WrcfeEmqr7Z74Jn5WeA/5szeAOyo7u8ANva4LklSG5GZ7ReKWAs8kJkXVdOHMnNldT+Ag0en51l3HBgHaDQa6ycmJroqcGZmhpGRka7WqZs69TA1fXhR6zWWw/5Xe1zMgNlDy7rVK3pTzCLV6f2wFIPsY2xsbE9mNufOX/Jx4JmZEbHg/wKZuR3YDtBsNnN0dLSr55+cnKTbdeqmTj3ctMghlC3rjnDLVNlfG7CHln03jvammEWq0/thKerQx2KPQtkfEasAqtsDvStJktSJxf5Xfj+wCdhW3e7sWUXqih9KqlvdvGb81ma9dXIY4Z3APwMXRMTLEbGZVnBfHRHPA2+vpiVJA9R2Dzwz37PAQ1f1uBZJNeN5VurNb2JKUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKlTZ59Y8QXmCKml+nojr9dwDl6RCGeCSVCgDXJIKZYBLUqH8EJP+f2i4Zd2RRV+LUipJJ+8l3w+94x64JBVqSXvgEXENcBtwCnB7Zvbt0moeWiepG3X6y7pfhzQueg88Ik4B/hh4B3Ah8J6IuLBXhUmSjm8pQyiXAXsz84XM/CYwAWzoTVmSpHYiMxe3YsR1wDWZ+TPV9HuBH87M981ZbhwYryYvAJ7r8p86G/i3RRVZH/ZQD/ZQDydCDzDYPr4nM980d2bfj0LJzO3A9sWuHxG7M7PZw5IGzh7qwR7q4UToAerRx1KGUKaBc2ZNr6nmSZIGYCkB/nng/Ig4NyJOBW4A7u9NWZKkdhY9hJKZRyLifcDf0zqM8GOZ+VTPKnvNoodfasQe6sEe6uFE6AFq0MeiP8SUJA2X38SUpEIZ4JJUqNoFeEScEhFfiIgHqulzI+LRiNgbEXdVH5jWVkSsjIh7IuLZiHgmIt4WEWdGxEMR8Xx1e8aw6zyeiPjFiHgqIp6MiDsj4o0lbIeI+FhEHIiIJ2fNm/d3Hy1/WPXzRERcOrzKX7NAD79bvZ6eiIj7ImLlrMc+XPXwXET8xHCqfr35epj12JaIyIg4u5ouZjtU899fbYunIuJ3Zs0fynaoXYADNwPPzJr+CHBrZp4HHAQ2D6Wqzt0GfCoz3wJcTKuXrcCuzDwf2FVN11JErAY+ADQz8yJaH1DfQBnb4ePANXPmLfS7fwdwfvUzDnx0QDW283GO7eEh4KLM/AHgX4APA1SnrrgBeGu1zp9Up7gYto9zbA9ExDnAjwNfnjW7mO0QEWO0vm1+cWa+Ffi9av7QtkOtAjwi1gDXArdX0wFcCdxTLbID2Dic6tqLiBXAjwF3AGTmNzPzEK2NvqNarNY9VJYByyNiGXAa8FUK2A6Z+VngP+bMXuh3vwH4i2x5BFgZEasGU+nC5ushM/8hM49Uk4/Q+s4FtHqYyMxvZOaLwF5ap7gYqgW2A8CtwAeB2UdOFLMdgJ8FtmXmN6plDlTzh7YdahXgwB/Q2sD/W02fBRya9eJ9GVg9jMI6dC7wdeDPq2Gg2yPidKCRmV+tlvka0BhahW1k5jStPYsv0wruw8AeytoOsy30u18NfGXWcqX09NPAg9X9YnqIiA3AdGZ+cc5DxfQAfD/wo9VQ4mci4oeq+UProTYBHhHvAg5k5p5h17IEy4BLgY9m5g8CrzBnuCRbx23W9tjNaox4A63/jL4bOJ15/hwuUd1/9+1ExK8BR4BPDLuWbkTEacCvAr8+7FqWaBlwJnA58CvA3dUowdDUJsCBK4B3R8Q+Wmc2vJLWePLK6k95qP/X9V8GXs7MR6vpe2gF+v6jfxZWtwcWWL8O3g68mJlfz8xvAffS2jYlbYfZFvrdF3UqiIi4CXgXcGO+9uWNUnr4Plo7BF+s3t9rgMci4rsopwdovb/vrYZ7PkdrpOBshthDbQI8Mz+cmWsycy2tDwQ+nZk3Ag8D11WLbQJ2DqnEtjLza8BXIuKCatZVwNO0TjGwqZpX6x5oDZ1cHhGnVXsXR3soZjvMsdDv/n7gJ6ujIC4HDs8aaqmVaF045YPAuzPzv2c9dD9wQ0S8ISLOpfVB4OeGUePxZOZUZr45M9dW7++XgUur90sx2wH4O2AMICK+HziV1tkIh7cdMrN2P8Ao8EB1/3urX8Ze4G+ANwy7vja1XwLsBp6oNvgZtMbydwHPA/8InDnsOtv08JvAs8CTwF8CbyhhOwB30hq3/xatkNi80O8eCFoXJPkSMEXrqJu69rCX1hjr49XPn85a/teqHp4D3jHs+hfqYc7j+4CzC9wOpwJ/Vb0vHgOuHPZ28Kv0klSo2gyhSJK6Y4BLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQv0fgf4kxAqhuuUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overc.PEFRPPOFVCPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Createvarsppopppp for PEFRPPOFVCPPPP PEFRPPOFVCPPPP FEF75PPOFVCPPPP MMEFPPOFVCPPPP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsppopppp(df):\n",
    "    vn = df.name + 'PEFRPPOFVCPP'\n",
    "    df['PEFRPPOFVCPPPP'] = 100 * df.PEFRPPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                              + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    " #   print (vn)\n",
    " #   vn = df.name + 'FEV1OFEV6'\n",
    "#    print (vn)\n",
    "    vn = df.name + 'PEFRPPOFEV1PP'\n",
    "    df['PEFRPPOFEV1PPPP'] = 100 * df.PEFRPPOFEV1PP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                                + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEF75PPOFVCPP'\n",
    "    df['FEF75PPOFVCPPPP'] = 100 * df.FEF75PPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                                + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'MMEFPPOFVCPP'\n",
    "    df['MMEFPPOFVCPPPP'] = 100 * df.MMEFPPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                                + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'MMEFPPOPEFRPP'\n",
    "    df['MMEFPPOPEFRPPPP'] = 100 * df.MMEFPPOPEFRPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                                + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c1a27d0>"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overb.MMEFPPOFVCPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mlt20cma\n",
      "m20overcma\n",
      "mlt20b\n",
      "m20overb\n",
      "flt18cma\n",
      "f18overcma\n",
      "flt18b\n",
      "f18overb\n",
      "mlt20c\n",
      "m20overc\n",
      "mlt20ma\n",
      "m20overma\n",
      "flt18c\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # Remove the CWD from sys.path while we load stuff.\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  app.launch_new_instance()\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f18overc\n",
      "flt18ma\n",
      "f18overma\n",
      "mallcma\n",
      "mallb\n",
      "mallc\n",
      "mallma\n",
      "fallcma\n",
      "fallb\n",
      "fallc\n",
      "fallma\n"
     ]
    }
   ],
   "source": [
    "for y in framestoanalyze:\n",
    "    print (y.name)\n",
    "    createvarsppopppp(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11eaac890>"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overc.FEV1OFVC.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c6cf390>"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAUsElEQVR4nO3df5BddXnH8fcjEQW2Tfih2zRhmrQgDpKC5pbi0Dq7gBbFMfmDcXAYG9p0dqatSjWtBp2p40ydibUU6dRqM2BNW8uCFBoGRyuNrE5nCpoguvyQEjFgtpj4I4kuMmr06R/3RNab3dx7d+/de78379fMzr3ne8/ZPM+eez85e/b8iMxEklSe5/W6AEnS/BjgklQoA1ySCmWAS1KhDHBJKtSSxfzHzjjjjFy1alVbyzzzzDOccsop3SloEQ1CH4PQA9hHPxmEHqD7fezates7mfmixvFFDfBVq1axc+fOtpaZmJhgZGSkOwUtokHoYxB6APvoJ4PQA3S/j4h4crZxd6FIUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCtVSgEfE2yPi4Yh4KCJuiYgXRsTqiLg/InZHxK0RcWK3i5UkPafpmZgRsQJ4G3BuZj4bEbcBVwGvA27IzPGI+CiwEfhIV6vVcW3V5k+1Nf+eLVd0qRKpP7S6C2UJcFJELAFOBp4GLgFur17fBqzvfHmSpLlEK7dUi4hrgfcDzwKfBa4F7svMs6rXzwQ+nZnnzbLsGDAGMDw8vHZ8fLytAqenpxkaGmprmX40CH30uofJqUNtzb9mxdJZx3vdR6cMQh+D0AN0v4/R0dFdmVlrHG9lF8qpwDpgNXAQ+CRweav/cGZuBbYC1Gq1bPeCL17spn/0uodr2t2FcvXIrOO97qNTBqGPQegBetdHK7tQLgO+kZnfzsyfAHcAFwPLql0qACuBqS7VKEmaRSsB/hRwUUScHBEBXAo8AtwLXFnNswHY3p0SJUmzaRrgmXk/9T9WPgBMVstsBd4FvCMidgOnAzd3sU5JUoOWbuiQme8F3tsw/ARwYccrkiS1xDMxJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpQBLkmFMsAlqVBNAzwizomIB2d8fT8i/iwiTouIeyLi8erx1MUoWJJU18o9MR/LzAsy8wJgLfBD4E5gM7AjM88GdlTTkqRF0u4ulEuBr2fmk8A6YFs1vg1Y38nCJEnHFpnZ+swRHwMeyMy/j4iDmbmsGg/gwJHphmXGgDGA4eHhtePj420VOD09zdDQUFvL9KNB6KPXPUxOHWpr/jUrls463us+OmUQ+hiEHqD7fYyOju7KzFrjeMsBHhEnAv8HvCwz980M8Or1A5l5zP3gtVotd+7c2VbhExMTjIyMtLVMPxqEPnrdw6rNn2pr/j1brph1vNd9dMog9DEIPUD3+4iIWQO8nV0or6W+9b2vmt4XEcurb74c2L/wMiVJrWonwN8E3DJj+i5gQ/V8A7C9U0VJkpprKcAj4hTg1cAdM4a3AK+OiMeBy6ppSdIiWdLKTJn5DHB6w9h3qR+VIknqAc/ElKRCGeCSVKiWdqFIg65ThyhKi8ktcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpRnYqpn2j37UdIvcgtckgplgEtSoQxwSSpUq3fkWRYRt0fE1yLi0Yh4ZUScFhH3RMTj1eMxb2gsSeqsVrfAbwQ+k5kvBc4HHgU2Azsy82xgRzUtSVokTQM8IpYCrwJuBsjMH2fmQWAdsK2abRuwvltFSpKOFpl57BkiLgC2Ao9Q3/reBVwLTGXmsmqeAA4cmW5YfgwYAxgeHl47Pj7eVoHT09MMDQ21tUw/GoQ+Ot3D5NShjn2v2axZsXTW8dn6aLeWub73YvI91T+63cfo6OiuzKw1jrcS4DXgPuDizLw/Im4Evg+8dWZgR8SBzDzmfvBarZY7d+5sq/CJiQlGRkbaWqYfDUIfne6h28eBz3XXnNn6KPGOPL6n+ke3+4iIWQO8lX3ge4G9mXl/NX078ApgX0Qsr775cmB/p4qVJDXX9EzMzPxWRHwzIs7JzMeAS6nvTnkE2ABsqR63d7VSqU1zbVVvWnOYazwLVAOg1VPp3wp8IiJOBJ4A/oD61vttEbEReBJ4Y3dKlCTNpqUAz8wHgaP2v1DfGpck9YBnYkpSoQxwSSqUAS5JhTLAJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhWrojT0TsAX4A/BQ4nJm1iDgNuBVYBewB3piZB7pTpiSpUTtb4KOZecGMW9tvBnZk5tnAjmpakrRIFrILZR2wrXq+DVi/8HIkSa2KzGw+U8Q3gANAAv+YmVsj4mBmLqteD+DAkemGZceAMYDh4eG14+PjbRU4PT3N0NBQW8v0o0Hoo9M9TE4d6tj3asfwSbDv2YV9jzUrlnammAXwPdU/ut3H6Ojorhl7P36upX3gwO9k5lREvBi4JyK+NvPFzMyImPV/gszcCmwFqNVqOTIy0lbhExMTtLtMPxqEPjrdwzWbP9Wx79WOTWsOc/1kq2/92e25eqQzxSyA76n+0as+WtqFkplT1eN+4E7gQmBfRCwHqB73d6tISdLRmgZ4RJwSEb905DnwGuAh4C5gQzXbBmB7t4qUJB2tld8jh4E767u5WQL8W2Z+JiK+BNwWERuBJ4E3dq9MSVKjpgGemU8A588y/l3g0m4UJUlqzjMxJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAu7JJs0w6oeXV2wF9rtdc+WK7pUiY5nboFLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQrUc4BFxQkR8OSLurqZXR8T9EbE7Im6NiBO7V6YkqVE7W+DXAo/OmP4AcENmngUcADZ2sjBJ0rG1FOARsRK4Aripmg7gEuD2apZtwPpuFChJml2rW+AfAt4J/KyaPh04mJmHq+m9wIoO1yZJOobIzGPPEPF64HWZ+ScRMQL8OXANcF+1+4SIOBP4dGaeN8vyY8AYwPDw8Nrx8fG2CpyenmZoaKitZfrRIPTRrIfJqUOLWM38DZ8E+57tdRVzW7NiaUvzHQ/vqVJ0u4/R0dFdmVlrHG/lWigXA2+IiNcBLwR+GbgRWBYRS6qt8JXA1GwLZ+ZWYCtArVbLkZGRtgqfmJig3WX60SD00ayHawq5FsqmNYe5frJ/LwO05+qRluY7Ht5TpehVH013oWTmdZm5MjNXAVcBn8vMq4F7gSur2TYA27tWpSTpKAs5DvxdwDsiYjf1feI3d6YkSVIr2vo9MjMngInq+RPAhZ0vSZLUCs/ElKRCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpQBLkmFMsAlqVAGuCQVygCXpEI1DfCIeGFEfDEivhIRD0fE+6rx1RFxf0TsjohbI+LE7pcrSTqilS3wHwGXZOb5wAXA5RFxEfAB4IbMPAs4AGzsXpmSpEat3JU+M3O6mnx+9ZXAJcDt1fg2YH1XKpQkzSoys/lMEScAu4CzgA8DHwTuq7a+iYgzgU9n5nmzLDsGjAEMDw+vHR8fb6vA6elphoaG2lqmHw1CH816mJw6tIjVzN/wSbDv2V5XsXBH+lizYmmvS5m3QfhcQPf7GB0d3ZWZtcbxlu5Kn5k/BS6IiGXAncBLW/2HM3MrsBWgVqvlyMhIq4sCMDExQbvL9KNB6KNZD9ds/tTiFbMAm9Yc5vrJlt76fe1IH3uuHul1KfM2CJ8L6F0fbR2FkpkHgXuBVwLLIuLIp2AlMNXh2iRJx9DKUSgvqra8iYiTgFcDj1IP8iur2TYA27tVpCTpaK38Hrkc2FbtB38ecFtm3h0RjwDjEfFXwJeBm7tYpySpQdMAz8yvAi+fZfwJ4MJuFCVJas4zMSWpUAa4JBXKAJekQhngklSo8s9mUFetmnFyzqY1h4s5WUc6HrgFLkmFMsAlqVAGuCQVygCXpEIZ4JJUKANckgplgEtSoQxwSSqUAS5JhTLAJalQBrgkFcoAl6RCtXJPzDMj4t6IeCQiHo6Ia6vx0yLinoh4vHo8tfvlSpKOaGUL/DCwKTPPBS4C/jQizgU2Azsy82xgRzUtSVokTQM8M5/OzAeq5z+gfkf6FcA6YFs12zZgfbeKlCQdLTKz9ZkjVgFfAM4DnsrMZdV4AAeOTDcsMwaMAQwPD68dHx9vq8Dp6WmGhobaWqYfldrH5NShnz8fPgn2PdvDYjpk0PpYs2Jpr0uZt1I/F4263cfo6OiuzKw1jrcc4BExBHweeH9m3hERB2cGdkQcyMxj7gev1Wq5c+fOtgqfmJhgZGSkrWX6Ual9NN7Q4frJ8u8BMmh97NlyRa9LmbdSPxeNut1HRMwa4C0dhRIRzwf+HfhEZt5RDe+LiOXV68uB/Z0qVpLUXCtHoQRwM/BoZv7tjJfuAjZUzzcA2ztfniRpLq38Hnkx8GZgMiIerMbeDWwBbouIjcCTwBu7U6IkaTZNAzwz/xuIOV6+tLPlSJJa5ZmYklQoA1ySCmWAS1KhDHBJKpQBLkmFMsAlqVAGuCQVygCXpEIZ4JJUqPIvySYd52ZeMbIVJV+9UL/ILXBJKpQBLkmFMsAlqVAGuCQVyj9iHmfa/YOXpP7lFrgkFaqVW6p9LCL2R8RDM8ZOi4h7IuLx6vGYNzOWJHVeK1vgHwcubxjbDOzIzLOBHdW0JGkRNQ3wzPwC8L2G4XXAtur5NmB9h+uSJDURmdl8pohVwN2ZeV41fTAzl1XPAzhwZHqWZceAMYDh4eG14+PjbRU4PT3N0NBQW8v0o37pY3Lq0LyXHT4J9j3bwWJ65HjvY82KpZ0vZp765XOxUN3uY3R0dFdm1hrHF3wUSmZmRMz5v0BmbgW2AtRqtRwZGWnr+09MTNDuMv2oX/q4ZgFHoWxac5jrJ8s/cOl472PP1SOdL2ae+uVzsVC96mO+R6Hsi4jlANXj/s6VJElqxXw3Q+4CNgBbqsftHatIUle1cy6AF77qb60cRngL8D/AORGxNyI2Ug/uV0fE48Bl1bQkaRE13QLPzDfN8dKlHa5F8+CZleomL1Xb3zwTU5IKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1Khyr+m5gDy9Hhpdl6I6xe5BS5JhTLAJalQBrgkFcoAl6RC+UdMFuePhpvWHF7Q/SilErT7WfJzsTBugUtSoRa0BR4RlwM3AicAN2Vm126t5qF1ktqxmJnR7DeJbh3SOO8t8Ig4Afgw8FrgXOBNEXFupwqTJB3bQnahXAjszswnMvPHwDiwrjNlSZKaicyc34IRVwKXZ+YfVdNvBn47M9/SMN8YMFZNngM81uY/dQbwnXkV2V8GoY9B6AHso58MQg/Q/T5+LTNf1DjY9aNQMnMrsHW+y0fEzsysdbCknhiEPgahB7CPfjIIPUDv+ljILpQp4MwZ0yurMUnSIlhIgH8JODsiVkfEicBVwF2dKUuS1My8d6Fk5uGIeAvwn9QPI/xYZj7cscqeM+/dL31mEPoYhB7APvrJIPQAPepj3n/ElCT1lmdiSlKhDHBJKlRfBnhEnBARX46Iu6vp1RFxf0Tsjohbqz+a9q2IWBYRt0fE1yLi0Yh4ZUScFhH3RMTj1eOpva6zmYh4e0Q8HBEPRcQtEfHCEtZFRHwsIvZHxEMzxmb9+Ufd31X9fDUiXtG7yp8zRw8frN5TX42IOyNi2YzXrqt6eCwifq83VR9ttj5mvLYpIjIizqimi1kX1fhbq/XxcET89YzxRVsXfRngwLXAozOmPwDckJlnAQeAjT2pqnU3Ap/JzJcC51PvZTOwIzPPBnZU030rIlYAbwNqmXke9T9UX0UZ6+LjwOUNY3P9/F8LnF19jQEfWaQam/k4R/dwD3BeZv4m8L/AdQDVJSyuAl5WLfMP1aUu+sHHOboPIuJM4DXAUzOGi1kXETFK/czz8zPzZcDfVOOLui76LsAjYiVwBXBTNR3AJcDt1SzbgPW9qa65iFgKvAq4GSAzf5yZB6mv7G3VbH3dwwxLgJMiYglwMvA0BayLzPwC8L2G4bl+/uuAf866+4BlEbF8cSqd22w9ZOZnM/NwNXkf9XMvoN7DeGb+KDO/AeymfqmLnptjXQDcALwTmHkURTHrAvhjYEtm/qiaZ381vqjrou8CHPgQ9RX7s2r6dODgjDfuXmBFLwpr0Wrg28A/VbuBboqIU4DhzHy6mudbwHDPKmxBZk5R36p4inpwHwJ2Uda6mGmun/8K4Jsz5iulpz8EPl09L6qHiFgHTGXmVxpeKqmPlwC/W+1O/HxE/FY1vqg99FWAR8Trgf2ZuavXtSzAEuAVwEcy8+XAMzTsLsn6sZt9ffxmtY94HfX/kH4VOIVZfhUuUQk//2OJiPcAh4FP9LqWdkXEycC7gb/sdS0LtAQ4DbgI+AvgtmpvwaLqqwAHLgbeEBF7qF/d8BLq+5OXVb/GQ/+fsr8X2JuZ91fTt1MP9H1Hfh2sHvfPsXy/uAz4RmZ+OzN/AtxBff2UtC5mmuvnX9QlISLiGuD1wNX53EkcJfXwG9Q3Cr5Sfc5XAg9ExK9QVh97gTuq3T1fpL7H4AwWuYe+CvDMvC4zV2bmKup/CPhcZl4N3AtcWc22AdjeoxKbysxvAd+MiHOqoUuBR6hfZmBDNdbXPVSeAi6KiJOrLYsjfRSzLhrM9fO/C/j96giIi4BDM3a19JWo30DlncAbMvOHM166C7gqIl4QEaup/xHwi72osZnMnMzMF2fmqupzvhd4RfW5KWZdAP8BjAJExEuAE6lfjXBx10Vm9uUXMALcXT3/9eqHsBv4JPCCXtfXpPYLgJ3AV6sVfSr1ffk7gMeB/wJO63WdLfTxPuBrwEPAvwAvKGFdALdQ32//E+oBsXGunz8Q1G9M8nVgkvpRN/3aw27q+1cfrL4+OmP+91Q9PAa8ttf1H6uPhtf3AGcUuC5OBP61+mw8AFzSi3XhqfSSVKi+2oUiSWqdAS5JhTLAJalQBrgkFcoAl6RCGeCSVCgDXJIK9f9uizA5YUtNdwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overc.PEFRPPOFVCPPPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'alltotal' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-296-db9357a617aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0malltotal\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPEFRPPOFVCPPPP\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'alltotal' is not defined"
     ]
    }
   ],
   "source": [
    "alltotal.PEFRPPOFVCPPPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m20overc.FVCPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "std = m20overc.FEV1OFVC.std()\n",
    "mean = m20overc.FEV1OFVC.mean()\n",
    "ratio = std / mean # m20overc.FEV1OFVC.std()/m20overc.FEV1OFVC.mean()\n",
    "print (mean, ratio, ratio* 1.645, mean - (ratio*1.645))\n",
    "print (.876 * mean)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "says mean FEV1/FVC .788, lower limit if use std for all data .645"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The std is smaller for %predicted than for actual value\n",
    "so to get 5% lower limit can use %predicted - 1.645 * std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "std = m20overc.FEV1OFVCPP.std()\n",
    "mean = m20overc.FEV1OFVCPP.mean()\n",
    "ratio = std/mean # m20overc.FEV1OFVCPP.std()/m20overc.FEV1OFVCPP.mean()\n",
    "print (mean, ratio, ratio*1.645, mean - (ratio*1.645))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "says mean FEV1/FVC %pred is 100% and lower limit .876 of that\n",
    "if use prior mean FEV1/FVC of .788, .876 of that is .69 which is higher than .645"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try saving variables to array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print (m20overc.name)\n",
    "print (varsratio[1])\n",
    "dfvar = m20overc.name + varsratio[1]\n",
    "print (dfvar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print (resultsratio)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "new variable %pred ratios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "data.loc['m20overbFEV1OFVC']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "height_age_reg(m20overb, 'SPPFEV1')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## now need do the same using Hankinson equations\n",
    "Hvarlistnonratio - FEV1, FVC, FEV6, MMEF, PEF\n",
    "Hvarlistratio - FEV1OFEV6, FEV1OFVC\n",
    "need first enter Hresults into hresultsratio names intercept, slope \n",
    "  H has same equation for youth and adults for ratios\n",
    "and Hresults into hresultsnonratio with names intercept, b1, b2\n",
    "Can read from excel or csv file - data = pd.read_csv(\"filename.csv\"); then data.head() to look at first five lines\n",
    "then createvarsratiopph and createvarsnonratiopph for each in hvarlistratio and hvarlistnonratio\n",
    "then creatediffsppratio and creatediffsppnonratio for each in hvarlistratio and hvarlistnonratio\n",
    "the show mean and std of each variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# hvarlistnonratio = [ 'SPPFEV1', 'SPPFEV6', 'SPPFVC','SPPPEAK','SPPMMEF']\n",
    "hvarlistnonratio = [ 'FEV1', 'FEV6', 'FVC','PEFR','MMEF']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hvarlistratio = ['FEV1OFVC','FEV1OFEV6']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create dataframes hresultsratio hresultsnonratio from the csv files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.listdir(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hresultsratio = pd.read_csv(\"data/hankinson_ratio.csv\")\n",
    "hresultsratio.set_index('dfnvarn', inplace=True)\n",
    "print (hresultsratio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hansenresultsratio = pd.read_csv(\"data/hansen_ratio.csv\")\n",
    "hansenresultsratio.set_index('dfnvarn', inplace=True)\n",
    "print (hansenresultsratio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hresultsratio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hresultsnonratio = pd.read_csv(\"data/hankinson_nonratio.csv\")\n",
    "hresultsnonratio.set_index('dfnvarn', inplace=True)\n",
    "print (hresultsnonratio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hresultsnonratio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsratiopph(df):\n",
    "    vn = df.name + 'FEV1OFVC'\n",
    "#    print (vn)\n",
    " #   print(hresultsratio.loc[vn, 'dfname'])\n",
    " #   print(hresultsratio.loc[vn, 'slope'])\n",
    "\n",
    " #   print(hresultsratio.loc[vn, 'intercept'])\n",
    " # was   df['FEV1OFVCPPh'] = (df.FEV1OFVC / (hresultsratio.loc[vn, 'intercept'] \\\n",
    "  #                                     + hresultsratio.loc[vn, 'slope'] * (df.HSAITMOR/ 12)))*100\n",
    "    df['FEV1OFVCPPh'] = 100 * (df.FEV1OFVC / (hresultsratio.loc[vn, 'intercept'] \\\n",
    "                                       + hresultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12)))\n",
    "    print (vn)\n",
    " #   vn = df.name + 'FEV1OFEV6'\n",
    "#    print (vn)\n",
    "    vn = df.name + 'FEV1OFEV6'\n",
    "    df['FEV1OFEV6PPh']= 100 * (df.FEV1OFEV6 / (hresultsratio.loc[vn, 'intercept'] \\\n",
    "                                       + hresultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12)))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsratiollnPredh(df):\n",
    "    vn = df.name + 'FEV1OFVC'\n",
    "#    print (vn)\n",
    " #   print(hresultsratio.loc[vn, 'dfname'])\n",
    " #   print(hresultsratio.loc[vn, 'slope'])\n",
    "\n",
    " #   print(hresultsratio.loc[vn, 'intercept'])\n",
    "    df['FEV1OFVCLLNPredh'] = (hresultsratio.loc[vn, 'llnintercept'] \\\n",
    "                                       + hresultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    "    print (vn)\n",
    " #   vn = df.name + 'FEV1OFEV6'\n",
    "#    print (vn)\n",
    "    vn = df.name + 'FEV1OFEV6'\n",
    "    df['FEV1OFEV6LLNPredh']= (hresultsratio.loc[vn, 'llnintercept'] \\\n",
    "                                       + hresultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsratiollnPredhansen(df):\n",
    "    vn = df.name + 'FEV1OFVC'\n",
    " #   print (vn)\n",
    " #   print(hresultsratio.loc[vn, 'dfname'])\n",
    " #   print(hresultsratio.loc[vn, 'slope'])\n",
    "\n",
    " #   print(hresultsratio.loc[vn, 'intercept'])\n",
    "    df['FEV1OFVCLLNPredhansen'] = (hansenresultsratio.loc[vn, 'intercept'] \\\n",
    "                                       + hansenresultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    " #   print (vn)\n",
    " #   vn = df.name + 'FEV1OFEV6'\n",
    "#    print (vn)\n",
    "    vn = df.name + 'FEV1OFEV6'\n",
    "    df['FEV1OFEV6LLNPredhansen']= (hansenresultsratio.loc[vn, 'intercept'] \\\n",
    "                                       + hansenresultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = df.name + 'FEV3OFVC'\n",
    "#    print (vn)\n",
    " #   print(hresultsratio.loc[vn, 'dfname'])\n",
    " #   print(hresultsratio.loc[vn, 'slope'])\n",
    "\n",
    " #   print(hresultsratio.loc[vn, 'intercept'])\n",
    "    df['FEV3OFVCLLNPredhansen'] = (hansenresultsratio.loc[vn, 'intercept'] \\\n",
    "                                       + hansenresultsratio.loc[vn, 'slope'] * (df.MXPAXTMR/ 12))\n",
    " #   vn = df.name + 'FEV1OFEV6'\n",
    "#    print (vn)\n",
    "    vn = df.name + 'FEV3OFEV6'\n",
    "\n",
    "    df['FEV3OFEV6LLNPredhansen']= (hansenresultsratio.loc[vn, 'intercept'] \n",
    "                                   + hansenresultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsnonratiopph(df):\n",
    "# variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height')\n",
    "    vn = df.name + 'FEV1'\n",
    "    print (vn)\n",
    "    df['FEV1PPh'] = 100 * df.FEV1 / (hresultsnonratio.loc[vn, 'intercept']  \n",
    "                                       + hresultsnonratio.loc[vn, 'b1']  * (df.MXPAXTMR / 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'b3'] * df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FVC'\n",
    "    df['FVCPPh'] = 100 * df.FVC / (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                      + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                      + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                      + hresultsnonratio.loc[vn, 'b3']\n",
    "                                      * df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'PEFR'\n",
    "    df['PEFRPPh'] = 100 * df.PEFR /(hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                      + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                      + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                      + hresultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV6'\n",
    "    df['FEV6PPh'] = 100 * df.FEV6 / (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                       + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'MMEF'\n",
    "    df['MMEFPPh'] = 100 * df.MMEF / (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                       + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsnonratioPredh(df):\n",
    "# variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height')\n",
    "    vn = df.name + 'FEV1'\n",
    "    print (vn)\n",
    "    df['FEV1Predh'] =(hresultsnonratio.loc[vn, 'intercept']  \n",
    "                                       + hresultsnonratio.loc[vn, 'b1']  * (df.MXPAXTMR / 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'b3'] * df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FVC'\n",
    "    df['FVCPredh'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                      + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                      + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                      + hresultsnonratio.loc[vn, 'b3']\n",
    "                                      * df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'PEFR'\n",
    "    df['PEFRPredh'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                      + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                      + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                      + hresultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV6'\n",
    "    df['FEV6Predh'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                       + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'MMEF'\n",
    "    df['MMEFPredh'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                       + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsnonratiollnPredh(df):\n",
    "# variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height')\n",
    "    vn = df.name + 'FEV1'\n",
    "    print (vn)\n",
    "    df['FEV1LLNPredh'] = (hresultsnonratio.loc[vn, 'intercept']  \n",
    "                                       + hresultsnonratio.loc[vn, 'b1']  * (df.MXPAXTMR / 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'llnb3'] * df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FVC'\n",
    "    df['FVCLLNPredh'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                      + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                      + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                      + hresultsnonratio.loc[vn, 'llnb3']\n",
    "                                      * df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'PEFR'\n",
    "    df['PEFRLLNPredh'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                      + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                      + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                      + hresultsnonratio.loc[vn, 'llnb3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'FEV6'\n",
    "    df['FEV6LLNPredh'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                       + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'llnb3']* df.BMPHT * df.BMPHT )\n",
    "    vn = df.name + 'MMEF'\n",
    "    df['MMEFLLNPredh'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                       + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                       + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                       + hresultsnonratio.loc[vn, 'llnb3']* df.BMPHT * df.BMPHT )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarpredFVCmFEV6h(df):\n",
    "# variables in form y = intercept + b1 * age + b2 * age * age + b3 * height * height')\n",
    "    vn = df.name + 'FVC'\n",
    "    vnb = df.name + 'FEV6'\n",
    "    df['predFVCmFEV6h'] = (hresultsnonratio.loc[vn, 'intercept'] \n",
    "                                      + hresultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                      + hresultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                      + hresultsnonratio.loc[vn, 'b3'] * df.BMPHT * df.BMPHT ) \n",
    "    - (hresultsnonratio.loc[vnb, 'intercept'] \n",
    "                                      + hresultsnonratio.loc[vnb, 'b1'] * (df.MXPAXTMR/ 12)  \n",
    "                                      + hresultsnonratio.loc[vnb, 'b2'] * (df.MXPAXTMR/ 12)* (df.MXPAXTMR/ 12) \n",
    "                                      + hresultsnonratio.loc[vnb, 'b3']* df.BMPHT * df.BMPHT )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hresultsratio.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hratioframestoanalyze = [m20overb,  m20overc, m20overma, f18overb,  f18overc, f18overma, \n",
    "                   mlt20b,  mlt20c, mlt20ma, flt18b, flt18c, flt18ma, \n",
    "                    mallb, mallc, mallma,  fallb, fallc, fallma]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hansenframestoanalyze = [m20overb,  m20overc, m20overma, f18overb,  f18overc, f18overma]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hnonratioframestoanalyze = [m20overb,  m20overc, m20overma, f18overb,  f18overc, f18overma, mlt20b,  mlt20c, mlt20ma, flt18b, flt18c, flt18ma ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hresultsnonratio.index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DOES NOT have name for the df after f18overma which is mlt20b\n",
    "I went back and reran the part that gave names, and now works"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for y in hratioframestoanalyze:\n",
    "    print (y.name, ' ', y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for y in hratioframestoanalyze:\n",
    "#    print (y.name)\n",
    "    createvarsratiopph(y)\n",
    " #   createvarpredFVCmFEV6h(y) # can't do pred for all\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for y in hratioframestoanalyze:\n",
    "#    print (y.name)\n",
    " \n",
    " #   createvarpredFVCmFEV6h(y) # can't do pred for all\n",
    "    createvarsratiollnPredh(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for y in hansenframestoanalyze:\n",
    "#    print (y.name)\n",
    " #   createvarpredFVCmFEV6h(y) # can't do pred for all\n",
    "    createvarsratiollnPredhansen(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for y in hnonratioframestoanalyze:\n",
    "#    print (y.name)\n",
    "    createvarsnonratiopph(y)\n",
    "    createvarpredFVCmFEV6h(y)\n",
    "#    createvarsnonratiollnh(y)\n",
    "    createvarsnonratiollnPredh(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The predicted FVC should always be more than predicted FEV6 - which it is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'predFVCmFEV6h'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-297-bb14b81cdc0e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredFVCmFEV6h\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'predFVCmFEV6h'"
     ]
    }
   ],
   "source": [
    "m20overb.predFVCmFEV6h.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "creatediffsppratio and creatediffsppnonratio "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV6PPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-298-1fe905e83fb0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV6PPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV6PPh'"
     ]
    }
   ],
   "source": [
    "m20overc.FEV6PPh.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV1PPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-299-b0f46375e1aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV1PPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV1PPh'"
     ]
    }
   ],
   "source": [
    "m20overb.FEV1PPh.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11e6cffd0>"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overb.FVCPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FVCPPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-301-5349ecfcc199>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFVCPPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FVCPPh'"
     ]
    }
   ],
   "source": [
    "m20overb.FVCPPh.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "scatterplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV1PPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-302-9496ad259665>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV1PPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV1PPh'"
     ]
    }
   ],
   "source": [
    "m20overb.FEV1PPh.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV1LLNPredh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-303-2cba002e5f85>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV1LLNPredh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV1LLNPredh'"
     ]
    }
   ],
   "source": [
    "m20overb.FEV1LLNPredh.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Print numbers that are below Hankinson predicted LLN;  for FEV1 it varies from 1.9 to 7.0%, so there are problems with this LLN\n",
    "# NEED DO ALSO for ratio\n",
    "but for y in hratioframestoanalyze"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printltllnh (df):\n",
    "    print (\"FEV1, \", df.name, \", \",len(df.query('FEV1 < FEV1LLNPredh')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FEV1 < FEV1LLNPredh'))/len(df)),4))\n",
    "    print (\"FEV6, \", df.name, \", \",len(df.query('FEV6 < FEV6LLNPredh')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FEV6 < FEV6LLNPredh'))/len(df)),4))\n",
    "    print (\"FVC, \", df.name, \", \",len(df.query('FVC < FVCLLNPredh')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FVC < FVCLLNPredh'))/len(df)),4))\n",
    "    print (\"MMEF, \", df.name, \", \",len(df.query('MMEF < MMEFLLNPredh')), \", \", \n",
    "           len(df), \", \", round((len(df.query('MMEF < MMEFLLNPredh'))/len(df)),4))\n",
    "    print (\"PEFR, \", df.name, \", \",len(df.query('PEFR < PEFRLLNPredh')), \", \", \n",
    "           len(df), \", \", round((len(df.query('PEFR < PEFRLLNPredh'))/len(df)),4))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "parameter, dfname, n below Hankinson LLN, count, fraction below LLN\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'hnonratioframestoanalyze' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-305-a197b70540eb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"parameter, dfname, n below Hankinson LLN, count, fraction below LLN\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhnonratioframestoanalyze\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mprintltllnh\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'hnonratioframestoanalyze' is not defined"
     ]
    }
   ],
   "source": [
    "print (\"parameter, dfname, n below Hankinson LLN, count, fraction below LLN\")\n",
    "for y in hnonratioframestoanalyze:\n",
    "    printltllnh (y)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printratioltllnh (df):\n",
    "    print (\"FEV1OFEV6, \", df.name, \", \",len(df.query('FEV1OFEV6 < FEV1OFEV6LLNPredh')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FEV1OFEV6 < FEV1OFEV6LLNPredh'))/len(df)),4))\n",
    "    print (\"FEV1OFVC, \", df.name, \", \",len(df.query('FEV1OFVC < FEV1OFVCLLNPredh')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FEV1OFVC < FEV1OFVCLLNPredh'))/len(df)),4))\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printratioltllnhansen (df):\n",
    "    print (\"FEV1OFEV6, \", df.name, \", \",len(df.query('FEV1OFEV6 < FEV1OFEV6LLNPredhansen')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FEV1OFEV6 < FEV1OFEV6LLNPredhansen'))/len(df)),4))\n",
    "    print (\"FEV1OFVC, \", df.name, \", \",len(df.query('FEV1OFVC < FEV1OFVCLLNPredhansen')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FEV1OFVC < FEV1OFVCLLNPredhansen'))/len(df)),4))\n",
    "    print (\"FEV3OFEV6, \", df.name, \", \",len(df.query('FEV3OFEV6 < FEV3OFEV6LLNPredhansen')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FEV3OFEV6 < FEV3OFEV6LLNPredhansen'))/len(df)),4))\n",
    "    print (\"FEV3OFVC, \", df.name, \", \",len(df.query('FEV3OFVC < FEV3OFVCLLNPredhansen')), \", \", \n",
    "           len(df), \", \", round((len(df.query('FEV3OFVC < FEV3OFVCLLNPredhansen'))/len(df)),4))\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "parameter, dfname, n below Hansen LLN, count, fraction below LLN\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'hansenframestoanalyze' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-308-ef2a2f00c606>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"parameter, dfname, n below Hansen LLN, count, fraction below LLN\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhansenframestoanalyze\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mprintratioltllnhansen\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'hansenframestoanalyze' is not defined"
     ]
    }
   ],
   "source": [
    "print (\"parameter, dfname, n below Hansen LLN, count, fraction below LLN\")\n",
    "for y in hansenframestoanalyze:\n",
    "    printratioltllnhansen (y)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "parameter, dfname, n below Hankinson LLN, count, fraction below LLN\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'hratioframestoanalyze' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-309-b21eeaea6880>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"parameter, dfname, n below Hankinson LLN, count, fraction below LLN\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhratioframestoanalyze\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mprintratioltllnh\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'hratioframestoanalyze' is not defined"
     ]
    }
   ],
   "source": [
    "print (\"parameter, dfname, n below Hankinson LLN, count, fraction below LLN\")\n",
    "for y in hratioframestoanalyze:\n",
    "    printratioltllnh (y)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "ename": "UndefinedVariableError",
     "evalue": "name 'FEV1PPh' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    186\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhas_resolvers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolvers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    915\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 916\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__missing__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m            \u001b[0;31m# support subclasses that define __missing__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    917\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py\u001b[0m in \u001b[0;36m__missing__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    907\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__missing__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 908\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    909\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV1PPh'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    197\u001b[0m                 \u001b[0;31m# e.g., df[df > 0]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 198\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtemps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    199\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV1PPh'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mUndefinedVariableError\u001b[0m                    Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-310-e3ae6966f463>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'FEV1PPh < .5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMXPAXTMR\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mquery\u001b[0;34m(self, expr, inplace, **kwargs)\u001b[0m\n\u001b[1;32m   3229\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"level\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"level\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3230\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"target\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3231\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3232\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3233\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, expr, inplace, **kwargs)\u001b[0m\n\u001b[1;32m   3344\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"resolvers\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"resolvers\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresolvers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3345\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3346\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_eval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3348\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mselect_dtypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;34m\"DataFrame\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/eval.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(expr, parser, engine, truediv, local_dict, global_dict, resolvers, level, target, inplace)\u001b[0m\n\u001b[1;32m    330\u001b[0m         )\n\u001b[1;32m    331\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 332\u001b[0;31m         \u001b[0mparsed_expr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExpr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    333\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    334\u001b[0m         \u001b[0;31m# construct the engine and evaluate the parsed expression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, expr, engine, parser, env, level)\u001b[0m\n\u001b[1;32m    762\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    763\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_visitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_parsers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 764\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mterms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    766\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mparse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    779\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    780\u001b[0m         \u001b[0;34m\"\"\"Parse an expression\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 781\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_visitor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    782\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    783\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Module\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    379\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mSyntaxError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"only a single expression is allowed\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m         \u001b[0mexpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 381\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    382\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Expr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Expr\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    382\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Expr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 384\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    385\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_rewrite_membership_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Compare\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    674\u001b[0m             \u001b[0mop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranslate_In\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mops\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m             \u001b[0mbinop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mast\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBinOp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcomps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbinop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m         \u001b[0;31m# recursive case: we have a chained comparison, a CMP b CMP c, etc.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_BinOp\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    495\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    496\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_BinOp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 497\u001b[0;31m         \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_transform_eq_ne\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    498\u001b[0m         \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_downcast_constants\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_evaluate_binop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36m_maybe_transform_eq_ne\u001b[0;34m(self, node, left, right)\u001b[0m\n\u001b[1;32m    414\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_maybe_transform_eq_ne\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mleft\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 416\u001b[0;31m             \u001b[0mleft\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mside\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"left\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    417\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mright\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    418\u001b[0m             \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mside\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"right\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Name\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    508\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    509\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 510\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mterm_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    511\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    512\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_NameConstant\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/ops.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, env, side, encoding)\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0mtname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_local\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LOCAL_TAG\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mtname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_DEFAULT_GLOBALS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_resolve_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/ops.py\u001b[0m in \u001b[0;36m_resolve_name\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_resolve_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocal_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_local\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_local\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    201\u001b[0m                 \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomputation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mops\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mUndefinedVariableError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 203\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mUndefinedVariableError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_local\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    204\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mswapkey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mold_key\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_key\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mUndefinedVariableError\u001b[0m: name 'FEV1PPh' is not defined"
     ]
    }
   ],
   "source": [
    "m20overb.query('FEV1PPh < .5').MXPAXTMR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m20overc.FEV6PPh.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV6PPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-311-d077f8118f1d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV6PPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV6PPh'"
     ]
    }
   ],
   "source": [
    "m20overb.FEV6PPh.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "ename": "UndefinedVariableError",
     "evalue": "name 'FEV6PPh' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    186\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhas_resolvers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolvers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    915\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 916\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__missing__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m            \u001b[0;31m# support subclasses that define __missing__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    917\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py\u001b[0m in \u001b[0;36m__missing__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    907\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__missing__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 908\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    909\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV6PPh'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    197\u001b[0m                 \u001b[0;31m# e.g., df[df > 0]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 198\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtemps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    199\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV6PPh'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mUndefinedVariableError\u001b[0m                    Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-312-b07e38e590d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'FEV6PPh < 0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMXPAXTMR\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mquery\u001b[0;34m(self, expr, inplace, **kwargs)\u001b[0m\n\u001b[1;32m   3229\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"level\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"level\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3230\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"target\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3231\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3232\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3233\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, expr, inplace, **kwargs)\u001b[0m\n\u001b[1;32m   3344\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"resolvers\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"resolvers\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresolvers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3345\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3346\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_eval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3348\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mselect_dtypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;34m\"DataFrame\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/eval.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(expr, parser, engine, truediv, local_dict, global_dict, resolvers, level, target, inplace)\u001b[0m\n\u001b[1;32m    330\u001b[0m         )\n\u001b[1;32m    331\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 332\u001b[0;31m         \u001b[0mparsed_expr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExpr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    333\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    334\u001b[0m         \u001b[0;31m# construct the engine and evaluate the parsed expression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, expr, engine, parser, env, level)\u001b[0m\n\u001b[1;32m    762\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    763\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_visitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_parsers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 764\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mterms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    766\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mparse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    779\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    780\u001b[0m         \u001b[0;34m\"\"\"Parse an expression\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 781\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_visitor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    782\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    783\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Module\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    379\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mSyntaxError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"only a single expression is allowed\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m         \u001b[0mexpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 381\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    382\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Expr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Expr\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    382\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Expr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 384\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    385\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_rewrite_membership_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Compare\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    674\u001b[0m             \u001b[0mop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranslate_In\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mops\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m             \u001b[0mbinop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mast\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBinOp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcomps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbinop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m         \u001b[0;31m# recursive case: we have a chained comparison, a CMP b CMP c, etc.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_BinOp\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    495\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    496\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_BinOp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 497\u001b[0;31m         \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_transform_eq_ne\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    498\u001b[0m         \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_downcast_constants\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_evaluate_binop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36m_maybe_transform_eq_ne\u001b[0;34m(self, node, left, right)\u001b[0m\n\u001b[1;32m    414\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_maybe_transform_eq_ne\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mleft\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 416\u001b[0;31m             \u001b[0mleft\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mside\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"left\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    417\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mright\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    418\u001b[0m             \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mside\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"right\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Name\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    508\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    509\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 510\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mterm_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    511\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    512\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_NameConstant\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/ops.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, env, side, encoding)\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0mtname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_local\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LOCAL_TAG\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mtname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_DEFAULT_GLOBALS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_resolve_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/ops.py\u001b[0m in \u001b[0;36m_resolve_name\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_resolve_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocal_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_local\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_local\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    201\u001b[0m                 \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomputation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mops\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mUndefinedVariableError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 203\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mUndefinedVariableError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_local\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    204\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mswapkey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mold_key\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_key\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mUndefinedVariableError\u001b[0m: name 'FEV6PPh' is not defined"
     ]
    }
   ],
   "source": [
    "m20overb.query('FEV6PPh < 0').MXPAXTMR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m20overma.FEV6PPh.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FVCPPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-313-7b4c0eb6d2d6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFVCPPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FVCPPh'"
     ]
    }
   ],
   "source": [
    "m20overb.FVCPPh.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FVC m20overb FVCPPh min -.418"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FVCPPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-314-5349ecfcc199>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFVCPPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FVCPPh'"
     ]
    }
   ],
   "source": [
    "m20overb.FVCPPh.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "should look at all the FVC values for m20overb and see if any are negative\n",
    "or print the FVC and FVCPPh for all of those and see which is off (is a predicted negative)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FVCPPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-315-0a21560174e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmlt20ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFVCPPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FVCPPh'"
     ]
    }
   ],
   "source": [
    "mlt20ma.FVCPPh.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c060d50>"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXkAAAD4CAYAAAAJmJb0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAUG0lEQVR4nO3dfYxld13H8ffXlkLt4G5L4bpum0yVUlK6trAjtkHN0ActlKE1IaRko1utmX8Qi67CVhMTEhMXsWBNEJlQ7EYrQy0t3ZQAqetejYkWWJ627ba2lAW6truK24VbG3Xx6x/3LA4zs50792HuOb99v5LN3HPuOXc+9+ydz5z7u+ecicxEklSmHxp3AEnS6FjyklQwS16SCmbJS1LBLHlJKtipa/nNzj777JycnFwy/9lnn+WMM85YyyhD09TsTc0NZh8Xs4/Hs88+yyOPPPLvmfnSvh4gM9fs3+bNm3M5e/bsWXZ+EzQ1e1NzZ5p9XMw+Hnv27EngC9ln7zpcI0kFs+QlqWCWvCQVzJKXpIJZ8pJUMEtekgpmyUtSwSx5SSrYiiUfERdExJcX/PtORLwzIs6KiPsj4rHq65lrEViS1LsVL2uQmY8ClwBExCnAQeAeYDuwOzN3RMT2avrdI8wq1c7k9k+tuMyBHdesQRJpeasdrrkC+FpmfgO4FthZzd8JXDfMYJKkwa225K8HPlbdbmXmU9Xtp4HW0FJJkoYisse/8RoRpwH/CrwqMw9FxDOZuX7B/Ucyc8m4fETMArMArVZr8/z8/JLH7nQ6TExM9PkUxqup2ZuaG+qVfd/Boysus2njuu/frlP21TL7eHQ6HWZmZvZm5lQ/66/mUsNvAL6YmYeq6UMRsSEzn4qIDcDh5VbKzDlgDmBqaiqnp6eXLNNut1lufhM0NXtTc0O9st/Qy5j8lunv365T9tUy+3i02+2B1l/NcM3b+P+hGoBdwNbq9lbg3oGSSJKGrqeSj4gzgKuAuxfM3gFcFRGPAVdW05KkGulpuCYznwVesmjet+kebSNJqinPeJWkglnyklQwS16SCmbJS1LBLHlJKpglL0kFW80Zr5JGyCtaahTck5ekglnyklQwS16SCmbJS1LBLHlJKpglL0kFs+QlqWCWvCQVzJKXpIJZ8pJUMEtekgrmtWukEVt4TZptm45xQw/XqJGGxT15SSqYJS9JBeup5CNifUTcFRGPRMT+iLgsIs6KiPsj4rHq65mjDitJWp1e9+RvBT6Tma8ELgb2A9uB3Zl5PrC7mpYk1ciKJR8R64CfA24DyMz/zsxngGuBndViO4HrRhVSktSfyMznXyDiEmAOeJjuXvxe4CbgYGaur5YJ4Mjx6UXrzwKzAK1Wa/P8/PyS79HpdJiYmBjsmYxJU7M3NTfUK/u+g0dXtXzrdDj0XP/fb9PGdf2vPKA6bffVanr2mZmZvZk51c/6vRxCeSrwGuAdmflARNzKoqGZzMyIWPa3RWbO0f0lwdTUVE5PTy9Zpt1us9z8Jmhq9qbmhnplX+3hkNs2HeOWff0fuXxgy3Tf6w6qTtt9tZqefRC9jMk/CTyZmQ9U03fRLf1DEbEBoPp6eKAkkqShW7HkM/Np4FsRcUE16wq6Qze7gK3VvK3AvSNJKEnqW6/vG98B3BERpwFPAL9C9xfEnRFxI/AN4K2jiShJ6ldPJZ+ZXwaWG/S/YrhxJEnD5LVrpAaZ7OGD3gM7rlmDJGoKL2sgSQWz5CWpYJa8JBXMkpekglnyklQwS16SCmbJS1LBPE5eOoFejkmX6s49eUkqmCUvSQWz5CWpYJa8JBXMkpekglnyklQwS16SCmbJS1LBLHlJKpglL0kFs+QlqWA9XbsmIg4A3wW+BxzLzKmIOAv4ODAJHADemplHRhNTktSP1ezJvz4zL8nMqWp6O7A7M88HdlfTkqQaGWS45lpgZ3V7J3Dd4HEkScMUmbnyQhFfB44ACXw4M+ci4pnMXF/dH8CR49OL1p0FZgFardbm+fn5JY/f6XSYmJgY6ImMS1OzNzU3rF32fQePDv0xW6fDoeeG/rA/YNPGdSN5XF8z49HpdJiZmdm7YBRlVXq9nvzPZObBiHgZcH9EPLLwzszMiFj2t0VmzgFzAFNTUzk9Pb1kmXa7zXLzm6Cp2ZuaG9Yu+w0juJ78tk3HuGXfaP+Mw4Et0yN5XF8z49Futwdav6fhmsw8WH09DNwDvBY4FBEbAKqvhwdKIkkauhVLPiLOiIgXH78N/DzwILAL2FotthW4d1QhJUn96eV9Ywu4pzvszqnAX2fmZyLi88CdEXEj8A3graOLKUnqx4oln5lPABcvM//bwBWjCCVJGg7PeJWkglnyklQwS16SCmbJS1LBLHlJKpglL0kFs+QlqWCWvCQVzJKXpIJZ8pJUMEtekgpmyUtSwSx5SSqYJS9JBRvt3yGTampyBH/aT6oj9+QlqWCWvCQVzJKXpIJZ8pJUMEtekgrWc8lHxCkR8aWIuK+aPi8iHoiIxyPi4xFx2uhiSpL6sZo9+ZuA/Qum3wt8IDNfDhwBbhxmMEnS4Hoq+Yg4B7gG+Eg1HcDlwF3VIjuB60YRUJLUv8jMlReKuAv4Q+DFwG8DNwD/XO3FExHnAp/OzIuWWXcWmAVotVqb5+fnlzx+p9NhYmKi/2cxRk3N3tTcMJzs+w4eHVKa1WmdDoeeG+332LRx3Uge92R/zYxLp9NhZmZmb2ZO9bP+ime8RsSbgMOZuTciplf7DTJzDpgDmJqayunppQ/RbrdZbn4TNDV7U3PDcLLfMKYzXrdtOsYt+0Z7ovmBLdMjedyT/TUzLu12e6D1e3m1vQ54c0S8EXgR8CPArcD6iDg1M48B5wAHB0oiSRq6FcfkM/PmzDwnMyeB64G/y8wtwB7gLdViW4F7R5ZSktSXQY6TfzfwWxHxOPAS4LbhRJIkDcuqBgczsw20q9tPAK8dfiRJ0rB4xqskFcySl6SCWfKSVDBLXpIKZslLUsEseUkqmCUvSQWz5CWpYJa8JBXMkpekglnyklQwS16SCmbJS1LBLHlJKpglL0kFs+QlqWCWvCQVbLR/Nl5SLU1u/9SKyxzYcc0aJNGouScvSQWz5CWpYCuWfES8KCI+FxFfiYiHIuI91fzzIuKBiHg8Ij4eEaeNPq4kaTV62ZP/L+DyzLwYuAS4OiIuBd4LfCAzXw4cAW4cXUxJUj9WLPns6lSTL6j+JXA5cFc1fydw3UgSSpL6Fpm58kIRpwB7gZcDHwTeB/xztRdPRJwLfDozL1pm3VlgFqDVam2en59f8vidToeJiYkBnsb4NDV7U3PDcLLvO3h0SGlWp3U6HHputN9j08Z1Ky7Ty/Nf/Dgn+2tmXDqdDjMzM3szc6qf9Xs6hDIzvwdcEhHrgXuAV/b6DTJzDpgDmJqayunp6SXLtNttlpvfBE3N3tTcMJzsN/RwCOEobNt0jFv2jfbI5QNbpldcppfnv/hxTvbXzLi02+2B1l/V0TWZ+QywB7gMWB8Rx1+t5wAHB0oiSRq6Xo6ueWm1B09EnA5cBeynW/ZvqRbbCtw7qpCSpP708r5xA7CzGpf/IeDOzLwvIh4G5iPiD4AvAbeNMKckqQ8rlnxmfhV49TLznwBeO4pQkqTh8IxXSSqYJS9JBbPkJalgXmpYKkwvlxHWycM9eUkqmCUvSQWz5CWpYJa8JBXMkpekgnl0jYrikSXSD3JPXpIKZslLUsEseUkqmCUvSQWz5CWpYJa8JBXMkpekglnyklQwS16SCmbJS1LBViz5iDg3IvZExMMR8VBE3FTNPysi7o+Ix6qvZ44+riRpNXrZkz8GbMvMC4FLgbdHxIXAdmB3Zp4P7K6mJUk1smLJZ+ZTmfnF6vZ3gf3ARuBaYGe12E7gulGFlCT1JzKz94UjJoF/AC4CvpmZ66v5ARw5Pr1onVlgFqDVam2en59f8ridToeJiYk+4o9fU7M3NTc8f/Z9B4+ucZrVaZ0Oh54bd4rebNq47gemS33N1F2n02FmZmZvZk71s37PlxqOiAngE8A7M/M73V7vysyMiGV/W2TmHDAHMDU1ldPT00uWabfbLDe/CZqavam54fmz31DzSw1v23SMW/Y14wrfB7ZM/8B0qa+Zumu32wOt39PRNRHxAroFf0dm3l3NPhQRG6r7NwCHB0oiSRq6Xo6uCeA2YH9mvn/BXbuArdXtrcC9w48nSRpEL+8bXwf8ErAvIr5czftdYAdwZ0TcCHwDeOtoIkqS+rViyWfmPwJxgruvGG4cSdIwecarJBXMkpekglnyklQwS16SCmbJS1LBLHlJKlgzzq+WtOYmF10iYtumY31fNuLAjmuGEUl9cE9ekgpmyUtSwRyuUWMcHz4YZNhAOtm4Jy9JBbPkJalglrwkFcySl6SCWfKSVDCPrlEtLD7xRtJwuCcvSQWz5CWpYJa8JBXMkpekgq1Y8hHx0Yg4HBEPLph3VkTcHxGPVV/PHG1MSVI/etmTvx24etG87cDuzDwf2F1NS5JqZsWSz8x/AP5j0exrgZ3V7Z3AdUPOJUkagn7H5FuZ+VR1+2mgNaQ8kqQhisxceaGISeC+zLyomn4mM9cvuP9IZi47Lh8Rs8AsQKvV2jw/P79kmU6nw8TERD/5x66p2euWe9/Boz0v2zodDj03wjAjdLJm37Rx3XDDrFLdXu+r0el0mJmZ2ZuZU/2s3+8Zr4ciYkNmPhURG4DDJ1owM+eAOYCpqamcnp5esky73Wa5+U3Q1Ox1y72a68Nv23SMW/Y182TtkzX7gS3Tww2zSnV7va9Gu90eaP1+h2t2AVur21uBewdKIUkaiV4OofwY8E/ABRHxZETcCOwAroqIx4Arq2lJUs2s+N4rM992gruuGHIWSdKQecarJBXMkpekglnyklQwS16SCmbJS1LBLHlJKlgzT71To/j3W6XxcU9ekgpmyUtSwRyukVQLvQzrHdhxzRokKYt78pJUMEtekgrmcM1JaHL7p9i26djzXsPdt8UaJo+wGh/35CWpYJa8JBXMkpekglnyklQwS16SCubRNTXQ65EHa3nEiyemSGVwT16SCmbJS1LBBhquiYirgVuBU4CPZOaOoaRaRlOHD9b6JJC1/H6e4KImG1an1L2b+t6Tj4hTgA8CbwAuBN4WERcOK5gkaXCDDNe8Fng8M5/IzP8G5oFrhxNLkjQMkZn9rRjxFuDqzPy1avqXgJ/OzF9ftNwsMFtNXgA8uszDnQ38e19Bxq+p2ZuaG8w+LmYfj7OBMzLzpf2sPPJDKDNzDph7vmUi4guZOTXqLKPQ1OxNzQ1mHxezj0eVfbLf9QcZrjkInLtg+pxqniSpJgYp+c8D50fEeRFxGnA9sGs4sSRJw9D3cE1mHouIXwc+S/cQyo9m5kN9PtzzDufUXFOzNzU3mH1czD4eA2Xv+4NXSVL9ecarJBXMkpekgq1pyUfEuRGxJyIejoiHIuKmav5ZEXF/RDxWfT1zLXOtRkScEhFfioj7qunzIuKBiHg8Ij5efQhdOxGxPiLuiohHImJ/RFzWlO0eEb9ZvV4ejIiPRcSL6rrdI+KjEXE4Ih5cMG/Z7Rxdf1o9h69GxGvGl/yE2d9XvWa+GhH3RMT6BffdXGV/NCJ+YTypv59lSfYF922LiIyIs6vp2mz3E+WOiHdU2/2hiPijBfNXvc3Xek/+GLAtMy8ELgXeXl0KYTuwOzPPB3ZX03V1E7B/wfR7gQ9k5suBI8CNY0m1sluBz2TmK4GL6T6H2m/3iNgI/AYwlZkX0f2Q/3rqu91vB65eNO9E2/kNwPnVv1ngQ2uU8URuZ2n2+4GLMvMngX8Bbgaofm6vB15VrfNn1aVOxuV2lmYnIs4Ffh745oLZddrut7Mod0S8nu7VAy7OzFcBf1zN72+bZ+bY/gH3AlfRPQt2QzVvA/DoOHM9T95z6P6QXg7cBwTds+hOre6/DPjsuHMuk3sd8HWqD9oXzK/9dgc2At8CzqJ7NNh9wC/UebsDk8CDK21n4MPA25Zbri7ZF933i8Ad1e2bgZsX3PdZ4LK6ZQfuortTcwA4u47bfZnXy53Alcss19c2H9uYfERMAq8GHgBamflUddfTQGtMsVbyJ8C7gP+tpl8CPJOZx6rpJ+mWUt2cB/wb8BfVUNNHIuIMGrDdM/Mg3T2ZbwJPAUeBvTRjux93ou18/BfYcXV/Hr8KfLq6XfvsEXEtcDAzv7LorrpnfwXws9Vw5N9HxE9V8/vKPZaSj4gJ4BPAOzPzOwvvy+6vqNod1xkRbwIOZ+becWfpw6nAa4APZeargWdZNDRT4+1+Jt23rucBPwacwTJvy5uirtt5JRHxe3SHW+8Yd5ZeRMQPA78L/P64s/ThVLrvXC8Ffge4MyKi3wdb85KPiBfQLfg7MvPuavahiNhQ3b8BOLzWuXrwOuDNEXGA7hU3L6c7zr0+Io6fVFbXSzs8CTyZmQ9U03fRLf0mbPcrga9n5r9l5v8Ad9P9v2jCdj/uRNu5EZcGiYgbgDcBW6pfUlD/7D9Bd8fgK9XP7DnAFyPiR6l/9ieBu7Prc3RHDs6mz9xrfXRNALcB+zPz/Qvu2gVsrW5vpTtWXyuZeXNmnpPdCwVdD/xdZm4B9gBvqRara/angW9FxAXVrCuAh2nAdqc7THNpRPxw9fo5nr32232BE23nXcAvV0d7XAocXTCsUwvR/cNA7wLenJn/ueCuXcD1EfHCiDiP7oeYnxtHxuVk5r7MfFlmTlY/s08Cr6l+Fuq+3T8JvB4gIl4BnEb3M6j+tvkaf8DwM3Tfqn4V+HL17410x7Z3A48BfwucNa4PQXp8HtPAfdXtH6829OPA3wAvHHe+E2S+BPhCte0/CZzZlO0OvAd4BHgQ+EvghXXd7sDH6H528D90i+XGE21nuh/cfxD4GrCP7hFEdcv+ON1x4OM/r3++YPnfq7I/CryhbtkX3X+A///gtTbb/QTb/DTgr6rX+xeBywfZ5l7WQJIK5hmvklQwS16SCmbJS1LBLHlJKpglL0kFs+QlqWCWvCQV7P8AXQXicjPYcLsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overc.FEV1PP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV1PPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-317-1ba9da8d0e6f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV1PPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV1PPh'"
     ]
    }
   ],
   "source": [
    "m20overc.FEV1PPh.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m20overc.FEV1OFVCPPh.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [],
   "source": [
    "def creatediffs(df):\n",
    "    df['FEV1PPdiff'] = df.FEV1PP - df.FEV1PPh\n",
    "    df['FVCPPdiff'] = df.FVCPP - df.FVCPPh\n",
    "    df['PEFRPPdiff'] = df.PEFRPP - df.PEFRPPh\n",
    "    df['MMEFPPdiff'] = df.MMEFPP - df.MMEFPPh\n",
    "    df['FEV6PPdiff'] = df.FEV6PP - df.FEV6PPh\n",
    "    df['FEV1OFVCPPdiff'] = df.FEV1OFVCPP - df.FEV1OFVCPPh\n",
    "    df['FEV1OFEV6PPdiff'] = df.FEV1OFEV6PP - df.FEV1OFEV6PPh \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'PEFRPPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'PEFRPPh'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-319-ff47f4661e57>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"PEFRPPh\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1759\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1760\u001b[0m                     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1761\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1762\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1763\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1269\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1270\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1271\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1272\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1273\u001b[0m             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1386\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_label_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m                 \u001b[0;31m# we have yielded a scalar ?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1962\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1963\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1964\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1965\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m    622\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no slices here, handle elsewhere\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    623\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 624\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_xs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3527\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3528\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3529\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3530\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3531\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2798\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2799\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2800\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2801\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2802\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'PEFRPPh'"
     ]
    }
   ],
   "source": [
    "m20overc.loc[:,\"PEFRPPh\"].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Has FEV1PP, PEFPPh, but not PEFPP - it is PEFR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.04838162185125"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m20overc.loc[:,\"PEFRPP\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'hnonratioframestoanalyze' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-321-ea9a1e04f10d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhnonratioframestoanalyze\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mcreatediffs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'hnonratioframestoanalyze' is not defined"
     ]
    }
   ],
   "source": [
    "for y in hnonratioframestoanalyze:\n",
    "    print (y.name)\n",
    "    creatediffs(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV1OFVCPPdiff'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-322-94a3ff8ca52c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV1OFVCPPdiff\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV1OFVCPPdiff'"
     ]
    }
   ],
   "source": [
    "m20overc.FEV1OFVCPPdiff.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV1PPdiff'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-323-947211012433>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV1PPdiff\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV1PPdiff'"
     ]
    }
   ],
   "source": [
    "m20overc.FEV1PPdiff.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11bef1610>"
      ]
     },
     "execution_count": 324,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overc.FEV1OFVCPP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV1OFVCPPh'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-325-1370f839b86b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV1OFVCPPh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV1OFVCPPh'"
     ]
    }
   ],
   "source": [
    "m20overc.FEV1OFVCPPh.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11bef4850>"
      ]
     },
     "execution_count": 326,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overc.plot.scatter('MXPAXTMR', 'FVC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c37ca10>"
      ]
     },
     "execution_count": 327,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m20overc.plot.scatter('MXPAXTMR', 'FEV1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'FEV1OFVCPPdiff'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-328-94a3ff8ca52c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFEV1OFVCPPdiff\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'auto'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'FEV1OFVCPPdiff'"
     ]
    }
   ],
   "source": [
    "m20overc.FEV1OFVCPPdiff.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m20overc.FEV1OFEV6PPdiff.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mallma.FEF75PP.hist(bins='auto')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is male with FEF75PP >5 (about 27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>HAL3</th>\n",
       "      <th>HAL5</th>\n",
       "      <th>DMARACER</th>\n",
       "      <th>DMARETHN</th>\n",
       "      <th>DMAETHNR</th>\n",
       "      <th>HSSEX</th>\n",
       "      <th>HSAGEIR</th>\n",
       "      <th>HSAGEU</th>\n",
       "      <th>HXPAXTMR</th>\n",
       "      <th>HXPSESSR</th>\n",
       "      <th>HSAITMOR</th>\n",
       "      <th>HAR4S</th>\n",
       "      <th>SPPQ1</th>\n",
       "      <th>SPPQ2</th>\n",
       "      <th>SPPQ3</th>\n",
       "      <th>SPPQ4</th>\n",
       "      <th>SPPQ5</th>\n",
       "      <th>SPPMANEU</th>\n",
       "      <th>MYPB1</th>\n",
       "      <th>MYPB3</th>\n",
       "      <th>MYPB11</th>\n",
       "      <th>MYPB27A</th>\n",
       "      <th>MYPB27B</th>\n",
       "      <th>HSAGEIR_exam</th>\n",
       "      <th>HSAGEU_exam</th>\n",
       "      <th>HXPAXTMR_exam</th>\n",
       "      <th>HXPSESSR_exam</th>\n",
       "      <th>HXPEJ6A2</th>\n",
       "      <th>SPPTECH1</th>\n",
       "      <th>SPPTRIAL</th>\n",
       "      <th>SPPPEAK</th>\n",
       "      <th>SPPFEV05</th>\n",
       "      <th>SPPFEV1</th>\n",
       "      <th>SPPFEV3</th>\n",
       "      <th>SPPFEV6</th>\n",
       "      <th>SPPFVC</th>\n",
       "      <th>SPPMMEF</th>\n",
       "      <th>SPPFEF75</th>\n",
       "      <th>SPPTYPE</th>\n",
       "      <th>SPPREPRO</th>\n",
       "      <th>SPPTIME</th>\n",
       "      <th>SPPEXPIR</th>\n",
       "      <th>SPPTEMP</th>\n",
       "      <th>HSSEX_exam</th>\n",
       "      <th>WTPFHX6</th>\n",
       "      <th>MXPAXTMR</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "      <th>FEF75OFVC</th>\n",
       "      <th>FEF75OPEFR</th>\n",
       "      <th>FEV1OFVC</th>\n",
       "      <th>FEV1OFEV3</th>\n",
       "      <th>FEV1OFEV6</th>\n",
       "      <th>PEFROFVC</th>\n",
       "      <th>PEFROFEV6</th>\n",
       "      <th>PEFROFEV1</th>\n",
       "      <th>FEV3OFEV6</th>\n",
       "      <th>FEV3OFVC</th>\n",
       "      <th>FEV6OFVC</th>\n",
       "      <th>MMEFOPEFR</th>\n",
       "      <th>MMEFOFVC</th>\n",
       "      <th>FEV05OFEV3</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "      <th>HYE1G</th>\n",
       "      <th>HYE1H</th>\n",
       "      <th>HYG2</th>\n",
       "      <th>HYG4</th>\n",
       "      <th>HYG7</th>\n",
       "      <th>HYG8</th>\n",
       "      <th>HYG12</th>\n",
       "      <th>FEV05OFEV3PP</th>\n",
       "      <th>FEV05OFVCPP</th>\n",
       "      <th>FEV1OFVCPP</th>\n",
       "      <th>FEF75OFVCPP</th>\n",
       "      <th>FEF75OPEFRPP</th>\n",
       "      <th>FEV1OFEV3PP</th>\n",
       "      <th>FEV1OFEV6PP</th>\n",
       "      <th>PEFROFVCPP</th>\n",
       "      <th>PEFROFEV6PP</th>\n",
       "      <th>PEFROFEV1PP</th>\n",
       "      <th>FEV3OFEV6PP</th>\n",
       "      <th>FEV3OFVCPP</th>\n",
       "      <th>FEV6OFVCPP</th>\n",
       "      <th>MMEFOFVCPP</th>\n",
       "      <th>MMEFOPEFRPP</th>\n",
       "      <th>FEF75OFVCPred</th>\n",
       "      <th>FEF75OPEFRPred</th>\n",
       "      <th>FEV1OFVCPred</th>\n",
       "      <th>FEV05OFEV3Pred</th>\n",
       "      <th>FEV05OFVCPred</th>\n",
       "      <th>FEV1OFEV3Pred</th>\n",
       "      <th>FEV1OFEV6Pred</th>\n",
       "      <th>PEFROFVCPred</th>\n",
       "      <th>PEFROFEV6Pred</th>\n",
       "      <th>PEFROFEV1Pred</th>\n",
       "      <th>FEV3OFEV6Pred</th>\n",
       "      <th>FEV3OFVCPred</th>\n",
       "      <th>FEV6OFVCPred</th>\n",
       "      <th>MMEFOFVCPred</th>\n",
       "      <th>MMEFOPEFRPred</th>\n",
       "      <th>FEV1PP</th>\n",
       "      <th>FEV05PP</th>\n",
       "      <th>FVCPP</th>\n",
       "      <th>PEFRPP</th>\n",
       "      <th>FEV3PP</th>\n",
       "      <th>FEV6PP</th>\n",
       "      <th>MMEFPP</th>\n",
       "      <th>FEF75PP</th>\n",
       "      <th>EXPIRPP</th>\n",
       "      <th>FEV1Pred</th>\n",
       "      <th>FEV05Pred</th>\n",
       "      <th>FVCPred</th>\n",
       "      <th>PEFRPred</th>\n",
       "      <th>FEV3Pred</th>\n",
       "      <th>FEV6Pred</th>\n",
       "      <th>MMEFPred</th>\n",
       "      <th>FEF75Pred</th>\n",
       "      <th>EXPIRPred</th>\n",
       "      <th>predFVCmFEV6</th>\n",
       "      <th>PEFRPPOFEV1PP</th>\n",
       "      <th>PEFRPPOFVCPP</th>\n",
       "      <th>MMEFPPOFVCPP</th>\n",
       "      <th>FEF75PPOFVCPP</th>\n",
       "      <th>MMEFPPOPEFRPP</th>\n",
       "      <th>PEFRPPOFVCPPPP</th>\n",
       "      <th>PEFRPPOFEV1PPPP</th>\n",
       "      <th>FEF75PPOFVCPPPP</th>\n",
       "      <th>MMEFPPOFVCPPPP</th>\n",
       "      <th>MMEFPPOPEFRPPPP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>261.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1008.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10513.0</td>\n",
       "      <td>3576.0</td>\n",
       "      <td>4640.0</td>\n",
       "      <td>5650.0</td>\n",
       "      <td>5884.0</td>\n",
       "      <td>5988.0</td>\n",
       "      <td>4085.0</td>\n",
       "      <td>1230.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:25</td>\n",
       "      <td>11.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1735.14</td>\n",
       "      <td>262.0</td>\n",
       "      <td>178.8</td>\n",
       "      <td>93.1</td>\n",
       "      <td>81.60</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.541082</td>\n",
       "      <td>11.699800</td>\n",
       "      <td>77.488310</td>\n",
       "      <td>82.123894</td>\n",
       "      <td>78.857920</td>\n",
       "      <td>1.755678</td>\n",
       "      <td>1.786710</td>\n",
       "      <td>2.265733</td>\n",
       "      <td>96.023114</td>\n",
       "      <td>94.355377</td>\n",
       "      <td>98.263193</td>\n",
       "      <td>38.856654</td>\n",
       "      <td>0.682198</td>\n",
       "      <td>63.292035</td>\n",
       "      <td>59.719439</td>\n",
       "      <td>3.576</td>\n",
       "      <td>4.640</td>\n",
       "      <td>5.650</td>\n",
       "      <td>5.884</td>\n",
       "      <td>5.988</td>\n",
       "      <td>10.513</td>\n",
       "      <td>4.085</td>\n",
       "      <td>1.230</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>92.244425</td>\n",
       "      <td>89.724485</td>\n",
       "      <td>90.805034</td>\n",
       "      <td>51.104031</td>\n",
       "      <td>54.168608</td>\n",
       "      <td>93.374784</td>\n",
       "      <td>91.607942</td>\n",
       "      <td>92.673545</td>\n",
       "      <td>93.424769</td>\n",
       "      <td>101.990159</td>\n",
       "      <td>98.162394</td>\n",
       "      <td>97.323956</td>\n",
       "      <td>99.167131</td>\n",
       "      <td>71.110136</td>\n",
       "      <td>76.116387</td>\n",
       "      <td>40.194641</td>\n",
       "      <td>21.598857</td>\n",
       "      <td>85.334817</td>\n",
       "      <td>68.613399</td>\n",
       "      <td>66.558687</td>\n",
       "      <td>87.950826</td>\n",
       "      <td>86.081968</td>\n",
       "      <td>1.894476</td>\n",
       "      <td>1.912458</td>\n",
       "      <td>2.221521</td>\n",
       "      <td>97.820672</td>\n",
       "      <td>99.088470</td>\n",
       "      <td>99.088470</td>\n",
       "      <td>0.959354</td>\n",
       "      <td>51.048999</td>\n",
       "      <td>99.659533</td>\n",
       "      <td>100.303119</td>\n",
       "      <td>109.823444</td>\n",
       "      <td>103.003070</td>\n",
       "      <td>106.180757</td>\n",
       "      <td>108.491711</td>\n",
       "      <td>79.552723</td>\n",
       "      <td>54.687757</td>\n",
       "      <td>134.359509</td>\n",
       "      <td>4.655852</td>\n",
       "      <td>3.565193</td>\n",
       "      <td>5.452388</td>\n",
       "      <td>10.206492</td>\n",
       "      <td>5.321115</td>\n",
       "      <td>5.423456</td>\n",
       "      <td>5.134959</td>\n",
       "      <td>2.249132</td>\n",
       "      <td>8.186990</td>\n",
       "      <td>5.452388</td>\n",
       "      <td>103.354960</td>\n",
       "      <td>93.789692</td>\n",
       "      <td>72.436923</td>\n",
       "      <td>49.796068</td>\n",
       "      <td>77.233352</td>\n",
       "      <td>93.181295</td>\n",
       "      <td>102.995985</td>\n",
       "      <td>48.682657</td>\n",
       "      <td>71.924024</td>\n",
       "      <td>76.893415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>602.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1012.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>11424.0</td>\n",
       "      <td>3781.0</td>\n",
       "      <td>4658.0</td>\n",
       "      <td>5104.0</td>\n",
       "      <td>5301.0</td>\n",
       "      <td>5514.0</td>\n",
       "      <td>5684.0</td>\n",
       "      <td>1868.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:24</td>\n",
       "      <td>13.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1398.57</td>\n",
       "      <td>603.0</td>\n",
       "      <td>178.2</td>\n",
       "      <td>95.4</td>\n",
       "      <td>79.60</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>602.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33.877403</td>\n",
       "      <td>16.351541</td>\n",
       "      <td>84.475880</td>\n",
       "      <td>91.261755</td>\n",
       "      <td>87.870213</td>\n",
       "      <td>2.071817</td>\n",
       "      <td>2.155065</td>\n",
       "      <td>2.452555</td>\n",
       "      <td>96.283720</td>\n",
       "      <td>92.564382</td>\n",
       "      <td>96.137106</td>\n",
       "      <td>49.754902</td>\n",
       "      <td>1.030831</td>\n",
       "      <td>74.079154</td>\n",
       "      <td>68.570910</td>\n",
       "      <td>3.781</td>\n",
       "      <td>4.658</td>\n",
       "      <td>5.104</td>\n",
       "      <td>5.301</td>\n",
       "      <td>5.514</td>\n",
       "      <td>11.424</td>\n",
       "      <td>5.684</td>\n",
       "      <td>1.868</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>107.526754</td>\n",
       "      <td>107.714673</td>\n",
       "      <td>106.558826</td>\n",
       "      <td>140.249218</td>\n",
       "      <td>134.834962</td>\n",
       "      <td>106.352530</td>\n",
       "      <td>107.398995</td>\n",
       "      <td>103.599456</td>\n",
       "      <td>104.385619</td>\n",
       "      <td>97.390327</td>\n",
       "      <td>101.077206</td>\n",
       "      <td>100.338569</td>\n",
       "      <td>99.322778</td>\n",
       "      <td>133.614128</td>\n",
       "      <td>128.533394</td>\n",
       "      <td>24.155146</td>\n",
       "      <td>12.127078</td>\n",
       "      <td>79.276286</td>\n",
       "      <td>68.893695</td>\n",
       "      <td>63.659768</td>\n",
       "      <td>85.810611</td>\n",
       "      <td>81.816607</td>\n",
       "      <td>1.999834</td>\n",
       "      <td>2.064523</td>\n",
       "      <td>2.518273</td>\n",
       "      <td>95.257600</td>\n",
       "      <td>96.792607</td>\n",
       "      <td>96.792607</td>\n",
       "      <td>0.771498</td>\n",
       "      <td>38.709708</td>\n",
       "      <td>108.074898</td>\n",
       "      <td>110.304543</td>\n",
       "      <td>103.123561</td>\n",
       "      <td>107.885163</td>\n",
       "      <td>102.150961</td>\n",
       "      <td>101.769626</td>\n",
       "      <td>131.136459</td>\n",
       "      <td>129.730712</td>\n",
       "      <td>109.073577</td>\n",
       "      <td>4.309974</td>\n",
       "      <td>3.427783</td>\n",
       "      <td>5.346984</td>\n",
       "      <td>10.589037</td>\n",
       "      <td>4.996527</td>\n",
       "      <td>5.208823</td>\n",
       "      <td>4.334416</td>\n",
       "      <td>1.439906</td>\n",
       "      <td>11.918560</td>\n",
       "      <td>5.346984</td>\n",
       "      <td>99.824441</td>\n",
       "      <td>104.617375</td>\n",
       "      <td>127.164402</td>\n",
       "      <td>125.801234</td>\n",
       "      <td>121.551894</td>\n",
       "      <td>103.935006</td>\n",
       "      <td>100.160667</td>\n",
       "      <td>97.703501</td>\n",
       "      <td>122.573679</td>\n",
       "      <td>119.218634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>65</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>785.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1601.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7248.0</td>\n",
       "      <td>2286.0</td>\n",
       "      <td>3142.0</td>\n",
       "      <td>3635.0</td>\n",
       "      <td>3721.0</td>\n",
       "      <td>3830.0</td>\n",
       "      <td>2923.0</td>\n",
       "      <td>899.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11:18</td>\n",
       "      <td>14.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>327.82</td>\n",
       "      <td>786.0</td>\n",
       "      <td>161.0</td>\n",
       "      <td>85.6</td>\n",
       "      <td>65.40</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>785.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.472585</td>\n",
       "      <td>12.403422</td>\n",
       "      <td>82.036554</td>\n",
       "      <td>86.437414</td>\n",
       "      <td>84.439667</td>\n",
       "      <td>1.892428</td>\n",
       "      <td>1.947863</td>\n",
       "      <td>2.306811</td>\n",
       "      <td>97.688793</td>\n",
       "      <td>94.908616</td>\n",
       "      <td>97.154047</td>\n",
       "      <td>40.328366</td>\n",
       "      <td>0.763185</td>\n",
       "      <td>62.888583</td>\n",
       "      <td>59.686684</td>\n",
       "      <td>2.286</td>\n",
       "      <td>3.142</td>\n",
       "      <td>3.635</td>\n",
       "      <td>3.721</td>\n",
       "      <td>3.830</td>\n",
       "      <td>7.248</td>\n",
       "      <td>2.923</td>\n",
       "      <td>0.899</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91.084636</td>\n",
       "      <td>96.107566</td>\n",
       "      <td>107.907432</td>\n",
       "      <td>150.973956</td>\n",
       "      <td>176.085364</td>\n",
       "      <td>102.097001</td>\n",
       "      <td>106.176595</td>\n",
       "      <td>92.027380</td>\n",
       "      <td>90.761692</td>\n",
       "      <td>86.154512</td>\n",
       "      <td>104.054749</td>\n",
       "      <td>105.770196</td>\n",
       "      <td>101.667562</td>\n",
       "      <td>113.792051</td>\n",
       "      <td>125.681531</td>\n",
       "      <td>15.547440</td>\n",
       "      <td>7.043982</td>\n",
       "      <td>76.024934</td>\n",
       "      <td>69.044117</td>\n",
       "      <td>62.104043</td>\n",
       "      <td>84.662050</td>\n",
       "      <td>79.527571</td>\n",
       "      <td>2.056375</td>\n",
       "      <td>2.146130</td>\n",
       "      <td>2.677528</td>\n",
       "      <td>93.882109</td>\n",
       "      <td>95.560516</td>\n",
       "      <td>95.560516</td>\n",
       "      <td>0.670684</td>\n",
       "      <td>32.087743</td>\n",
       "      <td>119.229272</td>\n",
       "      <td>104.512350</td>\n",
       "      <td>108.456620</td>\n",
       "      <td>100.838977</td>\n",
       "      <td>116.953169</td>\n",
       "      <td>111.431966</td>\n",
       "      <td>131.287104</td>\n",
       "      <td>201.001425</td>\n",
       "      <td>112.059673</td>\n",
       "      <td>2.635259</td>\n",
       "      <td>2.187301</td>\n",
       "      <td>3.531366</td>\n",
       "      <td>7.187697</td>\n",
       "      <td>3.108082</td>\n",
       "      <td>3.339257</td>\n",
       "      <td>2.226418</td>\n",
       "      <td>0.447261</td>\n",
       "      <td>12.493344</td>\n",
       "      <td>3.531366</td>\n",
       "      <td>84.575688</td>\n",
       "      <td>92.976323</td>\n",
       "      <td>121.050337</td>\n",
       "      <td>185.328867</td>\n",
       "      <td>130.194799</td>\n",
       "      <td>92.368101</td>\n",
       "      <td>85.174360</td>\n",
       "      <td>129.633193</td>\n",
       "      <td>114.878481</td>\n",
       "      <td>126.685381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>258.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12788.0</td>\n",
       "      <td>4363.0</td>\n",
       "      <td>5409.0</td>\n",
       "      <td>5857.0</td>\n",
       "      <td>5857.0</td>\n",
       "      <td>5859.0</td>\n",
       "      <td>7416.0</td>\n",
       "      <td>3010.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:52</td>\n",
       "      <td>3.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13984.72</td>\n",
       "      <td>259.0</td>\n",
       "      <td>179.2</td>\n",
       "      <td>95.3</td>\n",
       "      <td>79.80</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>258.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51.373955</td>\n",
       "      <td>23.537692</td>\n",
       "      <td>92.319508</td>\n",
       "      <td>92.351033</td>\n",
       "      <td>92.351033</td>\n",
       "      <td>2.182625</td>\n",
       "      <td>2.183370</td>\n",
       "      <td>2.364208</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>99.965864</td>\n",
       "      <td>99.965864</td>\n",
       "      <td>57.991867</td>\n",
       "      <td>1.265745</td>\n",
       "      <td>74.492061</td>\n",
       "      <td>74.466633</td>\n",
       "      <td>4.363</td>\n",
       "      <td>5.409</td>\n",
       "      <td>5.857</td>\n",
       "      <td>5.857</td>\n",
       "      <td>5.859</td>\n",
       "      <td>12.788</td>\n",
       "      <td>7.416</td>\n",
       "      <td>3.010</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>108.571706</td>\n",
       "      <td>111.838309</td>\n",
       "      <td>108.117512</td>\n",
       "      <td>127.365805</td>\n",
       "      <td>108.557740</td>\n",
       "      <td>104.980556</td>\n",
       "      <td>107.235922</td>\n",
       "      <td>115.266358</td>\n",
       "      <td>114.245563</td>\n",
       "      <td>106.548149</td>\n",
       "      <td>102.204322</td>\n",
       "      <td>103.067021</td>\n",
       "      <td>100.864906</td>\n",
       "      <td>131.710361</td>\n",
       "      <td>113.359339</td>\n",
       "      <td>40.335751</td>\n",
       "      <td>21.682186</td>\n",
       "      <td>85.388118</td>\n",
       "      <td>68.610933</td>\n",
       "      <td>66.584190</td>\n",
       "      <td>87.969655</td>\n",
       "      <td>86.119493</td>\n",
       "      <td>1.893549</td>\n",
       "      <td>1.911120</td>\n",
       "      <td>2.218910</td>\n",
       "      <td>97.843221</td>\n",
       "      <td>99.108668</td>\n",
       "      <td>99.108668</td>\n",
       "      <td>0.961006</td>\n",
       "      <td>51.157556</td>\n",
       "      <td>115.570559</td>\n",
       "      <td>121.859462</td>\n",
       "      <td>106.978802</td>\n",
       "      <td>124.927197</td>\n",
       "      <td>109.509233</td>\n",
       "      <td>107.480076</td>\n",
       "      <td>143.602111</td>\n",
       "      <td>132.368618</td>\n",
       "      <td>36.928717</td>\n",
       "      <td>4.680258</td>\n",
       "      <td>3.580354</td>\n",
       "      <td>5.476786</td>\n",
       "      <td>10.236362</td>\n",
       "      <td>5.348407</td>\n",
       "      <td>5.449382</td>\n",
       "      <td>5.164269</td>\n",
       "      <td>2.273953</td>\n",
       "      <td>8.123759</td>\n",
       "      <td>5.476786</td>\n",
       "      <td>108.096040</td>\n",
       "      <td>116.777525</td>\n",
       "      <td>134.234174</td>\n",
       "      <td>123.733502</td>\n",
       "      <td>114.948637</td>\n",
       "      <td>116.020047</td>\n",
       "      <td>107.714137</td>\n",
       "      <td>121.242934</td>\n",
       "      <td>133.319025</td>\n",
       "      <td>114.457889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>313</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>249.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7239.0</td>\n",
       "      <td>2946.0</td>\n",
       "      <td>3942.0</td>\n",
       "      <td>4563.0</td>\n",
       "      <td>4747.0</td>\n",
       "      <td>4847.0</td>\n",
       "      <td>4006.0</td>\n",
       "      <td>1341.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18:02</td>\n",
       "      <td>10.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2479.01</td>\n",
       "      <td>251.0</td>\n",
       "      <td>180.5</td>\n",
       "      <td>92.0</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>249.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>27.666598</td>\n",
       "      <td>18.524658</td>\n",
       "      <td>81.328657</td>\n",
       "      <td>86.390533</td>\n",
       "      <td>83.041921</td>\n",
       "      <td>1.493501</td>\n",
       "      <td>1.524963</td>\n",
       "      <td>1.836377</td>\n",
       "      <td>96.123868</td>\n",
       "      <td>94.140706</td>\n",
       "      <td>97.936868</td>\n",
       "      <td>55.339135</td>\n",
       "      <td>0.826491</td>\n",
       "      <td>64.562788</td>\n",
       "      <td>60.779864</td>\n",
       "      <td>2.946</td>\n",
       "      <td>3.942</td>\n",
       "      <td>4.563</td>\n",
       "      <td>4.747</td>\n",
       "      <td>4.847</td>\n",
       "      <td>7.239</td>\n",
       "      <td>4.006</td>\n",
       "      <td>1.341</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>94.108873</td>\n",
       "      <td>91.189584</td>\n",
       "      <td>95.087590</td>\n",
       "      <td>67.956788</td>\n",
       "      <td>84.570496</td>\n",
       "      <td>98.148904</td>\n",
       "      <td>96.314480</td>\n",
       "      <td>78.976208</td>\n",
       "      <td>79.943423</td>\n",
       "      <td>83.020813</td>\n",
       "      <td>98.182408</td>\n",
       "      <td>96.950988</td>\n",
       "      <td>98.763987</td>\n",
       "      <td>85.610006</td>\n",
       "      <td>107.565245</td>\n",
       "      <td>40.712045</td>\n",
       "      <td>21.904398</td>\n",
       "      <td>85.530254</td>\n",
       "      <td>68.604357</td>\n",
       "      <td>66.652200</td>\n",
       "      <td>88.019865</td>\n",
       "      <td>86.219561</td>\n",
       "      <td>1.891077</td>\n",
       "      <td>1.907553</td>\n",
       "      <td>2.211948</td>\n",
       "      <td>97.903351</td>\n",
       "      <td>99.162530</td>\n",
       "      <td>99.162530</td>\n",
       "      <td>0.965414</td>\n",
       "      <td>51.447041</td>\n",
       "      <td>82.802182</td>\n",
       "      <td>81.121237</td>\n",
       "      <td>87.187987</td>\n",
       "      <td>69.975684</td>\n",
       "      <td>83.896408</td>\n",
       "      <td>85.745367</td>\n",
       "      <td>76.174484</td>\n",
       "      <td>57.057430</td>\n",
       "      <td>125.832253</td>\n",
       "      <td>4.760744</td>\n",
       "      <td>3.631601</td>\n",
       "      <td>5.559252</td>\n",
       "      <td>10.345022</td>\n",
       "      <td>5.438850</td>\n",
       "      <td>5.536159</td>\n",
       "      <td>5.258979</td>\n",
       "      <td>2.350264</td>\n",
       "      <td>7.947088</td>\n",
       "      <td>5.559252</td>\n",
       "      <td>84.509468</td>\n",
       "      <td>80.258401</td>\n",
       "      <td>87.368096</td>\n",
       "      <td>65.441848</td>\n",
       "      <td>108.858505</td>\n",
       "      <td>79.737872</td>\n",
       "      <td>84.197429</td>\n",
       "      <td>64.517205</td>\n",
       "      <td>86.833808</td>\n",
       "      <td>108.432134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53343</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>110.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1605.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4474.0</td>\n",
       "      <td>1650.0</td>\n",
       "      <td>2086.0</td>\n",
       "      <td>2501.0</td>\n",
       "      <td>2574.0</td>\n",
       "      <td>2581.0</td>\n",
       "      <td>1941.0</td>\n",
       "      <td>617.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:08</td>\n",
       "      <td>7.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>281.38</td>\n",
       "      <td>111.0</td>\n",
       "      <td>144.1</td>\n",
       "      <td>72.9</td>\n",
       "      <td>40.90</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.905463</td>\n",
       "      <td>13.790791</td>\n",
       "      <td>80.821387</td>\n",
       "      <td>83.406637</td>\n",
       "      <td>81.041181</td>\n",
       "      <td>1.733437</td>\n",
       "      <td>1.738151</td>\n",
       "      <td>2.144775</td>\n",
       "      <td>97.163947</td>\n",
       "      <td>96.900426</td>\n",
       "      <td>99.728787</td>\n",
       "      <td>43.383996</td>\n",
       "      <td>0.752034</td>\n",
       "      <td>65.973611</td>\n",
       "      <td>63.928710</td>\n",
       "      <td>1.650</td>\n",
       "      <td>2.086</td>\n",
       "      <td>2.501</td>\n",
       "      <td>2.574</td>\n",
       "      <td>2.581</td>\n",
       "      <td>4.474</td>\n",
       "      <td>1.941</td>\n",
       "      <td>0.617</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>96.326915</td>\n",
       "      <td>94.231242</td>\n",
       "      <td>91.824092</td>\n",
       "      <td>50.543110</td>\n",
       "      <td>53.466968</td>\n",
       "      <td>93.822274</td>\n",
       "      <td>92.122887</td>\n",
       "      <td>93.809732</td>\n",
       "      <td>94.202498</td>\n",
       "      <td>102.615179</td>\n",
       "      <td>98.189399</td>\n",
       "      <td>97.849534</td>\n",
       "      <td>99.624069</td>\n",
       "      <td>72.134865</td>\n",
       "      <td>76.768137</td>\n",
       "      <td>47.297175</td>\n",
       "      <td>25.793105</td>\n",
       "      <td>88.017627</td>\n",
       "      <td>68.489280</td>\n",
       "      <td>67.842372</td>\n",
       "      <td>88.898546</td>\n",
       "      <td>87.970735</td>\n",
       "      <td>1.847822</td>\n",
       "      <td>1.845122</td>\n",
       "      <td>2.090114</td>\n",
       "      <td>98.955639</td>\n",
       "      <td>100.105113</td>\n",
       "      <td>100.105113</td>\n",
       "      <td>1.042539</td>\n",
       "      <td>56.513025</td>\n",
       "      <td>87.300137</td>\n",
       "      <td>90.429838</td>\n",
       "      <td>95.570077</td>\n",
       "      <td>93.141394</td>\n",
       "      <td>93.156024</td>\n",
       "      <td>95.115223</td>\n",
       "      <td>68.740270</td>\n",
       "      <td>44.967302</td>\n",
       "      <td>117.894761</td>\n",
       "      <td>2.389458</td>\n",
       "      <td>1.824619</td>\n",
       "      <td>2.700636</td>\n",
       "      <td>4.803450</td>\n",
       "      <td>2.684743</td>\n",
       "      <td>2.706191</td>\n",
       "      <td>2.823672</td>\n",
       "      <td>1.372108</td>\n",
       "      <td>5.937499</td>\n",
       "      <td>2.700636</td>\n",
       "      <td>106.691006</td>\n",
       "      <td>97.458741</td>\n",
       "      <td>71.926561</td>\n",
       "      <td>47.051654</td>\n",
       "      <td>73.802063</td>\n",
       "      <td>96.828084</td>\n",
       "      <td>106.000398</td>\n",
       "      <td>51.953302</td>\n",
       "      <td>72.382263</td>\n",
       "      <td>73.971306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53453</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>186.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1012.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>8926.0</td>\n",
       "      <td>3217.0</td>\n",
       "      <td>3820.0</td>\n",
       "      <td>3902.0</td>\n",
       "      <td>3905.0</td>\n",
       "      <td>3906.0</td>\n",
       "      <td>6404.0</td>\n",
       "      <td>2979.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:08</td>\n",
       "      <td>7.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1806.26</td>\n",
       "      <td>187.0</td>\n",
       "      <td>169.4</td>\n",
       "      <td>85.1</td>\n",
       "      <td>51.55</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>186.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>76.267281</td>\n",
       "      <td>33.374412</td>\n",
       "      <td>97.798259</td>\n",
       "      <td>97.898514</td>\n",
       "      <td>97.823303</td>\n",
       "      <td>2.285202</td>\n",
       "      <td>2.285787</td>\n",
       "      <td>2.336649</td>\n",
       "      <td>99.923175</td>\n",
       "      <td>99.897593</td>\n",
       "      <td>99.974398</td>\n",
       "      <td>71.745463</td>\n",
       "      <td>1.639529</td>\n",
       "      <td>82.444900</td>\n",
       "      <td>82.360471</td>\n",
       "      <td>3.217</td>\n",
       "      <td>3.820</td>\n",
       "      <td>3.902</td>\n",
       "      <td>3.905</td>\n",
       "      <td>3.906</td>\n",
       "      <td>8.926</td>\n",
       "      <td>6.404</td>\n",
       "      <td>2.979</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>120.266659</td>\n",
       "      <td>122.567012</td>\n",
       "      <td>112.843270</td>\n",
       "      <td>174.435298</td>\n",
       "      <td>140.926784</td>\n",
       "      <td>110.717937</td>\n",
       "      <td>112.414610</td>\n",
       "      <td>122.118215</td>\n",
       "      <td>121.648307</td>\n",
       "      <td>108.366198</td>\n",
       "      <td>101.564047</td>\n",
       "      <td>101.953978</td>\n",
       "      <td>100.382528</td>\n",
       "      <td>163.842969</td>\n",
       "      <td>133.447855</td>\n",
       "      <td>43.722390</td>\n",
       "      <td>23.682093</td>\n",
       "      <td>86.667339</td>\n",
       "      <td>68.551750</td>\n",
       "      <td>67.196279</td>\n",
       "      <td>88.421548</td>\n",
       "      <td>87.020098</td>\n",
       "      <td>1.871303</td>\n",
       "      <td>1.879013</td>\n",
       "      <td>2.156253</td>\n",
       "      <td>98.384397</td>\n",
       "      <td>99.593425</td>\n",
       "      <td>99.593425</td>\n",
       "      <td>1.000671</td>\n",
       "      <td>53.762919</td>\n",
       "      <td>96.016950</td>\n",
       "      <td>106.343248</td>\n",
       "      <td>84.946008</td>\n",
       "      <td>105.876454</td>\n",
       "      <td>86.208338</td>\n",
       "      <td>85.055715</td>\n",
       "      <td>143.111650</td>\n",
       "      <td>143.574676</td>\n",
       "      <td>99.859163</td>\n",
       "      <td>3.978464</td>\n",
       "      <td>3.025110</td>\n",
       "      <td>4.598215</td>\n",
       "      <td>8.430581</td>\n",
       "      <td>4.526244</td>\n",
       "      <td>4.591108</td>\n",
       "      <td>4.474828</td>\n",
       "      <td>2.074878</td>\n",
       "      <td>7.009873</td>\n",
       "      <td>4.598215</td>\n",
       "      <td>110.268504</td>\n",
       "      <td>124.639705</td>\n",
       "      <td>168.473662</td>\n",
       "      <td>169.018744</td>\n",
       "      <td>135.168534</td>\n",
       "      <td>123.832168</td>\n",
       "      <td>109.720974</td>\n",
       "      <td>175.212517</td>\n",
       "      <td>168.395841</td>\n",
       "      <td>135.021539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53458</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>146.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1013.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6906.0</td>\n",
       "      <td>2293.0</td>\n",
       "      <td>2815.0</td>\n",
       "      <td>3129.0</td>\n",
       "      <td>3218.0</td>\n",
       "      <td>3233.0</td>\n",
       "      <td>3333.0</td>\n",
       "      <td>1204.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>18:04</td>\n",
       "      <td>8.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>777.95</td>\n",
       "      <td>147.0</td>\n",
       "      <td>153.6</td>\n",
       "      <td>77.6</td>\n",
       "      <td>51.60</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.240953</td>\n",
       "      <td>17.434115</td>\n",
       "      <td>87.070832</td>\n",
       "      <td>89.964845</td>\n",
       "      <td>87.476694</td>\n",
       "      <td>2.136097</td>\n",
       "      <td>2.146053</td>\n",
       "      <td>2.453286</td>\n",
       "      <td>97.234307</td>\n",
       "      <td>96.783174</td>\n",
       "      <td>99.536035</td>\n",
       "      <td>48.262381</td>\n",
       "      <td>1.030931</td>\n",
       "      <td>73.282199</td>\n",
       "      <td>70.924838</td>\n",
       "      <td>2.293</td>\n",
       "      <td>2.815</td>\n",
       "      <td>3.129</td>\n",
       "      <td>3.218</td>\n",
       "      <td>3.233</td>\n",
       "      <td>6.906</td>\n",
       "      <td>3.333</td>\n",
       "      <td>1.204</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>106.951848</td>\n",
       "      <td>105.017314</td>\n",
       "      <td>99.648442</td>\n",
       "      <td>81.661851</td>\n",
       "      <td>70.318269</td>\n",
       "      <td>101.457323</td>\n",
       "      <td>99.950023</td>\n",
       "      <td>114.909098</td>\n",
       "      <td>115.306348</td>\n",
       "      <td>115.642315</td>\n",
       "      <td>98.529925</td>\n",
       "      <td>98.223042</td>\n",
       "      <td>99.672851</td>\n",
       "      <td>100.804168</td>\n",
       "      <td>87.415469</td>\n",
       "      <td>45.603856</td>\n",
       "      <td>24.793152</td>\n",
       "      <td>87.378017</td>\n",
       "      <td>68.518871</td>\n",
       "      <td>67.536328</td>\n",
       "      <td>88.672599</td>\n",
       "      <td>87.520433</td>\n",
       "      <td>1.858945</td>\n",
       "      <td>1.861175</td>\n",
       "      <td>2.121443</td>\n",
       "      <td>98.685051</td>\n",
       "      <td>99.862735</td>\n",
       "      <td>99.862735</td>\n",
       "      <td>1.022707</td>\n",
       "      <td>55.210344</td>\n",
       "      <td>94.543074</td>\n",
       "      <td>100.649958</td>\n",
       "      <td>94.703833</td>\n",
       "      <td>111.112674</td>\n",
       "      <td>92.896883</td>\n",
       "      <td>94.350059</td>\n",
       "      <td>97.192910</td>\n",
       "      <td>75.496351</td>\n",
       "      <td>122.284513</td>\n",
       "      <td>2.977479</td>\n",
       "      <td>2.278193</td>\n",
       "      <td>3.413801</td>\n",
       "      <td>6.215313</td>\n",
       "      <td>3.368251</td>\n",
       "      <td>3.410703</td>\n",
       "      <td>3.429262</td>\n",
       "      <td>1.594779</td>\n",
       "      <td>6.542120</td>\n",
       "      <td>3.413801</td>\n",
       "      <td>117.525980</td>\n",
       "      <td>117.326480</td>\n",
       "      <td>102.628275</td>\n",
       "      <td>79.718369</td>\n",
       "      <td>87.472389</td>\n",
       "      <td>116.566817</td>\n",
       "      <td>116.849096</td>\n",
       "      <td>85.388250</td>\n",
       "      <td>102.946861</td>\n",
       "      <td>87.532655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53483</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>188.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1606.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7980.0</td>\n",
       "      <td>2881.0</td>\n",
       "      <td>3926.0</td>\n",
       "      <td>4568.0</td>\n",
       "      <td>4658.0</td>\n",
       "      <td>4660.0</td>\n",
       "      <td>3983.0</td>\n",
       "      <td>1774.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>09:29</td>\n",
       "      <td>6.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1301.57</td>\n",
       "      <td>188.0</td>\n",
       "      <td>172.9</td>\n",
       "      <td>95.5</td>\n",
       "      <td>109.95</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.068670</td>\n",
       "      <td>22.230576</td>\n",
       "      <td>84.248927</td>\n",
       "      <td>85.945709</td>\n",
       "      <td>84.285101</td>\n",
       "      <td>1.712446</td>\n",
       "      <td>1.713182</td>\n",
       "      <td>2.032603</td>\n",
       "      <td>98.067840</td>\n",
       "      <td>98.025751</td>\n",
       "      <td>99.957082</td>\n",
       "      <td>49.912281</td>\n",
       "      <td>0.854721</td>\n",
       "      <td>63.069177</td>\n",
       "      <td>61.824034</td>\n",
       "      <td>2.881</td>\n",
       "      <td>3.926</td>\n",
       "      <td>4.568</td>\n",
       "      <td>4.658</td>\n",
       "      <td>4.660</td>\n",
       "      <td>7.980</td>\n",
       "      <td>3.983</td>\n",
       "      <td>1.774</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>92.001182</td>\n",
       "      <td>92.016787</td>\n",
       "      <td>97.229479</td>\n",
       "      <td>87.162820</td>\n",
       "      <td>93.981057</td>\n",
       "      <td>97.206860</td>\n",
       "      <td>96.870976</td>\n",
       "      <td>91.495783</td>\n",
       "      <td>91.152918</td>\n",
       "      <td>94.227501</td>\n",
       "      <td>99.685860</td>\n",
       "      <td>100.057672</td>\n",
       "      <td>100.371926</td>\n",
       "      <td>85.461846</td>\n",
       "      <td>92.900270</td>\n",
       "      <td>43.675353</td>\n",
       "      <td>23.654316</td>\n",
       "      <td>86.649572</td>\n",
       "      <td>68.552572</td>\n",
       "      <td>67.187778</td>\n",
       "      <td>88.415271</td>\n",
       "      <td>87.007589</td>\n",
       "      <td>1.871612</td>\n",
       "      <td>1.879459</td>\n",
       "      <td>2.157123</td>\n",
       "      <td>98.376881</td>\n",
       "      <td>99.586692</td>\n",
       "      <td>99.586692</td>\n",
       "      <td>1.000120</td>\n",
       "      <td>53.726734</td>\n",
       "      <td>93.463004</td>\n",
       "      <td>90.498463</td>\n",
       "      <td>96.056211</td>\n",
       "      <td>90.012084</td>\n",
       "      <td>95.539394</td>\n",
       "      <td>96.103561</td>\n",
       "      <td>84.501159</td>\n",
       "      <td>80.197435</td>\n",
       "      <td>86.437475</td>\n",
       "      <td>4.200593</td>\n",
       "      <td>3.183479</td>\n",
       "      <td>4.851326</td>\n",
       "      <td>8.865476</td>\n",
       "      <td>4.781274</td>\n",
       "      <td>4.846855</td>\n",
       "      <td>4.713545</td>\n",
       "      <td>2.212041</td>\n",
       "      <td>6.941434</td>\n",
       "      <td>4.851326</td>\n",
       "      <td>96.307716</td>\n",
       "      <td>93.707719</td>\n",
       "      <td>87.970531</td>\n",
       "      <td>83.490109</td>\n",
       "      <td>93.877572</td>\n",
       "      <td>93.100580</td>\n",
       "      <td>95.831421</td>\n",
       "      <td>86.480052</td>\n",
       "      <td>87.922082</td>\n",
       "      <td>93.771319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53534</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>122.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1012.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3963.0</td>\n",
       "      <td>1585.0</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>2190.0</td>\n",
       "      <td>2230.0</td>\n",
       "      <td>2246.0</td>\n",
       "      <td>2415.0</td>\n",
       "      <td>885.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14:24</td>\n",
       "      <td>8.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>268.86</td>\n",
       "      <td>123.0</td>\n",
       "      <td>129.9</td>\n",
       "      <td>67.0</td>\n",
       "      <td>28.90</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>122.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.403384</td>\n",
       "      <td>22.331567</td>\n",
       "      <td>88.334817</td>\n",
       "      <td>90.593607</td>\n",
       "      <td>88.968610</td>\n",
       "      <td>1.764470</td>\n",
       "      <td>1.777130</td>\n",
       "      <td>1.997480</td>\n",
       "      <td>98.206278</td>\n",
       "      <td>97.506679</td>\n",
       "      <td>99.287622</td>\n",
       "      <td>60.938683</td>\n",
       "      <td>1.075245</td>\n",
       "      <td>72.374429</td>\n",
       "      <td>70.569902</td>\n",
       "      <td>1.585</td>\n",
       "      <td>1.984</td>\n",
       "      <td>2.190</td>\n",
       "      <td>2.230</td>\n",
       "      <td>2.246</td>\n",
       "      <td>3.963</td>\n",
       "      <td>2.415</td>\n",
       "      <td>0.885</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>105.657422</td>\n",
       "      <td>104.177044</td>\n",
       "      <td>100.604063</td>\n",
       "      <td>84.316451</td>\n",
       "      <td>87.713093</td>\n",
       "      <td>101.993147</td>\n",
       "      <td>101.307182</td>\n",
       "      <td>95.297983</td>\n",
       "      <td>96.036532</td>\n",
       "      <td>95.092850</td>\n",
       "      <td>99.333271</td>\n",
       "      <td>98.626368</td>\n",
       "      <td>99.263481</td>\n",
       "      <td>103.795305</td>\n",
       "      <td>108.666171</td>\n",
       "      <td>46.732735</td>\n",
       "      <td>25.459787</td>\n",
       "      <td>87.804424</td>\n",
       "      <td>68.499144</td>\n",
       "      <td>67.740358</td>\n",
       "      <td>88.823230</td>\n",
       "      <td>87.820635</td>\n",
       "      <td>1.851529</td>\n",
       "      <td>1.850473</td>\n",
       "      <td>2.100557</td>\n",
       "      <td>98.865443</td>\n",
       "      <td>100.024320</td>\n",
       "      <td>100.024320</td>\n",
       "      <td>1.035928</td>\n",
       "      <td>56.078798</td>\n",
       "      <td>116.985222</td>\n",
       "      <td>117.801718</td>\n",
       "      <td>116.386360</td>\n",
       "      <td>111.253791</td>\n",
       "      <td>115.732554</td>\n",
       "      <td>116.141104</td>\n",
       "      <td>116.878134</td>\n",
       "      <td>100.445610</td>\n",
       "      <td>123.022943</td>\n",
       "      <td>1.695941</td>\n",
       "      <td>1.345481</td>\n",
       "      <td>1.929779</td>\n",
       "      <td>3.562126</td>\n",
       "      <td>1.892294</td>\n",
       "      <td>1.920078</td>\n",
       "      <td>2.066255</td>\n",
       "      <td>0.881074</td>\n",
       "      <td>6.502852</td>\n",
       "      <td>1.929779</td>\n",
       "      <td>95.100723</td>\n",
       "      <td>95.590060</td>\n",
       "      <td>100.422536</td>\n",
       "      <td>86.303592</td>\n",
       "      <td>105.055417</td>\n",
       "      <td>94.971376</td>\n",
       "      <td>94.507746</td>\n",
       "      <td>94.324150</td>\n",
       "      <td>100.950379</td>\n",
       "      <td>105.240092</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1200 rows Ã— 156 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       HAR1  HAR23  HAR26  HAC1E  HAC1F  HAC1G  HAC1O  HAL6  HAL10  HAL1  \\\n",
       "SEQN                                                                       \n",
       "3       2.0    2.0    2.0    2.0    2.0    2.0    2.0   2.0    2.0   2.0   \n",
       "52      2.0    2.0    2.0    2.0    2.0    2.0    2.0   2.0    2.0   2.0   \n",
       "168     2.0    2.0    2.0    2.0    2.0    2.0    2.0   2.0    2.0   2.0   \n",
       "228     2.0    2.0    2.0    2.0    2.0    2.0    2.0   2.0    2.0   2.0   \n",
       "313     2.0    2.0    2.0    2.0    2.0    2.0    2.0   2.0    2.0   2.0   \n",
       "...     ...    ...    ...    ...    ...    ...    ...   ...    ...   ...   \n",
       "53343   NaN    NaN    NaN    NaN    NaN    NaN    NaN   NaN    NaN   NaN   \n",
       "53453   NaN    NaN    NaN    NaN    NaN    NaN    NaN   NaN    NaN   NaN   \n",
       "53458   NaN    NaN    NaN    NaN    NaN    NaN    NaN   NaN    NaN   NaN   \n",
       "53483   NaN    NaN    NaN    NaN    NaN    NaN    NaN   NaN    NaN   NaN   \n",
       "53534   NaN    NaN    NaN    NaN    NaN    NaN    NaN   NaN    NaN   NaN   \n",
       "\n",
       "       HAL3  HAL5  DMARACER  DMARETHN  DMAETHNR  HSSEX  HSAGEIR  HSAGEU  \\\n",
       "SEQN                                                                      \n",
       "3       2.0   2.0         1         3         1      1       21       2   \n",
       "52      2.0   2.0         1         3         1      1       50       2   \n",
       "168     2.0   2.0         1         3         1      1       65       2   \n",
       "228     2.0   2.0         1         3         1      1       21       2   \n",
       "313     2.0   2.0         1         3         1      1       20       2   \n",
       "...     ...   ...       ...       ...       ...    ...      ...     ...   \n",
       "53343   NaN   NaN         1         3         1      1        9       2   \n",
       "53453   NaN   NaN         1         3         1      1       15       2   \n",
       "53458   NaN   NaN         2         3         1      1       12       2   \n",
       "53483   NaN   NaN         1         3         1      1       15       2   \n",
       "53534   NaN   NaN         1         3         1      1       10       2   \n",
       "\n",
       "       HXPAXTMR  HXPSESSR  HSAITMOR  HAR4S  SPPQ1  SPPQ2  SPPQ3  SPPQ4  SPPQ5  \\\n",
       "SEQN                                                                            \n",
       "3           NaN       NaN     261.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "52          NaN       NaN     602.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "168         NaN       NaN     785.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "228         NaN       NaN     258.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "313         NaN       NaN     249.0    NaN    8.0    8.0    8.0    8.0    8.0   \n",
       "...         ...       ...       ...    ...    ...    ...    ...    ...    ...   \n",
       "53343       NaN       NaN     110.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53453       NaN       NaN     186.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53458       NaN       NaN     146.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "53483       NaN       NaN     188.0    NaN    2.0    2.0    2.0    1.0    2.0   \n",
       "53534       NaN       NaN     122.0    NaN    2.0    2.0    2.0    2.0    1.0   \n",
       "\n",
       "       SPPMANEU  MYPB1  MYPB3  MYPB11  MYPB27A  MYPB27B  HSAGEIR_exam  \\\n",
       "SEQN                                                                    \n",
       "3           4.0    NaN    NaN     NaN      NaN      NaN          21.0   \n",
       "52          5.0    NaN    NaN     NaN      NaN      NaN          50.0   \n",
       "168         6.0    NaN    NaN     NaN      NaN      NaN          65.0   \n",
       "228         4.0    NaN    NaN     NaN      NaN      NaN          21.0   \n",
       "313         8.0    NaN    NaN     NaN      NaN      NaN          20.0   \n",
       "...         ...    ...    ...     ...      ...      ...           ...   \n",
       "53343       7.0    2.0    NaN     NaN      0.0      0.0           9.0   \n",
       "53453       9.0    2.0    NaN     NaN      0.0      0.0          15.0   \n",
       "53458       5.0    2.0    NaN     NaN      0.0      0.0          12.0   \n",
       "53483       8.0    2.0    NaN     NaN      0.0      0.0          15.0   \n",
       "53534       7.0    2.0    NaN     NaN      0.0      0.0          10.0   \n",
       "\n",
       "       HSAGEU_exam  HXPAXTMR_exam  HXPSESSR_exam  HXPEJ6A2  SPPTECH1  \\\n",
       "SEQN                                                                   \n",
       "3              2.0            NaN            NaN       NaN    1008.0   \n",
       "52             2.0            NaN            NaN       NaN    1012.0   \n",
       "168            2.0            NaN            NaN       NaN    1601.0   \n",
       "228            2.0            NaN            NaN       NaN    1005.0   \n",
       "313            2.0            NaN            NaN       NaN    1003.0   \n",
       "...            ...            ...            ...       ...       ...   \n",
       "53343          2.0            NaN            NaN       NaN    1605.0   \n",
       "53453          2.0            NaN            NaN       NaN    1012.0   \n",
       "53458          2.0            NaN            NaN       NaN    1013.0   \n",
       "53483          2.0            NaN            NaN       NaN    1606.0   \n",
       "53534          2.0            NaN            NaN       NaN    1012.0   \n",
       "\n",
       "       SPPTRIAL  SPPPEAK  SPPFEV05  SPPFEV1  SPPFEV3  SPPFEV6  SPPFVC  \\\n",
       "SEQN                                                                    \n",
       "3           5.0  10513.0    3576.0   4640.0   5650.0   5884.0  5988.0   \n",
       "52          5.0  11424.0    3781.0   4658.0   5104.0   5301.0  5514.0   \n",
       "168         7.0   7248.0    2286.0   3142.0   3635.0   3721.0  3830.0   \n",
       "228         5.0  12788.0    4363.0   5409.0   5857.0   5857.0  5859.0   \n",
       "313         8.0   7239.0    2946.0   3942.0   4563.0   4747.0  4847.0   \n",
       "...         ...      ...       ...      ...      ...      ...     ...   \n",
       "53343       7.0   4474.0    1650.0   2086.0   2501.0   2574.0  2581.0   \n",
       "53453       9.0   8926.0    3217.0   3820.0   3902.0   3905.0  3906.0   \n",
       "53458       5.0   6906.0    2293.0   2815.0   3129.0   3218.0  3233.0   \n",
       "53483       8.0   7980.0    2881.0   3926.0   4568.0   4658.0  4660.0   \n",
       "53534       7.0   3963.0    1585.0   1984.0   2190.0   2230.0  2246.0   \n",
       "\n",
       "       SPPMMEF  SPPFEF75  SPPTYPE  SPPREPRO SPPTIME  SPPEXPIR  SPPTEMP  \\\n",
       "SEQN                                                                     \n",
       "3       4085.0    1230.0      1.0       4.0   09:25      11.0     22.0   \n",
       "52      5684.0    1868.0      1.0       4.0   09:24      13.0     21.0   \n",
       "168     2923.0     899.0      1.0       4.0   11:18      14.0     22.0   \n",
       "228     7416.0    3010.0      1.0       4.0   14:52       3.0     23.0   \n",
       "313     4006.0    1341.0      1.0       1.0   18:02      10.0     21.0   \n",
       "...        ...       ...      ...       ...     ...       ...      ...   \n",
       "53343   1941.0     617.0      1.0       4.0   14:08       7.0     22.0   \n",
       "53453   6404.0    2979.0      1.0       4.0   09:08       7.0     25.0   \n",
       "53458   3333.0    1204.0      1.0       4.0   18:04       8.0     24.0   \n",
       "53483   3983.0    1774.0      1.0       4.0   09:29       6.0     20.0   \n",
       "53534   2415.0     885.0      1.0       4.0   14:24       8.0     24.0   \n",
       "\n",
       "       HSSEX_exam   WTPFHX6  MXPAXTMR  BMPHT  BMPSITHT   BMPWT  DMARACER_exam  \\\n",
       "SEQN                                                                            \n",
       "3             1.0   1735.14     262.0  178.8      93.1   81.60              1   \n",
       "52            1.0   1398.57     603.0  178.2      95.4   79.60              1   \n",
       "168           1.0    327.82     786.0  161.0      85.6   65.40              1   \n",
       "228           1.0  13984.72     259.0  179.2      95.3   79.80              1   \n",
       "313           1.0   2479.01     251.0  180.5      92.0  122.80              1   \n",
       "...           ...       ...       ...    ...       ...     ...            ...   \n",
       "53343         1.0    281.38     111.0  144.1      72.9   40.90              1   \n",
       "53453         1.0   1806.26     187.0  169.4      85.1   51.55              1   \n",
       "53458         1.0    777.95     147.0  153.6      77.6   51.60              2   \n",
       "53483         1.0   1301.57     188.0  172.9      95.5  109.95              1   \n",
       "53534         1.0    268.86     123.0  129.9      67.0   28.90              1   \n",
       "\n",
       "       DMARETHN_exam  DMAETHNR_exam  HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \\\n",
       "SEQN                                                                        \n",
       "3                3.0            1.0          261.0    NaN     NaN     NaN   \n",
       "52               3.0            1.0          602.0    NaN     NaN     NaN   \n",
       "168              3.0            1.0          785.0    NaN     NaN     NaN   \n",
       "228              3.0            1.0          258.0    NaN     NaN     NaN   \n",
       "313              3.0            1.0          249.0    NaN     NaN     NaN   \n",
       "...              ...            ...            ...    ...     ...     ...   \n",
       "53343            3.0            1.0          110.0    NaN     NaN     NaN   \n",
       "53453            3.0            1.0          186.0    NaN     NaN     NaN   \n",
       "53458            3.0            1.0          146.0    NaN     NaN     NaN   \n",
       "53483            3.0            1.0          188.0    NaN     NaN     NaN   \n",
       "53534            3.0            1.0          122.0    NaN     NaN     NaN   \n",
       "\n",
       "       FEF75OFVC  FEF75OPEFR   FEV1OFVC  FEV1OFEV3  FEV1OFEV6  PEFROFVC  \\\n",
       "SEQN                                                                      \n",
       "3      20.541082   11.699800  77.488310  82.123894  78.857920  1.755678   \n",
       "52     33.877403   16.351541  84.475880  91.261755  87.870213  2.071817   \n",
       "168    23.472585   12.403422  82.036554  86.437414  84.439667  1.892428   \n",
       "228    51.373955   23.537692  92.319508  92.351033  92.351033  2.182625   \n",
       "313    27.666598   18.524658  81.328657  86.390533  83.041921  1.493501   \n",
       "...          ...         ...        ...        ...        ...       ...   \n",
       "53343  23.905463   13.790791  80.821387  83.406637  81.041181  1.733437   \n",
       "53453  76.267281   33.374412  97.798259  97.898514  97.823303  2.285202   \n",
       "53458  37.240953   17.434115  87.070832  89.964845  87.476694  2.136097   \n",
       "53483  38.068670   22.230576  84.248927  85.945709  84.285101  1.712446   \n",
       "53534  39.403384   22.331567  88.334817  90.593607  88.968610  1.764470   \n",
       "\n",
       "       PEFROFEV6  PEFROFEV1   FEV3OFEV6   FEV3OFVC   FEV6OFVC  MMEFOPEFR  \\\n",
       "SEQN                                                                       \n",
       "3       1.786710   2.265733   96.023114  94.355377  98.263193  38.856654   \n",
       "52      2.155065   2.452555   96.283720  92.564382  96.137106  49.754902   \n",
       "168     1.947863   2.306811   97.688793  94.908616  97.154047  40.328366   \n",
       "228     2.183370   2.364208  100.000000  99.965864  99.965864  57.991867   \n",
       "313     1.524963   1.836377   96.123868  94.140706  97.936868  55.339135   \n",
       "...          ...        ...         ...        ...        ...        ...   \n",
       "53343   1.738151   2.144775   97.163947  96.900426  99.728787  43.383996   \n",
       "53453   2.285787   2.336649   99.923175  99.897593  99.974398  71.745463   \n",
       "53458   2.146053   2.453286   97.234307  96.783174  99.536035  48.262381   \n",
       "53483   1.713182   2.032603   98.067840  98.025751  99.957082  49.912281   \n",
       "53534   1.777130   1.997480   98.206278  97.506679  99.287622  60.938683   \n",
       "\n",
       "       MMEFOFVC  FEV05OFEV3  FEV05OFVC  FEV05   FEV1   FEV3   FEV6    FVC  \\\n",
       "SEQN                                                                        \n",
       "3      0.682198   63.292035  59.719439  3.576  4.640  5.650  5.884  5.988   \n",
       "52     1.030831   74.079154  68.570910  3.781  4.658  5.104  5.301  5.514   \n",
       "168    0.763185   62.888583  59.686684  2.286  3.142  3.635  3.721  3.830   \n",
       "228    1.265745   74.492061  74.466633  4.363  5.409  5.857  5.857  5.859   \n",
       "313    0.826491   64.562788  60.779864  2.946  3.942  4.563  4.747  4.847   \n",
       "...         ...         ...        ...    ...    ...    ...    ...    ...   \n",
       "53343  0.752034   65.973611  63.928710  1.650  2.086  2.501  2.574  2.581   \n",
       "53453  1.639529   82.444900  82.360471  3.217  3.820  3.902  3.905  3.906   \n",
       "53458  1.030931   73.282199  70.924838  2.293  2.815  3.129  3.218  3.233   \n",
       "53483  0.854721   63.069177  61.824034  2.881  3.926  4.568  4.658  4.660   \n",
       "53534  1.075245   72.374429  70.569902  1.585  1.984  2.190  2.230  2.246   \n",
       "\n",
       "         PEFR   MMEF  FEF75  EXPIR  HYE1G  HYE1H  HYG2  HYG4  HYG7  HYG8  \\\n",
       "SEQN                                                                       \n",
       "3      10.513  4.085  1.230   11.0    NaN    NaN   NaN   NaN   NaN   NaN   \n",
       "52     11.424  5.684  1.868   13.0    NaN    NaN   NaN   NaN   NaN   NaN   \n",
       "168     7.248  2.923  0.899   14.0    NaN    NaN   NaN   NaN   NaN   NaN   \n",
       "228    12.788  7.416  3.010    3.0    NaN    NaN   NaN   NaN   NaN   NaN   \n",
       "313     7.239  4.006  1.341   10.0    NaN    NaN   NaN   NaN   NaN   NaN   \n",
       "...       ...    ...    ...    ...    ...    ...   ...   ...   ...   ...   \n",
       "53343   4.474  1.941  0.617    7.0    2.0    2.0   NaN   NaN   NaN   2.0   \n",
       "53453   8.926  6.404  2.979    7.0    2.0    2.0   2.0   2.0   NaN   2.0   \n",
       "53458   6.906  3.333  1.204    8.0    2.0    2.0   2.0   2.0   NaN   2.0   \n",
       "53483   7.980  3.983  1.774    6.0    2.0    2.0   2.0   2.0   NaN   2.0   \n",
       "53534   3.963  2.415  0.885    8.0    2.0    2.0   NaN   NaN   2.0   2.0   \n",
       "\n",
       "       HYG12  FEV05OFEV3PP  FEV05OFVCPP  FEV1OFVCPP  FEF75OFVCPP  \\\n",
       "SEQN                                                               \n",
       "3        NaN     92.244425    89.724485   90.805034    51.104031   \n",
       "52       NaN    107.526754   107.714673  106.558826   140.249218   \n",
       "168      NaN     91.084636    96.107566  107.907432   150.973956   \n",
       "228      NaN    108.571706   111.838309  108.117512   127.365805   \n",
       "313      NaN     94.108873    91.189584   95.087590    67.956788   \n",
       "...      ...           ...          ...         ...          ...   \n",
       "53343    2.0     96.326915    94.231242   91.824092    50.543110   \n",
       "53453    2.0    120.266659   122.567012  112.843270   174.435298   \n",
       "53458    2.0    106.951848   105.017314   99.648442    81.661851   \n",
       "53483    2.0     92.001182    92.016787   97.229479    87.162820   \n",
       "53534    2.0    105.657422   104.177044  100.604063    84.316451   \n",
       "\n",
       "       FEF75OPEFRPP  FEV1OFEV3PP  FEV1OFEV6PP  PEFROFVCPP  PEFROFEV6PP  \\\n",
       "SEQN                                                                     \n",
       "3         54.168608    93.374784    91.607942   92.673545    93.424769   \n",
       "52       134.834962   106.352530   107.398995  103.599456   104.385619   \n",
       "168      176.085364   102.097001   106.176595   92.027380    90.761692   \n",
       "228      108.557740   104.980556   107.235922  115.266358   114.245563   \n",
       "313       84.570496    98.148904    96.314480   78.976208    79.943423   \n",
       "...             ...          ...          ...         ...          ...   \n",
       "53343     53.466968    93.822274    92.122887   93.809732    94.202498   \n",
       "53453    140.926784   110.717937   112.414610  122.118215   121.648307   \n",
       "53458     70.318269   101.457323    99.950023  114.909098   115.306348   \n",
       "53483     93.981057    97.206860    96.870976   91.495783    91.152918   \n",
       "53534     87.713093   101.993147   101.307182   95.297983    96.036532   \n",
       "\n",
       "       PEFROFEV1PP  FEV3OFEV6PP  FEV3OFVCPP  FEV6OFVCPP  MMEFOFVCPP  \\\n",
       "SEQN                                                                  \n",
       "3       101.990159    98.162394   97.323956   99.167131   71.110136   \n",
       "52       97.390327   101.077206  100.338569   99.322778  133.614128   \n",
       "168      86.154512   104.054749  105.770196  101.667562  113.792051   \n",
       "228     106.548149   102.204322  103.067021  100.864906  131.710361   \n",
       "313      83.020813    98.182408   96.950988   98.763987   85.610006   \n",
       "...            ...          ...         ...         ...         ...   \n",
       "53343   102.615179    98.189399   97.849534   99.624069   72.134865   \n",
       "53453   108.366198   101.564047  101.953978  100.382528  163.842969   \n",
       "53458   115.642315    98.529925   98.223042   99.672851  100.804168   \n",
       "53483    94.227501    99.685860  100.057672  100.371926   85.461846   \n",
       "53534    95.092850    99.333271   98.626368   99.263481  103.795305   \n",
       "\n",
       "       MMEFOPEFRPP  FEF75OFVCPred  FEF75OPEFRPred  FEV1OFVCPred  \\\n",
       "SEQN                                                              \n",
       "3        76.116387      40.194641       21.598857     85.334817   \n",
       "52      128.533394      24.155146       12.127078     79.276286   \n",
       "168     125.681531      15.547440        7.043982     76.024934   \n",
       "228     113.359339      40.335751       21.682186     85.388118   \n",
       "313     107.565245      40.712045       21.904398     85.530254   \n",
       "...            ...            ...             ...           ...   \n",
       "53343    76.768137      47.297175       25.793105     88.017627   \n",
       "53453   133.447855      43.722390       23.682093     86.667339   \n",
       "53458    87.415469      45.603856       24.793152     87.378017   \n",
       "53483    92.900270      43.675353       23.654316     86.649572   \n",
       "53534   108.666171      46.732735       25.459787     87.804424   \n",
       "\n",
       "       FEV05OFEV3Pred  FEV05OFVCPred  FEV1OFEV3Pred  FEV1OFEV6Pred  \\\n",
       "SEQN                                                                 \n",
       "3           68.613399      66.558687      87.950826      86.081968   \n",
       "52          68.893695      63.659768      85.810611      81.816607   \n",
       "168         69.044117      62.104043      84.662050      79.527571   \n",
       "228         68.610933      66.584190      87.969655      86.119493   \n",
       "313         68.604357      66.652200      88.019865      86.219561   \n",
       "...               ...            ...            ...            ...   \n",
       "53343       68.489280      67.842372      88.898546      87.970735   \n",
       "53453       68.551750      67.196279      88.421548      87.020098   \n",
       "53458       68.518871      67.536328      88.672599      87.520433   \n",
       "53483       68.552572      67.187778      88.415271      87.007589   \n",
       "53534       68.499144      67.740358      88.823230      87.820635   \n",
       "\n",
       "       PEFROFVCPred  PEFROFEV6Pred  PEFROFEV1Pred  FEV3OFEV6Pred  \\\n",
       "SEQN                                                               \n",
       "3          1.894476       1.912458       2.221521      97.820672   \n",
       "52         1.999834       2.064523       2.518273      95.257600   \n",
       "168        2.056375       2.146130       2.677528      93.882109   \n",
       "228        1.893549       1.911120       2.218910      97.843221   \n",
       "313        1.891077       1.907553       2.211948      97.903351   \n",
       "...             ...            ...            ...            ...   \n",
       "53343      1.847822       1.845122       2.090114      98.955639   \n",
       "53453      1.871303       1.879013       2.156253      98.384397   \n",
       "53458      1.858945       1.861175       2.121443      98.685051   \n",
       "53483      1.871612       1.879459       2.157123      98.376881   \n",
       "53534      1.851529       1.850473       2.100557      98.865443   \n",
       "\n",
       "       FEV3OFVCPred  FEV6OFVCPred  MMEFOFVCPred  MMEFOPEFRPred      FEV1PP  \\\n",
       "SEQN                                                                         \n",
       "3         99.088470     99.088470      0.959354      51.048999   99.659533   \n",
       "52        96.792607     96.792607      0.771498      38.709708  108.074898   \n",
       "168       95.560516     95.560516      0.670684      32.087743  119.229272   \n",
       "228       99.108668     99.108668      0.961006      51.157556  115.570559   \n",
       "313       99.162530     99.162530      0.965414      51.447041   82.802182   \n",
       "...             ...           ...           ...            ...         ...   \n",
       "53343    100.105113    100.105113      1.042539      56.513025   87.300137   \n",
       "53453     99.593425     99.593425      1.000671      53.762919   96.016950   \n",
       "53458     99.862735     99.862735      1.022707      55.210344   94.543074   \n",
       "53483     99.586692     99.586692      1.000120      53.726734   93.463004   \n",
       "53534    100.024320    100.024320      1.035928      56.078798  116.985222   \n",
       "\n",
       "          FEV05PP       FVCPP      PEFRPP      FEV3PP      FEV6PP      MMEFPP  \\\n",
       "SEQN                                                                            \n",
       "3      100.303119  109.823444  103.003070  106.180757  108.491711   79.552723   \n",
       "52     110.304543  103.123561  107.885163  102.150961  101.769626  131.136459   \n",
       "168    104.512350  108.456620  100.838977  116.953169  111.431966  131.287104   \n",
       "228    121.859462  106.978802  124.927197  109.509233  107.480076  143.602111   \n",
       "313     81.121237   87.187987   69.975684   83.896408   85.745367   76.174484   \n",
       "...           ...         ...         ...         ...         ...         ...   \n",
       "53343   90.429838   95.570077   93.141394   93.156024   95.115223   68.740270   \n",
       "53453  106.343248   84.946008  105.876454   86.208338   85.055715  143.111650   \n",
       "53458  100.649958   94.703833  111.112674   92.896883   94.350059   97.192910   \n",
       "53483   90.498463   96.056211   90.012084   95.539394   96.103561   84.501159   \n",
       "53534  117.801718  116.386360  111.253791  115.732554  116.141104  116.878134   \n",
       "\n",
       "          FEF75PP     EXPIRPP  FEV1Pred  FEV05Pred   FVCPred   PEFRPred  \\\n",
       "SEQN                                                                      \n",
       "3       54.687757  134.359509  4.655852   3.565193  5.452388  10.206492   \n",
       "52     129.730712  109.073577  4.309974   3.427783  5.346984  10.589037   \n",
       "168    201.001425  112.059673  2.635259   2.187301  3.531366   7.187697   \n",
       "228    132.368618   36.928717  4.680258   3.580354  5.476786  10.236362   \n",
       "313     57.057430  125.832253  4.760744   3.631601  5.559252  10.345022   \n",
       "...           ...         ...       ...        ...       ...        ...   \n",
       "53343   44.967302  117.894761  2.389458   1.824619  2.700636   4.803450   \n",
       "53453  143.574676   99.859163  3.978464   3.025110  4.598215   8.430581   \n",
       "53458   75.496351  122.284513  2.977479   2.278193  3.413801   6.215313   \n",
       "53483   80.197435   86.437475  4.200593   3.183479  4.851326   8.865476   \n",
       "53534  100.445610  123.022943  1.695941   1.345481  1.929779   3.562126   \n",
       "\n",
       "       FEV3Pred  FEV6Pred  MMEFPred  FEF75Pred  EXPIRPred  predFVCmFEV6  \\\n",
       "SEQN                                                                      \n",
       "3      5.321115  5.423456  5.134959   2.249132   8.186990      5.452388   \n",
       "52     4.996527  5.208823  4.334416   1.439906  11.918560      5.346984   \n",
       "168    3.108082  3.339257  2.226418   0.447261  12.493344      3.531366   \n",
       "228    5.348407  5.449382  5.164269   2.273953   8.123759      5.476786   \n",
       "313    5.438850  5.536159  5.258979   2.350264   7.947088      5.559252   \n",
       "...         ...       ...       ...        ...        ...           ...   \n",
       "53343  2.684743  2.706191  2.823672   1.372108   5.937499      2.700636   \n",
       "53453  4.526244  4.591108  4.474828   2.074878   7.009873      4.598215   \n",
       "53458  3.368251  3.410703  3.429262   1.594779   6.542120      3.413801   \n",
       "53483  4.781274  4.846855  4.713545   2.212041   6.941434      4.851326   \n",
       "53534  1.892294  1.920078  2.066255   0.881074   6.502852      1.929779   \n",
       "\n",
       "       PEFRPPOFEV1PP  PEFRPPOFVCPP  MMEFPPOFVCPP  FEF75PPOFVCPP  \\\n",
       "SEQN                                                              \n",
       "3         103.354960     93.789692     72.436923      49.796068   \n",
       "52         99.824441    104.617375    127.164402     125.801234   \n",
       "168        84.575688     92.976323    121.050337     185.328867   \n",
       "228       108.096040    116.777525    134.234174     123.733502   \n",
       "313        84.509468     80.258401     87.368096      65.441848   \n",
       "...              ...           ...           ...            ...   \n",
       "53343     106.691006     97.458741     71.926561      47.051654   \n",
       "53453     110.268504    124.639705    168.473662     169.018744   \n",
       "53458     117.525980    117.326480    102.628275      79.718369   \n",
       "53483      96.307716     93.707719     87.970531      83.490109   \n",
       "53534      95.100723     95.590060    100.422536      86.303592   \n",
       "\n",
       "       MMEFPPOPEFRPP  PEFRPPOFVCPPPP  PEFRPPOFEV1PPPP  FEF75PPOFVCPPPP  \\\n",
       "SEQN                                                                     \n",
       "3          77.233352       93.181295       102.995985        48.682657   \n",
       "52        121.551894      103.935006       100.160667        97.703501   \n",
       "168       130.194799       92.368101        85.174360       129.633193   \n",
       "228       114.948637      116.020047       107.714137       121.242934   \n",
       "313       108.858505       79.737872        84.197429        64.517205   \n",
       "...              ...             ...              ...              ...   \n",
       "53343      73.802063       96.828084       106.000398        51.953302   \n",
       "53453     135.168534      123.832168       109.720974       175.212517   \n",
       "53458      87.472389      116.566817       116.849096        85.388250   \n",
       "53483      93.877572       93.100580        95.831421        86.480052   \n",
       "53534     105.055417       94.971376        94.507746        94.324150   \n",
       "\n",
       "       MMEFPPOFVCPPPP  MMEFPPOPEFRPPPP  \n",
       "SEQN                                    \n",
       "3           71.924024        76.893415  \n",
       "52         122.573679       119.218634  \n",
       "168        114.878481       126.685381  \n",
       "228        133.319025       114.457889  \n",
       "313         86.833808       108.432134  \n",
       "...               ...              ...  \n",
       "53343       72.382263        73.971306  \n",
       "53453      168.395841       135.021539  \n",
       "53458      102.946861        87.532655  \n",
       "53483       87.922082        93.771319  \n",
       "53534      100.950379       105.240092  \n",
       "\n",
       "[1200 rows x 156 columns]"
      ]
     },
     "execution_count": 329,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mallma.query('FEF75PP > 5')  #.HSAITMOR"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a black with MMEFPP < 0 with age 963 months. 80 yo with MMEF 826, but MMEFPP -32.97 and FEF75 PP of - 0.28 - age is over 80 so should be excluded since over 80 years old which is 960; so delete those over 80 or HSAITMOR > 960\n",
    "There is a black with FEF75 < 0 with HSAITMOR 937"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>HAL3</th>\n",
       "      <th>HAL5</th>\n",
       "      <th>DMARACER</th>\n",
       "      <th>DMARETHN</th>\n",
       "      <th>DMAETHNR</th>\n",
       "      <th>HSSEX</th>\n",
       "      <th>HSAGEIR</th>\n",
       "      <th>HSAGEU</th>\n",
       "      <th>HXPAXTMR</th>\n",
       "      <th>HXPSESSR</th>\n",
       "      <th>HSAITMOR</th>\n",
       "      <th>HAR4S</th>\n",
       "      <th>SPPQ1</th>\n",
       "      <th>SPPQ2</th>\n",
       "      <th>SPPQ3</th>\n",
       "      <th>SPPQ4</th>\n",
       "      <th>SPPQ5</th>\n",
       "      <th>SPPMANEU</th>\n",
       "      <th>MYPB1</th>\n",
       "      <th>MYPB3</th>\n",
       "      <th>MYPB11</th>\n",
       "      <th>MYPB27A</th>\n",
       "      <th>MYPB27B</th>\n",
       "      <th>HSAGEIR_exam</th>\n",
       "      <th>HSAGEU_exam</th>\n",
       "      <th>HXPAXTMR_exam</th>\n",
       "      <th>HXPSESSR_exam</th>\n",
       "      <th>HXPEJ6A2</th>\n",
       "      <th>SPPTECH1</th>\n",
       "      <th>SPPTRIAL</th>\n",
       "      <th>SPPPEAK</th>\n",
       "      <th>SPPFEV05</th>\n",
       "      <th>SPPFEV1</th>\n",
       "      <th>SPPFEV3</th>\n",
       "      <th>SPPFEV6</th>\n",
       "      <th>SPPFVC</th>\n",
       "      <th>SPPMMEF</th>\n",
       "      <th>SPPFEF75</th>\n",
       "      <th>SPPTYPE</th>\n",
       "      <th>SPPREPRO</th>\n",
       "      <th>SPPTIME</th>\n",
       "      <th>SPPEXPIR</th>\n",
       "      <th>SPPTEMP</th>\n",
       "      <th>HSSEX_exam</th>\n",
       "      <th>WTPFHX6</th>\n",
       "      <th>MXPAXTMR</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "      <th>FEF75OFVC</th>\n",
       "      <th>FEF75OPEFR</th>\n",
       "      <th>FEV1OFVC</th>\n",
       "      <th>FEV1OFEV3</th>\n",
       "      <th>FEV1OFEV6</th>\n",
       "      <th>PEFROFVC</th>\n",
       "      <th>PEFROFEV6</th>\n",
       "      <th>PEFROFEV1</th>\n",
       "      <th>FEV3OFEV6</th>\n",
       "      <th>FEV3OFVC</th>\n",
       "      <th>FEV6OFVC</th>\n",
       "      <th>MMEFOPEFR</th>\n",
       "      <th>MMEFOFVC</th>\n",
       "      <th>FEV05OFEV3</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "      <th>HYE1G</th>\n",
       "      <th>HYE1H</th>\n",
       "      <th>HYG2</th>\n",
       "      <th>HYG4</th>\n",
       "      <th>HYG7</th>\n",
       "      <th>HYG8</th>\n",
       "      <th>HYG12</th>\n",
       "      <th>FEV05OFEV3PP</th>\n",
       "      <th>FEV05OFVCPP</th>\n",
       "      <th>FEV1OFVCPP</th>\n",
       "      <th>FEF75OFVCPP</th>\n",
       "      <th>FEF75OPEFRPP</th>\n",
       "      <th>FEV1OFEV3PP</th>\n",
       "      <th>FEV1OFEV6PP</th>\n",
       "      <th>PEFROFVCPP</th>\n",
       "      <th>PEFROFEV6PP</th>\n",
       "      <th>PEFROFEV1PP</th>\n",
       "      <th>FEV3OFEV6PP</th>\n",
       "      <th>FEV3OFVCPP</th>\n",
       "      <th>FEV6OFVCPP</th>\n",
       "      <th>MMEFOFVCPP</th>\n",
       "      <th>MMEFOPEFRPP</th>\n",
       "      <th>FEF75OFVCPred</th>\n",
       "      <th>FEF75OPEFRPred</th>\n",
       "      <th>FEV1OFVCPred</th>\n",
       "      <th>FEV05OFEV3Pred</th>\n",
       "      <th>FEV05OFVCPred</th>\n",
       "      <th>FEV1OFEV3Pred</th>\n",
       "      <th>FEV1OFEV6Pred</th>\n",
       "      <th>PEFROFVCPred</th>\n",
       "      <th>PEFROFEV6Pred</th>\n",
       "      <th>PEFROFEV1Pred</th>\n",
       "      <th>FEV3OFEV6Pred</th>\n",
       "      <th>FEV3OFVCPred</th>\n",
       "      <th>FEV6OFVCPred</th>\n",
       "      <th>MMEFOFVCPred</th>\n",
       "      <th>MMEFOPEFRPred</th>\n",
       "      <th>FEV1PP</th>\n",
       "      <th>FEV05PP</th>\n",
       "      <th>FVCPP</th>\n",
       "      <th>PEFRPP</th>\n",
       "      <th>FEV3PP</th>\n",
       "      <th>FEV6PP</th>\n",
       "      <th>MMEFPP</th>\n",
       "      <th>FEF75PP</th>\n",
       "      <th>EXPIRPP</th>\n",
       "      <th>FEV1Pred</th>\n",
       "      <th>FEV05Pred</th>\n",
       "      <th>FVCPred</th>\n",
       "      <th>PEFRPred</th>\n",
       "      <th>FEV3Pred</th>\n",
       "      <th>FEV6Pred</th>\n",
       "      <th>MMEFPred</th>\n",
       "      <th>FEF75Pred</th>\n",
       "      <th>EXPIRPred</th>\n",
       "      <th>predFVCmFEV6</th>\n",
       "      <th>PEFRPPOFEV1PP</th>\n",
       "      <th>PEFRPPOFVCPP</th>\n",
       "      <th>MMEFPPOFVCPP</th>\n",
       "      <th>FEF75PPOFVCPP</th>\n",
       "      <th>MMEFPPOPEFRPP</th>\n",
       "      <th>PEFRPPOFVCPPPP</th>\n",
       "      <th>PEFRPPOFEV1PPPP</th>\n",
       "      <th>FEF75PPOFVCPPPP</th>\n",
       "      <th>MMEFPPOFVCPPPP</th>\n",
       "      <th>MMEFPPOPEFRPPPP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [HAR1, HAR23, HAR26, HAC1E, HAC1F, HAC1G, HAC1O, HAL6, HAL10, HAL1, HAL3, HAL5, DMARACER, DMARETHN, DMAETHNR, HSSEX, HSAGEIR, HSAGEU, HXPAXTMR, HXPSESSR, HSAITMOR, HAR4S, SPPQ1, SPPQ2, SPPQ3, SPPQ4, SPPQ5, SPPMANEU, MYPB1, MYPB3, MYPB11, MYPB27A, MYPB27B, HSAGEIR_exam, HSAGEU_exam, HXPAXTMR_exam, HXPSESSR_exam, HXPEJ6A2, SPPTECH1, SPPTRIAL, SPPPEAK, SPPFEV05, SPPFEV1, SPPFEV3, SPPFEV6, SPPFVC, SPPMMEF, SPPFEF75, SPPTYPE, SPPREPRO, SPPTIME, SPPEXPIR, SPPTEMP, HSSEX_exam, WTPFHX6, MXPAXTMR, BMPHT, BMPSITHT, BMPWT, DMARACER_exam, DMARETHN_exam, DMAETHNR_exam, HSAITMOR_exam, HXPG1, HXPG2A, HXPG2B, FEF75OFVC, FEF75OPEFR, FEV1OFVC, FEV1OFEV3, FEV1OFEV6, PEFROFVC, PEFROFEV6, PEFROFEV1, FEV3OFEV6, FEV3OFVC, FEV6OFVC, MMEFOPEFR, MMEFOFVC, FEV05OFEV3, FEV05OFVC, FEV05, FEV1, FEV3, FEV6, FVC, PEFR, MMEF, FEF75, EXPIR, HYE1G, HYE1H, HYG2, HYG4, HYG7, HYG8, HYG12, FEV05OFEV3PP, FEV05OFVCPP, FEV1OFVCPP, ...]\n",
       "Index: []"
      ]
     },
     "execution_count": 330,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mallb.query('MMEFPP < 0')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAR1</th>\n",
       "      <th>HAR23</th>\n",
       "      <th>HAR26</th>\n",
       "      <th>HAC1E</th>\n",
       "      <th>HAC1F</th>\n",
       "      <th>HAC1G</th>\n",
       "      <th>HAC1O</th>\n",
       "      <th>HAL6</th>\n",
       "      <th>HAL10</th>\n",
       "      <th>HAL1</th>\n",
       "      <th>HAL3</th>\n",
       "      <th>HAL5</th>\n",
       "      <th>DMARACER</th>\n",
       "      <th>DMARETHN</th>\n",
       "      <th>DMAETHNR</th>\n",
       "      <th>HSSEX</th>\n",
       "      <th>HSAGEIR</th>\n",
       "      <th>HSAGEU</th>\n",
       "      <th>HXPAXTMR</th>\n",
       "      <th>HXPSESSR</th>\n",
       "      <th>HSAITMOR</th>\n",
       "      <th>HAR4S</th>\n",
       "      <th>SPPQ1</th>\n",
       "      <th>SPPQ2</th>\n",
       "      <th>SPPQ3</th>\n",
       "      <th>SPPQ4</th>\n",
       "      <th>SPPQ5</th>\n",
       "      <th>SPPMANEU</th>\n",
       "      <th>MYPB1</th>\n",
       "      <th>MYPB3</th>\n",
       "      <th>MYPB11</th>\n",
       "      <th>MYPB27A</th>\n",
       "      <th>MYPB27B</th>\n",
       "      <th>HSAGEIR_exam</th>\n",
       "      <th>HSAGEU_exam</th>\n",
       "      <th>HXPAXTMR_exam</th>\n",
       "      <th>HXPSESSR_exam</th>\n",
       "      <th>HXPEJ6A2</th>\n",
       "      <th>SPPTECH1</th>\n",
       "      <th>SPPTRIAL</th>\n",
       "      <th>SPPPEAK</th>\n",
       "      <th>SPPFEV05</th>\n",
       "      <th>SPPFEV1</th>\n",
       "      <th>SPPFEV3</th>\n",
       "      <th>SPPFEV6</th>\n",
       "      <th>SPPFVC</th>\n",
       "      <th>SPPMMEF</th>\n",
       "      <th>SPPFEF75</th>\n",
       "      <th>SPPTYPE</th>\n",
       "      <th>SPPREPRO</th>\n",
       "      <th>SPPTIME</th>\n",
       "      <th>SPPEXPIR</th>\n",
       "      <th>SPPTEMP</th>\n",
       "      <th>HSSEX_exam</th>\n",
       "      <th>WTPFHX6</th>\n",
       "      <th>MXPAXTMR</th>\n",
       "      <th>BMPHT</th>\n",
       "      <th>BMPSITHT</th>\n",
       "      <th>BMPWT</th>\n",
       "      <th>DMARACER_exam</th>\n",
       "      <th>DMARETHN_exam</th>\n",
       "      <th>DMAETHNR_exam</th>\n",
       "      <th>HSAITMOR_exam</th>\n",
       "      <th>HXPG1</th>\n",
       "      <th>HXPG2A</th>\n",
       "      <th>HXPG2B</th>\n",
       "      <th>FEF75OFVC</th>\n",
       "      <th>FEF75OPEFR</th>\n",
       "      <th>FEV1OFVC</th>\n",
       "      <th>FEV1OFEV3</th>\n",
       "      <th>FEV1OFEV6</th>\n",
       "      <th>PEFROFVC</th>\n",
       "      <th>PEFROFEV6</th>\n",
       "      <th>PEFROFEV1</th>\n",
       "      <th>FEV3OFEV6</th>\n",
       "      <th>FEV3OFVC</th>\n",
       "      <th>FEV6OFVC</th>\n",
       "      <th>MMEFOPEFR</th>\n",
       "      <th>MMEFOFVC</th>\n",
       "      <th>FEV05OFEV3</th>\n",
       "      <th>FEV05OFVC</th>\n",
       "      <th>FEV05</th>\n",
       "      <th>FEV1</th>\n",
       "      <th>FEV3</th>\n",
       "      <th>FEV6</th>\n",
       "      <th>FVC</th>\n",
       "      <th>PEFR</th>\n",
       "      <th>MMEF</th>\n",
       "      <th>FEF75</th>\n",
       "      <th>EXPIR</th>\n",
       "      <th>HYE1G</th>\n",
       "      <th>HYE1H</th>\n",
       "      <th>HYG2</th>\n",
       "      <th>HYG4</th>\n",
       "      <th>HYG7</th>\n",
       "      <th>HYG8</th>\n",
       "      <th>HYG12</th>\n",
       "      <th>FEV05OFEV3PP</th>\n",
       "      <th>FEV05OFVCPP</th>\n",
       "      <th>FEV1OFVCPP</th>\n",
       "      <th>FEF75OFVCPP</th>\n",
       "      <th>FEF75OPEFRPP</th>\n",
       "      <th>FEV1OFEV3PP</th>\n",
       "      <th>FEV1OFEV6PP</th>\n",
       "      <th>PEFROFVCPP</th>\n",
       "      <th>PEFROFEV6PP</th>\n",
       "      <th>PEFROFEV1PP</th>\n",
       "      <th>FEV3OFEV6PP</th>\n",
       "      <th>FEV3OFVCPP</th>\n",
       "      <th>FEV6OFVCPP</th>\n",
       "      <th>MMEFOFVCPP</th>\n",
       "      <th>MMEFOPEFRPP</th>\n",
       "      <th>FEF75OFVCPred</th>\n",
       "      <th>FEF75OPEFRPred</th>\n",
       "      <th>FEV1OFVCPred</th>\n",
       "      <th>FEV05OFEV3Pred</th>\n",
       "      <th>FEV05OFVCPred</th>\n",
       "      <th>FEV1OFEV3Pred</th>\n",
       "      <th>FEV1OFEV6Pred</th>\n",
       "      <th>PEFROFVCPred</th>\n",
       "      <th>PEFROFEV6Pred</th>\n",
       "      <th>PEFROFEV1Pred</th>\n",
       "      <th>FEV3OFEV6Pred</th>\n",
       "      <th>FEV3OFVCPred</th>\n",
       "      <th>FEV6OFVCPred</th>\n",
       "      <th>MMEFOFVCPred</th>\n",
       "      <th>MMEFOPEFRPred</th>\n",
       "      <th>FEV1PP</th>\n",
       "      <th>FEV05PP</th>\n",
       "      <th>FVCPP</th>\n",
       "      <th>PEFRPP</th>\n",
       "      <th>FEV3PP</th>\n",
       "      <th>FEV6PP</th>\n",
       "      <th>MMEFPP</th>\n",
       "      <th>FEF75PP</th>\n",
       "      <th>EXPIRPP</th>\n",
       "      <th>FEV1Pred</th>\n",
       "      <th>FEV05Pred</th>\n",
       "      <th>FVCPred</th>\n",
       "      <th>PEFRPred</th>\n",
       "      <th>FEV3Pred</th>\n",
       "      <th>FEV6Pred</th>\n",
       "      <th>MMEFPred</th>\n",
       "      <th>FEF75Pred</th>\n",
       "      <th>EXPIRPred</th>\n",
       "      <th>predFVCmFEV6</th>\n",
       "      <th>PEFRPPOFEV1PP</th>\n",
       "      <th>PEFRPPOFVCPP</th>\n",
       "      <th>MMEFPPOFVCPP</th>\n",
       "      <th>FEF75PPOFVCPP</th>\n",
       "      <th>MMEFPPOPEFRPP</th>\n",
       "      <th>PEFRPPOFVCPPPP</th>\n",
       "      <th>PEFRPPOFEV1PPPP</th>\n",
       "      <th>FEF75PPOFVCPPPP</th>\n",
       "      <th>MMEFPPOFVCPPPP</th>\n",
       "      <th>MMEFPPOPEFRPPPP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEQN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17920</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>78</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>937.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>78.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3289.0</td>\n",
       "      <td>1530.0</td>\n",
       "      <td>2259.0</td>\n",
       "      <td>2932.0</td>\n",
       "      <td>3229.0</td>\n",
       "      <td>3536.0</td>\n",
       "      <td>1215.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10:00</td>\n",
       "      <td>17.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1566.52</td>\n",
       "      <td>937.0</td>\n",
       "      <td>163.7</td>\n",
       "      <td>80.8</td>\n",
       "      <td>62.90</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>937.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.239819</td>\n",
       "      <td>7.783521</td>\n",
       "      <td>63.885747</td>\n",
       "      <td>77.046385</td>\n",
       "      <td>69.959740</td>\n",
       "      <td>0.930147</td>\n",
       "      <td>1.018582</td>\n",
       "      <td>1.455954</td>\n",
       "      <td>90.802106</td>\n",
       "      <td>82.918552</td>\n",
       "      <td>91.317873</td>\n",
       "      <td>36.941320</td>\n",
       "      <td>0.343609</td>\n",
       "      <td>52.182810</td>\n",
       "      <td>43.269231</td>\n",
       "      <td>1.530</td>\n",
       "      <td>2.259</td>\n",
       "      <td>2.932</td>\n",
       "      <td>3.229</td>\n",
       "      <td>3.536</td>\n",
       "      <td>3.289</td>\n",
       "      <td>1.215</td>\n",
       "      <td>0.256</td>\n",
       "      <td>17.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>76.247015</td>\n",
       "      <td>71.024791</td>\n",
       "      <td>85.620269</td>\n",
       "      <td>56.544460</td>\n",
       "      <td>130.087806</td>\n",
       "      <td>91.774767</td>\n",
       "      <td>89.365439</td>\n",
       "      <td>43.162201</td>\n",
       "      <td>45.214656</td>\n",
       "      <td>51.269348</td>\n",
       "      <td>97.375330</td>\n",
       "      <td>93.259579</td>\n",
       "      <td>95.740611</td>\n",
       "      <td>55.381254</td>\n",
       "      <td>128.036810</td>\n",
       "      <td>12.803764</td>\n",
       "      <td>5.983282</td>\n",
       "      <td>74.615214</td>\n",
       "      <td>68.439152</td>\n",
       "      <td>60.921307</td>\n",
       "      <td>83.951599</td>\n",
       "      <td>78.285007</td>\n",
       "      <td>2.155004</td>\n",
       "      <td>2.252769</td>\n",
       "      <td>2.839814</td>\n",
       "      <td>93.249600</td>\n",
       "      <td>95.380500</td>\n",
       "      <td>95.380500</td>\n",
       "      <td>0.620442</td>\n",
       "      <td>28.852109</td>\n",
       "      <td>143.063694</td>\n",
       "      <td>117.128672</td>\n",
       "      <td>149.693970</td>\n",
       "      <td>73.669008</td>\n",
       "      <td>150.031702</td>\n",
       "      <td>148.417835</td>\n",
       "      <td>173.637283</td>\n",
       "      <td>-586.433405</td>\n",
       "      <td>139.931622</td>\n",
       "      <td>1.579017</td>\n",
       "      <td>1.306256</td>\n",
       "      <td>2.362153</td>\n",
       "      <td>4.464564</td>\n",
       "      <td>1.954254</td>\n",
       "      <td>2.175615</td>\n",
       "      <td>0.699735</td>\n",
       "      <td>-0.043654</td>\n",
       "      <td>12.148791</td>\n",
       "      <td>2.362153</td>\n",
       "      <td>51.493852</td>\n",
       "      <td>49.213076</td>\n",
       "      <td>115.994841</td>\n",
       "      <td>-391.754860</td>\n",
       "      <td>235.699229</td>\n",
       "      <td>48.622336</td>\n",
       "      <td>51.956766</td>\n",
       "      <td>-351.119335</td>\n",
       "      <td>90.584703</td>\n",
       "      <td>181.587936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35742</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>963.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1011.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4248.0</td>\n",
       "      <td>1351.0</td>\n",
       "      <td>1646.0</td>\n",
       "      <td>1952.0</td>\n",
       "      <td>2121.0</td>\n",
       "      <td>2372.0</td>\n",
       "      <td>826.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>15:56</td>\n",
       "      <td>13.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3323.58</td>\n",
       "      <td>964.0</td>\n",
       "      <td>155.2</td>\n",
       "      <td>76.2</td>\n",
       "      <td>57.05</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>963.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.426644</td>\n",
       "      <td>2.471751</td>\n",
       "      <td>69.392917</td>\n",
       "      <td>84.323770</td>\n",
       "      <td>77.604903</td>\n",
       "      <td>1.790894</td>\n",
       "      <td>2.002829</td>\n",
       "      <td>2.580802</td>\n",
       "      <td>92.032060</td>\n",
       "      <td>82.293423</td>\n",
       "      <td>89.418212</td>\n",
       "      <td>19.444444</td>\n",
       "      <td>0.348229</td>\n",
       "      <td>69.211066</td>\n",
       "      <td>56.956155</td>\n",
       "      <td>1.351</td>\n",
       "      <td>1.646</td>\n",
       "      <td>1.952</td>\n",
       "      <td>2.121</td>\n",
       "      <td>2.372</td>\n",
       "      <td>4.248</td>\n",
       "      <td>0.826</td>\n",
       "      <td>0.105</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>101.210722</td>\n",
       "      <td>93.910858</td>\n",
       "      <td>93.535012</td>\n",
       "      <td>37.725370</td>\n",
       "      <td>45.254090</td>\n",
       "      <td>100.634610</td>\n",
       "      <td>99.522207</td>\n",
       "      <td>82.991390</td>\n",
       "      <td>88.664479</td>\n",
       "      <td>90.367971</td>\n",
       "      <td>98.882590</td>\n",
       "      <td>92.888584</td>\n",
       "      <td>93.896636</td>\n",
       "      <td>57.415283</td>\n",
       "      <td>69.082566</td>\n",
       "      <td>11.733866</td>\n",
       "      <td>5.461940</td>\n",
       "      <td>74.189243</td>\n",
       "      <td>68.383136</td>\n",
       "      <td>60.649169</td>\n",
       "      <td>83.792018</td>\n",
       "      <td>77.977474</td>\n",
       "      <td>2.157927</td>\n",
       "      <td>2.258885</td>\n",
       "      <td>2.855881</td>\n",
       "      <td>93.072057</td>\n",
       "      <td>95.230475</td>\n",
       "      <td>95.230475</td>\n",
       "      <td>0.606510</td>\n",
       "      <td>28.146674</td>\n",
       "      <td>160.767727</td>\n",
       "      <td>152.696469</td>\n",
       "      <td>136.894578</td>\n",
       "      <td>134.247443</td>\n",
       "      <td>147.735204</td>\n",
       "      <td>137.702420</td>\n",
       "      <td>1883.281097</td>\n",
       "      <td>-30.597736</td>\n",
       "      <td>106.890692</td>\n",
       "      <td>1.023837</td>\n",
       "      <td>0.884762</td>\n",
       "      <td>1.732720</td>\n",
       "      <td>3.164306</td>\n",
       "      <td>1.321283</td>\n",
       "      <td>1.540278</td>\n",
       "      <td>0.043860</td>\n",
       "      <td>-0.343163</td>\n",
       "      <td>12.161957</td>\n",
       "      <td>1.732720</td>\n",
       "      <td>83.503976</td>\n",
       "      <td>98.066297</td>\n",
       "      <td>1375.716357</td>\n",
       "      <td>-22.351314</td>\n",
       "      <td>1402.843177</td>\n",
       "      <td>96.859383</td>\n",
       "      <td>84.287460</td>\n",
       "      <td>-19.957202</td>\n",
       "      <td>1065.478925</td>\n",
       "      <td>1071.223373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45978</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>82</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>993.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>82.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1023.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7046.0</td>\n",
       "      <td>2099.0</td>\n",
       "      <td>2458.0</td>\n",
       "      <td>2855.0</td>\n",
       "      <td>3102.0</td>\n",
       "      <td>3456.0</td>\n",
       "      <td>1355.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>08:51</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2640.97</td>\n",
       "      <td>995.0</td>\n",
       "      <td>164.1</td>\n",
       "      <td>83.7</td>\n",
       "      <td>78.35</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>993.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.844907</td>\n",
       "      <td>2.866875</td>\n",
       "      <td>71.122685</td>\n",
       "      <td>86.094571</td>\n",
       "      <td>79.239201</td>\n",
       "      <td>2.038773</td>\n",
       "      <td>2.271438</td>\n",
       "      <td>2.866558</td>\n",
       "      <td>92.037395</td>\n",
       "      <td>82.609954</td>\n",
       "      <td>89.756944</td>\n",
       "      <td>19.230769</td>\n",
       "      <td>0.392072</td>\n",
       "      <td>73.520140</td>\n",
       "      <td>60.734954</td>\n",
       "      <td>2.099</td>\n",
       "      <td>2.458</td>\n",
       "      <td>2.855</td>\n",
       "      <td>3.102</td>\n",
       "      <td>3.456</td>\n",
       "      <td>7.046</td>\n",
       "      <td>1.355</td>\n",
       "      <td>0.202</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>107.613302</td>\n",
       "      <td>100.660029</td>\n",
       "      <td>96.502748</td>\n",
       "      <td>55.636831</td>\n",
       "      <td>58.948409</td>\n",
       "      <td>102.973102</td>\n",
       "      <td>102.080299</td>\n",
       "      <td>94.331584</td>\n",
       "      <td>100.244041</td>\n",
       "      <td>99.729641</td>\n",
       "      <td>99.105383</td>\n",
       "      <td>93.631592</td>\n",
       "      <td>94.423125</td>\n",
       "      <td>66.395043</td>\n",
       "      <td>70.347731</td>\n",
       "      <td>10.505464</td>\n",
       "      <td>4.863362</td>\n",
       "      <td>73.700166</td>\n",
       "      <td>68.318822</td>\n",
       "      <td>60.336714</td>\n",
       "      <td>83.608796</td>\n",
       "      <td>77.624382</td>\n",
       "      <td>2.161284</td>\n",
       "      <td>2.265908</td>\n",
       "      <td>2.874329</td>\n",
       "      <td>92.868210</td>\n",
       "      <td>95.058223</td>\n",
       "      <td>95.058223</td>\n",
       "      <td>0.590514</td>\n",
       "      <td>27.336730</td>\n",
       "      <td>188.600563</td>\n",
       "      <td>197.780744</td>\n",
       "      <td>165.243122</td>\n",
       "      <td>197.015273</td>\n",
       "      <td>171.142015</td>\n",
       "      <td>163.884255</td>\n",
       "      <td>744.085014</td>\n",
       "      <td>-104.531234</td>\n",
       "      <td>163.954628</td>\n",
       "      <td>1.303283</td>\n",
       "      <td>1.061276</td>\n",
       "      <td>2.091464</td>\n",
       "      <td>3.576372</td>\n",
       "      <td>1.668205</td>\n",
       "      <td>1.892799</td>\n",
       "      <td>0.182103</td>\n",
       "      <td>-0.193244</td>\n",
       "      <td>12.198497</td>\n",
       "      <td>2.091464</td>\n",
       "      <td>104.461657</td>\n",
       "      <td>119.227518</td>\n",
       "      <td>450.297118</td>\n",
       "      <td>-63.259053</td>\n",
       "      <td>377.678849</td>\n",
       "      <td>117.718665</td>\n",
       "      <td>105.488943</td>\n",
       "      <td>-56.239270</td>\n",
       "      <td>345.476099</td>\n",
       "      <td>285.499911</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       HAR1  HAR23  HAR26  HAC1E  HAC1F  HAC1G  HAC1O  HAL6  HAL10  HAL1  \\\n",
       "SEQN                                                                       \n",
       "17920   2.0    2.0    2.0    2.0    2.0    2.0    2.0   2.0    2.0   2.0   \n",
       "35742   2.0    2.0    2.0    2.0    2.0    2.0    2.0   2.0    2.0   2.0   \n",
       "45978   2.0    2.0    2.0    2.0    2.0    2.0    2.0   2.0    2.0   2.0   \n",
       "\n",
       "       HAL3  HAL5  DMARACER  DMARETHN  DMAETHNR  HSSEX  HSAGEIR  HSAGEU  \\\n",
       "SEQN                                                                      \n",
       "17920   2.0   2.0         2         2         3      1       78       2   \n",
       "35742   2.0   2.0         2         2         3      1       80       2   \n",
       "45978   2.0   2.0         2         2         3      1       82       2   \n",
       "\n",
       "       HXPAXTMR  HXPSESSR  HSAITMOR  HAR4S  SPPQ1  SPPQ2  SPPQ3  SPPQ4  SPPQ5  \\\n",
       "SEQN                                                                            \n",
       "17920       NaN       NaN     937.0    NaN    2.0    2.0    2.0    1.0    2.0   \n",
       "35742       NaN       NaN     963.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "45978       NaN       NaN     993.0    NaN    2.0    2.0    2.0    2.0    2.0   \n",
       "\n",
       "       SPPMANEU  MYPB1  MYPB3  MYPB11  MYPB27A  MYPB27B  HSAGEIR_exam  \\\n",
       "SEQN                                                                    \n",
       "17920       7.0    NaN    NaN     NaN      NaN      NaN          78.0   \n",
       "35742       8.0    NaN    NaN     NaN      NaN      NaN          80.0   \n",
       "45978       3.0    NaN    NaN     NaN      NaN      NaN          82.0   \n",
       "\n",
       "       HSAGEU_exam  HXPAXTMR_exam  HXPSESSR_exam  HXPEJ6A2  SPPTECH1  \\\n",
       "SEQN                                                                   \n",
       "17920          2.0            NaN            NaN       NaN    1005.0   \n",
       "35742          2.0            NaN            NaN       NaN    1011.0   \n",
       "45978          2.0            NaN            NaN       NaN    1023.0   \n",
       "\n",
       "       SPPTRIAL  SPPPEAK  SPPFEV05  SPPFEV1  SPPFEV3  SPPFEV6  SPPFVC  \\\n",
       "SEQN                                                                    \n",
       "17920       8.0   3289.0    1530.0   2259.0   2932.0   3229.0  3536.0   \n",
       "35742      10.0   4248.0    1351.0   1646.0   1952.0   2121.0  2372.0   \n",
       "45978       5.0   7046.0    2099.0   2458.0   2855.0   3102.0  3456.0   \n",
       "\n",
       "       SPPMMEF  SPPFEF75  SPPTYPE  SPPREPRO SPPTIME  SPPEXPIR  SPPTEMP  \\\n",
       "SEQN                                                                     \n",
       "17920   1215.0     256.0      1.0       4.0   10:00      17.0     22.0   \n",
       "35742    826.0     105.0      1.0       4.0   15:56      13.0     23.0   \n",
       "45978   1355.0     202.0      1.0       4.0   08:51      20.0     20.0   \n",
       "\n",
       "       HSSEX_exam  WTPFHX6  MXPAXTMR  BMPHT  BMPSITHT  BMPWT  DMARACER_exam  \\\n",
       "SEQN                                                                          \n",
       "17920         1.0  1566.52     937.0  163.7      80.8  62.90              2   \n",
       "35742         1.0  3323.58     964.0  155.2      76.2  57.05              2   \n",
       "45978         1.0  2640.97     995.0  164.1      83.7  78.35              2   \n",
       "\n",
       "       DMARETHN_exam  DMAETHNR_exam  HSAITMOR_exam  HXPG1  HXPG2A  HXPG2B  \\\n",
       "SEQN                                                                        \n",
       "17920            2.0            3.0          937.0    NaN     NaN     NaN   \n",
       "35742            2.0            3.0          963.0    NaN     NaN     NaN   \n",
       "45978            2.0            3.0          993.0    NaN     NaN     NaN   \n",
       "\n",
       "       FEF75OFVC  FEF75OPEFR   FEV1OFVC  FEV1OFEV3  FEV1OFEV6  PEFROFVC  \\\n",
       "SEQN                                                                      \n",
       "17920   7.239819    7.783521  63.885747  77.046385  69.959740  0.930147   \n",
       "35742   4.426644    2.471751  69.392917  84.323770  77.604903  1.790894   \n",
       "45978   5.844907    2.866875  71.122685  86.094571  79.239201  2.038773   \n",
       "\n",
       "       PEFROFEV6  PEFROFEV1  FEV3OFEV6   FEV3OFVC   FEV6OFVC  MMEFOPEFR  \\\n",
       "SEQN                                                                      \n",
       "17920   1.018582   1.455954  90.802106  82.918552  91.317873  36.941320   \n",
       "35742   2.002829   2.580802  92.032060  82.293423  89.418212  19.444444   \n",
       "45978   2.271438   2.866558  92.037395  82.609954  89.756944  19.230769   \n",
       "\n",
       "       MMEFOFVC  FEV05OFEV3  FEV05OFVC  FEV05   FEV1   FEV3   FEV6    FVC  \\\n",
       "SEQN                                                                        \n",
       "17920  0.343609   52.182810  43.269231  1.530  2.259  2.932  3.229  3.536   \n",
       "35742  0.348229   69.211066  56.956155  1.351  1.646  1.952  2.121  2.372   \n",
       "45978  0.392072   73.520140  60.734954  2.099  2.458  2.855  3.102  3.456   \n",
       "\n",
       "        PEFR   MMEF  FEF75  EXPIR  HYE1G  HYE1H  HYG2  HYG4  HYG7  HYG8  \\\n",
       "SEQN                                                                      \n",
       "17920  3.289  1.215  0.256   17.0    NaN    NaN   NaN   NaN   NaN   NaN   \n",
       "35742  4.248  0.826  0.105   13.0    NaN    NaN   NaN   NaN   NaN   NaN   \n",
       "45978  7.046  1.355  0.202   20.0    NaN    NaN   NaN   NaN   NaN   NaN   \n",
       "\n",
       "       HYG12  FEV05OFEV3PP  FEV05OFVCPP  FEV1OFVCPP  FEF75OFVCPP  \\\n",
       "SEQN                                                               \n",
       "17920    NaN     76.247015    71.024791   85.620269    56.544460   \n",
       "35742    NaN    101.210722    93.910858   93.535012    37.725370   \n",
       "45978    NaN    107.613302   100.660029   96.502748    55.636831   \n",
       "\n",
       "       FEF75OPEFRPP  FEV1OFEV3PP  FEV1OFEV6PP  PEFROFVCPP  PEFROFEV6PP  \\\n",
       "SEQN                                                                     \n",
       "17920    130.087806    91.774767    89.365439   43.162201    45.214656   \n",
       "35742     45.254090   100.634610    99.522207   82.991390    88.664479   \n",
       "45978     58.948409   102.973102   102.080299   94.331584   100.244041   \n",
       "\n",
       "       PEFROFEV1PP  FEV3OFEV6PP  FEV3OFVCPP  FEV6OFVCPP  MMEFOFVCPP  \\\n",
       "SEQN                                                                  \n",
       "17920    51.269348    97.375330   93.259579   95.740611   55.381254   \n",
       "35742    90.367971    98.882590   92.888584   93.896636   57.415283   \n",
       "45978    99.729641    99.105383   93.631592   94.423125   66.395043   \n",
       "\n",
       "       MMEFOPEFRPP  FEF75OFVCPred  FEF75OPEFRPred  FEV1OFVCPred  \\\n",
       "SEQN                                                              \n",
       "17920   128.036810      12.803764        5.983282     74.615214   \n",
       "35742    69.082566      11.733866        5.461940     74.189243   \n",
       "45978    70.347731      10.505464        4.863362     73.700166   \n",
       "\n",
       "       FEV05OFEV3Pred  FEV05OFVCPred  FEV1OFEV3Pred  FEV1OFEV6Pred  \\\n",
       "SEQN                                                                 \n",
       "17920       68.439152      60.921307      83.951599      78.285007   \n",
       "35742       68.383136      60.649169      83.792018      77.977474   \n",
       "45978       68.318822      60.336714      83.608796      77.624382   \n",
       "\n",
       "       PEFROFVCPred  PEFROFEV6Pred  PEFROFEV1Pred  FEV3OFEV6Pred  \\\n",
       "SEQN                                                               \n",
       "17920      2.155004       2.252769       2.839814      93.249600   \n",
       "35742      2.157927       2.258885       2.855881      93.072057   \n",
       "45978      2.161284       2.265908       2.874329      92.868210   \n",
       "\n",
       "       FEV3OFVCPred  FEV6OFVCPred  MMEFOFVCPred  MMEFOPEFRPred      FEV1PP  \\\n",
       "SEQN                                                                         \n",
       "17920     95.380500     95.380500      0.620442      28.852109  143.063694   \n",
       "35742     95.230475     95.230475      0.606510      28.146674  160.767727   \n",
       "45978     95.058223     95.058223      0.590514      27.336730  188.600563   \n",
       "\n",
       "          FEV05PP       FVCPP      PEFRPP      FEV3PP      FEV6PP  \\\n",
       "SEQN                                                                \n",
       "17920  117.128672  149.693970   73.669008  150.031702  148.417835   \n",
       "35742  152.696469  136.894578  134.247443  147.735204  137.702420   \n",
       "45978  197.780744  165.243122  197.015273  171.142015  163.884255   \n",
       "\n",
       "            MMEFPP     FEF75PP     EXPIRPP  FEV1Pred  FEV05Pred   FVCPred  \\\n",
       "SEQN                                                                        \n",
       "17920   173.637283 -586.433405  139.931622  1.579017   1.306256  2.362153   \n",
       "35742  1883.281097  -30.597736  106.890692  1.023837   0.884762  1.732720   \n",
       "45978   744.085014 -104.531234  163.954628  1.303283   1.061276  2.091464   \n",
       "\n",
       "       PEFRPred  FEV3Pred  FEV6Pred  MMEFPred  FEF75Pred  EXPIRPred  \\\n",
       "SEQN                                                                  \n",
       "17920  4.464564  1.954254  2.175615  0.699735  -0.043654  12.148791   \n",
       "35742  3.164306  1.321283  1.540278  0.043860  -0.343163  12.161957   \n",
       "45978  3.576372  1.668205  1.892799  0.182103  -0.193244  12.198497   \n",
       "\n",
       "       predFVCmFEV6  PEFRPPOFEV1PP  PEFRPPOFVCPP  MMEFPPOFVCPP  FEF75PPOFVCPP  \\\n",
       "SEQN                                                                            \n",
       "17920      2.362153      51.493852     49.213076    115.994841    -391.754860   \n",
       "35742      1.732720      83.503976     98.066297   1375.716357     -22.351314   \n",
       "45978      2.091464     104.461657    119.227518    450.297118     -63.259053   \n",
       "\n",
       "       MMEFPPOPEFRPP  PEFRPPOFVCPPPP  PEFRPPOFEV1PPPP  FEF75PPOFVCPPPP  \\\n",
       "SEQN                                                                     \n",
       "17920     235.699229       48.622336        51.956766      -351.119335   \n",
       "35742    1402.843177       96.859383        84.287460       -19.957202   \n",
       "45978     377.678849      117.718665       105.488943       -56.239270   \n",
       "\n",
       "       MMEFPPOFVCPPPP  MMEFPPOPEFRPPPP  \n",
       "SEQN                                    \n",
       "17920       90.584703       181.587936  \n",
       "35742     1065.478925      1071.223373  \n",
       "45978      345.476099       285.499911  "
      ]
     },
     "execution_count": 331,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mallb.query('FEF75PP < 0')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'FEV1OFEV6PPdiff'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV1OFEV6PPdiff'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-332-7d21f5facc08>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"FEV1OFEV6PPdiff\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1759\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1760\u001b[0m                     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1761\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1762\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1763\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1269\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1270\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1271\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1272\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1273\u001b[0m             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1386\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_label_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m                 \u001b[0;31m# we have yielded a scalar ?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1962\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1963\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1964\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1965\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m    622\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no slices here, handle elsewhere\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    623\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 624\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_xs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3527\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3528\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3529\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3530\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3531\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2798\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2799\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2800\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2801\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2802\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV1OFEV6PPdiff'"
     ]
    }
   ],
   "source": [
    "m20overc.loc[:,\"FEV1OFEV6PPdiff\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'FEV1OFEV6PPdiff'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV1OFEV6PPdiff'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-333-1127cf2008d2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mm20overc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"FEV1OFEV6PPdiff\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1759\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1760\u001b[0m                     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1761\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1762\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1763\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1269\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1270\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1271\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1272\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1273\u001b[0m             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1386\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_label_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m                 \u001b[0;31m# we have yielded a scalar ?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1962\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1963\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1964\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1965\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m    622\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no slices here, handle elsewhere\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    623\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 624\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_xs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3527\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3528\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3529\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3530\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3531\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2798\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2799\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2800\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2801\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2802\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV1OFEV6PPdiff'"
     ]
    }
   ],
   "source": [
    "m20overc.loc[:,\"FEV1OFEV6PPdiff\"].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m20overc.loc[:,\"FEV1OFEV6PPdiff\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [],
   "source": [
    "hdifflist =  ['FEV1PPdiff', 'FEV6PPdiff', 'FVCPPdiff', 'MMEFPPdiff','PEFRPPdiff','FEV1OFVCPPdiff', 'FEV1OFEV6PPdiff']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['FEV1PPdiff', 'FEV6PPdiff', 'FVCPPdiff', 'MMEFPPdiff', 'PEFRPPdiff', 'FEV1OFVCPPdiff', 'FEV1OFEV6PPdiff']\n"
     ]
    }
   ],
   "source": [
    "print(hdifflist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "528"
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m20overc.loc[:,\"FEV1OFVC\"].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "for y in hdifflist:\n",
    "  print(m20overc.name, \", \", y, \", \", df.loc[:,y].count())\n",
    "  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now want to get mean, stdev of the diffs for our caucasian and Hankinson caucasian (then black, then MA)\n",
    "First need create combinued data set of all caucasian allc - mlt20c, m20overc, flt18c, f18overc (then black, MA)\n",
    "Then get mean, stdev for each parameter - for each parameter print mean, stdev, n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "create allc - mlt20c, m20overc, flt18c, f18overc\n",
    "create allb - mlt20b, m20overb, flt18b, f18overb\n",
    "create allma - mlt20ma, m20overma, flt18ma, f18overma\n",
    "create all - allc, allb, allma\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "metadata": {},
   "outputs": [],
   "source": [
    "allc = pd.concat([mlt20c, m20overc, flt18c, f18overc])\n",
    "allb = pd.concat([mlt20b, m20overb, flt18b, f18overb])\n",
    "allma = pd.concat([mlt20ma, m20overma, flt18ma, f18overma])\n",
    "all = pd.concat([allc, allb, allma])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {},
   "outputs": [],
   "source": [
    "allc.name = \"allc\"\n",
    "allb.name = \"allb\"\n",
    "allma.name = \"allma\"\n",
    "all.name = \"all\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "allc\n"
     ]
    }
   ],
   "source": [
    "print (allc.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dataframe, variable, mean, STD, count\n",
      "allc\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'FEV1PPdiff'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV1PPdiff'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-340-4ee5458141f4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhdifflist\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\", \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\", \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\", \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\", \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1759\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1760\u001b[0m                     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1761\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1762\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1763\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1269\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1270\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1271\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1272\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1273\u001b[0m             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1386\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_label_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m                 \u001b[0;31m# we have yielded a scalar ?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1962\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1963\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1964\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1965\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m    622\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no slices here, handle elsewhere\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    623\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 624\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_xs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3527\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3528\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3529\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3530\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3531\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2798\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2799\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2800\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2801\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2802\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV1PPdiff'"
     ]
    }
   ],
   "source": [
    "print(\"dataframe, variable, mean, STD, count\")\n",
    "ftoa = [allc, allb, allma, all]\n",
    "for df in ftoa:\n",
    "    print (df.name)\n",
    "    for y in hdifflist:\n",
    "        print(df.name, \", \", y, \", \", round(df.loc[:,y].mean(),4), \", \", round(df.loc[:,y].std(),4), \", \", df.loc[:,y].count())\n",
    "\n",
    "  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "want to compare MA %predicted of Caucasian and black %predicted to Caucasian\n",
    "so create new variables for each parameter variablePPc for all groups (Caucasian should be 1.00)\n",
    "then show mean, STD, count for each variable\n",
    "expect MA to be close to Caucasian, Black to be 10% lower for non-ratio, and similar for ratio\n",
    "for all groups, for all variables, create PPc\n",
    "Then show the PPc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add new PPc - need figure with to compare with Caucasian c vs for all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsppc(df, dfa):  #calculate variable c - the %predicted using caucasian predicteds \n",
    " #   from results ratio vn which is the caucasian from results ratio caucasian\n",
    "    vn = dfa.name + 'FEF75OFVC'\n",
    "    df['FEF75OFVCPPc'] = 100 * df.FEF75OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEF75OPEFR'\n",
    "    df['FEF75OPEFRPPc'] = 100 * df.FEF75OPEFR / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV05OFEV3'\n",
    "    df['FEV05OFEV3PPc'] = 100 * df.FEV05OFEV3 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV05OFVC'\n",
    "    df['FEV05OFVCPPc'] = 100 * df.FEV05OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    \n",
    "    vn = dfa.name + 'FEV1OFVC'\n",
    "    df['FEV1OFVCPPc'] = 100 * df.FEV1OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV1OFEV3'\n",
    "    df['FEV1OFEV3PPc']= 100 * df.FEV1OFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR  / 12))\n",
    "\n",
    "    vn = dfa.name + 'FEV1OFEV6'\n",
    "    df['FEV1OFEV6PPc']= 100 * df.FEV1OFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR  / 12))\n",
    "    vn = dfa.name + 'PEFROFVC'\n",
    "    df['PEFROFVCPPc'] = 100 * df.PEFROFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'PEFROFEV6'\n",
    "    df['PEFROFEV6PPc']= 100 * df.PEFROFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'PEFROFEV1'\n",
    "    df['PEFROFEV1PPc'] = 100 * df.PEFROFEV1 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                        + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV3OFVC'\n",
    "    df['FEV3OFVCPPc'] = 100 * df.FEV3OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV6OFVC'\n",
    "    df['FEV6OFVCPPc'] = 100 * df.FEV6OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'MMEFOFVC'\n",
    "    df['MMEFOFVCPPc'] = 100 * df.MMEFOFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'MMEFOPEFR'\n",
    "    df['MMEFOPEFRc'] = 100 * df.MMEFOPEFR / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    \n",
    "    \n",
    "    vn = dfa.name + 'MMEFPPOPEFRPP'\n",
    "    df['MMEFPPOPEFRPPPPc'] = 100 * df.MMEFPPOPEFRPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'MMEFPPOFVCPP'\n",
    "    df['MMEFPPOFVCPPPPc'] = 100 * df.MMEFPPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "\n",
    "    vn = dfa.name + 'PEFRPPOFVCPP'\n",
    "    df['PEFRPPOFVCPPPPc'] = 100 * df.PEFRPPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'PEFRPPOFEV1PP'\n",
    "    df['PEFRPPOFEV1PPPPc'] = 100 * df.PEFRPPOFEV1PP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEF75PPOFVCPP'\n",
    "    df['FEF75PPOFVCPPPPc'] = 100 * df.FEF75PPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "  # not working below for  'MMEFPPOFVCPPPPc', 'FEF75PPOFVCPPPPc'\n",
    "    vn = dfa.name + 'FEV1'\n",
    "    df['FEV1PPc'] = 100 * df.FEV1 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FEV05'\n",
    "    df['FEV05PPc'] = 100 * df.FEV05 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FVC'\n",
    "    df['FVCPPc'] =  100 * df.FVC /  (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'PEFR'\n",
    "    df['PEFRPPc'] = 100 * df.PEFR / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FEV3'\n",
    "    df['FEV3PPc'] = 100 * df.FEV3 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FEV6'\n",
    "    df['FEV6PPc'] = 100 * df.FEV6 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'MMEF'\n",
    "    df['MMEFPPc'] = 100 * df.MMEF / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FEF75'\n",
    "    df['FEF75PPc'] = 100 * df.FEF75 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                   + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                   + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                   + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'EXPIR'\n",
    "    df['EXPIRPPc'] = 100 * df.EXPIR / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                   + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                   + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                   + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:25: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:34: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:43: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:46: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:51: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:54: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:58: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:61: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:64: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:70: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:75: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:80: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:85: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:90: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:95: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:100: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:105: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:110: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "#framestoanalyze = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, \n",
    "#                   mlt20b, mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma, \n",
    "#                   mallcma, mallb, mallc, mallma, fallcma, fallb, fallc, fallma]\n",
    "dfa = m20overc\n",
    "fta = [m20overb, m20overcma, m20overc, m20overma]\n",
    "for y in fta:\n",
    "    createvarsppc(y,dfa)\n",
    "dfa = f18overc\n",
    "fta = [f18overb, f18overcma, f18overc, f18overma]\n",
    "for y in fta:\n",
    "    createvarsppc(y, dfa)\n",
    "dfa = mlt20c\n",
    "fta = [mlt20b, mlt20cma, mlt20c, mlt20ma]\n",
    "for y in fta:\n",
    "    createvarsppc(y, dfa)\n",
    "dfa = flt18c\n",
    "fta = [flt18b, flt18cma, flt18c, flt18ma]\n",
    "for y in fta:\n",
    "    createvarsppc(y, dfa)          \n",
    "          "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create PPvalues array which has mean and stdev of the percent predicted variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, mean, std, count]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "m20overbFEF75OFVCPPc , m20overb ,  FEF75OFVCPPc ,  112.432 ,  52.271 ,  477\n",
      "m20overbFEF75OPEFRPPc , m20overb ,  FEF75OPEFRPPc ,  100.252 ,  50.674 ,  477\n",
      "m20overbFEV05OFEV3PPc , m20overb ,  FEV05OFEV3PPc ,  105.551 ,  11.002 ,  477\n",
      "m20overbFEV05OFVCPPc , m20overb ,  FEV05OFVCPPc ,  106.0 ,  12.783 ,  477\n",
      "m20overbFEV1OFVCPPc , m20overb ,  FEV1OFVCPPc ,  102.561 ,  8.165 ,  477\n",
      "m20overbFEV1OFEV3PPc , m20overb ,  FEV1OFEV3PPc ,  98.72 ,  7.254 ,  477\n",
      "m20overbFEV1OFEV6PPc , m20overb ,  FEV1OFEV6PPc ,  102.398 ,  7.368 ,  477\n",
      "m20overbPEFROFVCPPc , m20overb ,  PEFROFVCPPc ,  112.427 ,  20.276 ,  477\n",
      "m20overbPEFROFEV6PPc , m20overb ,  PEFROFEV6PPc ,  112.217 ,  19.846 ,  477\n",
      "m20overbPEFROFEV1PPc , m20overb ,  PEFROFEV1PPc ,  109.404 ,  15.918 ,  477\n",
      "m20overbFEV3OFVCPPc , m20overb ,  FEV3OFVCPPc ,  100.329 ,  3.38 ,  477\n",
      "m20overbFEV6OFVCPPc , m20overb ,  FEV6OFVCPPc ,  100.146 ,  1.894 ,  477\n",
      "m20overbFEV05PPc , m20overb ,  FEV05PPc ,  88.149 ,  14.513 ,  477\n",
      "m20overbFEV1PPc , m20overb ,  FEV1PPc ,  85.316 ,  12.655 ,  477\n",
      "m20overbFVCPPc , m20overb ,  FVCPPc ,  83.534 ,  11.771 ,  477\n",
      "m20overbPEFRPPc , m20overb ,  PEFRPPc ,  93.566 ,  18.656 ,  477\n",
      "m20overbFEV3PPc , m20overb ,  FEV3PPc ,  83.614 ,  11.623 ,  477\n",
      "m20overbFEV6PPc , m20overb ,  FEV6PPc ,  83.56 ,  11.606 ,  477\n",
      "m20overbMMEFPPc , m20overb ,  MMEFPPc ,  92.863 ,  27.553 ,  477\n",
      "m20overbFEF75PPc , m20overb ,  FEF75PPc ,  92.476 ,  39.584 ,  477\n",
      "m20overbEXPIRPPc , m20overb ,  EXPIRPPc ,  92.733 ,  32.746 ,  477\n",
      "m20overbFEF75PPOFVCPPPPc , m20overb ,  FEF75PPOFVCPPPPc ,  101.252 ,  46.494 ,  477\n",
      "m20overbMMEFPPOFVCPPPPc , m20overb ,  MMEFPPOFVCPPPPc ,  100.44 ,  29.158 ,  477\n",
      "m20overbMMEFPPOPEFRPPPPc , m20overb ,  MMEFPPOPEFRPPPPc ,  100.919 ,  25.657 ,  477\n",
      "m20overbPEFRPPOFEV1PPPPc , m20overb ,  PEFRPPOFEV1PPPPc ,  99.778 ,  14.426 ,  477\n",
      "m20overbPEFRPPOFVCPPPPc , m20overb ,  PEFRPPOFVCPPPPc ,  100.113 ,  17.903 ,  477\n",
      "m20overcmaFEF75OFVCPPc , m20overcma ,  FEF75OFVCPPc ,  105.323 ,  60.833 ,  1130\n",
      "m20overcmaFEF75OPEFRPPc , m20overcma ,  FEF75OPEFRPPc ,  103.394 ,  60.469 ,  1130\n",
      "m20overcmaFEV05OFEV3PPc , m20overcma ,  FEV05OFEV3PPc ,  102.481 ,  9.791 ,  1130\n",
      "m20overcmaFEV05OFVCPPc , m20overcma ,  FEV05OFVCPPc ,  102.544 ,  11.535 ,  1130\n",
      "m20overcmaFEV1OFVCPPc , m20overcma ,  FEV1OFVCPPc ,  101.176 ,  7.619 ,  1130\n",
      "m20overcmaFEV1OFEV3PPc , m20overcma ,  FEV1OFEV3PPc ,  97.164 ,  6.57 ,  1130\n",
      "m20overcmaFEV1OFEV6PPc , m20overcma ,  FEV1OFEV6PPc ,  101.21 ,  6.554 ,  1130\n",
      "m20overcmaPEFROFVCPPc , m20overcma ,  PEFROFVCPPc ,  102.258 ,  17.321 ,  1130\n",
      "m20overcmaPEFROFEV6PPc , m20overcma ,  PEFROFEV6PPc ,  102.282 ,  16.866 ,  1130\n",
      "m20overcmaPEFROFEV1PPc , m20overcma ,  PEFROFEV1PPc ,  101.027 ,  14.073 ,  1130\n",
      "m20overcmaFEV3OFVCPPc , m20overcma ,  FEV3OFVCPPc ,  100.033 ,  3.66 ,  1130\n",
      "m20overcmaFEV6OFVCPPc , m20overcma ,  FEV6OFVCPPc ,  99.959 ,  2.196 ,  1130\n",
      "m20overcmaFEV05PPc , m20overcma ,  FEV05PPc ,  100.918 ,  14.229 ,  1130\n",
      "m20overcmaFEV1PPc , m20overcma ,  FEV1PPc ,  100.189 ,  12.918 ,  1130\n",
      "m20overcmaFVCPPc , m20overcma ,  FVCPPc ,  99.999 ,  12.272 ,  1130\n",
      "m20overcmaPEFRPPc , m20overcma ,  PEFRPPc ,  100.236 ,  17.307 ,  1130\n",
      "m20overcmaFEV3PPc , m20overcma ,  FEV3PPc ,  99.723 ,  12.265 ,  1130\n",
      "m20overcmaFEV6PPc , m20overcma ,  FEV6PPc ,  99.826 ,  12.188 ,  1130\n",
      "m20overcmaMMEFPPc , m20overcma ,  MMEFPPc ,  101.831 ,  30.177 ,  1130\n",
      "m20overcmaFEF75PPc , m20overcma ,  FEF75PPc ,  101.489 ,  51.148 ,  1130\n",
      "m20overcmaEXPIRPPc , m20overcma ,  EXPIRPPc ,  99.882 ,  32.085 ,  1130\n",
      "m20overcmaFEF75PPOFVCPPPPc , m20overcma ,  FEF75PPOFVCPPPPc ,  100.818 ,  54.975 ,  1130\n",
      "m20overcmaMMEFPPOFVCPPPPc , m20overcma ,  MMEFPPOFVCPPPPc ,  100.356 ,  31.532 ,  1130\n",
      "m20overcmaMMEFPPOPEFRPPPPc , m20overcma ,  MMEFPPOPEFRPPPPc ,  100.705 ,  27.173 ,  1130\n",
      "m20overcmaPEFRPPOFEV1PPPPc , m20overcma ,  PEFRPPOFEV1PPPPc ,  99.97 ,  13.715 ,  1130\n",
      "m20overcmaPEFRPPOFVCPPPPc , m20overcma ,  PEFRPPOFVCPPPPc ,  100.082 ,  16.686 ,  1130\n",
      "m20overcFEF75OFVCPPc , m20overc ,  FEF75OFVCPPc ,  101.438 ,  54.976 ,  528\n",
      "m20overcFEF75OPEFRPPc , m20overc ,  FEF75OPEFRPPc ,  101.895 ,  61.693 ,  528\n",
      "m20overcFEV05OFEV3PPc , m20overc ,  FEV05OFEV3PPc ,  100.0 ,  9.416 ,  528\n",
      "m20overcFEV05OFVCPPc , m20overc ,  FEV05OFVCPPc ,  99.999 ,  11.397 ,  528\n",
      "m20overcFEV1OFVCPPc , m20overc ,  FEV1OFVCPPc ,  100.0 ,  7.966 ,  528\n",
      "m20overcFEV1OFEV3PPc , m20overc ,  FEV1OFEV3PPc ,  95.531 ,  6.564 ,  528\n",
      "m20overcFEV1OFEV6PPc , m20overc ,  FEV1OFEV6PPc ,  100.0 ,  6.664 ,  528\n",
      "m20overcPEFROFVCPPc , m20overc ,  PEFROFVCPPc ,  100.0 ,  16.184 ,  528\n",
      "m20overcPEFROFEV6PPc , m20overc ,  PEFROFEV6PPc ,  99.998 ,  15.594 ,  528\n",
      "m20overcPEFROFEV1PPc , m20overc ,  PEFROFEV1PPc ,  99.994 ,  12.766 ,  528\n",
      "m20overcFEV3OFVCPPc , m20overc ,  FEV3OFVCPPc ,  100.001 ,  4.144 ,  528\n",
      "m20overcFEV6OFVCPPc , m20overc ,  FEV6OFVCPPc ,  100.0 ,  2.567 ,  528\n",
      "m20overcFEV05PPc , m20overc ,  FEV05PPc ,  100.038 ,  15.187 ,  528\n",
      "m20overcFEV1PPc , m20overc ,  FEV1PPc ,  100.056 ,  13.94 ,  528\n",
      "m20overcFVCPPc , m20overc ,  FVCPPc ,  100.04 ,  12.886 ,  528\n",
      "m20overcPEFRPPc , m20overc ,  PEFRPPc ,  100.048 ,  17.324 ,  528\n",
      "m20overcFEV3PPc , m20overc ,  FEV3PPc ,  100.059 ,  13.091 ,  528\n",
      "m20overcFEV6PPc , m20overc ,  FEV6PPc ,  100.053 ,  12.846 ,  528\n",
      "m20overcMMEFPPc , m20overc ,  MMEFPPc ,  100.266 ,  32.394 ,  528\n",
      "m20overcFEF75PPc , m20overc ,  FEF75PPc ,  100.175 ,  46.413 ,  528\n",
      "m20overcEXPIRPPc , m20overc ,  EXPIRPPc ,  100.014 ,  32.885 ,  528\n",
      "m20overcFEF75PPOFVCPPPPc , m20overc ,  FEF75PPOFVCPPPPc ,  100.0 ,  49.187 ,  528\n",
      "m20overcMMEFPPOFVCPPPPc , m20overc ,  MMEFPPOFVCPPPPc ,  100.0 ,  33.48 ,  528\n",
      "m20overcMMEFPPOPEFRPPPPc , m20overc ,  MMEFPPOPEFRPPPPc ,  100.0 ,  28.101 ,  528\n",
      "m20overcPEFRPPOFEV1PPPPc , m20overc ,  PEFRPPOFEV1PPPPc ,  100.0 ,  12.466 ,  528\n",
      "m20overcPEFRPPOFVCPPPPc , m20overc ,  PEFRPPOFVCPPPPc ,  100.0 ,  15.78 ,  528\n",
      "m20overmaFEF75OFVCPPc , m20overma ,  FEF75OFVCPPc ,  108.73 ,  65.397 ,  602\n",
      "m20overmaFEF75OPEFRPPc , m20overma ,  FEF75OPEFRPPc ,  104.71 ,  59.394 ,  602\n",
      "m20overmaFEV05OFEV3PPc , m20overma ,  FEV05OFEV3PPc ,  104.656 ,  9.601 ,  602\n",
      "m20overmaFEV05OFVCPPc , m20overma ,  FEV05OFVCPPc ,  104.776 ,  11.197 ,  602\n",
      "m20overmaFEV1OFVCPPc , m20overma ,  FEV1OFVCPPc ,  102.208 ,  7.15 ,  602\n",
      "m20overmaFEV1OFEV3PPc , m20overma ,  FEV1OFEV3PPc ,  98.598 ,  6.238 ,  602\n",
      "m20overmaFEV1OFEV6PPc , m20overma ,  FEV1OFEV6PPc ,  102.272 ,  6.273 ,  602\n",
      "m20overmaPEFROFVCPPc , m20overma ,  PEFROFVCPPc ,  104.238 ,  18.042 ,  602\n",
      "m20overmaPEFROFEV6PPc , m20overma ,  PEFROFEV6PPc ,  104.286 ,  17.678 ,  602\n",
      "m20overmaPEFROFEV1PPc , m20overma ,  PEFROFEV1PPc ,  101.932 ,  15.079 ,  602\n",
      "m20overmaFEV3OFVCPPc , m20overma ,  FEV3OFVCPPc ,  100.062 ,  3.178 ,  602\n",
      "m20overmaFEV6OFVCPPc , m20overma ,  FEV6OFVCPPc ,  99.924 ,  1.811 ,  602\n",
      "m20overmaFEV05PPc , m20overma ,  FEV05PPc ,  101.69 ,  13.297 ,  602\n",
      "m20overmaFEV1PPc , m20overma ,  FEV1PPc ,  100.307 ,  11.96 ,  602\n",
      "m20overmaFVCPPc , m20overma ,  FVCPPc ,  99.964 ,  11.719 ,  602\n",
      "m20overmaPEFRPPc , m20overma ,  PEFRPPc ,  100.401 ,  17.306 ,  602\n",
      "m20overmaFEV3PPc , m20overma ,  FEV3PPc ,  99.428 ,  11.495 ,  602\n",
      "m20overmaFEV6PPc , m20overma ,  FEV6PPc ,  99.627 ,  11.588 ,  602\n",
      "m20overmaMMEFPPc , m20overma ,  MMEFPPc ,  103.204 ,  28.043 ,  602\n",
      "m20overmaFEF75PPc , m20overma ,  FEF75PPc ,  102.642 ,  54.979 ,  602\n",
      "m20overmaEXPIRPPc , m20overma ,  EXPIRPPc ,  99.766 ,  31.394 ,  602\n",
      "m20overmaFEF75PPOFVCPPPPc , m20overma ,  FEF75PPOFVCPPPPc ,  101.142 ,  52.929 ,  602\n",
      "m20overmaMMEFPPOFVCPPPPc , m20overma ,  MMEFPPOFVCPPPPc ,  100.706 ,  29.537 ,  602\n",
      "m20overmaMMEFPPOPEFRPPPPc , m20overma ,  MMEFPPOPEFRPPPPc ,  101.374 ,  26.251 ,  602\n",
      "m20overmaPEFRPPOFEV1PPPPc , m20overma ,  PEFRPPOFEV1PPPPc ,  99.963 ,  14.636 ,  602\n",
      "m20overmaPEFRPPOFVCPPPPc , m20overma ,  PEFRPPOFVCPPPPc ,  100.161 ,  17.245 ,  602\n",
      "f18overbFEF75OFVCPPc , f18overb ,  FEF75OFVCPPc ,  105.818 ,  64.036 ,  957\n",
      "f18overbFEF75OPEFRPPc , f18overb ,  FEF75OPEFRPPc ,  93.925 ,  57.29 ,  957\n",
      "f18overbFEV05OFEV3PPc , f18overb ,  FEV05OFEV3PPc ,  105.07 ,  10.177 ,  957\n",
      "f18overbFEV05OFVCPPc , f18overb ,  FEV05OFVCPPc ,  104.778 ,  11.856 ,  957\n",
      "f18overbFEV1OFVCPPc , f18overb ,  FEV1OFVCPPc ,  101.389 ,  7.693 ,  957\n",
      "f18overbFEV1OFEV3PPc , f18overb ,  FEV1OFEV3PPc ,  98.482 ,  6.742 ,  957\n",
      "f18overbFEV1OFEV6PPc , f18overb ,  FEV1OFEV6PPc ,  101.543 ,  6.701 ,  957\n",
      "f18overbPEFROFVCPPc , f18overb ,  PEFROFVCPPc ,  113.444 ,  21.238 ,  957\n",
      "f18overbPEFROFEV6PPc , f18overb ,  PEFROFEV6PPc ,  113.59 ,  20.806 ,  957\n",
      "f18overbPEFROFEV1PPc , f18overb ,  PEFROFEV1PPc ,  111.815 ,  17.987 ,  957\n",
      "f18overbFEV3OFVCPPc , f18overb ,  FEV3OFVCPPc ,  99.676 ,  3.719 ,  957\n",
      "f18overbFEV6OFVCPPc , f18overb ,  FEV6OFVCPPc ,  99.829 ,  2.088 ,  957\n",
      "f18overbFEV05PPc , f18overb ,  FEV05PPc ,  88.694 ,  14.817 ,  957\n",
      "f18overbFEV1PPc , f18overb ,  FEV1PPc ,  85.572 ,  12.985 ,  957\n",
      "f18overbFVCPPc , f18overb ,  FVCPPc ,  84.626 ,  12.566 ,  957\n",
      "f18overbPEFRPPc , f18overb ,  PEFRPPc ,  96.298 ,  19.99 ,  957\n",
      "f18overbFEV3PPc , f18overb ,  FEV3PPc ,  84.153 ,  12.444 ,  957\n",
      "f18overbFEV6PPc , f18overb ,  FEV6PPc ,  84.375 ,  12.418 ,  957\n",
      "f18overbMMEFPPc , f18overb ,  MMEFPPc ,  91.96 ,  29.936 ,  957\n",
      "f18overbFEF75PPc , f18overb ,  FEF75PPc ,  87.575 ,  45.821 ,  957\n",
      "f18overbEXPIRPPc , f18overb ,  EXPIRPPc ,  101.904 ,  43.015 ,  957\n",
      "f18overbFEF75PPOFVCPPPPc , f18overb ,  FEF75PPOFVCPPPPc ,  100.797 ,  55.165 ,  957\n",
      "f18overbMMEFPPOFVCPPPPc , f18overb ,  MMEFPPOFVCPPPPc ,  100.389 ,  33.086 ,  957\n",
      "f18overbMMEFPPOPEFRPPPPc , f18overb ,  MMEFPPOPEFRPPPPc ,  100.758 ,  28.471 ,  957\n",
      "f18overbPEFRPPOFEV1PPPPc , f18overb ,  PEFRPPOFEV1PPPPc ,  99.772 ,  15.644 ,  957\n",
      "f18overbPEFRPPOFVCPPPPc , f18overb ,  PEFRPPOFVCPPPPc ,  99.882 ,  18.3 ,  957\n",
      "f18overcmaFEF75OFVCPPc , f18overcma ,  FEF75OFVCPPc ,  103.522 ,  65.878 ,  2113\n",
      "f18overcmaFEF75OPEFRPPc , f18overcma ,  FEF75OPEFRPPc ,  103.53 ,  61.906 ,  2113\n",
      "f18overcmaFEV05OFEV3PPc , f18overcma ,  FEV05OFEV3PPc ,  101.647 ,  9.793 ,  2113\n",
      "f18overcmaFEV05OFVCPPc , f18overcma ,  FEV05OFVCPPc ,  101.507 ,  11.445 ,  2113\n",
      "f18overcmaFEV1OFVCPPc , f18overcma ,  FEV1OFVCPPc ,  100.508 ,  7.675 ,  2113\n",
      "f18overcmaFEV1OFEV3PPc , f18overcma ,  FEV1OFEV3PPc ,  96.879 ,  6.652 ,  2113\n",
      "f18overcmaFEV1OFEV6PPc , f18overcma ,  FEV1OFEV6PPc ,  100.605 ,  6.561 ,  2113\n",
      "f18overcmaPEFROFVCPPc , f18overcma ,  PEFROFVCPPc ,  100.794 ,  18.365 ,  2113\n",
      "f18overcmaPEFROFEV6PPc , f18overcma ,  PEFROFEV6PPc ,  100.886 ,  17.993 ,  2113\n",
      "f18overcmaPEFROFEV1PPc , f18overcma ,  PEFROFEV1PPc ,  100.209 ,  15.558 ,  2113\n",
      "f18overcmaFEV3OFVCPPc , f18overcma ,  FEV3OFVCPPc ,  99.852 ,  3.811 ,  2113\n",
      "f18overcmaFEV6OFVCPPc , f18overcma ,  FEV6OFVCPPc ,  99.902 ,  2.268 ,  2113\n",
      "f18overcmaFEV05PPc , f18overcma ,  FEV05PPc ,  100.182 ,  14.642 ,  2113\n",
      "f18overcmaFEV1PPc , f18overcma ,  FEV1PPc ,  99.7 ,  13.615 ,  2113\n",
      "f18overcmaFVCPPc , f18overcma ,  FVCPPc ,  99.834 ,  13.409 ,  2113\n",
      "f18overcmaPEFRPPc , f18overcma ,  PEFRPPc ,  99.067 ,  18.467 ,  2113\n",
      "f18overcmaFEV3PPc , f18overcma ,  FEV3PPc ,  99.453 ,  13.234 ,  2113\n",
      "f18overcmaFEV6PPc , f18overcma ,  FEV6PPc ,  99.617 ,  13.256 ,  2113\n",
      "f18overcmaMMEFPPc , f18overcma ,  MMEFPPc ,  101.154 ,  30.8 ,  2113\n",
      "f18overcmaFEF75PPc , f18overcma ,  FEF75PPc ,  100.593 ,  51.148 ,  2113\n",
      "f18overcmaEXPIRPPc , f18overcma ,  EXPIRPPc ,  103.279 ,  38.148 ,  2113\n",
      "f18overcmaFEF75PPOFVCPPPPc , f18overcma ,  FEF75PPOFVCPPPPc ,  100.614 ,  62.07 ,  2113\n",
      "f18overcmaMMEFPPOFVCPPPPc , f18overcma ,  MMEFPPOFVCPPPPc ,  100.294 ,  33.485 ,  2113\n",
      "f18overcmaMMEFPPOPEFRPPPPc , f18overcma ,  MMEFPPOPEFRPPPPc ,  100.617 ,  28.673 ,  2113\n",
      "f18overcmaPEFRPPOFEV1PPPPc , f18overcma ,  PEFRPPOFEV1PPPPc ,  99.92 ,  15.354 ,  2113\n",
      "f18overcmaPEFRPPOFVCPPPPc , f18overcma ,  PEFRPPOFVCPPPPc ,  99.991 ,  17.968 ,  2113\n",
      "f18overcFEF75OFVCPPc , f18overc ,  FEF75OFVCPPc ,  102.537 ,  69.96 ,  1108\n",
      "f18overcFEF75OPEFRPPc , f18overc ,  FEF75OPEFRPPc ,  103.221 ,  67.481 ,  1108\n",
      "f18overcFEV05OFEV3PPc , f18overc ,  FEV05OFEV3PPc ,  100.0 ,  9.237 ,  1108\n",
      "f18overcFEV05OFVCPPc , f18overc ,  FEV05OFVCPPc ,  100.0 ,  11.259 ,  1108\n",
      "f18overcFEV1OFVCPPc , f18overc ,  FEV1OFVCPPc ,  100.002 ,  7.993 ,  1108\n",
      "f18overcFEV1OFEV3PPc , f18overc ,  FEV1OFEV3PPc ,  95.707 ,  6.601 ,  1108\n",
      "f18overcFEV1OFEV6PPc , f18overc ,  FEV1OFEV6PPc ,  100.0 ,  6.614 ,  1108\n",
      "f18overcPEFROFVCPPc , f18overc ,  PEFROFVCPPc ,  100.0 ,  17.656 ,  1108\n",
      "f18overcPEFROFEV6PPc , f18overc ,  PEFROFEV6PPc ,  99.999 ,  17.134 ,  1108\n",
      "f18overcPEFROFEV1PPc , f18overc ,  PEFROFEV1PPc ,  99.993 ,  14.882 ,  1108\n",
      "f18overcFEV3OFVCPPc , f18overc ,  FEV3OFVCPPc ,  100.001 ,  4.274 ,  1108\n",
      "f18overcFEV6OFVCPPc , f18overc ,  FEV6OFVCPPc ,  100.0 ,  2.602 ,  1108\n",
      "f18overcFEV05PPc , f18overc ,  FEV05PPc ,  100.075 ,  15.196 ,  1108\n",
      "f18overcFEV1PPc , f18overc ,  FEV1PPc ,  100.111 ,  14.42 ,  1108\n",
      "f18overcFVCPPc , f18overc ,  FVCPPc ,  100.077 ,  14.185 ,  1108\n",
      "f18overcPEFRPPc , f18overc ,  PEFRPPc ,  100.037 ,  18.389 ,  1108\n",
      "f18overcFEV3PPc , f18overc ,  FEV3PPc ,  100.124 ,  14.061 ,  1108\n",
      "f18overcFEV6PPc , f18overc ,  FEV6PPc ,  100.106 ,  14.05 ,  1108\n",
      "f18overcMMEFPPc , f18overc ,  MMEFPPc ,  100.273 ,  32.888 ,  1108\n",
      "f18overcFEF75PPc , f18overc ,  FEF75PPc ,  100.553 ,  53.411 ,  1108\n",
      "f18overcEXPIRPPc , f18overc ,  EXPIRPPc ,  100.114 ,  36.517 ,  1108\n",
      "f18overcFEF75PPOFVCPPPPc , f18overc ,  FEF75PPOFVCPPPPc ,  100.001 ,  63.69 ,  1108\n",
      "f18overcMMEFPPOFVCPPPPc , f18overc ,  MMEFPPOFVCPPPPc ,  100.0 ,  35.179 ,  1108\n",
      "f18overcMMEFPPOPEFRPPPPc , f18overc ,  MMEFPPOPEFRPPPPc ,  100.0 ,  30.502 ,  1108\n",
      "f18overcPEFRPPOFEV1PPPPc , f18overc ,  PEFRPPOFEV1PPPPc ,  100.0 ,  14.654 ,  1108\n",
      "f18overcPEFRPPOFVCPPPPc , f18overc ,  PEFRPPOFVCPPPPc ,  100.0 ,  17.325 ,  1108\n",
      "f18overmaFEF75OFVCPPc , f18overma ,  FEF75OFVCPPc ,  104.608 ,  61.079 ,  1005\n",
      "f18overmaFEF75OPEFRPPc , f18overma ,  FEF75OPEFRPPc ,  103.872 ,  55.142 ,  1005\n",
      "f18overmaFEV05OFEV3PPc , f18overma ,  FEV05OFEV3PPc ,  103.463 ,  10.068 ,  1005\n",
      "f18overmaFEV05OFVCPPc , f18overma ,  FEV05OFVCPPc ,  103.169 ,  11.423 ,  1005\n",
      "f18overmaFEV1OFVCPPc , f18overma ,  FEV1OFVCPPc ,  101.066 ,  7.27 ,  1005\n",
      "f18overmaFEV1OFEV3PPc , f18overma ,  FEV1OFEV3PPc ,  98.171 ,  6.468 ,  1005\n",
      "f18overmaFEV1OFEV6PPc , f18overma ,  FEV1OFEV6PPc ,  101.271 ,  6.441 ,  1005\n",
      "f18overmaPEFROFVCPPc , f18overma ,  PEFROFVCPPc ,  101.67 ,  19.088 ,  1005\n",
      "f18overmaPEFROFEV6PPc , f18overma ,  PEFROFEV6PPc ,  101.865 ,  18.855 ,  1005\n",
      "f18overmaPEFROFEV1PPc , f18overma ,  PEFROFEV1PPc ,  100.448 ,  16.275 ,  1005\n",
      "f18overmaFEV3OFVCPPc , f18overma ,  FEV3OFVCPPc ,  99.688 ,  3.218 ,  1005\n",
      "f18overmaFEV6OFVCPPc , f18overma ,  FEV6OFVCPPc ,  99.793 ,  1.825 ,  1005\n",
      "f18overmaFEV05PPc , f18overma ,  FEV05PPc ,  100.3 ,  14.013 ,  1005\n",
      "f18overmaFEV1PPc , f18overma ,  FEV1PPc ,  99.247 ,  12.659 ,  1005\n",
      "f18overmaFVCPPc , f18overma ,  FVCPPc ,  99.566 ,  12.5 ,  1005\n",
      "f18overmaPEFRPPc , f18overma ,  PEFRPPc ,  97.997 ,  18.504 ,  1005\n",
      "f18overmaFEV3PPc , f18overma ,  FEV3PPc ,  98.714 ,  12.223 ,  1005\n",
      "f18overmaFEV6PPc , f18overma ,  FEV6PPc ,  99.079 ,  12.307 ,  1005\n",
      "f18overmaMMEFPPc , f18overma ,  MMEFPPc ,  102.125 ,  28.304 ,  1005\n",
      "f18overmaFEF75PPc , f18overma ,  FEF75PPc ,  100.637 ,  48.559 ,  1005\n",
      "f18overmaEXPIRPPc , f18overma ,  EXPIRPPc ,  106.768 ,  39.594 ,  1005\n",
      "f18overmaFEF75PPOFVCPPPPc , f18overma ,  FEF75PPOFVCPPPPc ,  101.1 ,  60.01 ,  1005\n",
      "f18overmaMMEFPPOFVCPPPPc , f18overma ,  MMEFPPOFVCPPPPc ,  101.024 ,  37.442 ,  1005\n",
      "f18overmaMMEFPPOPEFRPPPPc , f18overma ,  MMEFPPOPEFRPPPPc ,  101.464 ,  27.846 ,  1005\n",
      "f18overmaPEFRPPOFEV1PPPPc , f18overma ,  PEFRPPOFEV1PPPPc ,  99.861 ,  16.084 ,  1005\n",
      "f18overmaPEFRPPOFVCPPPPc , f18overma ,  PEFRPPOFVCPPPPc ,  100.01 ,  18.72 ,  1005\n",
      "mlt20bFEF75OFVCPPc , mlt20b ,  FEF75OFVCPPc ,  103.493 ,  41.969 ,  599\n",
      "mlt20bFEF75OPEFRPPc , mlt20b ,  FEF75OPEFRPPc ,  90.667 ,  32.464 ,  599\n",
      "mlt20bFEV05OFEV3PPc , mlt20b ,  FEV05OFEV3PPc ,  105.766 ,  10.817 ,  599\n",
      "mlt20bFEV05OFVCPPc , mlt20b ,  FEV05OFVCPPc ,  105.534 ,  11.772 ,  599\n",
      "mlt20bFEV1OFVCPPc , mlt20b ,  FEV1OFVCPPc ,  101.538 ,  7.342 ,  599\n",
      "mlt20bFEV1OFEV3PPc , mlt20b ,  FEV1OFEV3PPc ,  100.165 ,  7.065 ,  599\n",
      "mlt20bFEV1OFEV6PPc , mlt20b ,  FEV1OFEV6PPc ,  101.619 ,  7.15 ,  599\n",
      "mlt20bPEFROFVCPPc , mlt20b ,  PEFROFVCPPc ,  113.648 ,  18.513 ,  599\n",
      "mlt20bPEFROFEV6PPc , mlt20b ,  PEFROFEV6PPc ,  113.736 ,  18.402 ,  599\n",
      "mlt20bPEFROFEV1PPc , mlt20b ,  PEFROFEV1PPc ,  111.863 ,  14.245 ,  599\n",
      "mlt20bFEV3OFVCPPc , mlt20b ,  FEV3OFVCPPc ,  99.758 ,  2.023 ,  599\n",
      "mlt20bFEV6OFVCPPc , mlt20b ,  FEV6OFVCPPc ,  99.915 ,  0.626 ,  599\n",
      "mlt20bFEV05PPc , mlt20b ,  FEV05PPc ,  89.492 ,  13.046 ,  599\n",
      "mlt20bFEV1PPc , mlt20b ,  FEV1PPc ,  86.146 ,  11.463 ,  599\n",
      "mlt20bFVCPPc , mlt20b ,  FVCPPc ,  84.837 ,  10.93 ,  599\n",
      "mlt20bPEFRPPc , mlt20b ,  PEFRPPc ,  96.286 ,  16.725 ,  599\n",
      "mlt20bFEV3PPc , mlt20b ,  FEV3PPc ,  84.639 ,  10.875 ,  599\n",
      "mlt20bFEV6PPc , mlt20b ,  FEV6PPc ,  84.767 ,  10.905 ,  599\n",
      "mlt20bMMEFPPc , mlt20b ,  MMEFPPc ,  92.171 ,  25.671 ,  599\n",
      "mlt20bFEF75PPc , mlt20b ,  FEF75PPc ,  87.821 ,  34.523 ,  599\n",
      "mlt20bEXPIRPPc , mlt20b ,  EXPIRPPc ,  93.415 ,  38.766 ,  599\n",
      "mlt20bFEF75PPOFVCPPPPc , mlt20b ,  FEF75PPOFVCPPPPc ,  99.952 ,  40.515 ,  599\n",
      "mlt20bMMEFPPOFVCPPPPc , mlt20b ,  MMEFPPOFVCPPPPc ,  99.954 ,  27.964 ,  599\n",
      "mlt20bMMEFPPOPEFRPPPPc , mlt20b ,  MMEFPPOPEFRPPPPc ,  99.754 ,  21.234 ,  599\n",
      "mlt20bPEFRPPOFEV1PPPPc , mlt20b ,  PEFRPPOFEV1PPPPc ,  99.989 ,  12.492 ,  599\n",
      "mlt20bPEFRPPOFVCPPPPc , mlt20b ,  PEFRPPOFVCPPPPc ,  99.991 ,  15.982 ,  599\n",
      "mlt20cmaFEF75OFVCPPc , mlt20cma ,  FEF75OFVCPPc ,  105.333 ,  36.863 ,  1019\n",
      "mlt20cmaFEF75OPEFRPPc , mlt20cma ,  FEF75OPEFRPPc ,  104.761 ,  35.004 ,  1019\n",
      "mlt20cmaFEV05OFEV3PPc , mlt20cma ,  FEV05OFEV3PPc ,  101.842 ,  9.865 ,  1019\n",
      "mlt20cmaFEV05OFVCPPc , mlt20cma ,  FEV05OFVCPPc ,  101.903 ,  10.558 ,  1019\n",
      "mlt20cmaFEV1OFVCPPc , mlt20cma ,  FEV1OFVCPPc ,  101.144 ,  6.578 ,  1019\n",
      "mlt20cmaFEV1OFEV3PPc , mlt20cma ,  FEV1OFEV3PPc ,  99.68 ,  6.34 ,  1019\n",
      "mlt20cmaFEV1OFEV6PPc , mlt20cma ,  FEV1OFEV6PPc ,  101.157 ,  6.428 ,  1019\n",
      "mlt20cmaPEFROFVCPPc , mlt20cma ,  PEFROFVCPPc ,  101.102 ,  15.909 ,  1019\n",
      "mlt20cmaPEFROFEV6PPc , mlt20cma ,  PEFROFEV6PPc ,  101.122 ,  15.878 ,  1019\n",
      "mlt20cmaPEFROFEV1PPc , mlt20cma ,  PEFROFEV1PPc ,  99.986 ,  13.051 ,  1019\n",
      "mlt20cmaFEV3OFVCPPc , mlt20cma ,  FEV3OFVCPPc ,  100.068 ,  1.745 ,  1019\n",
      "mlt20cmaFEV6OFVCPPc , mlt20cma ,  FEV6OFVCPPc ,  99.986 ,  0.591 ,  1019\n",
      "mlt20cmaFEV05PPc , mlt20cma ,  FEV05PPc ,  103.083 ,  12.848 ,  1019\n",
      "mlt20cmaFEV1PPc , mlt20cma ,  FEV1PPc ,  102.783 ,  11.399 ,  1019\n",
      "mlt20cmaFVCPPc , mlt20cma ,  FVCPPc ,  101.59 ,  10.879 ,  1019\n",
      "mlt20cmaPEFRPPc , mlt20cma ,  PEFRPPc ,  101.842 ,  16.215 ,  1019\n",
      "mlt20cmaFEV3PPc , mlt20cma ,  FEV3PPc ,  101.724 ,  10.832 ,  1019\n",
      "mlt20cmaFEV6PPc , mlt20cma ,  FEV6PPc ,  101.577 ,  10.845 ,  1019\n",
      "mlt20cmaMMEFPPc , mlt20cma ,  MMEFPPc ,  106.116 ,  25.095 ,  1019\n",
      "mlt20cmaFEF75PPc , mlt20cma ,  FEF75PPc ,  108.181 ,  36.995 ,  1019\n",
      "mlt20cmaEXPIRPPc , mlt20cma ,  EXPIRPPc ,  98.354 ,  35.035 ,  1019\n",
      "mlt20cmaFEF75PPOFVCPPPPc , mlt20cma ,  FEF75PPOFVCPPPPc ,  99.989 ,  35.149 ,  1019\n",
      "mlt20cmaMMEFPPOFVCPPPPc , mlt20cma ,  MMEFPPOFVCPPPPc ,  100.002 ,  24.138 ,  1019\n",
      "mlt20cmaMMEFPPOPEFRPPPPc , mlt20cma ,  MMEFPPOPEFRPPPPc ,  100.195 ,  18.716 ,  1019\n",
      "mlt20cmaPEFRPPOFEV1PPPPc , mlt20cma ,  PEFRPPOFEV1PPPPc ,  100.08 ,  12.797 ,  1019\n",
      "mlt20cmaPEFRPPOFVCPPPPc , mlt20cma ,  PEFRPPOFVCPPPPc ,  100.041 ,  15.465 ,  1019\n",
      "mlt20cFEF75OFVCPPc , mlt20c ,  FEF75OFVCPPc ,  100.0 ,  35.145 ,  419\n",
      "mlt20cFEF75OPEFRPPc , mlt20c ,  FEF75OPEFRPPc ,  100.0 ,  31.07 ,  419\n",
      "mlt20cFEV05OFEV3PPc , mlt20c ,  FEV05OFEV3PPc ,  100.0 ,  9.613 ,  419\n",
      "mlt20cFEV05OFVCPPc , mlt20c ,  FEV05OFVCPPc ,  100.0 ,  10.381 ,  419\n",
      "mlt20cFEV1OFVCPPc , mlt20c ,  FEV1OFVCPPc ,  100.0 ,  6.664 ,  419\n",
      "mlt20cFEV1OFEV3PPc , mlt20c ,  FEV1OFEV3PPc ,  98.53 ,  6.432 ,  419\n",
      "mlt20cFEV1OFEV6PPc , mlt20c ,  FEV1OFEV6PPc ,  100.0 ,  6.519 ,  419\n",
      "mlt20cPEFROFVCPPc , mlt20c ,  PEFROFVCPPc ,  100.0 ,  15.258 ,  419\n",
      "mlt20cPEFROFEV6PPc , mlt20c ,  PEFROFEV6PPc ,  100.0 ,  15.18 ,  419\n",
      "mlt20cPEFROFEV1PPc , mlt20c ,  PEFROFEV1PPc ,  100.0 ,  12.153 ,  419\n",
      "mlt20cFEV3OFVCPPc , mlt20c ,  FEV3OFVCPPc ,  100.0 ,  1.718 ,  419\n",
      "mlt20cFEV6OFVCPPc , mlt20c ,  FEV6OFVCPPc ,  100.0 ,  0.641 ,  419\n",
      "mlt20cFEV05PPc , mlt20c ,  FEV05PPc ,  100.076 ,  12.271 ,  419\n",
      "mlt20cFEV1PPc , mlt20c ,  FEV1PPc ,  100.106 ,  10.75 ,  419\n",
      "mlt20cFVCPPc , mlt20c ,  FVCPPc ,  100.076 ,  10.359 ,  419\n",
      "mlt20cPEFRPPc , mlt20c ,  PEFRPPc ,  100.084 ,  15.51 ,  419\n",
      "mlt20cFEV3PPc , mlt20c ,  FEV3PPc ,  100.092 ,  10.248 ,  419\n",
      "mlt20cFEV6PPc , mlt20c ,  FEV6PPc ,  100.078 ,  10.296 ,  419\n",
      "mlt20cMMEFPPc , mlt20c ,  MMEFPPc ,  100.112 ,  23.828 ,  419\n",
      "mlt20cFEF75PPc , mlt20c ,  FEF75PPc ,  100.31 ,  34.111 ,  419\n",
      "mlt20cEXPIRPPc , mlt20c ,  EXPIRPPc ,  100.002 ,  34.163 ,  419\n",
      "mlt20cFEF75PPOFVCPPPPc , mlt20c ,  FEF75PPOFVCPPPPc ,  100.0 ,  35.304 ,  419\n",
      "mlt20cMMEFPPOFVCPPPPc , mlt20c ,  MMEFPPOFVCPPPPc ,  100.0 ,  24.626 ,  419\n",
      "mlt20cMMEFPPOPEFRPPPPc , mlt20c ,  MMEFPPOPEFRPPPPc ,  100.0 ,  18.212 ,  419\n",
      "mlt20cPEFRPPOFEV1PPPPc , mlt20c ,  PEFRPPOFEV1PPPPc ,  100.0 ,  11.757 ,  419\n",
      "mlt20cPEFRPPOFVCPPPPc , mlt20c ,  PEFRPPOFVCPPPPc ,  100.0 ,  14.909 ,  419\n",
      "mlt20maFEF75OFVCPPc , mlt20ma ,  FEF75OFVCPPc ,  109.058 ,  37.599 ,  600\n",
      "mlt20maFEF75OPEFRPPc , mlt20ma ,  FEF75OPEFRPPc ,  108.086 ,  37.173 ,  600\n",
      "mlt20maFEV05OFEV3PPc , mlt20ma ,  FEV05OFEV3PPc ,  103.128 ,  9.842 ,  600\n",
      "mlt20maFEV05OFVCPPc , mlt20ma ,  FEV05OFVCPPc ,  103.232 ,  10.486 ,  600\n",
      "mlt20maFEV1OFVCPPc , mlt20ma ,  FEV1OFVCPPc ,  101.942 ,  6.402 ,  600\n",
      "mlt20maFEV1OFEV3PPc , mlt20ma ,  FEV1OFEV3PPc ,  100.484 ,  6.155 ,  600\n",
      "mlt20maFEV1OFEV6PPc , mlt20ma ,  FEV1OFEV6PPc ,  101.966 ,  6.244 ,  600\n",
      "mlt20maPEFROFVCPPc , mlt20ma ,  PEFROFVCPPc ,  101.872 ,  16.317 ,  600\n",
      "mlt20maPEFROFEV6PPc , mlt20ma ,  PEFROFEV6PPc ,  101.906 ,  16.314 ,  600\n",
      "mlt20maPEFROFEV1PPc , mlt20ma ,  PEFROFEV1PPc ,  99.976 ,  13.653 ,  600\n",
      "mlt20maFEV3OFVCPPc , mlt20ma ,  FEV3OFVCPPc ,  100.115 ,  1.764 ,  600\n",
      "mlt20maFEV6OFVCPPc , mlt20ma ,  FEV6OFVCPPc ,  99.976 ,  0.554 ,  600\n",
      "mlt20maFEV05PPc , mlt20ma ,  FEV05PPc ,  105.182 ,  12.834 ,  600\n",
      "mlt20maFEV1PPc , mlt20ma ,  FEV1PPc ,  104.653 ,  11.474 ,  600\n",
      "mlt20maFVCPPc , mlt20ma ,  FVCPPc ,  102.648 ,  11.114 ,  600\n",
      "mlt20maPEFRPPc , mlt20ma ,  PEFRPPc ,  103.07 ,  16.592 ,  600\n",
      "mlt20maFEV3PPc , mlt20ma ,  FEV3PPc ,  102.863 ,  11.089 ,  600\n",
      "mlt20maFEV6PPc , mlt20ma ,  FEV6PPc ,  102.625 ,  11.101 ,  600\n",
      "mlt20maMMEFPPc , mlt20ma ,  MMEFPPc ,  110.309 ,  25.125 ,  600\n",
      "mlt20maFEF75PPc , mlt20ma ,  FEF75PPc ,  113.678 ,  37.953 ,  600\n",
      "mlt20maEXPIRPPc , mlt20ma ,  EXPIRPPc ,  97.202 ,  35.615 ,  600\n",
      "mlt20maFEF75PPOFVCPPPPc , mlt20ma ,  FEF75PPOFVCPPPPc ,  100.17 ,  34.651 ,  600\n",
      "mlt20maMMEFPPOFVCPPPPc , mlt20ma ,  MMEFPPOFVCPPPPc ,  100.111 ,  23.435 ,  600\n",
      "mlt20maMMEFPPOPEFRPPPPc , mlt20ma ,  MMEFPPOPEFRPPPPc ,  100.406 ,  18.511 ,  600\n",
      "mlt20maPEFRPPOFEV1PPPPc , mlt20ma ,  PEFRPPOFEV1PPPPc ,  100.119 ,  13.459 ,  600\n",
      "mlt20maPEFRPPOFVCPPPPc , mlt20ma ,  PEFRPPOFVCPPPPc ,  100.097 ,  15.852 ,  600\n",
      "flt18bFEF75OFVCPPc , flt18b ,  FEF75OFVCPPc ,  101.743 ,  40.216 ,  590\n",
      "flt18bFEF75OPEFRPPc , flt18b ,  FEF75OPEFRPPc ,  89.985 ,  32.314 ,  590\n",
      "flt18bFEV05OFEV3PPc , flt18b ,  FEV05OFEV3PPc ,  103.948 ,  11.385 ,  590\n",
      "flt18bFEV05OFVCPPc , flt18b ,  FEV05OFVCPPc ,  103.7 ,  12.338 ,  590\n",
      "flt18bFEV1OFVCPPc , flt18b ,  FEV1OFVCPPc ,  100.584 ,  7.896 ,  590\n",
      "flt18bFEV1OFEV3PPc , flt18b ,  FEV1OFEV3PPc ,  99.667 ,  7.493 ,  590\n",
      "flt18bFEV1OFEV6PPc , flt18b ,  FEV1OFEV6PPc ,  100.644 ,  7.54 ,  590\n",
      "flt18bPEFROFVCPPc , flt18b ,  PEFROFVCPPc ,  112.924 ,  20.04 ,  590\n",
      "flt18bPEFROFEV6PPc , flt18b ,  PEFROFEV6PPc ,  112.974 ,  19.862 ,  590\n",
      "flt18bPEFROFEV1PPc , flt18b ,  PEFROFEV1PPc ,  112.058 ,  15.874 ,  590\n",
      "flt18bFEV3OFVCPPc , flt18b ,  FEV3OFVCPPc ,  99.691 ,  2.535 ,  590\n",
      "flt18bFEV6OFVCPPc , flt18b ,  FEV6OFVCPPc ,  99.911 ,  1.214 ,  590\n",
      "flt18bFEV05PPc , flt18b ,  FEV05PPc ,  89.239 ,  12.894 ,  590\n",
      "flt18bFEV1PPc , flt18b ,  FEV1PPc ,  86.312 ,  11.389 ,  590\n",
      "flt18bFVCPPc , flt18b ,  FVCPPc ,  85.801 ,  10.902 ,  590\n",
      "flt18bPEFRPPc , flt18b ,  PEFRPPc ,  97.306 ,  17.501 ,  590\n",
      "flt18bFEV3PPc , flt18b ,  FEV3PPc ,  85.512 ,  10.899 ,  590\n",
      "flt18bFEV6PPc , flt18b ,  FEV6PPc ,  85.714 ,  10.899 ,  590\n",
      "flt18bMMEFPPc , flt18b ,  MMEFPPc ,  90.987 ,  24.314 ,  590\n",
      "flt18bFEF75PPc , flt18b ,  FEF75PPc ,  86.804 ,  31.999 ,  590\n",
      "flt18bEXPIRPPc , flt18b ,  EXPIRPPc ,  90.713 ,  40.134 ,  590\n",
      "flt18bFEF75PPOFVCPPPPc , flt18b ,  FEF75PPOFVCPPPPc ,  100.686 ,  40.022 ,  590\n",
      "flt18bMMEFPPOFVCPPPPc , flt18b ,  MMEFPPOFVCPPPPc ,  100.466 ,  28.212 ,  590\n",
      "flt18bMMEFPPOPEFRPPPPc , flt18b ,  MMEFPPOPEFRPPPPc ,  99.985 ,  20.982 ,  590\n",
      "flt18bPEFRPPOFEV1PPPPc , flt18b ,  PEFRPPOFEV1PPPPc ,  100.029 ,  13.968 ,  590\n",
      "flt18bPEFRPPOFVCPPPPc , flt18b ,  PEFRPPOFVCPPPPc ,  100.31 ,  17.627 ,  590\n",
      "flt18cmaFEF75OFVCPPc , flt18cma ,  FEF75OFVCPPc ,  104.24 ,  34.092 ,  966\n",
      "flt18cmaFEF75OPEFRPPc , flt18cma ,  FEF75OPEFRPPc ,  103.175 ,  33.656 ,  966\n",
      "flt18cmaFEV05OFEV3PPc , flt18cma ,  FEV05OFEV3PPc ,  101.768 ,  9.875 ,  966\n",
      "flt18cmaFEV05OFVCPPc , flt18cma ,  FEV05OFVCPPc ,  101.786 ,  10.349 ,  966\n",
      "flt18cmaFEV1OFVCPPc , flt18cma ,  FEV1OFVCPPc ,  100.908 ,  6.001 ,  966\n",
      "flt18cmaFEV1OFEV3PPc , flt18cma ,  FEV1OFEV3PPc ,  99.912 ,  5.834 ,  966\n",
      "flt18cmaFEV1OFEV6PPc , flt18cma ,  FEV1OFEV6PPc ,  100.906 ,  5.889 ,  966\n",
      "flt18cmaPEFROFVCPPc , flt18cma ,  PEFROFVCPPc ,  101.798 ,  16.165 ,  966\n",
      "flt18cmaPEFROFEV6PPc , flt18cma ,  PEFROFEV6PPc ,  101.797 ,  16.144 ,  966\n",
      "flt18cmaPEFROFEV1PPc , flt18cma ,  PEFROFEV1PPc ,  100.876 ,  13.686 ,  966\n",
      "flt18cmaFEV3OFVCPPc , flt18cma ,  FEV3OFVCPPc ,  100.024 ,  1.544 ,  966\n",
      "flt18cmaFEV6OFVCPPc , flt18cma ,  FEV6OFVCPPc ,  100.002 ,  0.461 ,  966\n",
      "flt18cmaFEV05PPc , flt18cma ,  FEV05PPc ,  102.484 ,  13.375 ,  966\n",
      "flt18cmaFEV1PPc , flt18cma ,  FEV1PPc ,  101.814 ,  11.786 ,  966\n",
      "flt18cmaFVCPPc , flt18cma ,  FVCPPc ,  100.918 ,  11.702 ,  966\n",
      "flt18cmaPEFRPPc , flt18cma ,  PEFRPPc ,  102.182 ,  17.483 ,  966\n",
      "flt18cmaFEV3PPc , flt18cma ,  FEV3PPc ,  100.97 ,  11.606 ,  966\n",
      "flt18cmaFEV6PPc , flt18cma ,  FEV6PPc ,  100.927 ,  11.712 ,  966\n",
      "flt18cmaMMEFPPc , flt18cma ,  MMEFPPc ,  104.655 ,  23.479 ,  966\n",
      "flt18cmaFEF75PPc , flt18cma ,  FEF75PPc ,  105.452 ,  33.099 ,  966\n",
      "flt18cmaEXPIRPPc , flt18cma ,  EXPIRPPc ,  95.838 ,  38.842 ,  966\n",
      "flt18cmaFEF75PPOFVCPPPPc , flt18cma ,  FEF75PPOFVCPPPPc ,  99.912 ,  32.697 ,  966\n",
      "flt18cmaMMEFPPOFVCPPPPc , flt18cma ,  MMEFPPOFVCPPPPc ,  99.906 ,  22.735 ,  966\n",
      "flt18cmaMMEFPPOPEFRPPPPc , flt18cma ,  MMEFPPOPEFRPPPPc ,  100.322 ,  18.063 ,  966\n",
      "flt18cmaPEFRPPOFEV1PPPPc , flt18cma ,  PEFRPPOFEV1PPPPc ,  99.968 ,  13.323 ,  966\n",
      "flt18cmaPEFRPPOFVCPPPPc , flt18cma ,  PEFRPPOFVCPPPPc ,  99.957 ,  15.598 ,  966\n",
      "flt18cFEF75OFVCPPc , flt18c ,  FEF75OFVCPPc ,  99.999 ,  32.596 ,  409\n",
      "flt18cFEF75OPEFRPPc , flt18c ,  FEF75OPEFRPPc ,  100.0 ,  29.942 ,  409\n",
      "flt18cFEV05OFEV3PPc , flt18c ,  FEV05OFEV3PPc ,  100.0 ,  9.736 ,  409\n",
      "flt18cFEV05OFVCPPc , flt18c ,  FEV05OFVCPPc ,  100.0 ,  10.228 ,  409\n",
      "flt18cFEV1OFVCPPc , flt18c ,  FEV1OFVCPPc ,  100.0 ,  6.193 ,  409\n",
      "flt18cFEV1OFEV3PPc , flt18c ,  FEV1OFEV3PPc ,  99.006 ,  6.031 ,  409\n",
      "flt18cFEV1OFEV6PPc , flt18c ,  FEV1OFEV6PPc ,  100.0 ,  6.086 ,  409\n",
      "flt18cPEFROFVCPPc , flt18c ,  PEFROFVCPPc ,  100.0 ,  14.703 ,  409\n",
      "flt18cPEFROFEV6PPc , flt18c ,  PEFROFEV6PPc ,  100.0 ,  14.676 ,  409\n",
      "flt18cPEFROFEV1PPc , flt18c ,  PEFROFEV1PPc ,  100.0 ,  12.052 ,  409\n",
      "flt18cFEV3OFVCPPc , flt18c ,  FEV3OFVCPPc ,  100.0 ,  1.481 ,  409\n",
      "flt18cFEV6OFVCPPc , flt18c ,  FEV6OFVCPPc ,  100.0 ,  0.474 ,  409\n",
      "flt18cFEV05PPc , flt18c ,  FEV05PPc ,  100.11 ,  12.276 ,  409\n",
      "flt18cFEV1PPc , flt18c ,  FEV1PPc ,  100.145 ,  10.972 ,  409\n",
      "flt18cFVCPPc , flt18c ,  FVCPPc ,  100.117 ,  10.901 ,  409\n",
      "flt18cPEFRPPc , flt18c ,  PEFRPPc ,  100.068 ,  15.204 ,  409\n",
      "flt18cFEV3PPc , flt18c ,  FEV3PPc ,  100.128 ,  10.758 ,  409\n",
      "flt18cFEV6PPc , flt18c ,  FEV6PPc ,  100.117 ,  10.905 ,  409\n",
      "flt18cMMEFPPc , flt18c ,  MMEFPPc ,  100.106 ,  22.277 ,  409\n",
      "flt18cFEF75PPc , flt18c ,  FEF75PPc ,  100.317 ,  31.201 ,  409\n",
      "flt18cEXPIRPPc , flt18c ,  EXPIRPPc ,  99.995 ,  38.611 ,  409\n",
      "flt18cFEF75PPOFVCPPPPc , flt18c ,  FEF75PPOFVCPPPPc ,  100.0 ,  32.585 ,  409\n",
      "flt18cMMEFPPOFVCPPPPc , flt18c ,  MMEFPPOFVCPPPPc ,  100.0 ,  23.131 ,  409\n",
      "flt18cMMEFPPOPEFRPPPPc , flt18c ,  MMEFPPOPEFRPPPPc ,  100.0 ,  17.31 ,  409\n",
      "flt18cPEFRPPOFEV1PPPPc , flt18c ,  PEFRPPOFEV1PPPPc ,  100.0 ,  11.896 ,  409\n",
      "flt18cPEFRPPOFVCPPPPc , flt18c ,  PEFRPPOFVCPPPPc ,  100.0 ,  14.481 ,  409\n",
      "flt18maFEF75OFVCPPc , flt18ma ,  FEF75OFVCPPc ,  107.354 ,  34.851 ,  557\n",
      "flt18maFEF75OPEFRPPc , flt18ma ,  FEF75OPEFRPPc ,  105.507 ,  35.99 ,  557\n",
      "flt18maFEV05OFEV3PPc , flt18ma ,  FEV05OFEV3PPc ,  103.066 ,  9.782 ,  557\n",
      "flt18maFEV05OFVCPPc , flt18ma ,  FEV05OFVCPPc ,  103.098 ,  10.249 ,  557\n",
      "flt18maFEV1OFVCPPc , flt18ma ,  FEV1OFVCPPc ,  101.574 ,  5.771 ,  557\n",
      "flt18maFEV1OFEV3PPc , flt18ma ,  FEV1OFEV3PPc ,  100.577 ,  5.597 ,  557\n",
      "flt18maFEV1OFEV6PPc , flt18ma ,  FEV1OFEV6PPc ,  101.571 ,  5.654 ,  557\n",
      "flt18maPEFROFVCPPc , flt18ma ,  PEFROFVCPPc ,  103.118 ,  17.051 ,  557\n",
      "flt18maPEFROFEV6PPc , flt18ma ,  PEFROFEV6PPc ,  103.116 ,  17.034 ,  557\n",
      "flt18maPEFROFEV1PPc , flt18ma ,  PEFROFEV1PPc ,  101.52 ,  14.749 ,  557\n",
      "flt18maFEV3OFVCPPc , flt18ma ,  FEV3OFVCPPc ,  100.041 ,  1.59 ,  557\n",
      "flt18maFEV6OFVCPPc , flt18ma ,  FEV6OFVCPPc ,  100.003 ,  0.452 ,  557\n",
      "flt18maFEV05PPc , flt18ma ,  FEV05PPc ,  104.228 ,  13.882 ,  557\n",
      "flt18maFEV1PPc , flt18ma ,  FEV1PPc ,  103.039 ,  12.215 ,  557\n",
      "flt18maFVCPPc , flt18ma ,  FVCPPc ,  101.506 ,  12.234 ,  557\n",
      "flt18maPEFRPPc , flt18ma ,  PEFRPPc ,  103.734 ,  18.847 ,  557\n",
      "flt18maFEV3PPc , flt18ma ,  FEV3PPc ,  101.589 ,  12.163 ,  557\n",
      "flt18maFEV6PPc , flt18ma ,  FEV6PPc ,  101.521 ,  12.246 ,  557\n",
      "flt18maMMEFPPc , flt18ma ,  MMEFPPc ,  107.996 ,  23.795 ,  557\n",
      "flt18maFEF75PPc , flt18ma ,  FEF75PPc ,  109.223 ,  33.962 ,  557\n",
      "flt18maEXPIRPPc , flt18ma ,  EXPIRPPc ,  92.785 ,  38.762 ,  557\n",
      "flt18maFEF75PPOFVCPPPPc , flt18ma ,  FEF75PPOFVCPPPPc ,  99.926 ,  32.354 ,  557\n",
      "flt18maMMEFPPOFVCPPPPc , flt18ma ,  MMEFPPOFVCPPPPc ,  99.869 ,  22.067 ,  557\n",
      "flt18maMMEFPPOPEFRPPPPc , flt18ma ,  MMEFPPOPEFRPPPPc ,  100.624 ,  18.276 ,  557\n",
      "flt18maPEFRPPOFEV1PPPPc , flt18ma ,  PEFRPPOFEV1PPPPc ,  99.933 ,  14.253 ,  557\n",
      "flt18maPEFRPPOFVCPPPPc , flt18ma ,  PEFRPPOFVCPPPPc ,  99.918 ,  16.26 ,  557\n"
     ]
    }
   ],
   "source": [
    "# create df PPcvalues\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"mean\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "PPcvalues= pd.DataFrame(columns = column_names)\n",
    "PPcvalues.name = 'PPcvalues'\n",
    "print (PPcvalues)\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n",
    "        mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma]\n",
    "PPclist = ['FEF75OFVCPPc','FEF75OPEFRPPc',\n",
    "           'FEV05OFEV3PPc', 'FEV05OFVCPPc',\n",
    "           'FEV1OFVCPPc', 'FEV1OFEV3PPc','FEV1OFEV6PPc', 'PEFROFVCPPc', 'PEFROFEV6PPc', \n",
    "           'PEFROFEV1PPc', 'FEV3OFVCPPc', 'FEV6OFVCPPc', 'FEV05PPc','FEV1PPc', 'FVCPPc',\n",
    "           'PEFRPPc', 'FEV3PPc', 'FEV6PPc', 'MMEFPPc', 'FEF75PPc', 'EXPIRPPc', \n",
    "           'FEF75PPOFVCPPPPc','MMEFPPOFVCPPPPc','MMEFPPOPEFRPPPPc', 'PEFRPPOFEV1PPPPc','PEFRPPOFVCPPPPc']\n",
    " #   print (df.name)\n",
    "for df in ftoa:\n",
    "    for y in PPclist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "        df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    "        PPcvalues = PPcvalues.append(df2, ignore_index=True)\n",
    "  # now set index   \n",
    "PPcvalues.set_index('dfnvarn', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dfname</th>\n",
       "      <th>var</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dfnvarn</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>m20overbFEF75OFVCPPc</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>112.432139</td>\n",
       "      <td>52.271407</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEF75OPEFRPPc</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.251565</td>\n",
       "      <td>50.673749</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV05OFEV3PPc</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105.550780</td>\n",
       "      <td>11.002495</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV05OFVCPPc</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>106.000091</td>\n",
       "      <td>12.783351</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV1OFVCPPc</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>102.560943</td>\n",
       "      <td>8.165077</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maFEF75PPOFVCPPPPc</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>99.925832</td>\n",
       "      <td>32.354161</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maMMEFPPOFVCPPPPc</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>99.869497</td>\n",
       "      <td>22.067437</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maMMEFPPOPEFRPPPPc</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.623921</td>\n",
       "      <td>18.276096</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maPEFRPPOFEV1PPPPc</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>99.932597</td>\n",
       "      <td>14.253349</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maPEFRPPOFVCPPPPc</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>99.917714</td>\n",
       "      <td>16.259869</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>416 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           dfname  var        mean        std count\n",
       "dfnvarn                                                            \n",
       "m20overbFEF75OFVCPPc     m20overb  NaN  112.432139  52.271407   477\n",
       "m20overbFEF75OPEFRPPc    m20overb  NaN  100.251565  50.673749   477\n",
       "m20overbFEV05OFEV3PPc    m20overb  NaN  105.550780  11.002495   477\n",
       "m20overbFEV05OFVCPPc     m20overb  NaN  106.000091  12.783351   477\n",
       "m20overbFEV1OFVCPPc      m20overb  NaN  102.560943   8.165077   477\n",
       "...                           ...  ...         ...        ...   ...\n",
       "flt18maFEF75PPOFVCPPPPc   flt18ma  NaN   99.925832  32.354161   557\n",
       "flt18maMMEFPPOFVCPPPPc    flt18ma  NaN   99.869497  22.067437   557\n",
       "flt18maMMEFPPOPEFRPPPPc   flt18ma  NaN  100.623921  18.276096   557\n",
       "flt18maPEFRPPOFEV1PPPPc   flt18ma  NaN   99.932597  14.253349   557\n",
       "flt18maPEFRPPOFVCPPPPc    flt18ma  NaN   99.917714  16.259869   557\n",
       "\n",
       "[416 rows x 5 columns]"
      ]
     },
     "execution_count": 344,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PPcvalues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now print the mean, std, count for all the dataframes and PPc variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "m20overbFEF75OFVCPPc , m20overb ,  FEF75OFVCPPc ,  112.432 ,  52.271 ,  477\n",
      "m20overbFEF75OPEFRPPc , m20overb ,  FEF75OPEFRPPc ,  100.252 ,  50.674 ,  477\n",
      "m20overbFEV1OFVCPPc , m20overb ,  FEV1OFVCPPc ,  102.561 ,  8.165 ,  477\n",
      "m20overbFEV1OFEV3PPc , m20overb ,  FEV1OFEV3PPc ,  98.72 ,  7.254 ,  477\n",
      "m20overbFEV1OFEV6PPc , m20overb ,  FEV1OFEV6PPc ,  102.398 ,  7.368 ,  477\n",
      "m20overbPEFROFVCPPc , m20overb ,  PEFROFVCPPc ,  112.427 ,  20.276 ,  477\n",
      "m20overbPEFROFEV6PPc , m20overb ,  PEFROFEV6PPc ,  112.217 ,  19.846 ,  477\n",
      "m20overbPEFROFEV1PPc , m20overb ,  PEFROFEV1PPc ,  109.404 ,  15.918 ,  477\n",
      "m20overbFEV3OFVCPPc , m20overb ,  FEV3OFVCPPc ,  100.329 ,  3.38 ,  477\n",
      "m20overbFEV6OFVCPPc , m20overb ,  FEV6OFVCPPc ,  100.146 ,  1.894 ,  477\n",
      "m20overbFEV05PPc , m20overb ,  FEV05PPc ,  88.149 ,  14.513 ,  477\n",
      "m20overbFEV1PPc , m20overb ,  FEV1PPc ,  85.316 ,  12.655 ,  477\n",
      "m20overbFVCPPc , m20overb ,  FVCPPc ,  83.534 ,  11.771 ,  477\n",
      "m20overbPEFRPPc , m20overb ,  PEFRPPc ,  93.566 ,  18.656 ,  477\n",
      "m20overbFEV3PPc , m20overb ,  FEV3PPc ,  83.614 ,  11.623 ,  477\n",
      "m20overbFEV6PPc , m20overb ,  FEV6PPc ,  83.56 ,  11.606 ,  477\n",
      "m20overbMMEFPPc , m20overb ,  MMEFPPc ,  92.863 ,  27.553 ,  477\n",
      "m20overbFEF75PPc , m20overb ,  FEF75PPc ,  92.476 ,  39.584 ,  477\n",
      "m20overbEXPIRPPc , m20overb ,  EXPIRPPc ,  92.733 ,  32.746 ,  477\n",
      "m20overbFEF75PPOFVCPPPPc , m20overb ,  FEF75PPOFVCPPPPc ,  101.252 ,  46.494 ,  477\n",
      "m20overbMMEFPPOFVCPPPPc , m20overb ,  MMEFPPOFVCPPPPc ,  100.44 ,  29.158 ,  477\n",
      "m20overbMMEFPPOPEFRPPPPc , m20overb ,  MMEFPPOPEFRPPPPc ,  100.919 ,  25.657 ,  477\n",
      "m20overbPEFRPPOFEV1PPPPc , m20overb ,  PEFRPPOFEV1PPPPc ,  99.778 ,  14.426 ,  477\n",
      "m20overbPEFRPPOFVCPPPPc , m20overb ,  PEFRPPOFVCPPPPc ,  100.113 ,  17.903 ,  477\n",
      "m20overcmaFEF75OFVCPPc , m20overcma ,  FEF75OFVCPPc ,  105.323 ,  60.833 ,  1130\n",
      "m20overcmaFEF75OPEFRPPc , m20overcma ,  FEF75OPEFRPPc ,  103.394 ,  60.469 ,  1130\n",
      "m20overcmaFEV1OFVCPPc , m20overcma ,  FEV1OFVCPPc ,  101.176 ,  7.619 ,  1130\n",
      "m20overcmaFEV1OFEV3PPc , m20overcma ,  FEV1OFEV3PPc ,  97.164 ,  6.57 ,  1130\n",
      "m20overcmaFEV1OFEV6PPc , m20overcma ,  FEV1OFEV6PPc ,  101.21 ,  6.554 ,  1130\n",
      "m20overcmaPEFROFVCPPc , m20overcma ,  PEFROFVCPPc ,  102.258 ,  17.321 ,  1130\n",
      "m20overcmaPEFROFEV6PPc , m20overcma ,  PEFROFEV6PPc ,  102.282 ,  16.866 ,  1130\n",
      "m20overcmaPEFROFEV1PPc , m20overcma ,  PEFROFEV1PPc ,  101.027 ,  14.073 ,  1130\n",
      "m20overcmaFEV3OFVCPPc , m20overcma ,  FEV3OFVCPPc ,  100.033 ,  3.66 ,  1130\n",
      "m20overcmaFEV6OFVCPPc , m20overcma ,  FEV6OFVCPPc ,  99.959 ,  2.196 ,  1130\n",
      "m20overcmaFEV05PPc , m20overcma ,  FEV05PPc ,  100.918 ,  14.229 ,  1130\n",
      "m20overcmaFEV1PPc , m20overcma ,  FEV1PPc ,  100.189 ,  12.918 ,  1130\n",
      "m20overcmaFVCPPc , m20overcma ,  FVCPPc ,  99.999 ,  12.272 ,  1130\n",
      "m20overcmaPEFRPPc , m20overcma ,  PEFRPPc ,  100.236 ,  17.307 ,  1130\n",
      "m20overcmaFEV3PPc , m20overcma ,  FEV3PPc ,  99.723 ,  12.265 ,  1130\n",
      "m20overcmaFEV6PPc , m20overcma ,  FEV6PPc ,  99.826 ,  12.188 ,  1130\n",
      "m20overcmaMMEFPPc , m20overcma ,  MMEFPPc ,  101.831 ,  30.177 ,  1130\n",
      "m20overcmaFEF75PPc , m20overcma ,  FEF75PPc ,  101.489 ,  51.148 ,  1130\n",
      "m20overcmaEXPIRPPc , m20overcma ,  EXPIRPPc ,  99.882 ,  32.085 ,  1130\n",
      "m20overcmaFEF75PPOFVCPPPPc , m20overcma ,  FEF75PPOFVCPPPPc ,  100.818 ,  54.975 ,  1130\n",
      "m20overcmaMMEFPPOFVCPPPPc , m20overcma ,  MMEFPPOFVCPPPPc ,  100.356 ,  31.532 ,  1130\n",
      "m20overcmaMMEFPPOPEFRPPPPc , m20overcma ,  MMEFPPOPEFRPPPPc ,  100.705 ,  27.173 ,  1130\n",
      "m20overcmaPEFRPPOFEV1PPPPc , m20overcma ,  PEFRPPOFEV1PPPPc ,  99.97 ,  13.715 ,  1130\n",
      "m20overcmaPEFRPPOFVCPPPPc , m20overcma ,  PEFRPPOFVCPPPPc ,  100.082 ,  16.686 ,  1130\n",
      "m20overcFEF75OFVCPPc , m20overc ,  FEF75OFVCPPc ,  101.438 ,  54.976 ,  528\n",
      "m20overcFEF75OPEFRPPc , m20overc ,  FEF75OPEFRPPc ,  101.895 ,  61.693 ,  528\n",
      "m20overcFEV1OFVCPPc , m20overc ,  FEV1OFVCPPc ,  100.0 ,  7.966 ,  528\n",
      "m20overcFEV1OFEV3PPc , m20overc ,  FEV1OFEV3PPc ,  95.531 ,  6.564 ,  528\n",
      "m20overcFEV1OFEV6PPc , m20overc ,  FEV1OFEV6PPc ,  100.0 ,  6.664 ,  528\n",
      "m20overcPEFROFVCPPc , m20overc ,  PEFROFVCPPc ,  100.0 ,  16.184 ,  528\n",
      "m20overcPEFROFEV6PPc , m20overc ,  PEFROFEV6PPc ,  99.998 ,  15.594 ,  528\n",
      "m20overcPEFROFEV1PPc , m20overc ,  PEFROFEV1PPc ,  99.994 ,  12.766 ,  528\n",
      "m20overcFEV3OFVCPPc , m20overc ,  FEV3OFVCPPc ,  100.001 ,  4.144 ,  528\n",
      "m20overcFEV6OFVCPPc , m20overc ,  FEV6OFVCPPc ,  100.0 ,  2.567 ,  528\n",
      "m20overcFEV05PPc , m20overc ,  FEV05PPc ,  100.038 ,  15.187 ,  528\n",
      "m20overcFEV1PPc , m20overc ,  FEV1PPc ,  100.056 ,  13.94 ,  528\n",
      "m20overcFVCPPc , m20overc ,  FVCPPc ,  100.04 ,  12.886 ,  528\n",
      "m20overcPEFRPPc , m20overc ,  PEFRPPc ,  100.048 ,  17.324 ,  528\n",
      "m20overcFEV3PPc , m20overc ,  FEV3PPc ,  100.059 ,  13.091 ,  528\n",
      "m20overcFEV6PPc , m20overc ,  FEV6PPc ,  100.053 ,  12.846 ,  528\n",
      "m20overcMMEFPPc , m20overc ,  MMEFPPc ,  100.266 ,  32.394 ,  528\n",
      "m20overcFEF75PPc , m20overc ,  FEF75PPc ,  100.175 ,  46.413 ,  528\n",
      "m20overcEXPIRPPc , m20overc ,  EXPIRPPc ,  100.014 ,  32.885 ,  528\n",
      "m20overcFEF75PPOFVCPPPPc , m20overc ,  FEF75PPOFVCPPPPc ,  100.0 ,  49.187 ,  528\n",
      "m20overcMMEFPPOFVCPPPPc , m20overc ,  MMEFPPOFVCPPPPc ,  100.0 ,  33.48 ,  528\n",
      "m20overcMMEFPPOPEFRPPPPc , m20overc ,  MMEFPPOPEFRPPPPc ,  100.0 ,  28.101 ,  528\n",
      "m20overcPEFRPPOFEV1PPPPc , m20overc ,  PEFRPPOFEV1PPPPc ,  100.0 ,  12.466 ,  528\n",
      "m20overcPEFRPPOFVCPPPPc , m20overc ,  PEFRPPOFVCPPPPc ,  100.0 ,  15.78 ,  528\n",
      "m20overmaFEF75OFVCPPc , m20overma ,  FEF75OFVCPPc ,  108.73 ,  65.397 ,  602\n",
      "m20overmaFEF75OPEFRPPc , m20overma ,  FEF75OPEFRPPc ,  104.71 ,  59.394 ,  602\n",
      "m20overmaFEV1OFVCPPc , m20overma ,  FEV1OFVCPPc ,  102.208 ,  7.15 ,  602\n",
      "m20overmaFEV1OFEV3PPc , m20overma ,  FEV1OFEV3PPc ,  98.598 ,  6.238 ,  602\n",
      "m20overmaFEV1OFEV6PPc , m20overma ,  FEV1OFEV6PPc ,  102.272 ,  6.273 ,  602\n",
      "m20overmaPEFROFVCPPc , m20overma ,  PEFROFVCPPc ,  104.238 ,  18.042 ,  602\n",
      "m20overmaPEFROFEV6PPc , m20overma ,  PEFROFEV6PPc ,  104.286 ,  17.678 ,  602\n",
      "m20overmaPEFROFEV1PPc , m20overma ,  PEFROFEV1PPc ,  101.932 ,  15.079 ,  602\n",
      "m20overmaFEV3OFVCPPc , m20overma ,  FEV3OFVCPPc ,  100.062 ,  3.178 ,  602\n",
      "m20overmaFEV6OFVCPPc , m20overma ,  FEV6OFVCPPc ,  99.924 ,  1.811 ,  602\n",
      "m20overmaFEV05PPc , m20overma ,  FEV05PPc ,  101.69 ,  13.297 ,  602\n",
      "m20overmaFEV1PPc , m20overma ,  FEV1PPc ,  100.307 ,  11.96 ,  602\n",
      "m20overmaFVCPPc , m20overma ,  FVCPPc ,  99.964 ,  11.719 ,  602\n",
      "m20overmaPEFRPPc , m20overma ,  PEFRPPc ,  100.401 ,  17.306 ,  602\n",
      "m20overmaFEV3PPc , m20overma ,  FEV3PPc ,  99.428 ,  11.495 ,  602\n",
      "m20overmaFEV6PPc , m20overma ,  FEV6PPc ,  99.627 ,  11.588 ,  602\n",
      "m20overmaMMEFPPc , m20overma ,  MMEFPPc ,  103.204 ,  28.043 ,  602\n",
      "m20overmaFEF75PPc , m20overma ,  FEF75PPc ,  102.642 ,  54.979 ,  602\n",
      "m20overmaEXPIRPPc , m20overma ,  EXPIRPPc ,  99.766 ,  31.394 ,  602\n",
      "m20overmaFEF75PPOFVCPPPPc , m20overma ,  FEF75PPOFVCPPPPc ,  101.142 ,  52.929 ,  602\n",
      "m20overmaMMEFPPOFVCPPPPc , m20overma ,  MMEFPPOFVCPPPPc ,  100.706 ,  29.537 ,  602\n",
      "m20overmaMMEFPPOPEFRPPPPc , m20overma ,  MMEFPPOPEFRPPPPc ,  101.374 ,  26.251 ,  602\n",
      "m20overmaPEFRPPOFEV1PPPPc , m20overma ,  PEFRPPOFEV1PPPPc ,  99.963 ,  14.636 ,  602\n",
      "m20overmaPEFRPPOFVCPPPPc , m20overma ,  PEFRPPOFVCPPPPc ,  100.161 ,  17.245 ,  602\n",
      "f18overbFEF75OFVCPPc , f18overb ,  FEF75OFVCPPc ,  105.818 ,  64.036 ,  957\n",
      "f18overbFEF75OPEFRPPc , f18overb ,  FEF75OPEFRPPc ,  93.925 ,  57.29 ,  957\n",
      "f18overbFEV1OFVCPPc , f18overb ,  FEV1OFVCPPc ,  101.389 ,  7.693 ,  957\n",
      "f18overbFEV1OFEV3PPc , f18overb ,  FEV1OFEV3PPc ,  98.482 ,  6.742 ,  957\n",
      "f18overbFEV1OFEV6PPc , f18overb ,  FEV1OFEV6PPc ,  101.543 ,  6.701 ,  957\n",
      "f18overbPEFROFVCPPc , f18overb ,  PEFROFVCPPc ,  113.444 ,  21.238 ,  957\n",
      "f18overbPEFROFEV6PPc , f18overb ,  PEFROFEV6PPc ,  113.59 ,  20.806 ,  957\n",
      "f18overbPEFROFEV1PPc , f18overb ,  PEFROFEV1PPc ,  111.815 ,  17.987 ,  957\n",
      "f18overbFEV3OFVCPPc , f18overb ,  FEV3OFVCPPc ,  99.676 ,  3.719 ,  957\n",
      "f18overbFEV6OFVCPPc , f18overb ,  FEV6OFVCPPc ,  99.829 ,  2.088 ,  957\n",
      "f18overbFEV05PPc , f18overb ,  FEV05PPc ,  88.694 ,  14.817 ,  957\n",
      "f18overbFEV1PPc , f18overb ,  FEV1PPc ,  85.572 ,  12.985 ,  957\n",
      "f18overbFVCPPc , f18overb ,  FVCPPc ,  84.626 ,  12.566 ,  957\n",
      "f18overbPEFRPPc , f18overb ,  PEFRPPc ,  96.298 ,  19.99 ,  957\n",
      "f18overbFEV3PPc , f18overb ,  FEV3PPc ,  84.153 ,  12.444 ,  957\n",
      "f18overbFEV6PPc , f18overb ,  FEV6PPc ,  84.375 ,  12.418 ,  957\n",
      "f18overbMMEFPPc , f18overb ,  MMEFPPc ,  91.96 ,  29.936 ,  957\n",
      "f18overbFEF75PPc , f18overb ,  FEF75PPc ,  87.575 ,  45.821 ,  957\n",
      "f18overbEXPIRPPc , f18overb ,  EXPIRPPc ,  101.904 ,  43.015 ,  957\n",
      "f18overbFEF75PPOFVCPPPPc , f18overb ,  FEF75PPOFVCPPPPc ,  100.797 ,  55.165 ,  957\n",
      "f18overbMMEFPPOFVCPPPPc , f18overb ,  MMEFPPOFVCPPPPc ,  100.389 ,  33.086 ,  957\n",
      "f18overbMMEFPPOPEFRPPPPc , f18overb ,  MMEFPPOPEFRPPPPc ,  100.758 ,  28.471 ,  957\n",
      "f18overbPEFRPPOFEV1PPPPc , f18overb ,  PEFRPPOFEV1PPPPc ,  99.772 ,  15.644 ,  957\n",
      "f18overbPEFRPPOFVCPPPPc , f18overb ,  PEFRPPOFVCPPPPc ,  99.882 ,  18.3 ,  957\n",
      "f18overcmaFEF75OFVCPPc , f18overcma ,  FEF75OFVCPPc ,  103.522 ,  65.878 ,  2113\n",
      "f18overcmaFEF75OPEFRPPc , f18overcma ,  FEF75OPEFRPPc ,  103.53 ,  61.906 ,  2113\n",
      "f18overcmaFEV1OFVCPPc , f18overcma ,  FEV1OFVCPPc ,  100.508 ,  7.675 ,  2113\n",
      "f18overcmaFEV1OFEV3PPc , f18overcma ,  FEV1OFEV3PPc ,  96.879 ,  6.652 ,  2113\n",
      "f18overcmaFEV1OFEV6PPc , f18overcma ,  FEV1OFEV6PPc ,  100.605 ,  6.561 ,  2113\n",
      "f18overcmaPEFROFVCPPc , f18overcma ,  PEFROFVCPPc ,  100.794 ,  18.365 ,  2113\n",
      "f18overcmaPEFROFEV6PPc , f18overcma ,  PEFROFEV6PPc ,  100.886 ,  17.993 ,  2113\n",
      "f18overcmaPEFROFEV1PPc , f18overcma ,  PEFROFEV1PPc ,  100.209 ,  15.558 ,  2113\n",
      "f18overcmaFEV3OFVCPPc , f18overcma ,  FEV3OFVCPPc ,  99.852 ,  3.811 ,  2113\n",
      "f18overcmaFEV6OFVCPPc , f18overcma ,  FEV6OFVCPPc ,  99.902 ,  2.268 ,  2113\n",
      "f18overcmaFEV05PPc , f18overcma ,  FEV05PPc ,  100.182 ,  14.642 ,  2113\n",
      "f18overcmaFEV1PPc , f18overcma ,  FEV1PPc ,  99.7 ,  13.615 ,  2113\n",
      "f18overcmaFVCPPc , f18overcma ,  FVCPPc ,  99.834 ,  13.409 ,  2113\n",
      "f18overcmaPEFRPPc , f18overcma ,  PEFRPPc ,  99.067 ,  18.467 ,  2113\n",
      "f18overcmaFEV3PPc , f18overcma ,  FEV3PPc ,  99.453 ,  13.234 ,  2113\n",
      "f18overcmaFEV6PPc , f18overcma ,  FEV6PPc ,  99.617 ,  13.256 ,  2113\n",
      "f18overcmaMMEFPPc , f18overcma ,  MMEFPPc ,  101.154 ,  30.8 ,  2113\n",
      "f18overcmaFEF75PPc , f18overcma ,  FEF75PPc ,  100.593 ,  51.148 ,  2113\n",
      "f18overcmaEXPIRPPc , f18overcma ,  EXPIRPPc ,  103.279 ,  38.148 ,  2113\n",
      "f18overcmaFEF75PPOFVCPPPPc , f18overcma ,  FEF75PPOFVCPPPPc ,  100.614 ,  62.07 ,  2113\n",
      "f18overcmaMMEFPPOFVCPPPPc , f18overcma ,  MMEFPPOFVCPPPPc ,  100.294 ,  33.485 ,  2113\n",
      "f18overcmaMMEFPPOPEFRPPPPc , f18overcma ,  MMEFPPOPEFRPPPPc ,  100.617 ,  28.673 ,  2113\n",
      "f18overcmaPEFRPPOFEV1PPPPc , f18overcma ,  PEFRPPOFEV1PPPPc ,  99.92 ,  15.354 ,  2113\n",
      "f18overcmaPEFRPPOFVCPPPPc , f18overcma ,  PEFRPPOFVCPPPPc ,  99.991 ,  17.968 ,  2113\n",
      "f18overcFEF75OFVCPPc , f18overc ,  FEF75OFVCPPc ,  102.537 ,  69.96 ,  1108\n",
      "f18overcFEF75OPEFRPPc , f18overc ,  FEF75OPEFRPPc ,  103.221 ,  67.481 ,  1108\n",
      "f18overcFEV1OFVCPPc , f18overc ,  FEV1OFVCPPc ,  100.002 ,  7.993 ,  1108\n",
      "f18overcFEV1OFEV3PPc , f18overc ,  FEV1OFEV3PPc ,  95.707 ,  6.601 ,  1108\n",
      "f18overcFEV1OFEV6PPc , f18overc ,  FEV1OFEV6PPc ,  100.0 ,  6.614 ,  1108\n",
      "f18overcPEFROFVCPPc , f18overc ,  PEFROFVCPPc ,  100.0 ,  17.656 ,  1108\n",
      "f18overcPEFROFEV6PPc , f18overc ,  PEFROFEV6PPc ,  99.999 ,  17.134 ,  1108\n",
      "f18overcPEFROFEV1PPc , f18overc ,  PEFROFEV1PPc ,  99.993 ,  14.882 ,  1108\n",
      "f18overcFEV3OFVCPPc , f18overc ,  FEV3OFVCPPc ,  100.001 ,  4.274 ,  1108\n",
      "f18overcFEV6OFVCPPc , f18overc ,  FEV6OFVCPPc ,  100.0 ,  2.602 ,  1108\n",
      "f18overcFEV05PPc , f18overc ,  FEV05PPc ,  100.075 ,  15.196 ,  1108\n",
      "f18overcFEV1PPc , f18overc ,  FEV1PPc ,  100.111 ,  14.42 ,  1108\n",
      "f18overcFVCPPc , f18overc ,  FVCPPc ,  100.077 ,  14.185 ,  1108\n",
      "f18overcPEFRPPc , f18overc ,  PEFRPPc ,  100.037 ,  18.389 ,  1108\n",
      "f18overcFEV3PPc , f18overc ,  FEV3PPc ,  100.124 ,  14.061 ,  1108\n",
      "f18overcFEV6PPc , f18overc ,  FEV6PPc ,  100.106 ,  14.05 ,  1108\n",
      "f18overcMMEFPPc , f18overc ,  MMEFPPc ,  100.273 ,  32.888 ,  1108\n",
      "f18overcFEF75PPc , f18overc ,  FEF75PPc ,  100.553 ,  53.411 ,  1108\n",
      "f18overcEXPIRPPc , f18overc ,  EXPIRPPc ,  100.114 ,  36.517 ,  1108\n",
      "f18overcFEF75PPOFVCPPPPc , f18overc ,  FEF75PPOFVCPPPPc ,  100.001 ,  63.69 ,  1108\n",
      "f18overcMMEFPPOFVCPPPPc , f18overc ,  MMEFPPOFVCPPPPc ,  100.0 ,  35.179 ,  1108\n",
      "f18overcMMEFPPOPEFRPPPPc , f18overc ,  MMEFPPOPEFRPPPPc ,  100.0 ,  30.502 ,  1108\n",
      "f18overcPEFRPPOFEV1PPPPc , f18overc ,  PEFRPPOFEV1PPPPc ,  100.0 ,  14.654 ,  1108\n",
      "f18overcPEFRPPOFVCPPPPc , f18overc ,  PEFRPPOFVCPPPPc ,  100.0 ,  17.325 ,  1108\n",
      "f18overmaFEF75OFVCPPc , f18overma ,  FEF75OFVCPPc ,  104.608 ,  61.079 ,  1005\n",
      "f18overmaFEF75OPEFRPPc , f18overma ,  FEF75OPEFRPPc ,  103.872 ,  55.142 ,  1005\n",
      "f18overmaFEV1OFVCPPc , f18overma ,  FEV1OFVCPPc ,  101.066 ,  7.27 ,  1005\n",
      "f18overmaFEV1OFEV3PPc , f18overma ,  FEV1OFEV3PPc ,  98.171 ,  6.468 ,  1005\n",
      "f18overmaFEV1OFEV6PPc , f18overma ,  FEV1OFEV6PPc ,  101.271 ,  6.441 ,  1005\n",
      "f18overmaPEFROFVCPPc , f18overma ,  PEFROFVCPPc ,  101.67 ,  19.088 ,  1005\n",
      "f18overmaPEFROFEV6PPc , f18overma ,  PEFROFEV6PPc ,  101.865 ,  18.855 ,  1005\n",
      "f18overmaPEFROFEV1PPc , f18overma ,  PEFROFEV1PPc ,  100.448 ,  16.275 ,  1005\n",
      "f18overmaFEV3OFVCPPc , f18overma ,  FEV3OFVCPPc ,  99.688 ,  3.218 ,  1005\n",
      "f18overmaFEV6OFVCPPc , f18overma ,  FEV6OFVCPPc ,  99.793 ,  1.825 ,  1005\n",
      "f18overmaFEV05PPc , f18overma ,  FEV05PPc ,  100.3 ,  14.013 ,  1005\n",
      "f18overmaFEV1PPc , f18overma ,  FEV1PPc ,  99.247 ,  12.659 ,  1005\n",
      "f18overmaFVCPPc , f18overma ,  FVCPPc ,  99.566 ,  12.5 ,  1005\n",
      "f18overmaPEFRPPc , f18overma ,  PEFRPPc ,  97.997 ,  18.504 ,  1005\n",
      "f18overmaFEV3PPc , f18overma ,  FEV3PPc ,  98.714 ,  12.223 ,  1005\n",
      "f18overmaFEV6PPc , f18overma ,  FEV6PPc ,  99.079 ,  12.307 ,  1005\n",
      "f18overmaMMEFPPc , f18overma ,  MMEFPPc ,  102.125 ,  28.304 ,  1005\n",
      "f18overmaFEF75PPc , f18overma ,  FEF75PPc ,  100.637 ,  48.559 ,  1005\n",
      "f18overmaEXPIRPPc , f18overma ,  EXPIRPPc ,  106.768 ,  39.594 ,  1005\n",
      "f18overmaFEF75PPOFVCPPPPc , f18overma ,  FEF75PPOFVCPPPPc ,  101.1 ,  60.01 ,  1005\n",
      "f18overmaMMEFPPOFVCPPPPc , f18overma ,  MMEFPPOFVCPPPPc ,  101.024 ,  37.442 ,  1005\n",
      "f18overmaMMEFPPOPEFRPPPPc , f18overma ,  MMEFPPOPEFRPPPPc ,  101.464 ,  27.846 ,  1005\n",
      "f18overmaPEFRPPOFEV1PPPPc , f18overma ,  PEFRPPOFEV1PPPPc ,  99.861 ,  16.084 ,  1005\n",
      "f18overmaPEFRPPOFVCPPPPc , f18overma ,  PEFRPPOFVCPPPPc ,  100.01 ,  18.72 ,  1005\n",
      "mlt20bFEF75OFVCPPc , mlt20b ,  FEF75OFVCPPc ,  103.493 ,  41.969 ,  599\n",
      "mlt20bFEF75OPEFRPPc , mlt20b ,  FEF75OPEFRPPc ,  90.667 ,  32.464 ,  599\n",
      "mlt20bFEV1OFVCPPc , mlt20b ,  FEV1OFVCPPc ,  101.538 ,  7.342 ,  599\n",
      "mlt20bFEV1OFEV3PPc , mlt20b ,  FEV1OFEV3PPc ,  100.165 ,  7.065 ,  599\n",
      "mlt20bFEV1OFEV6PPc , mlt20b ,  FEV1OFEV6PPc ,  101.619 ,  7.15 ,  599\n",
      "mlt20bPEFROFVCPPc , mlt20b ,  PEFROFVCPPc ,  113.648 ,  18.513 ,  599\n",
      "mlt20bPEFROFEV6PPc , mlt20b ,  PEFROFEV6PPc ,  113.736 ,  18.402 ,  599\n",
      "mlt20bPEFROFEV1PPc , mlt20b ,  PEFROFEV1PPc ,  111.863 ,  14.245 ,  599\n",
      "mlt20bFEV3OFVCPPc , mlt20b ,  FEV3OFVCPPc ,  99.758 ,  2.023 ,  599\n",
      "mlt20bFEV6OFVCPPc , mlt20b ,  FEV6OFVCPPc ,  99.915 ,  0.626 ,  599\n",
      "mlt20bFEV05PPc , mlt20b ,  FEV05PPc ,  89.492 ,  13.046 ,  599\n",
      "mlt20bFEV1PPc , mlt20b ,  FEV1PPc ,  86.146 ,  11.463 ,  599\n",
      "mlt20bFVCPPc , mlt20b ,  FVCPPc ,  84.837 ,  10.93 ,  599\n",
      "mlt20bPEFRPPc , mlt20b ,  PEFRPPc ,  96.286 ,  16.725 ,  599\n",
      "mlt20bFEV3PPc , mlt20b ,  FEV3PPc ,  84.639 ,  10.875 ,  599\n",
      "mlt20bFEV6PPc , mlt20b ,  FEV6PPc ,  84.767 ,  10.905 ,  599\n",
      "mlt20bMMEFPPc , mlt20b ,  MMEFPPc ,  92.171 ,  25.671 ,  599\n",
      "mlt20bFEF75PPc , mlt20b ,  FEF75PPc ,  87.821 ,  34.523 ,  599\n",
      "mlt20bEXPIRPPc , mlt20b ,  EXPIRPPc ,  93.415 ,  38.766 ,  599\n",
      "mlt20bFEF75PPOFVCPPPPc , mlt20b ,  FEF75PPOFVCPPPPc ,  99.952 ,  40.515 ,  599\n",
      "mlt20bMMEFPPOFVCPPPPc , mlt20b ,  MMEFPPOFVCPPPPc ,  99.954 ,  27.964 ,  599\n",
      "mlt20bMMEFPPOPEFRPPPPc , mlt20b ,  MMEFPPOPEFRPPPPc ,  99.754 ,  21.234 ,  599\n",
      "mlt20bPEFRPPOFEV1PPPPc , mlt20b ,  PEFRPPOFEV1PPPPc ,  99.989 ,  12.492 ,  599\n",
      "mlt20bPEFRPPOFVCPPPPc , mlt20b ,  PEFRPPOFVCPPPPc ,  99.991 ,  15.982 ,  599\n",
      "mlt20cmaFEF75OFVCPPc , mlt20cma ,  FEF75OFVCPPc ,  105.333 ,  36.863 ,  1019\n",
      "mlt20cmaFEF75OPEFRPPc , mlt20cma ,  FEF75OPEFRPPc ,  104.761 ,  35.004 ,  1019\n",
      "mlt20cmaFEV1OFVCPPc , mlt20cma ,  FEV1OFVCPPc ,  101.144 ,  6.578 ,  1019\n",
      "mlt20cmaFEV1OFEV3PPc , mlt20cma ,  FEV1OFEV3PPc ,  99.68 ,  6.34 ,  1019\n",
      "mlt20cmaFEV1OFEV6PPc , mlt20cma ,  FEV1OFEV6PPc ,  101.157 ,  6.428 ,  1019\n",
      "mlt20cmaPEFROFVCPPc , mlt20cma ,  PEFROFVCPPc ,  101.102 ,  15.909 ,  1019\n",
      "mlt20cmaPEFROFEV6PPc , mlt20cma ,  PEFROFEV6PPc ,  101.122 ,  15.878 ,  1019\n",
      "mlt20cmaPEFROFEV1PPc , mlt20cma ,  PEFROFEV1PPc ,  99.986 ,  13.051 ,  1019\n",
      "mlt20cmaFEV3OFVCPPc , mlt20cma ,  FEV3OFVCPPc ,  100.068 ,  1.745 ,  1019\n",
      "mlt20cmaFEV6OFVCPPc , mlt20cma ,  FEV6OFVCPPc ,  99.986 ,  0.591 ,  1019\n",
      "mlt20cmaFEV05PPc , mlt20cma ,  FEV05PPc ,  103.083 ,  12.848 ,  1019\n",
      "mlt20cmaFEV1PPc , mlt20cma ,  FEV1PPc ,  102.783 ,  11.399 ,  1019\n",
      "mlt20cmaFVCPPc , mlt20cma ,  FVCPPc ,  101.59 ,  10.879 ,  1019\n",
      "mlt20cmaPEFRPPc , mlt20cma ,  PEFRPPc ,  101.842 ,  16.215 ,  1019\n",
      "mlt20cmaFEV3PPc , mlt20cma ,  FEV3PPc ,  101.724 ,  10.832 ,  1019\n",
      "mlt20cmaFEV6PPc , mlt20cma ,  FEV6PPc ,  101.577 ,  10.845 ,  1019\n",
      "mlt20cmaMMEFPPc , mlt20cma ,  MMEFPPc ,  106.116 ,  25.095 ,  1019\n",
      "mlt20cmaFEF75PPc , mlt20cma ,  FEF75PPc ,  108.181 ,  36.995 ,  1019\n",
      "mlt20cmaEXPIRPPc , mlt20cma ,  EXPIRPPc ,  98.354 ,  35.035 ,  1019\n",
      "mlt20cmaFEF75PPOFVCPPPPc , mlt20cma ,  FEF75PPOFVCPPPPc ,  99.989 ,  35.149 ,  1019\n",
      "mlt20cmaMMEFPPOFVCPPPPc , mlt20cma ,  MMEFPPOFVCPPPPc ,  100.002 ,  24.138 ,  1019\n",
      "mlt20cmaMMEFPPOPEFRPPPPc , mlt20cma ,  MMEFPPOPEFRPPPPc ,  100.195 ,  18.716 ,  1019\n",
      "mlt20cmaPEFRPPOFEV1PPPPc , mlt20cma ,  PEFRPPOFEV1PPPPc ,  100.08 ,  12.797 ,  1019\n",
      "mlt20cmaPEFRPPOFVCPPPPc , mlt20cma ,  PEFRPPOFVCPPPPc ,  100.041 ,  15.465 ,  1019\n",
      "mlt20cFEF75OFVCPPc , mlt20c ,  FEF75OFVCPPc ,  100.0 ,  35.145 ,  419\n",
      "mlt20cFEF75OPEFRPPc , mlt20c ,  FEF75OPEFRPPc ,  100.0 ,  31.07 ,  419\n",
      "mlt20cFEV1OFVCPPc , mlt20c ,  FEV1OFVCPPc ,  100.0 ,  6.664 ,  419\n",
      "mlt20cFEV1OFEV3PPc , mlt20c ,  FEV1OFEV3PPc ,  98.53 ,  6.432 ,  419\n",
      "mlt20cFEV1OFEV6PPc , mlt20c ,  FEV1OFEV6PPc ,  100.0 ,  6.519 ,  419\n",
      "mlt20cPEFROFVCPPc , mlt20c ,  PEFROFVCPPc ,  100.0 ,  15.258 ,  419\n",
      "mlt20cPEFROFEV6PPc , mlt20c ,  PEFROFEV6PPc ,  100.0 ,  15.18 ,  419\n",
      "mlt20cPEFROFEV1PPc , mlt20c ,  PEFROFEV1PPc ,  100.0 ,  12.153 ,  419\n",
      "mlt20cFEV3OFVCPPc , mlt20c ,  FEV3OFVCPPc ,  100.0 ,  1.718 ,  419\n",
      "mlt20cFEV6OFVCPPc , mlt20c ,  FEV6OFVCPPc ,  100.0 ,  0.641 ,  419\n",
      "mlt20cFEV05PPc , mlt20c ,  FEV05PPc ,  100.076 ,  12.271 ,  419\n",
      "mlt20cFEV1PPc , mlt20c ,  FEV1PPc ,  100.106 ,  10.75 ,  419\n",
      "mlt20cFVCPPc , mlt20c ,  FVCPPc ,  100.076 ,  10.359 ,  419\n",
      "mlt20cPEFRPPc , mlt20c ,  PEFRPPc ,  100.084 ,  15.51 ,  419\n",
      "mlt20cFEV3PPc , mlt20c ,  FEV3PPc ,  100.092 ,  10.248 ,  419\n",
      "mlt20cFEV6PPc , mlt20c ,  FEV6PPc ,  100.078 ,  10.296 ,  419\n",
      "mlt20cMMEFPPc , mlt20c ,  MMEFPPc ,  100.112 ,  23.828 ,  419\n",
      "mlt20cFEF75PPc , mlt20c ,  FEF75PPc ,  100.31 ,  34.111 ,  419\n",
      "mlt20cEXPIRPPc , mlt20c ,  EXPIRPPc ,  100.002 ,  34.163 ,  419\n",
      "mlt20cFEF75PPOFVCPPPPc , mlt20c ,  FEF75PPOFVCPPPPc ,  100.0 ,  35.304 ,  419\n",
      "mlt20cMMEFPPOFVCPPPPc , mlt20c ,  MMEFPPOFVCPPPPc ,  100.0 ,  24.626 ,  419\n",
      "mlt20cMMEFPPOPEFRPPPPc , mlt20c ,  MMEFPPOPEFRPPPPc ,  100.0 ,  18.212 ,  419\n",
      "mlt20cPEFRPPOFEV1PPPPc , mlt20c ,  PEFRPPOFEV1PPPPc ,  100.0 ,  11.757 ,  419\n",
      "mlt20cPEFRPPOFVCPPPPc , mlt20c ,  PEFRPPOFVCPPPPc ,  100.0 ,  14.909 ,  419\n",
      "mlt20maFEF75OFVCPPc , mlt20ma ,  FEF75OFVCPPc ,  109.058 ,  37.599 ,  600\n",
      "mlt20maFEF75OPEFRPPc , mlt20ma ,  FEF75OPEFRPPc ,  108.086 ,  37.173 ,  600\n",
      "mlt20maFEV1OFVCPPc , mlt20ma ,  FEV1OFVCPPc ,  101.942 ,  6.402 ,  600\n",
      "mlt20maFEV1OFEV3PPc , mlt20ma ,  FEV1OFEV3PPc ,  100.484 ,  6.155 ,  600\n",
      "mlt20maFEV1OFEV6PPc , mlt20ma ,  FEV1OFEV6PPc ,  101.966 ,  6.244 ,  600\n",
      "mlt20maPEFROFVCPPc , mlt20ma ,  PEFROFVCPPc ,  101.872 ,  16.317 ,  600\n",
      "mlt20maPEFROFEV6PPc , mlt20ma ,  PEFROFEV6PPc ,  101.906 ,  16.314 ,  600\n",
      "mlt20maPEFROFEV1PPc , mlt20ma ,  PEFROFEV1PPc ,  99.976 ,  13.653 ,  600\n",
      "mlt20maFEV3OFVCPPc , mlt20ma ,  FEV3OFVCPPc ,  100.115 ,  1.764 ,  600\n",
      "mlt20maFEV6OFVCPPc , mlt20ma ,  FEV6OFVCPPc ,  99.976 ,  0.554 ,  600\n",
      "mlt20maFEV05PPc , mlt20ma ,  FEV05PPc ,  105.182 ,  12.834 ,  600\n",
      "mlt20maFEV1PPc , mlt20ma ,  FEV1PPc ,  104.653 ,  11.474 ,  600\n",
      "mlt20maFVCPPc , mlt20ma ,  FVCPPc ,  102.648 ,  11.114 ,  600\n",
      "mlt20maPEFRPPc , mlt20ma ,  PEFRPPc ,  103.07 ,  16.592 ,  600\n",
      "mlt20maFEV3PPc , mlt20ma ,  FEV3PPc ,  102.863 ,  11.089 ,  600\n",
      "mlt20maFEV6PPc , mlt20ma ,  FEV6PPc ,  102.625 ,  11.101 ,  600\n",
      "mlt20maMMEFPPc , mlt20ma ,  MMEFPPc ,  110.309 ,  25.125 ,  600\n",
      "mlt20maFEF75PPc , mlt20ma ,  FEF75PPc ,  113.678 ,  37.953 ,  600\n",
      "mlt20maEXPIRPPc , mlt20ma ,  EXPIRPPc ,  97.202 ,  35.615 ,  600\n",
      "mlt20maFEF75PPOFVCPPPPc , mlt20ma ,  FEF75PPOFVCPPPPc ,  100.17 ,  34.651 ,  600\n",
      "mlt20maMMEFPPOFVCPPPPc , mlt20ma ,  MMEFPPOFVCPPPPc ,  100.111 ,  23.435 ,  600\n",
      "mlt20maMMEFPPOPEFRPPPPc , mlt20ma ,  MMEFPPOPEFRPPPPc ,  100.406 ,  18.511 ,  600\n",
      "mlt20maPEFRPPOFEV1PPPPc , mlt20ma ,  PEFRPPOFEV1PPPPc ,  100.119 ,  13.459 ,  600\n",
      "mlt20maPEFRPPOFVCPPPPc , mlt20ma ,  PEFRPPOFVCPPPPc ,  100.097 ,  15.852 ,  600\n",
      "flt18bFEF75OFVCPPc , flt18b ,  FEF75OFVCPPc ,  101.743 ,  40.216 ,  590\n",
      "flt18bFEF75OPEFRPPc , flt18b ,  FEF75OPEFRPPc ,  89.985 ,  32.314 ,  590\n",
      "flt18bFEV1OFVCPPc , flt18b ,  FEV1OFVCPPc ,  100.584 ,  7.896 ,  590\n",
      "flt18bFEV1OFEV3PPc , flt18b ,  FEV1OFEV3PPc ,  99.667 ,  7.493 ,  590\n",
      "flt18bFEV1OFEV6PPc , flt18b ,  FEV1OFEV6PPc ,  100.644 ,  7.54 ,  590\n",
      "flt18bPEFROFVCPPc , flt18b ,  PEFROFVCPPc ,  112.924 ,  20.04 ,  590\n",
      "flt18bPEFROFEV6PPc , flt18b ,  PEFROFEV6PPc ,  112.974 ,  19.862 ,  590\n",
      "flt18bPEFROFEV1PPc , flt18b ,  PEFROFEV1PPc ,  112.058 ,  15.874 ,  590\n",
      "flt18bFEV3OFVCPPc , flt18b ,  FEV3OFVCPPc ,  99.691 ,  2.535 ,  590\n",
      "flt18bFEV6OFVCPPc , flt18b ,  FEV6OFVCPPc ,  99.911 ,  1.214 ,  590\n",
      "flt18bFEV05PPc , flt18b ,  FEV05PPc ,  89.239 ,  12.894 ,  590\n",
      "flt18bFEV1PPc , flt18b ,  FEV1PPc ,  86.312 ,  11.389 ,  590\n",
      "flt18bFVCPPc , flt18b ,  FVCPPc ,  85.801 ,  10.902 ,  590\n",
      "flt18bPEFRPPc , flt18b ,  PEFRPPc ,  97.306 ,  17.501 ,  590\n",
      "flt18bFEV3PPc , flt18b ,  FEV3PPc ,  85.512 ,  10.899 ,  590\n",
      "flt18bFEV6PPc , flt18b ,  FEV6PPc ,  85.714 ,  10.899 ,  590\n",
      "flt18bMMEFPPc , flt18b ,  MMEFPPc ,  90.987 ,  24.314 ,  590\n",
      "flt18bFEF75PPc , flt18b ,  FEF75PPc ,  86.804 ,  31.999 ,  590\n",
      "flt18bEXPIRPPc , flt18b ,  EXPIRPPc ,  90.713 ,  40.134 ,  590\n",
      "flt18bFEF75PPOFVCPPPPc , flt18b ,  FEF75PPOFVCPPPPc ,  100.686 ,  40.022 ,  590\n",
      "flt18bMMEFPPOFVCPPPPc , flt18b ,  MMEFPPOFVCPPPPc ,  100.466 ,  28.212 ,  590\n",
      "flt18bMMEFPPOPEFRPPPPc , flt18b ,  MMEFPPOPEFRPPPPc ,  99.985 ,  20.982 ,  590\n",
      "flt18bPEFRPPOFEV1PPPPc , flt18b ,  PEFRPPOFEV1PPPPc ,  100.029 ,  13.968 ,  590\n",
      "flt18bPEFRPPOFVCPPPPc , flt18b ,  PEFRPPOFVCPPPPc ,  100.31 ,  17.627 ,  590\n",
      "flt18cmaFEF75OFVCPPc , flt18cma ,  FEF75OFVCPPc ,  104.24 ,  34.092 ,  966\n",
      "flt18cmaFEF75OPEFRPPc , flt18cma ,  FEF75OPEFRPPc ,  103.175 ,  33.656 ,  966\n",
      "flt18cmaFEV1OFVCPPc , flt18cma ,  FEV1OFVCPPc ,  100.908 ,  6.001 ,  966\n",
      "flt18cmaFEV1OFEV3PPc , flt18cma ,  FEV1OFEV3PPc ,  99.912 ,  5.834 ,  966\n",
      "flt18cmaFEV1OFEV6PPc , flt18cma ,  FEV1OFEV6PPc ,  100.906 ,  5.889 ,  966\n",
      "flt18cmaPEFROFVCPPc , flt18cma ,  PEFROFVCPPc ,  101.798 ,  16.165 ,  966\n",
      "flt18cmaPEFROFEV6PPc , flt18cma ,  PEFROFEV6PPc ,  101.797 ,  16.144 ,  966\n",
      "flt18cmaPEFROFEV1PPc , flt18cma ,  PEFROFEV1PPc ,  100.876 ,  13.686 ,  966\n",
      "flt18cmaFEV3OFVCPPc , flt18cma ,  FEV3OFVCPPc ,  100.024 ,  1.544 ,  966\n",
      "flt18cmaFEV6OFVCPPc , flt18cma ,  FEV6OFVCPPc ,  100.002 ,  0.461 ,  966\n",
      "flt18cmaFEV05PPc , flt18cma ,  FEV05PPc ,  102.484 ,  13.375 ,  966\n",
      "flt18cmaFEV1PPc , flt18cma ,  FEV1PPc ,  101.814 ,  11.786 ,  966\n",
      "flt18cmaFVCPPc , flt18cma ,  FVCPPc ,  100.918 ,  11.702 ,  966\n",
      "flt18cmaPEFRPPc , flt18cma ,  PEFRPPc ,  102.182 ,  17.483 ,  966\n",
      "flt18cmaFEV3PPc , flt18cma ,  FEV3PPc ,  100.97 ,  11.606 ,  966\n",
      "flt18cmaFEV6PPc , flt18cma ,  FEV6PPc ,  100.927 ,  11.712 ,  966\n",
      "flt18cmaMMEFPPc , flt18cma ,  MMEFPPc ,  104.655 ,  23.479 ,  966\n",
      "flt18cmaFEF75PPc , flt18cma ,  FEF75PPc ,  105.452 ,  33.099 ,  966\n",
      "flt18cmaEXPIRPPc , flt18cma ,  EXPIRPPc ,  95.838 ,  38.842 ,  966\n",
      "flt18cmaFEF75PPOFVCPPPPc , flt18cma ,  FEF75PPOFVCPPPPc ,  99.912 ,  32.697 ,  966\n",
      "flt18cmaMMEFPPOFVCPPPPc , flt18cma ,  MMEFPPOFVCPPPPc ,  99.906 ,  22.735 ,  966\n",
      "flt18cmaMMEFPPOPEFRPPPPc , flt18cma ,  MMEFPPOPEFRPPPPc ,  100.322 ,  18.063 ,  966\n",
      "flt18cmaPEFRPPOFEV1PPPPc , flt18cma ,  PEFRPPOFEV1PPPPc ,  99.968 ,  13.323 ,  966\n",
      "flt18cmaPEFRPPOFVCPPPPc , flt18cma ,  PEFRPPOFVCPPPPc ,  99.957 ,  15.598 ,  966\n",
      "flt18cFEF75OFVCPPc , flt18c ,  FEF75OFVCPPc ,  99.999 ,  32.596 ,  409\n",
      "flt18cFEF75OPEFRPPc , flt18c ,  FEF75OPEFRPPc ,  100.0 ,  29.942 ,  409\n",
      "flt18cFEV1OFVCPPc , flt18c ,  FEV1OFVCPPc ,  100.0 ,  6.193 ,  409\n",
      "flt18cFEV1OFEV3PPc , flt18c ,  FEV1OFEV3PPc ,  99.006 ,  6.031 ,  409\n",
      "flt18cFEV1OFEV6PPc , flt18c ,  FEV1OFEV6PPc ,  100.0 ,  6.086 ,  409\n",
      "flt18cPEFROFVCPPc , flt18c ,  PEFROFVCPPc ,  100.0 ,  14.703 ,  409\n",
      "flt18cPEFROFEV6PPc , flt18c ,  PEFROFEV6PPc ,  100.0 ,  14.676 ,  409\n",
      "flt18cPEFROFEV1PPc , flt18c ,  PEFROFEV1PPc ,  100.0 ,  12.052 ,  409\n",
      "flt18cFEV3OFVCPPc , flt18c ,  FEV3OFVCPPc ,  100.0 ,  1.481 ,  409\n",
      "flt18cFEV6OFVCPPc , flt18c ,  FEV6OFVCPPc ,  100.0 ,  0.474 ,  409\n",
      "flt18cFEV05PPc , flt18c ,  FEV05PPc ,  100.11 ,  12.276 ,  409\n",
      "flt18cFEV1PPc , flt18c ,  FEV1PPc ,  100.145 ,  10.972 ,  409\n",
      "flt18cFVCPPc , flt18c ,  FVCPPc ,  100.117 ,  10.901 ,  409\n",
      "flt18cPEFRPPc , flt18c ,  PEFRPPc ,  100.068 ,  15.204 ,  409\n",
      "flt18cFEV3PPc , flt18c ,  FEV3PPc ,  100.128 ,  10.758 ,  409\n",
      "flt18cFEV6PPc , flt18c ,  FEV6PPc ,  100.117 ,  10.905 ,  409\n",
      "flt18cMMEFPPc , flt18c ,  MMEFPPc ,  100.106 ,  22.277 ,  409\n",
      "flt18cFEF75PPc , flt18c ,  FEF75PPc ,  100.317 ,  31.201 ,  409\n",
      "flt18cEXPIRPPc , flt18c ,  EXPIRPPc ,  99.995 ,  38.611 ,  409\n",
      "flt18cFEF75PPOFVCPPPPc , flt18c ,  FEF75PPOFVCPPPPc ,  100.0 ,  32.585 ,  409\n",
      "flt18cMMEFPPOFVCPPPPc , flt18c ,  MMEFPPOFVCPPPPc ,  100.0 ,  23.131 ,  409\n",
      "flt18cMMEFPPOPEFRPPPPc , flt18c ,  MMEFPPOPEFRPPPPc ,  100.0 ,  17.31 ,  409\n",
      "flt18cPEFRPPOFEV1PPPPc , flt18c ,  PEFRPPOFEV1PPPPc ,  100.0 ,  11.896 ,  409\n",
      "flt18cPEFRPPOFVCPPPPc , flt18c ,  PEFRPPOFVCPPPPc ,  100.0 ,  14.481 ,  409\n",
      "flt18maFEF75OFVCPPc , flt18ma ,  FEF75OFVCPPc ,  107.354 ,  34.851 ,  557\n",
      "flt18maFEF75OPEFRPPc , flt18ma ,  FEF75OPEFRPPc ,  105.507 ,  35.99 ,  557\n",
      "flt18maFEV1OFVCPPc , flt18ma ,  FEV1OFVCPPc ,  101.574 ,  5.771 ,  557\n",
      "flt18maFEV1OFEV3PPc , flt18ma ,  FEV1OFEV3PPc ,  100.577 ,  5.597 ,  557\n",
      "flt18maFEV1OFEV6PPc , flt18ma ,  FEV1OFEV6PPc ,  101.571 ,  5.654 ,  557\n",
      "flt18maPEFROFVCPPc , flt18ma ,  PEFROFVCPPc ,  103.118 ,  17.051 ,  557\n",
      "flt18maPEFROFEV6PPc , flt18ma ,  PEFROFEV6PPc ,  103.116 ,  17.034 ,  557\n",
      "flt18maPEFROFEV1PPc , flt18ma ,  PEFROFEV1PPc ,  101.52 ,  14.749 ,  557\n",
      "flt18maFEV3OFVCPPc , flt18ma ,  FEV3OFVCPPc ,  100.041 ,  1.59 ,  557\n",
      "flt18maFEV6OFVCPPc , flt18ma ,  FEV6OFVCPPc ,  100.003 ,  0.452 ,  557\n",
      "flt18maFEV05PPc , flt18ma ,  FEV05PPc ,  104.228 ,  13.882 ,  557\n",
      "flt18maFEV1PPc , flt18ma ,  FEV1PPc ,  103.039 ,  12.215 ,  557\n",
      "flt18maFVCPPc , flt18ma ,  FVCPPc ,  101.506 ,  12.234 ,  557\n",
      "flt18maPEFRPPc , flt18ma ,  PEFRPPc ,  103.734 ,  18.847 ,  557\n",
      "flt18maFEV3PPc , flt18ma ,  FEV3PPc ,  101.589 ,  12.163 ,  557\n",
      "flt18maFEV6PPc , flt18ma ,  FEV6PPc ,  101.521 ,  12.246 ,  557\n",
      "flt18maMMEFPPc , flt18ma ,  MMEFPPc ,  107.996 ,  23.795 ,  557\n",
      "flt18maFEF75PPc , flt18ma ,  FEF75PPc ,  109.223 ,  33.962 ,  557\n",
      "flt18maEXPIRPPc , flt18ma ,  EXPIRPPc ,  92.785 ,  38.762 ,  557\n",
      "flt18maFEF75PPOFVCPPPPc , flt18ma ,  FEF75PPOFVCPPPPc ,  99.926 ,  32.354 ,  557\n",
      "flt18maMMEFPPOFVCPPPPc , flt18ma ,  MMEFPPOFVCPPPPc ,  99.869 ,  22.067 ,  557\n",
      "flt18maMMEFPPOPEFRPPPPc , flt18ma ,  MMEFPPOPEFRPPPPc ,  100.624 ,  18.276 ,  557\n",
      "flt18maPEFRPPOFEV1PPPPc , flt18ma ,  PEFRPPOFEV1PPPPc ,  99.933 ,  14.253 ,  557\n",
      "flt18maPEFRPPOFVCPPPPc , flt18ma ,  PEFRPPOFVCPPPPc ,  99.918 ,  16.26 ,  557\n"
     ]
    }
   ],
   "source": [
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n",
    "        mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma]\n",
    "PPclist = ['FEF75OFVCPPc', 'FEF75OPEFRPPc','FEV1OFVCPPc', 'FEV1OFEV3PPc','FEV1OFEV6PPc', 'PEFROFVCPPc', 'PEFROFEV6PPc', \n",
    "           'PEFROFEV1PPc', 'FEV3OFVCPPc', 'FEV6OFVCPPc', 'FEV05PPc','FEV1PPc', 'FVCPPc',\n",
    "           'PEFRPPc', 'FEV3PPc', 'FEV6PPc', 'MMEFPPc', 'FEF75PPc', 'EXPIRPPc',\n",
    "          'FEF75PPOFVCPPPPc','MMEFPPOFVCPPPPc','MMEFPPOPEFRPPPPc', 'PEFRPPOFEV1PPPPc','PEFRPPOFVCPPPPc']\n",
    "for df in ftoa:\n",
    " #   print (df.name)\n",
    "    for y in PPclist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "#        df2 =         df2 = {'dfnvarn': [dfnvarn], 'dfname': y.name, 'var': xx, \n",
    "#                             'intercept': intercept, 'b1': b1, 'b2': b2, 'b3': b3, 'r2':r2, 'std':std, 'count':count}                          \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now do same for cma (and later for best)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsppcma(df, dfa):  #calculate variable cma - the %predicted using caucasian/Mexican american predicteds \n",
    " #   from results ratio vn which is the caucasian/MA from results ratio caucasian/MA\n",
    "    vn = dfa.name + 'FEF75OFVC'\n",
    "    df['FEF75OFVCPPcma'] = 100 * df.FEF75OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEF75OPEFR'\n",
    "    df['FEF75OPEFRPPcma'] = 100 * df.FEF75OPEFR / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV1OFVC'\n",
    "    df['FEV1OFVCPPcma'] = 100 * df.FEV1OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV1OFEV3'\n",
    "    df['FEV1OFEV3PPcma']= 100 * df.FEV1OFEV3 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR  / 12))\n",
    "\n",
    "    vn = dfa.name + 'FEV05OFEV3'\n",
    "    df['FEV05OFEV3PPcma']= 100 * df.FEV05OFEV3 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR  / 12))\n",
    "    vn = dfa.name + 'FEV05OFVC'\n",
    "    df['FEV05OFVCPPcma']= 100 * df.FEV05OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR  / 12))\n",
    "\n",
    "    vn = dfa.name + 'FEV1OFEV6'\n",
    "    df['FEV1OFEV6PPcma']= 100 * df.FEV1OFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR  / 12))\n",
    "    vn = dfa.name + 'PEFROFVC'\n",
    "    df['PEFROFVCPPcma'] = 100 * df.PEFROFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'PEFROFEV6'\n",
    "    df['PEFROFEV6PPcma']= 100 * df.PEFROFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'PEFROFEV1'\n",
    "    df['PEFROFEV1PPcma'] = 100 * df.PEFROFEV1 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                        + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV3OFVC'\n",
    "    df['FEV3OFVCPPcma'] = 100 * df.FEV3OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV3OFEV6'\n",
    "    df['FEV3OFEV6PPcma'] = 100 * df.FEV3OFEV6 / (resultsratio.loc[vn, 'intercept'] \n",
    "                                      + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEV6OFVC'\n",
    "    df['FEV6OFVCPPcma'] = 100 * df.FEV6OFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "\n",
    "    vn = dfa.name + 'MMEFOFVC'\n",
    "    df['MMEFOFVCPPcma'] = 100 * df.MMEFOFVC / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'MMEFOPEFR'\n",
    "    df['MMEFOPEFRPPcma'] = 100 * df.MMEFOPEFR / (resultsratio.loc[vn, 'intercept'] \n",
    "                                       + resultsratio.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "\n",
    "    vn = dfa.name + 'MMEFPPOPEFRPP'\n",
    "    df['MMEFPPOPEFRPPPPcma'] = 100 * df.MMEFPPOPEFRPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'MMEFPPOFVCPP'\n",
    "    df['MMEFPPOFVCPPPPcma'] = 100 * df.MMEFPPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "\n",
    "    vn = dfa.name + 'PEFRPPOFVCPP'\n",
    "    df['PEFRPPOFVCPPPPcma'] = 100 * df.PEFRPPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'PEFRPPOFEV1PP'\n",
    "    df['PEFRPPOFEV1PPPPcma'] = 100 * df.PEFRPPOFEV1PP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "    vn = dfa.name + 'FEF75PPOFVCPP'\n",
    "    df['FEF75PPOFVCPPPPcma'] = 100 * df.FEF75PPOFVCPP / (resultsratioppopp.loc[vn, 'intercept'] \n",
    "                                      + resultsratioppopp.loc[vn, 'slope'] * (df.MXPAXTMR / 12))\n",
    "  # not working below for  'MMEFPPOFVCPPPPc', 'FEF75PPOFVCPPPPc'\n",
    "    vn = dfa.name + 'FEV05'\n",
    "    df['FEV05PPcma'] = 100 * df.FEV05 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FEV1'\n",
    "    df['FEV1PPcma'] = 100 * df.FEV1 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FVC'\n",
    "    df['FVCPPcma'] =  100 * df.FVC /  (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'PEFR'\n",
    "    df['PEFRPPcma'] = 100 * df.PEFR / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FEV3'\n",
    "    df['FEV3PPcma'] = 100 * df.FEV3 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FEV6'\n",
    "    df['FEV6PPcma'] = 100 * df.FEV6 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'MMEF'\n",
    "    df['MMEFPPcma'] = 100 * df.MMEF / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                 + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                 + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                 + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'FEF75'\n",
    "    df['FEF75PPcma'] = 100 * df.FEF75 / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                   + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                   + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                   + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )\n",
    "    vn = dfa.name + 'EXPIR'\n",
    "    df['EXPIRPPcma'] = 100 * df.EXPIR / (resultsnonratio.loc[vn, 'intercept'] \n",
    "                                   + resultsnonratio.loc[vn, 'b1'] * (df.MXPAXTMR / 12)  \n",
    "                                   + resultsnonratio.loc[vn, 'b2'] * (df.MXPAXTMR / 12)* (df.MXPAXTMR / 12) \n",
    "                                   + resultsnonratio.loc[vn, 'b3']* df.BMPHT * df.BMPHT )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:25: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:34: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:37: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:43: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:47: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:50: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:54: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:57: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:61: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:64: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:67: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:73: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:78: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:83: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:88: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:93: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:98: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:103: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:108: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:113: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "#framestoanalyze = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, \n",
    "#                   mlt20b, mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma, \n",
    "#                   mallcma, mallb, mallc, mallma, fallcma, fallb, fallc, fallma]\n",
    "dfa = m20overcma\n",
    "fta = [m20overb, m20overcma, m20overc, m20overma]\n",
    "for y in fta:\n",
    "    createvarsppcma(y,dfa)\n",
    "dfa = f18overcma\n",
    "fta = [f18overb, f18overcma, f18overc, f18overma]\n",
    "for y in fta:\n",
    "    createvarsppcma(y, dfa)\n",
    "dfa = mlt20cma\n",
    "fta = [mlt20b, mlt20cma, mlt20c, mlt20ma]\n",
    "for y in fta:\n",
    "    createvarsppcma(y, dfa)\n",
    "dfa = flt18cma\n",
    "fta = [flt18b, flt18cma, flt18c, flt18ma]\n",
    "for y in fta:\n",
    "    createvarsppcma(y, dfa)          \n",
    "          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, mean, std, count]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "m20overbEXPIRPPcma , m20overb ,  EXPIRPPcma ,  92.856 ,  32.849 ,  477\n",
      "m20overbFEF75PPcma , m20overb ,  FEF75PPcma ,  91.463 ,  39.329 ,  477\n",
      "m20overbFEV05PPcma , m20overb ,  FEV05PPcma ,  87.174 ,  14.301 ,  477\n",
      "m20overbFEV1PPcma , m20overb ,  FEV1PPcma ,  85.076 ,  12.609 ,  477\n",
      "m20overbFEV3PPcma , m20overb ,  FEV3PPcma ,  83.891 ,  11.658 ,  477\n",
      "m20overbFEV6PPcma , m20overb ,  FEV6PPcma ,  83.764 ,  11.63 ,  477\n",
      "m20overbFVCPPcma , m20overb ,  FVCPPcma ,  83.616 ,  11.774 ,  477\n",
      "m20overbMMEFPPcma , m20overb ,  MMEFPPcma ,  90.841 ,  26.942 ,  477\n",
      "m20overbPEFRPPcma , m20overb ,  PEFRPPcma ,  92.775 ,  18.387 ,  477\n",
      "m20overbFEF75OFVCPPcma , m20overb ,  FEF75OFVCPPcma ,  107.349 ,  50.19 ,  477\n",
      "m20overbFEF75OPEFRPPcma , m20overb ,  FEF75OPEFRPPcma ,  97.909 ,  50.59 ,  477\n",
      "m20overbFEV05OFEV3PPcma , m20overb ,  FEV05OFEV3PPcma ,  102.775 ,  10.692 ,  477\n",
      "m20overbFEV05OFVCPPcma , m20overb ,  FEV05OFVCPPcma ,  103.146 ,  12.433 ,  477\n",
      "m20overbFEV1OFVCPPcma , m20overb ,  FEV1OFVCPPcma ,  101.253 ,  8.071 ,  477\n",
      "m20overbFEV1OFEV3PPcma , m20overb ,  FEV1OFEV3PPcma ,  100.927 ,  5.855 ,  477\n",
      "m20overbFEV1OFEV6PPcma , m20overb ,  FEV1OFEV6PPcma ,  101.047 ,  7.268 ,  477\n",
      "m20overbFEV3OFEV6PPcma , m20overb ,  FEV3OFEV6PPcma ,  100.096 ,  2.078 ,  477\n",
      "m20overbFEV3OFEV6PPcma , m20overb ,  FEV3OFEV6PPcma ,  100.096 ,  2.078 ,  477\n",
      "m20overbFEV6OFVCPPcma , m20overb ,  FEV6OFVCPPcma ,  100.202 ,  1.886 ,  477\n",
      "m20overbMMEFOFVCPPcma , m20overb ,  MMEFOFVCPPcma ,  106.234 ,  32.042 ,  477\n",
      "m20overbMMEFOPEFRPPcma , m20overb ,  MMEFOPEFRPPcma ,  96.766 ,  25.571 ,  477\n",
      "m20overbPEFROFEV1PPcma , m20overb ,  PEFROFEV1PPcma ,  108.282 ,  15.754 ,  477\n",
      "m20overbPEFROFEV6PPcma , m20overb ,  PEFROFEV6PPcma ,  109.585 ,  19.365 ,  477\n",
      "m20overbPEFROFVCPPcma , m20overb ,  PEFROFVCPPcma ,  109.84 ,  19.802 ,  477\n",
      "m20overbFEF75PPOFVCPPPPcma , m20overb ,  FEF75PPOFVCPPPPcma ,  100.581 ,  46.124 ,  477\n",
      "m20overbMMEFPPOFVCPPPPcma , m20overb ,  MMEFPPOFVCPPPPcma ,  100.07 ,  29.051 ,  477\n",
      "m20overbMMEFPPOPEFRPPPPcma , m20overb ,  MMEFPPOPEFRPPPPcma ,  100.189 ,  25.481 ,  477\n",
      "m20overbPEFRPPOFEV1PPPPcma , m20overb ,  PEFRPPOFEV1PPPPcma ,  99.802 ,  14.43 ,  477\n",
      "m20overbPEFRPPOFVCPPPPcma , m20overb ,  PEFRPPOFVCPPPPcma ,  100.017 ,  17.887 ,  477\n",
      "m20overcmaEXPIRPPcma , m20overcma ,  EXPIRPPcma ,  100.012 ,  32.151 ,  1130\n",
      "m20overcmaFEF75PPcma , m20overcma ,  FEF75PPcma ,  100.492 ,  50.461 ,  1130\n",
      "m20overcmaFEV05PPcma , m20overcma ,  FEV05PPcma ,  100.026 ,  14.116 ,  1130\n",
      "m20overcmaFEV1PPcma , m20overcma ,  FEV1PPcma ,  100.053 ,  12.917 ,  1130\n",
      "m20overcmaFEV3PPcma , m20overcma ,  FEV3PPcma ,  100.062 ,  12.297 ,  1130\n",
      "m20overcmaFEV6PPcma , m20overcma ,  FEV6PPcma ,  100.052 ,  12.204 ,  1130\n",
      "m20overcmaFVCPPcma , m20overcma ,  FVCPPcma ,  100.035 ,  12.267 ,  1130\n",
      "m20overcmaMMEFPPcma , m20overcma ,  MMEFPPcma ,  100.212 ,  29.947 ,  1130\n",
      "m20overcmaPEFRPPcma , m20overcma ,  PEFRPPcma ,  100.032 ,  17.304 ,  1130\n",
      "m20overcmaFEF75OFVCPPcma , m20overcma ,  FEF75OFVCPPcma ,  101.653 ,  61.762 ,  1130\n",
      "m20overcmaFEF75OPEFRPPcma , m20overcma ,  FEF75OPEFRPPcma ,  102.158 ,  63.267 ,  1130\n",
      "m20overcmaFEV05OFEV3PPcma , m20overcma ,  FEV05OFEV3PPcma ,  100.0 ,  9.524 ,  1130\n",
      "m20overcmaFEV05OFVCPPcma , m20overcma ,  FEV05OFVCPPcma ,  99.999 ,  11.239 ,  1130\n",
      "m20overcmaFEV1OFVCPPcma , m20overcma ,  FEV1OFVCPPcma ,  100.0 ,  7.534 ,  1130\n",
      "m20overcmaFEV1OFEV3PPcma , m20overcma ,  FEV1OFEV3PPcma ,  100.0 ,  5.131 ,  1130\n",
      "m20overcmaFEV1OFEV6PPcma , m20overcma ,  FEV1OFEV6PPcma ,  100.0 ,  6.466 ,  1130\n",
      "m20overcmaFEV3OFEV6PPcma , m20overcma ,  FEV3OFEV6PPcma ,  100.0 ,  1.979 ,  1130\n",
      "m20overcmaFEV3OFEV6PPcma , m20overcma ,  FEV3OFEV6PPcma ,  100.0 ,  1.979 ,  1130\n",
      "m20overcmaFEV6OFVCPPcma , m20overcma ,  FEV6OFVCPPcma ,  100.0 ,  2.194 ,  1130\n",
      "m20overcmaMMEFOFVCPPcma , m20overcma ,  MMEFOFVCPPcma ,  99.991 ,  31.458 ,  1130\n",
      "m20overcmaMMEFOPEFRPPcma , m20overcma ,  MMEFOPEFRPPcma ,  100.055 ,  27.358 ,  1130\n",
      "m20overcmaPEFROFEV1PPcma , m20overcma ,  PEFROFEV1PPcma ,  99.994 ,  13.93 ,  1130\n",
      "m20overcmaPEFROFEV6PPcma , m20overcma ,  PEFROFEV6PPcma ,  99.999 ,  16.5 ,  1130\n",
      "m20overcmaPEFROFVCPPcma , m20overcma ,  PEFROFVCPPcma ,  100.0 ,  16.951 ,  1130\n",
      "m20overcmaFEF75PPOFVCPPPPcma , m20overcma ,  FEF75PPOFVCPPPPcma ,  100.001 ,  54.209 ,  1130\n",
      "m20overcmaMMEFPPOFVCPPPPcma , m20overcma ,  MMEFPPOFVCPPPPcma ,  100.0 ,  31.433 ,  1130\n",
      "m20overcmaMMEFPPOPEFRPPPPcma , m20overcma ,  MMEFPPOPEFRPPPPcma ,  100.0 ,  27.0 ,  1130\n",
      "m20overcmaPEFRPPOFEV1PPPPcma , m20overcma ,  PEFRPPOFEV1PPPPcma ,  100.0 ,  13.72 ,  1130\n",
      "m20overcmaPEFRPPOFVCPPPPcma , m20overcma ,  PEFRPPOFVCPPPPcma ,  100.0 ,  16.675 ,  1130\n",
      "m20overcEXPIRPPcma , m20overc ,  EXPIRPPcma ,  100.721 ,  33.216 ,  528\n",
      "m20overcFEF75PPcma , m20overc ,  FEF75PPcma ,  97.691 ,  44.965 ,  528\n",
      "m20overcFEV05PPcma , m20overc ,  FEV05PPcma ,  99.448 ,  15.164 ,  528\n",
      "m20overcFEV1PPcma , m20overc ,  FEV1PPcma ,  99.862 ,  13.929 ,  528\n",
      "m20overcFEV3PPcma , m20overc ,  FEV3PPcma ,  100.268 ,  13.114 ,  528\n",
      "m20overcFEV6PPcma , m20overc ,  FEV6PPcma ,  100.259 ,  12.859 ,  528\n",
      "m20overcFVCPPcma , m20overc ,  FVCPPcma ,  100.233 ,  12.905 ,  528\n",
      "m20overcMMEFPPcma , m20overc ,  MMEFPPcma ,  98.582 ,  32.214 ,  528\n",
      "m20overcPEFRPPcma , m20overc ,  PEFRPPcma ,  99.586 ,  17.388 ,  528\n",
      "m20overcFEF75OFVCPPcma , m20overc ,  FEF75OFVCPPcma ,  98.89 ,  56.457 ,  528\n",
      "m20overcFEF75OPEFRPPcma , m20overc ,  FEF75OPEFRPPcma ,  101.802 ,  65.353 ,  528\n",
      "m20overcFEV05OFEV3PPcma , m20overc ,  FEV05OFEV3PPcma ,  97.826 ,  9.252 ,  528\n",
      "m20overcFEV05OFVCPPcma , m20overc ,  FEV05OFVCPPcma ,  97.766 ,  11.196 ,  528\n",
      "m20overcFEV1OFVCPPcma , m20overc ,  FEV1OFVCPPcma ,  98.968 ,  7.915 ,  528\n",
      "m20overcFEV1OFEV3PPcma , m20overc ,  FEV1OFEV3PPcma ,  99.006 ,  5.17 ,  528\n",
      "m20overcFEV1OFEV6PPcma , m20overc ,  FEV1OFEV6PPcma ,  98.947 ,  6.621 ,  528\n",
      "m20overcFEV3OFEV6PPcma , m20overc ,  FEV3OFEV6PPcma ,  99.946 ,  2.175 ,  528\n",
      "m20overcFEV3OFEV6PPcma , m20overc ,  FEV3OFEV6PPcma ,  99.946 ,  2.175 ,  528\n",
      "m20overcFEV6OFVCPPcma , m20overc ,  FEV6OFVCPPcma ,  100.022 ,  2.566 ,  528\n",
      "m20overcMMEFOFVCPPcma , m20overc ,  MMEFOFVCPPcma ,  94.912 ,  31.916 ,  528\n",
      "m20overcMMEFOPEFRPPcma , m20overc ,  MMEFOPEFRPPcma ,  96.743 ,  27.633 ,  528\n",
      "m20overcPEFROFEV1PPcma , m20overc ,  PEFROFEV1PPcma ,  98.976 ,  12.637 ,  528\n",
      "m20overcPEFROFEV6PPcma , m20overc ,  PEFROFEV6PPcma ,  97.892 ,  15.293 ,  528\n",
      "m20overcPEFROFVCPPcma , m20overc ,  PEFROFVCPPcma ,  97.896 ,  15.868 ,  528\n",
      "m20overcFEF75PPOFVCPPPPcma , m20overc ,  FEF75PPOFVCPPPPcma ,  99.026 ,  48.516 ,  528\n",
      "m20overcMMEFPPOFVCPPPPcma , m20overc ,  MMEFPPOFVCPPPPcma ,  99.661 ,  33.379 ,  528\n",
      "m20overcMMEFPPOPEFRPPPPcma , m20overc ,  MMEFPPOPEFRPPPPcma ,  99.326 ,  27.932 ,  528\n",
      "m20overcPEFRPPOFEV1PPPPcma , m20overc ,  PEFRPPOFEV1PPPPcma ,  100.037 ,  12.472 ,  528\n",
      "m20overcPEFRPPOFVCPPPPcma , m20overc ,  PEFRPPOFVCPPPPcma ,  99.932 ,  15.773 ,  528\n",
      "m20overmaEXPIRPPcma , m20overma ,  EXPIRPPcma ,  99.39 ,  31.203 ,  602\n",
      "m20overmaFEF75PPcma , m20overma ,  FEF75PPcma ,  102.949 ,  54.75 ,  602\n",
      "m20overmaFEV05PPcma , m20overma ,  FEV05PPcma ,  100.533 ,  13.12 ,  602\n",
      "m20overmaFEV1PPcma , m20overma ,  FEV1PPcma ,  100.22 ,  11.968 ,  602\n",
      "m20overmaFEV3PPcma , m20overma ,  FEV3PPcma ,  99.88 ,  11.541 ,  602\n",
      "m20overmaFEV6PPcma , m20overma ,  FEV6PPcma ,  99.87 ,  11.607 ,  602\n",
      "m20overmaFVCPPcma , m20overma ,  FVCPPcma ,  99.861 ,  11.687 ,  602\n",
      "m20overmaMMEFPPcma , m20overma ,  MMEFPPcma ,  101.642 ,  27.755 ,  602\n",
      "m20overmaPEFRPPcma , m20overma ,  PEFRPPcma ,  100.423 ,  17.235 ,  602\n",
      "m20overmaFEF75OFVCPPcma , m20overma ,  FEF75OFVCPPcma ,  104.077 ,  66.018 ,  602\n",
      "m20overmaFEF75OPEFRPPcma , m20overma ,  FEF75OPEFRPPcma ,  102.47 ,  61.433 ,  602\n",
      "m20overmaFEV05OFEV3PPcma , m20overma ,  FEV05OFEV3PPcma ,  101.907 ,  9.356 ,  602\n",
      "m20overmaFEV05OFVCPPcma , m20overma ,  FEV05OFVCPPcma ,  101.958 ,  10.916 ,  602\n",
      "m20overmaFEV1OFVCPPcma , m20overma ,  FEV1OFVCPPcma ,  100.905 ,  7.066 ,  602\n",
      "m20overmaFEV1OFEV3PPcma , m20overma ,  FEV1OFEV3PPcma ,  100.872 ,  4.938 ,  602\n",
      "m20overmaFEV1OFEV6PPcma , m20overma ,  FEV1OFEV6PPcma ,  100.923 ,  6.187 ,  602\n",
      "m20overmaFEV3OFEV6PPcma , m20overma ,  FEV3OFEV6PPcma ,  100.048 ,  1.789 ,  602\n",
      "m20overmaFEV3OFEV6PPcma , m20overma ,  FEV3OFEV6PPcma ,  100.048 ,  1.789 ,  602\n",
      "m20overmaFEV6OFVCPPcma , m20overma ,  FEV6OFVCPPcma ,  99.98 ,  1.809 ,  602\n",
      "m20overmaMMEFOFVCPPcma , m20overma ,  MMEFOFVCPPcma ,  104.446 ,  30.386 ,  602\n",
      "m20overmaMMEFOPEFRPPcma , m20overma ,  MMEFOPEFRPPcma ,  102.961 ,  26.803 ,  602\n",
      "m20overmaPEFROFEV1PPcma , m20overma ,  PEFROFEV1PPcma ,  100.887 ,  14.926 ,  602\n",
      "m20overmaPEFROFEV6PPcma , m20overma ,  PEFROFEV6PPcma ,  101.847 ,  17.293 ,  602\n",
      "m20overmaPEFROFVCPPcma , m20overma ,  PEFROFVCPPcma ,  101.845 ,  17.654 ,  602\n",
      "m20overmaFEF75PPOFVCPPPPcma , m20overma ,  FEF75PPOFVCPPPPcma ,  100.469 ,  52.25 ,  602\n",
      "m20overmaMMEFPPOFVCPPPPcma , m20overma ,  MMEFPPOFVCPPPPcma ,  100.335 ,  29.439 ,  602\n",
      "m20overmaMMEFPPOPEFRPPPPcma , m20overma ,  MMEFPPOPEFRPPPPcma ,  100.64 ,  26.077 ,  602\n",
      "m20overmaPEFRPPOFEV1PPPPcma , m20overma ,  PEFRPPOFEV1PPPPcma ,  99.987 ,  14.64 ,  602\n",
      "m20overmaPEFRPPOFVCPPPPcma , m20overma ,  PEFRPPOFVCPPPPcma ,  100.066 ,  17.231 ,  602\n",
      "f18overbEXPIRPPcma , f18overb ,  EXPIRPPcma ,  98.202 ,  40.863 ,  957\n",
      "f18overbFEF75PPcma , f18overb ,  FEF75PPcma ,  87.676 ,  45.742 ,  957\n",
      "f18overbFEV05PPcma , f18overb ,  FEV05PPcma ,  88.064 ,  14.584 ,  957\n",
      "f18overbFEV1PPcma , f18overb ,  FEV1PPcma ,  85.558 ,  12.911 ,  957\n",
      "f18overbFEV3PPcma , f18overb ,  FEV3PPcma ,  84.425 ,  12.42 ,  957\n",
      "f18overbFEV6PPcma , f18overb ,  FEV6PPcma ,  84.486 ,  12.358 ,  957\n",
      "f18overbFVCPPcma , f18overb ,  FVCPPcma ,  84.569 ,  12.48 ,  957\n",
      "f18overbMMEFPPcma , f18overb ,  MMEFPPcma ,  90.722 ,  29.787 ,  957\n",
      "f18overbPEFRPPcma , f18overb ,  PEFRPPcma ,  96.372 ,  19.89 ,  957\n",
      "f18overbFEF75OFVCPPcma , f18overb ,  FEF75OFVCPPcma ,  103.218 ,  65.316 ,  957\n",
      "f18overbFEF75OPEFRPPcma , f18overb ,  FEF75OPEFRPPcma ,  92.098 ,  59.649 ,  957\n",
      "f18overbFEV05OFEV3PPcma , f18overb ,  FEV05OFEV3PPcma ,  103.105 ,  9.937 ,  957\n",
      "f18overbFEV05OFVCPPcma , f18overb ,  FEV05OFVCPPcma ,  102.947 ,  11.625 ,  957\n",
      "f18overbFEV1OFVCPPcma , f18overb ,  FEV1OFVCPPcma ,  100.732 ,  7.652 ,  957\n",
      "f18overbFEV1OFEV3PPcma , f18overb ,  FEV1OFEV3PPcma ,  100.906 ,  5.211 ,  957\n",
      "f18overbFEV1OFEV6PPcma , f18overb ,  FEV1OFEV6PPcma ,  100.807 ,  6.649 ,  957\n",
      "f18overbFEV3OFEV6PPcma , f18overb ,  FEV3OFEV6PPcma ,  99.89 ,  2.292 ,  957\n",
      "f18overbFEV3OFEV6PPcma , f18overb ,  FEV3OFEV6PPcma ,  99.89 ,  2.292 ,  957\n",
      "f18overbFEV6OFVCPPcma , f18overb ,  FEV6OFVCPPcma ,  99.911 ,  2.094 ,  957\n",
      "f18overbMMEFOFVCPPcma , f18overb ,  MMEFOFVCPPcma ,  104.528 ,  35.108 ,  957\n",
      "f18overbMMEFOPEFRPPcma , f18overb ,  MMEFOPEFRPPcma ,  92.86 ,  26.995 ,  957\n",
      "f18overbPEFROFEV1PPcma , f18overb ,  PEFROFEV1PPcma ,  111.599 ,  17.953 ,  957\n",
      "f18overbPEFROFEV6PPcma , f18overb ,  PEFROFEV6PPcma ,  112.51 ,  20.605 ,  957\n",
      "f18overbPEFROFVCPPcma , f18overb ,  PEFROFVCPPcma ,  112.454 ,  21.052 ,  957\n",
      "f18overbFEF75PPOFVCPPPPcma , f18overb ,  FEF75PPOFVCPPPPcma ,  100.295 ,  54.798 ,  957\n",
      "f18overbMMEFPPOFVCPPPPcma , f18overb ,  MMEFPPOFVCPPPPcma ,  100.163 ,  32.984 ,  957\n",
      "f18overbMMEFPPOPEFRPPPPcma , f18overb ,  MMEFPPOPEFRPPPPcma ,  100.127 ,  28.298 ,  957\n",
      "f18overbPEFRPPOFEV1PPPPcma , f18overb ,  PEFRPPOFEV1PPPPcma ,  99.857 ,  15.657 ,  957\n",
      "f18overbPEFRPPOFVCPPPPcma , f18overb ,  PEFRPPOFVCPPPPcma ,  99.919 ,  18.303 ,  957\n",
      "f18overcmaEXPIRPPcma , f18overcma ,  EXPIRPPcma ,  100.073 ,  36.501 ,  2113\n",
      "f18overcmaFEF75PPcma , f18overcma ,  FEF75PPcma ,  100.634 ,  51.17 ,  2113\n",
      "f18overcmaFEV05PPcma , f18overcma ,  FEV05PPcma ,  100.05 ,  14.653 ,  2113\n",
      "f18overcmaFEV1PPcma , f18overcma ,  FEV1PPcma ,  100.079 ,  13.69 ,  2113\n",
      "f18overcmaFEV3PPcma , f18overcma ,  FEV3PPcma ,  100.085 ,  13.319 ,  2113\n",
      "f18overcmaFEV6PPcma , f18overcma ,  FEV6PPcma ,  100.065 ,  13.301 ,  2113\n",
      "f18overcmaFVCPPcma , f18overcma ,  FVCPPcma ,  100.041 ,  13.411 ,  2113\n",
      "f18overcmaMMEFPPcma , f18overcma ,  MMEFPPcma ,  100.3 ,  31.094 ,  2113\n",
      "f18overcmaPEFRPPcma , f18overcma ,  PEFRPPcma ,  100.031 ,  18.64 ,  2113\n",
      "f18overcmaFEF75OFVCPPcma , f18overcma ,  FEF75OFVCPPcma ,  102.378 ,  68.357 ,  2113\n",
      "f18overcmaFEF75OPEFRPPcma , f18overcma ,  FEF75OPEFRPPcma ,  103.207 ,  65.59 ,  2113\n",
      "f18overcmaFEV05OFEV3PPcma , f18overcma ,  FEV05OFEV3PPcma ,  100.0 ,  9.61 ,  2113\n",
      "f18overcmaFEV05OFVCPPcma , f18overcma ,  FEV05OFVCPPcma ,  99.999 ,  11.265 ,  2113\n",
      "f18overcmaFEV1OFVCPPcma , f18overcma ,  FEV1OFVCPPcma ,  100.001 ,  7.64 ,  2113\n",
      "f18overcmaFEV1OFEV3PPcma , f18overcma ,  FEV1OFEV3PPcma ,  100.0 ,  5.179 ,  2113\n",
      "f18overcmaFEV1OFEV6PPcma , f18overcma ,  FEV1OFEV6PPcma ,  100.0 ,  6.517 ,  2113\n",
      "f18overcmaFEV3OFEV6PPcma , f18overcma ,  FEV3OFEV6PPcma ,  100.0 ,  2.077 ,  2113\n",
      "f18overcmaFEV3OFEV6PPcma , f18overcma ,  FEV3OFEV6PPcma ,  100.0 ,  2.077 ,  2113\n",
      "f18overcmaFEV6OFVCPPcma , f18overcma ,  FEV6OFVCPPcma ,  100.0 ,  2.271 ,  2113\n",
      "f18overcmaMMEFOFVCPPcma , f18overcma ,  MMEFOFVCPPcma ,  99.993 ,  33.8 ,  2113\n",
      "f18overcmaMMEFOPEFRPPcma , f18overcma ,  MMEFOPEFRPPcma ,  100.053 ,  28.831 ,  2113\n",
      "f18overcmaPEFROFEV1PPcma , f18overcma ,  PEFROFEV1PPcma ,  99.994 ,  15.522 ,  2113\n",
      "f18overcmaPEFROFEV6PPcma , f18overcma ,  PEFROFEV6PPcma ,  99.999 ,  17.84 ,  2113\n",
      "f18overcmaPEFROFVCPPcma , f18overcma ,  PEFROFVCPPcma ,  100.0 ,  18.227 ,  2113\n",
      "f18overcmaFEF75PPOFVCPPPPcma , f18overcma ,  FEF75PPOFVCPPPPcma ,  100.001 ,  61.567 ,  2113\n",
      "f18overcmaMMEFPPOFVCPPPPcma , f18overcma ,  MMEFPPOFVCPPPPcma ,  100.0 ,  33.35 ,  2113\n",
      "f18overcmaMMEFPPOPEFRPPPPcma , f18overcma ,  MMEFPPOPEFRPPPPcma ,  100.0 ,  28.504 ,  2113\n",
      "f18overcmaPEFRPPOFEV1PPPPcma , f18overcma ,  PEFRPPOFEV1PPPPcma ,  100.0 ,  15.366 ,  2113\n",
      "f18overcmaPEFRPPOFVCPPPPcma , f18overcma ,  PEFRPPOFVCPPPPcma ,  100.0 ,  17.967 ,  2113\n",
      "f18overcEXPIRPPcma , f18overc ,  EXPIRPPcma ,  98.264 ,  35.761 ,  1108\n",
      "f18overcFEF75PPcma , f18overc ,  FEF75PPcma ,  100.003 ,  53.202 ,  1108\n",
      "f18overcFEV05PPcma , f18overc ,  FEV05PPcma ,  99.944 ,  15.287 ,  1108\n",
      "f18overcFEV1PPcma , f18overc ,  FEV1PPcma ,  100.288 ,  14.519 ,  1108\n",
      "f18overcFEV3PPcma , f18overc ,  FEV3PPcma ,  100.507 ,  14.158 ,  1108\n",
      "f18overcFEV6PPcma , f18overc ,  FEV6PPcma ,  100.416 ,  14.111 ,  1108\n",
      "f18overcFVCPPcma , f18overc ,  FVCPPcma ,  100.253 ,  14.21 ,  1108\n",
      "f18overcMMEFPPcma , f18overc ,  MMEFPPcma ,  99.731 ,  33.507 ,  1108\n",
      "f18overcPEFRPPcma , f18overc ,  PEFRPPcma ,  100.624 ,  18.612 ,  1108\n",
      "f18overcFEF75OFVCPPcma , f18overc ,  FEF75OFVCPPcma ,  102.921 ,  73.91 ,  1108\n",
      "f18overcFEF75OPEFRPPcma , f18overc ,  FEF75OPEFRPPcma ,  104.808 ,  73.394 ,  1108\n",
      "f18overcFEV05OFEV3PPcma , f18overc ,  FEV05OFEV3PPcma ,  98.594 ,  9.127 ,  1108\n",
      "f18overcFEV05OFVCPPcma , f18overc ,  FEV05OFVCPPcma ,  98.742 ,  11.151 ,  1108\n",
      "f18overcFEV1OFVCPPcma , f18overc ,  FEV1OFVCPPcma ,  99.623 ,  7.987 ,  1108\n",
      "f18overcFEV1OFEV3PPcma , f18overc ,  FEV1OFEV3PPcma ,  99.456 ,  5.101 ,  1108\n",
      "f18overcFEV1OFEV6PPcma , f18overc ,  FEV1OFEV6PPcma ,  99.506 ,  6.593 ,  1108\n",
      "f18overcFEV3OFEV6PPcma , f18overc ,  FEV3OFEV6PPcma ,  100.051 ,  2.234 ,  1108\n",
      "f18overcFEV3OFEV6PPcma , f18overc ,  FEV3OFEV6PPcma ,  100.051 ,  2.234 ,  1108\n",
      "f18overcFEV6OFVCPPcma , f18overc ,  FEV6OFVCPPcma ,  100.112 ,  2.607 ,  1108\n",
      "f18overcMMEFOFVCPPcma , f18overc ,  MMEFOFVCPPcma ,  96.562 ,  34.668 ,  1108\n",
      "f18overcMMEFOPEFRPPcma , f18overc ,  MMEFOPEFRPPcma ,  97.182 ,  30.34 ,  1108\n",
      "f18overcPEFROFEV1PPcma , f18overc ,  PEFROFEV1PPcma ,  99.76 ,  14.845 ,  1108\n",
      "f18overcPEFROFEV6PPcma , f18overc ,  PEFROFEV6PPcma ,  99.177 ,  17.0 ,  1108\n",
      "f18overcPEFROFVCPPcma , f18overc ,  PEFROFVCPPcma ,  99.282 ,  17.539 ,  1108\n",
      "f18overcFEF75PPOFVCPPPPcma , f18overc ,  FEF75PPOFVCPPPPcma ,  99.298 ,  63.131 ,  1108\n",
      "f18overcMMEFPPOFVCPPPPcma , f18overc ,  MMEFPPOFVCPPPPcma ,  99.651 ,  35.023 ,  1108\n",
      "f18overcMMEFPPOPEFRPPPPcma , f18overc ,  MMEFPPOPEFRPPPPcma ,  99.398 ,  30.326 ,  1108\n",
      "f18overcPEFRPPOFEV1PPPPcma , f18overc ,  PEFRPPOFEV1PPPPcma ,  100.075 ,  14.665 ,  1108\n",
      "f18overcPEFRPPOFVCPPPPcma , f18overc ,  PEFRPPOFVCPPPPcma ,  99.985 ,  17.319 ,  1108\n",
      "f18overmaEXPIRPPcma , f18overma ,  EXPIRPPcma ,  102.067 ,  37.216 ,  1005\n",
      "f18overmaFEF75PPcma , f18overma ,  FEF75PPcma ,  101.331 ,  48.848 ,  1005\n",
      "f18overmaFEV05PPcma , f18overma ,  FEV05PPcma ,  100.167 ,  13.928 ,  1005\n",
      "f18overmaFEV1PPcma , f18overma ,  FEV1PPcma ,  99.849 ,  12.716 ,  1005\n",
      "f18overmaFEV3PPcma , f18overma ,  FEV3PPcma ,  99.62 ,  12.318 ,  1005\n",
      "f18overmaFEV6PPcma , f18overma ,  FEV6PPcma ,  99.677 ,  12.342 ,  1005\n",
      "f18overmaFVCPPcma , f18overma ,  FVCPPcma ,  99.806 ,  12.475 ,  1005\n",
      "f18overmaMMEFPPcma , f18overma ,  MMEFPPcma ,  100.927 ,  28.197 ,  1005\n",
      "f18overmaPEFRPPcma , f18overma ,  PEFRPPcma ,  99.378 ,  18.658 ,  1005\n",
      "f18overmaFEF75OFVCPPcma , f18overma ,  FEF75OFVCPPcma ,  101.779 ,  61.688 ,  1005\n",
      "f18overmaFEF75OPEFRPPcma , f18overma ,  FEF75OPEFRPPcma ,  101.442 ,  55.719 ,  1005\n",
      "f18overmaFEV05OFEV3PPcma , f18overma ,  FEV05OFEV3PPcma ,  101.551 ,  9.892 ,  1005\n",
      "f18overmaFEV05OFVCPPcma , f18overma ,  FEV05OFVCPPcma ,  101.385 ,  11.233 ,  1005\n",
      "f18overmaFEV1OFVCPPcma , f18overma ,  FEV1OFVCPPcma ,  100.419 ,  7.218 ,  1005\n",
      "f18overmaFEV1OFEV3PPcma , f18overma ,  FEV1OFEV3PPcma ,  100.6 ,  5.201 ,  1005\n",
      "f18overmaFEV1OFEV6PPcma , f18overma ,  FEV1OFEV6PPcma ,  100.545 ,  6.392 ,  1005\n",
      "f18overmaFEV3OFEV6PPcma , f18overma ,  FEV3OFEV6PPcma ,  99.944 ,  1.889 ,  1005\n",
      "f18overmaFEV3OFEV6PPcma , f18overma ,  FEV3OFEV6PPcma ,  99.944 ,  1.889 ,  1005\n",
      "f18overmaFEV6OFVCPPcma , f18overma ,  FEV6OFVCPPcma ,  99.876 ,  1.824 ,  1005\n",
      "f18overmaMMEFOFVCPPcma , f18overma ,  MMEFOFVCPPcma ,  103.776 ,  32.416 ,  1005\n",
      "f18overmaMMEFOPEFRPPcma , f18overma ,  MMEFOPEFRPPcma ,  103.218 ,  26.73 ,  1005\n",
      "f18overmaPEFROFEV1PPcma , f18overma ,  PEFROFEV1PPcma ,  100.251 ,  16.24 ,  1005\n",
      "f18overmaPEFROFEV6PPcma , f18overma ,  PEFROFEV6PPcma ,  100.905 ,  18.688 ,  1005\n",
      "f18overmaPEFROFVCPPcma , f18overma ,  PEFROFVCPPcma ,  100.791 ,  18.935 ,  1005\n",
      "f18overmaFEF75PPOFVCPPPPcma , f18overma ,  FEF75PPOFVCPPPPcma ,  100.586 ,  59.573 ,  1005\n",
      "f18overmaMMEFPPOFVCPPPPcma , f18overma ,  MMEFPPOFVCPPPPcma ,  100.789 ,  37.269 ,  1005\n",
      "f18overmaMMEFPPOPEFRPPPPcma , f18overma ,  MMEFPPOPEFRPPPPcma ,  100.83 ,  27.681 ,  1005\n",
      "f18overmaPEFRPPOFEV1PPPPcma , f18overma ,  PEFRPPOFEV1PPPPcma ,  99.946 ,  16.097 ,  1005\n",
      "f18overmaPEFRPPOFVCPPPPcma , f18overma ,  PEFRPPOFVCPPPPcma ,  100.045 ,  18.722 ,  1005\n",
      "mlt20bEXPIRPPcma , mlt20b ,  EXPIRPPcma ,  95.177 ,  39.371 ,  599\n",
      "mlt20bFEF75PPcma , mlt20b ,  FEF75PPcma ,  82.0 ,  32.29 ,  599\n",
      "mlt20bFEV05PPcma , mlt20b ,  FEV05PPcma ,  87.025 ,  12.701 ,  599\n",
      "mlt20bFEV1PPcma , mlt20b ,  FEV1PPcma ,  84.077 ,  11.205 ,  599\n",
      "mlt20bFEV3PPcma , mlt20b ,  FEV3PPcma ,  83.407 ,  10.737 ,  599\n",
      "mlt20bFEV6PPcma , mlt20b ,  FEV6PPcma ,  83.626 ,  10.783 ,  599\n",
      "mlt20bFVCPPcma , mlt20b ,  FVCPPcma ,  83.691 ,  10.808 ,  599\n",
      "mlt20bMMEFPPcma , mlt20b ,  MMEFPPcma ,  87.303 ,  24.272 ,  599\n",
      "mlt20bPEFRPPcma , mlt20b ,  PEFRPPcma ,  94.57 ,  16.426 ,  599\n",
      "mlt20bFEF75OFVCPPcma , mlt20b ,  FEF75OFVCPPcma ,  98.392 ,  39.886 ,  599\n",
      "mlt20bFEF75OPEFRPPcma , mlt20b ,  FEF75OPEFRPPcma ,  86.777 ,  31.053 ,  599\n",
      "mlt20bFEV05OFEV3PPcma , mlt20b ,  FEV05OFEV3PPcma ,  103.804 ,  10.58 ,  599\n",
      "mlt20bFEV05OFVCPPcma , mlt20b ,  FEV05OFVCPPcma ,  103.53 ,  11.527 ,  599\n",
      "mlt20bFEV1OFVCPPcma , mlt20b ,  FEV1OFVCPPcma ,  100.398 ,  7.262 ,  599\n",
      "mlt20bFEV1OFEV3PPcma , mlt20b ,  FEV1OFEV3PPcma ,  100.677 ,  6.059 ,  599\n",
      "mlt20bFEV1OFEV6PPcma , mlt20b ,  FEV1OFEV6PPcma ,  100.46 ,  7.07 ,  599\n",
      "mlt20bFEV3OFEV6PPcma , mlt20b ,  FEV3OFEV6PPcma ,  99.769 ,  1.711 ,  599\n",
      "mlt20bFEV3OFEV6PPcma , mlt20b ,  FEV3OFEV6PPcma ,  99.769 ,  1.711 ,  599\n",
      "mlt20bFEV6OFVCPPcma , mlt20b ,  FEV6OFVCPPcma ,  99.933 ,  0.624 ,  599\n",
      "mlt20bMMEFOFVCPPcma , mlt20b ,  MMEFOFVCPPcma ,  103.819 ,  29.137 ,  599\n",
      "mlt20bMMEFOPEFRPPcma , mlt20b ,  MMEFOPEFRPPcma ,  92.006 ,  19.549 ,  599\n",
      "mlt20bPEFROFEV1PPcma , mlt20b ,  PEFROFEV1PPcma ,  111.769 ,  14.182 ,  599\n",
      "mlt20bPEFROFEV6PPcma , mlt20b ,  PEFROFEV6PPcma ,  112.372 ,  18.124 ,  599\n",
      "mlt20bPEFROFVCPPcma , mlt20b ,  PEFROFVCPPcma ,  112.311 ,  18.243 ,  599\n",
      "mlt20bFEF75PPOFVCPPPPcma , mlt20b ,  FEF75PPOFVCPPPPcma ,  100.0 ,  40.515 ,  599\n",
      "mlt20bMMEFPPOFVCPPPPcma , mlt20b ,  MMEFPPOFVCPPPPcma ,  99.984 ,  27.971 ,  599\n",
      "mlt20bMMEFPPOPEFRPPPPcma , mlt20b ,  MMEFPPOPEFRPPPPcma ,  99.562 ,  21.193 ,  599\n",
      "mlt20bPEFRPPOFEV1PPPPcma , mlt20b ,  PEFRPPOFEV1PPPPcma ,  99.919 ,  12.485 ,  599\n",
      "mlt20bPEFRPPOFVCPPPPcma , mlt20b ,  PEFRPPOFVCPPPPcma ,  99.974 ,  15.983 ,  599\n",
      "mlt20cmaEXPIRPPcma , mlt20cma ,  EXPIRPPcma ,  99.995 ,  35.687 ,  1019\n",
      "mlt20cmaFEF75PPcma , mlt20cma ,  FEF75PPcma ,  100.389 ,  34.284 ,  1019\n",
      "mlt20cmaFEV05PPcma , mlt20cma ,  FEV05PPcma ,  100.069 ,  12.461 ,  1019\n",
      "mlt20cmaFEV1PPcma , mlt20cma ,  FEV1PPcma ,  100.096 ,  11.073 ,  1019\n",
      "mlt20cmaFEV3PPcma , mlt20cma ,  FEV3PPcma ,  100.073 ,  10.629 ,  1019\n",
      "mlt20cmaFEV6PPcma , mlt20cma ,  FEV6PPcma ,  100.059 ,  10.657 ,  1019\n",
      "mlt20cmaFVCPPcma , mlt20cma ,  FVCPPcma ,  100.056 ,  10.688 ,  1019\n",
      "mlt20cmaMMEFPPcma , mlt20cma ,  MMEFPPcma ,  100.152 ,  23.635 ,  1019\n",
      "mlt20cmaPEFRPPcma , mlt20cma ,  PEFRPPcma ,  100.07 ,  15.959 ,  1019\n",
      "mlt20cmaFEF75OFVCPPcma , mlt20cma ,  FEF75OFVCPPcma ,  100.0 ,  34.941 ,  1019\n",
      "mlt20cmaFEF75OPEFRPPcma , mlt20cma ,  FEF75OPEFRPPcma ,  100.0 ,  33.238 ,  1019\n",
      "mlt20cmaFEV05OFEV3PPcma , mlt20cma ,  FEV05OFEV3PPcma ,  100.0 ,  9.674 ,  1019\n",
      "mlt20cmaFEV05OFVCPPcma , mlt20cma ,  FEV05OFVCPPcma ,  100.0 ,  10.356 ,  1019\n",
      "mlt20cmaFEV1OFVCPPcma , mlt20cma ,  FEV1OFVCPPcma ,  100.0 ,  6.503 ,  1019\n",
      "mlt20cmaFEV1OFEV3PPcma , mlt20cma ,  FEV1OFEV3PPcma ,  100.0 ,  5.533 ,  1019\n",
      "mlt20cmaFEV1OFEV6PPcma , mlt20cma ,  FEV1OFEV6PPcma ,  100.0 ,  6.355 ,  1019\n",
      "mlt20cmaFEV3OFEV6PPcma , mlt20cma ,  FEV3OFEV6PPcma ,  100.0 ,  1.465 ,  1019\n",
      "mlt20cmaFEV3OFEV6PPcma , mlt20cma ,  FEV3OFEV6PPcma ,  100.0 ,  1.465 ,  1019\n",
      "mlt20cmaFEV6OFVCPPcma , mlt20cma ,  FEV6OFVCPPcma ,  100.0 ,  0.59 ,  1019\n",
      "mlt20cmaMMEFOFVCPPcma , mlt20cma ,  MMEFOFVCPPcma ,  100.0 ,  24.248 ,  1019\n",
      "mlt20cmaMMEFOPEFRPPcma , mlt20cma ,  MMEFOPEFRPPcma ,  100.0 ,  18.609 ,  1019\n",
      "mlt20cmaPEFROFEV1PPcma , mlt20cma ,  PEFROFEV1PPcma ,  100.0 ,  13.028 ,  1019\n",
      "mlt20cmaPEFROFEV6PPcma , mlt20cma ,  PEFROFEV6PPcma ,  100.0 ,  15.682 ,  1019\n",
      "mlt20cmaPEFROFVCPPcma , mlt20cma ,  PEFROFVCPPcma ,  100.0 ,  15.719 ,  1019\n",
      "mlt20cmaFEF75PPOFVCPPPPcma , mlt20cma ,  FEF75PPOFVCPPPPcma ,  100.0 ,  35.139 ,  1019\n",
      "mlt20cmaMMEFPPOFVCPPPPcma , mlt20cma ,  MMEFPPOFVCPPPPcma ,  100.0 ,  24.133 ,  1019\n",
      "mlt20cmaMMEFPPOPEFRPPPPcma , mlt20cma ,  MMEFPPOPEFRPPPPcma ,  100.0 ,  18.68 ,  1019\n",
      "mlt20cmaPEFRPPOFEV1PPPPcma , mlt20cma ,  PEFRPPOFEV1PPPPcma ,  100.0 ,  12.785 ,  1019\n",
      "mlt20cmaPEFRPPOFVCPPPPcma , mlt20cma ,  PEFRPPOFVCPPPPcma ,  100.0 ,  15.458 ,  1019\n",
      "mlt20cEXPIRPPcma , mlt20c ,  EXPIRPPcma ,  102.192 ,  35.163 ,  419\n",
      "mlt20cFEF75PPcma , mlt20c ,  FEF75PPcma ,  93.615 ,  31.885 ,  419\n",
      "mlt20cFEV05PPcma , mlt20c ,  FEV05PPcma ,  97.386 ,  12.007 ,  419\n",
      "mlt20cFEV1PPcma , mlt20c ,  FEV1PPcma ,  97.722 ,  10.563 ,  419\n",
      "mlt20cFEV3PPcma , mlt20c ,  FEV3PPcma ,  98.636 ,  10.135 ,  419\n",
      "mlt20cFEV6PPcma , mlt20c ,  FEV6PPcma ,  98.74 ,  10.185 ,  419\n",
      "mlt20cFVCPPcma , mlt20c ,  FVCPPcma ,  98.739 ,  10.257 ,  419\n",
      "mlt20cMMEFPPcma , mlt20c ,  MMEFPPcma ,  94.833 ,  22.596 ,  419\n",
      "mlt20cPEFRPPcma , mlt20c ,  PEFRPPcma ,  98.433 ,  15.35 ,  419\n",
      "mlt20cFEF75OFVCPPcma , mlt20c ,  FEF75OFVCPPcma ,  94.908 ,  33.317 ,  419\n",
      "mlt20cFEF75OPEFRPPcma , mlt20c ,  FEF75OPEFRPPcma ,  95.419 ,  29.649 ,  419\n",
      "mlt20cFEV05OFEV3PPcma , mlt20c ,  FEV05OFEV3PPcma ,  98.208 ,  9.442 ,  419\n",
      "mlt20cFEV05OFVCPPcma , mlt20c ,  FEV05OFVCPPcma ,  98.144 ,  10.188 ,  419\n",
      "mlt20cFEV1OFVCPPcma , mlt20c ,  FEV1OFVCPPcma ,  98.867 ,  6.589 ,  419\n",
      "mlt20cFEV1OFEV3PPcma , mlt20c ,  FEV1OFEV3PPcma ,  98.935 ,  5.6 ,  419\n",
      "mlt20cFEV1OFEV6PPcma , mlt20c ,  FEV1OFEV6PPcma ,  98.854 ,  6.445 ,  419\n",
      "mlt20cFEV3OFEV6PPcma , mlt20c ,  FEV3OFEV6PPcma ,  99.915 ,  1.429 ,  419\n",
      "mlt20cFEV3OFEV6PPcma , mlt20c ,  FEV3OFEV6PPcma ,  99.915 ,  1.429 ,  419\n",
      "mlt20cFEV6OFVCPPcma , mlt20c ,  FEV6OFVCPPcma ,  100.013 ,  0.642 ,  419\n",
      "mlt20cMMEFOFVCPPcma , mlt20c ,  MMEFOFVCPPcma ,  95.417 ,  23.544 ,  419\n",
      "mlt20cMMEFOPEFRPPcma , mlt20c ,  MMEFOPEFRPPcma ,  96.28 ,  17.601 ,  419\n",
      "mlt20cPEFROFEV1PPcma , mlt20c ,  PEFROFEV1PPcma ,  100.056 ,  12.191 ,  419\n",
      "mlt20cPEFROFEV6PPcma , mlt20c ,  PEFROFEV6PPcma ,  98.926 ,  15.024 ,  419\n",
      "mlt20cPEFROFVCPPcma , mlt20c ,  PEFROFVCPPcma ,  98.944 ,  15.104 ,  419\n",
      "mlt20cFEF75PPOFVCPPPPcma , mlt20c ,  FEF75PPOFVCPPPPcma ,  100.0 ,  35.286 ,  419\n",
      "mlt20cMMEFPPOFVCPPPPcma , mlt20c ,  MMEFPPOFVCPPPPcma ,  99.988 ,  24.623 ,  419\n",
      "mlt20cMMEFPPOPEFRPPPPcma , mlt20c ,  MMEFPPOPEFRPPPPcma ,  99.805 ,  18.176 ,  419\n",
      "mlt20cPEFRPPOFEV1PPPPcma , mlt20c ,  PEFRPPOFEV1PPPPcma ,  99.916 ,  11.748 ,  419\n",
      "mlt20cPEFRPPOFVCPPPPcma , mlt20c ,  PEFRPPOFVCPPPPcma ,  99.951 ,  14.907 ,  419\n",
      "mlt20maEXPIRPPcma , mlt20ma ,  EXPIRPPcma ,  98.461 ,  35.998 ,  600\n",
      "mlt20maFEF75PPcma , mlt20ma ,  FEF75PPcma ,  105.12 ,  35.123 ,  600\n",
      "mlt20maFEV05PPcma , mlt20ma ,  FEV05PPcma ,  101.943 ,  12.439 ,  600\n",
      "mlt20maFEV1PPcma , mlt20ma ,  FEV1PPcma ,  101.754 ,  11.128 ,  600\n",
      "mlt20maFEV3PPcma , mlt20ma ,  FEV3PPcma ,  101.076 ,  10.857 ,  600\n",
      "mlt20maFEV6PPcma , mlt20ma ,  FEV6PPcma ,  100.979 ,  10.889 ,  600\n",
      "mlt20maFVCPPcma , mlt20ma ,  FVCPPcma ,  100.975 ,  10.894 ,  600\n",
      "mlt20maMMEFPPcma , mlt20ma ,  MMEFPPcma ,  103.867 ,  23.653 ,  600\n",
      "mlt20maPEFRPPcma , mlt20ma ,  PEFRPPcma ,  101.213 ,  16.287 ,  600\n",
      "mlt20maFEF75OFVCPPcma , mlt20ma ,  FEF75OFVCPPcma ,  103.556 ,  35.629 ,  600\n",
      "mlt20maFEF75OPEFRPPcma , mlt20ma ,  FEF75OPEFRPPcma ,  103.199 ,  35.203 ,  600\n",
      "mlt20maFEV05OFEV3PPcma , mlt20ma ,  FEV05OFEV3PPcma ,  101.252 ,  9.645 ,  600\n",
      "mlt20maFEV05OFVCPPcma , mlt20ma ,  FEV05OFVCPPcma ,  101.296 ,  10.283 ,  600\n",
      "mlt20maFEV1OFVCPPcma , mlt20ma ,  FEV1OFVCPPcma ,  100.791 ,  6.329 ,  600\n",
      "mlt20maFEV1OFEV3PPcma , mlt20ma ,  FEV1OFEV3PPcma ,  100.744 ,  5.366 ,  600\n",
      "mlt20maFEV1OFEV6PPcma , mlt20ma ,  FEV1OFEV6PPcma ,  100.8 ,  6.172 ,  600\n",
      "mlt20maFEV3OFEV6PPcma , mlt20ma ,  FEV3OFEV6PPcma ,  100.059 ,  1.488 ,  600\n",
      "mlt20maFEV3OFEV6PPcma , mlt20ma ,  FEV3OFEV6PPcma ,  100.059 ,  1.488 ,  600\n",
      "mlt20maFEV6OFVCPPcma , mlt20ma ,  FEV6OFVCPPcma ,  99.991 ,  0.552 ,  600\n",
      "mlt20maMMEFOFVCPPcma , mlt20ma ,  MMEFOFVCPPcma ,  103.201 ,  24.237 ,  600\n",
      "mlt20maMMEFOPEFRPPcma , mlt20ma ,  MMEFOPEFRPPcma ,  102.598 ,  18.865 ,  600\n",
      "mlt20maPEFROFEV1PPcma , mlt20ma ,  PEFROFEV1PPcma ,  99.961 ,  13.592 ,  600\n",
      "mlt20maPEFROFEV6PPcma , mlt20ma ,  PEFROFEV6PPcma ,  100.75 ,  16.096 ,  600\n",
      "mlt20maPEFROFVCPPcma , mlt20ma ,  PEFROFVCPPcma ,  100.737 ,  16.106 ,  600\n",
      "mlt20maFEF75PPOFVCPPPPcma , mlt20ma ,  FEF75PPOFVCPPPPcma ,  100.189 ,  34.644 ,  600\n",
      "mlt20maMMEFPPOFVCPPPPcma , mlt20ma ,  MMEFPPOFVCPPPPcma ,  100.116 ,  23.429 ,  600\n",
      "mlt20maMMEFPPOPEFRPPPPcma , mlt20ma ,  MMEFPPOPEFRPPPPcma ,  100.211 ,  18.475 ,  600\n",
      "mlt20maPEFRPPOFEV1PPPPcma , mlt20ma ,  PEFRPPOFEV1PPPPcma ,  100.041 ,  13.447 ,  600\n",
      "mlt20maPEFRPPOFVCPPPPcma , mlt20ma ,  PEFRPPOFVCPPPPcma ,  100.061 ,  15.839 ,  600\n",
      "flt18bEXPIRPPcma , flt18b ,  EXPIRPPcma ,  93.882 ,  41.469 ,  590\n",
      "flt18bFEF75PPcma , flt18b ,  FEF75PPcma ,  83.034 ,  30.466 ,  590\n",
      "flt18bFEV05PPcma , flt18b ,  FEV05PPcma ,  87.705 ,  12.561 ,  590\n",
      "flt18bFEV1PPcma , flt18b ,  FEV1PPcma ,  85.338 ,  11.177 ,  590\n",
      "flt18bFEV3PPcma , flt18b ,  FEV3PPcma ,  85.232 ,  10.812 ,  590\n",
      "flt18bFEV6PPcma , flt18b ,  FEV6PPcma ,  85.426 ,  10.812 ,  590\n",
      "flt18bFVCPPcma , flt18b ,  FVCPPcma ,  85.519 ,  10.827 ,  590\n",
      "flt18bMMEFPPcma , flt18b ,  MMEFPPcma ,  87.641 ,  23.34 ,  590\n",
      "flt18bPEFRPPcma , flt18b ,  PEFRPPcma ,  95.767 ,  17.197 ,  590\n",
      "flt18bFEF75OFVCPPcma , flt18b ,  FEF75OFVCPPcma ,  97.622 ,  38.582 ,  590\n",
      "flt18bFEF75OPEFRPPcma , flt18b ,  FEF75OPEFRPPcma ,  87.18 ,  31.292 ,  590\n",
      "flt18bFEV05OFEV3PPcma , flt18b ,  FEV05OFEV3PPcma ,  102.138 ,  11.177 ,  590\n",
      "flt18bFEV05OFVCPPcma , flt18b ,  FEV05OFVCPPcma ,  101.881 ,  12.124 ,  590\n",
      "flt18bFEV1OFVCPPcma , flt18b ,  FEV1OFVCPPcma ,  99.685 ,  7.834 ,  590\n",
      "flt18bFEV1OFEV3PPcma , flt18b ,  FEV1OFEV3PPcma ,  99.959 ,  6.563 ,  590\n",
      "flt18bFEV1OFEV6PPcma , flt18b ,  FEV1OFEV6PPcma ,  99.746 ,  7.482 ,  590\n",
      "flt18bFEV3OFEV6PPcma , flt18b ,  FEV3OFEV6PPcma ,  99.751 ,  1.788 ,  590\n",
      "flt18bFEV3OFEV6PPcma , flt18b ,  FEV3OFEV6PPcma ,  99.751 ,  1.788 ,  590\n",
      "flt18bFEV6OFVCPPcma , flt18b ,  FEV6OFVCPPcma ,  99.909 ,  1.214 ,  590\n",
      "flt18bMMEFOFVCPPcma , flt18b ,  MMEFOFVCPPcma ,  101.355 ,  28.491 ,  590\n",
      "flt18bMMEFOPEFRPPcma , flt18b ,  MMEFOPEFRPPcma ,  90.851 ,  19.119 ,  590\n",
      "flt18bPEFROFEV1PPcma , flt18b ,  PEFROFEV1PPcma ,  111.12 ,  15.755 ,  590\n",
      "flt18bPEFROFEV6PPcma , flt18b ,  PEFROFEV6PPcma ,  111.026 ,  19.552 ,  590\n",
      "flt18bPEFROFVCPPcma , flt18b ,  PEFROFVCPPcma ,  110.976 ,  19.727 ,  590\n",
      "flt18bFEF75PPOFVCPPPPcma , flt18b ,  FEF75PPOFVCPPPPcma ,  100.765 ,  40.073 ,  590\n",
      "flt18bMMEFPPOFVCPPPPcma , flt18b ,  MMEFPPOFVCPPPPcma ,  100.558 ,  28.242 ,  590\n",
      "flt18bMMEFPPOPEFRPPPPcma , flt18b ,  MMEFPPOPEFRPPPPcma ,  99.65 ,  20.919 ,  590\n",
      "flt18bPEFRPPOFEV1PPPPcma , flt18b ,  PEFRPPOFEV1PPPPcma ,  100.068 ,  13.973 ,  590\n",
      "flt18bPEFRPPOFVCPPPPcma , flt18b ,  PEFRPPOFVCPPPPcma ,  100.358 ,  17.633 ,  590\n",
      "flt18cmaEXPIRPPcma , flt18cma ,  EXPIRPPcma ,  99.996 ,  40.453 ,  966\n",
      "flt18cmaFEF75PPcma , flt18cma ,  FEF75PPcma ,  100.12 ,  31.259 ,  966\n",
      "flt18cmaFEV05PPcma , flt18cma ,  FEV05PPcma ,  100.012 ,  12.942 ,  966\n",
      "flt18cmaFEV1PPcma , flt18cma ,  FEV1PPcma ,  100.045 ,  11.496 ,  966\n",
      "flt18cmaFEV3PPcma , flt18cma ,  FEV3PPcma ,  100.044 ,  11.424 ,  966\n",
      "flt18cmaFEV6PPcma , flt18cma ,  FEV6PPcma ,  100.036 ,  11.543 ,  966\n",
      "flt18cmaFVCPPcma , flt18cma ,  FVCPPcma ,  100.035 ,  11.535 ,  966\n",
      "flt18cmaMMEFPPcma , flt18cma ,  MMEFPPcma ,  99.996 ,  22.312 ,  966\n",
      "flt18cmaPEFRPPcma , flt18cma ,  PEFRPPcma ,  99.997 ,  17.092 ,  966\n",
      "flt18cmaFEF75OFVCPPcma , flt18cma ,  FEF75OFVCPPcma ,  100.0 ,  32.697 ,  966\n",
      "flt18cmaFEF75OPEFRPPcma , flt18cma ,  FEF75OPEFRPPcma ,  100.002 ,  32.63 ,  966\n",
      "flt18cmaFEV05OFEV3PPcma , flt18cma ,  FEV05OFEV3PPcma ,  100.0 ,  9.703 ,  966\n",
      "flt18cmaFEV05OFVCPPcma , flt18cma ,  FEV05OFVCPPcma ,  100.0 ,  10.167 ,  966\n",
      "flt18cmaFEV1OFVCPPcma , flt18cma ,  FEV1OFVCPPcma ,  100.0 ,  5.947 ,  966\n",
      "flt18cmaFEV1OFEV3PPcma , flt18cma ,  FEV1OFEV3PPcma ,  100.0 ,  5.217 ,  966\n",
      "flt18cmaFEV1OFEV6PPcma , flt18cma ,  FEV1OFEV6PPcma ,  100.0 ,  5.836 ,  966\n",
      "flt18cmaFEV3OFEV6PPcma , flt18cma ,  FEV3OFEV6PPcma ,  100.0 ,  1.328 ,  966\n",
      "flt18cmaFEV3OFEV6PPcma , flt18cma ,  FEV3OFEV6PPcma ,  100.0 ,  1.328 ,  966\n",
      "flt18cmaFEV6OFVCPPcma , flt18cma ,  FEV6OFVCPPcma ,  100.0 ,  0.461 ,  966\n",
      "flt18cmaMMEFOFVCPPcma , flt18cma ,  MMEFOFVCPPcma ,  100.0 ,  22.955 ,  966\n",
      "flt18cmaMMEFOPEFRPPcma , flt18cma ,  MMEFOPEFRPPcma ,  100.0 ,  18.036 ,  966\n",
      "flt18cmaPEFROFEV1PPcma , flt18cma ,  PEFROFEV1PPcma ,  100.0 ,  13.553 ,  966\n",
      "flt18cmaPEFROFEV6PPcma , flt18cma ,  PEFROFEV6PPcma ,  100.0 ,  15.844 ,  966\n",
      "flt18cmaPEFROFVCPPcma , flt18cma ,  PEFROFVCPPcma ,  100.0 ,  15.864 ,  966\n",
      "flt18cmaFEF75PPOFVCPPPPcma , flt18cma ,  FEF75PPOFVCPPPPcma ,  100.0 ,  32.731 ,  966\n",
      "flt18cmaMMEFPPOFVCPPPPcma , flt18cma ,  MMEFPPOFVCPPPPcma ,  100.0 ,  22.757 ,  966\n",
      "flt18cmaMMEFPPOPEFRPPPPcma , flt18cma ,  MMEFPPOPEFRPPPPcma ,  100.0 ,  18.004 ,  966\n",
      "flt18cmaPEFRPPOFEV1PPPPcma , flt18cma ,  PEFRPPOFEV1PPPPcma ,  100.0 ,  13.327 ,  966\n",
      "flt18cmaPEFRPPOFVCPPPPcma , flt18cma ,  PEFRPPOFVCPPPPcma ,  100.0 ,  15.605 ,  966\n",
      "flt18cEXPIRPPcma , flt18c ,  EXPIRPPcma ,  103.96 ,  40.113 ,  409\n",
      "flt18cFEF75PPcma , flt18c ,  FEF75PPcma ,  95.582 ,  29.578 ,  409\n",
      "flt18cFEV05PPcma , flt18c ,  FEV05PPcma ,  98.065 ,  12.079 ,  409\n",
      "flt18cFEV1PPcma , flt18c ,  FEV1PPcma ,  98.743 ,  10.888 ,  409\n",
      "flt18cFEV3PPcma , flt18c ,  FEV3PPcma ,  99.558 ,  10.858 ,  409\n",
      "flt18cFEV6PPcma , flt18c ,  FEV6PPcma ,  99.571 ,  11.025 ,  409\n",
      "flt18cFVCPPcma , flt18c ,  FVCPPcma ,  99.576 ,  11.014 ,  409\n",
      "flt18cMMEFPPcma , flt18c ,  MMEFPPcma ,  96.055 ,  21.366 ,  409\n",
      "flt18cPEFRPPcma , flt18c ,  PEFRPPcma ,  98.183 ,  14.979 ,  409\n",
      "flt18cFEF75OFVCPPcma , flt18c ,  FEF75OFVCPPcma ,  95.924 ,  31.264 ,  409\n",
      "flt18cFEF75OPEFRPPcma , flt18c ,  FEF75OPEFRPPcma ,  96.95 ,  29.064 ,  409\n",
      "flt18cFEV05OFEV3PPcma , flt18c ,  FEV05OFEV3PPcma ,  98.265 ,  9.568 ,  409\n",
      "flt18cFEV05OFVCPPcma , flt18c ,  FEV05OFVCPPcma ,  98.244 ,  10.048 ,  409\n",
      "flt18cFEV1OFVCPPcma , flt18c ,  FEV1OFVCPPcma ,  99.097 ,  6.138 ,  409\n",
      "flt18cFEV1OFEV3PPcma , flt18c ,  FEV1OFEV3PPcma ,  99.12 ,  5.415 ,  409\n",
      "flt18cFEV1OFEV6PPcma , flt18c ,  FEV1OFEV6PPcma ,  99.099 ,  6.032 ,  409\n",
      "flt18cFEV3OFEV6PPcma , flt18c ,  FEV3OFEV6PPcma ,  99.976 ,  1.258 ,  409\n",
      "flt18cFEV3OFEV6PPcma , flt18c ,  FEV3OFEV6PPcma ,  99.976 ,  1.258 ,  409\n",
      "flt18cFEV6OFVCPPcma , flt18c ,  FEV6OFVCPPcma ,  99.998 ,  0.474 ,  409\n",
      "flt18cMMEFOFVCPPcma , flt18c ,  MMEFOFVCPPcma ,  96.054 ,  22.569 ,  409\n",
      "flt18cMMEFOPEFRPPcma , flt18c ,  MMEFOPEFRPPcma ,  97.411 ,  16.919 ,  409\n",
      "flt18cPEFROFEV1PPcma , flt18c ,  PEFROFEV1PPcma ,  99.115 ,  11.953 ,  409\n",
      "flt18cPEFROFEV6PPcma , flt18c ,  PEFROFEV6PPcma ,  98.217 ,  14.423 ,  409\n",
      "flt18cPEFROFVCPPcma , flt18c ,  PEFROFVCPPcma ,  98.216 ,  14.45 ,  409\n",
      "flt18cFEF75PPOFVCPPPPcma , flt18c ,  FEF75PPOFVCPPPPcma ,  100.095 ,  32.622 ,  409\n",
      "flt18cMMEFPPOFVCPPPPcma , flt18c ,  MMEFPPOFVCPPPPcma ,  100.097 ,  23.154 ,  409\n",
      "flt18cMMEFPPOPEFRPPPPcma , flt18c ,  MMEFPPOPEFRPPPPcma ,  99.689 ,  17.264 ,  409\n",
      "flt18cPEFRPPOFEV1PPPPcma , flt18c ,  PEFRPPOFEV1PPPPcma ,  100.028 ,  11.899 ,  409\n",
      "flt18cPEFRPPOFVCPPPPcma , flt18c ,  PEFRPPOFVCPPPPcma ,  100.04 ,  14.487 ,  409\n",
      "flt18maEXPIRPPcma , flt18ma ,  EXPIRPPcma ,  97.085 ,  40.49 ,  557\n",
      "flt18maFEF75PPcma , flt18ma ,  FEF75PPcma ,  103.452 ,  32.058 ,  557\n",
      "flt18maFEV05PPcma , flt18ma ,  FEV05PPcma ,  101.442 ,  13.372 ,  557\n",
      "flt18maFEV1PPcma , flt18ma ,  FEV1PPcma ,  101.001 ,  11.841 ,  557\n",
      "flt18maFEV3PPcma , flt18ma ,  FEV3PPcma ,  100.401 ,  11.82 ,  557\n",
      "flt18maFEV6PPcma , flt18ma ,  FEV6PPcma ,  100.377 ,  11.907 ,  557\n",
      "flt18maFVCPPcma , flt18ma ,  FVCPPcma ,  100.372 ,  11.901 ,  557\n",
      "flt18maMMEFPPcma , flt18ma ,  MMEFPPcma ,  102.89 ,  22.565 ,  557\n",
      "flt18maPEFRPPcma , flt18ma ,  PEFRPPcma ,  101.33 ,  18.39 ,  557\n",
      "flt18maFEF75OFVCPPcma , flt18ma ,  FEF75OFVCPPcma ,  102.993 ,  33.423 ,  557\n",
      "flt18maFEF75OPEFRPPcma , flt18ma ,  FEF75OPEFRPPcma ,  102.243 ,  34.874 ,  557\n",
      "flt18maFEV05OFEV3PPcma , flt18ma ,  FEV05OFEV3PPcma ,  101.274 ,  9.611 ,  557\n",
      "flt18maFEV05OFVCPPcma , flt18ma ,  FEV05OFVCPPcma ,  101.289 ,  10.069 ,  557\n",
      "flt18maFEV1OFVCPPcma , flt18ma ,  FEV1OFVCPPcma ,  100.663 ,  5.718 ,  557\n",
      "flt18maFEV1OFEV3PPcma , flt18ma ,  FEV1OFEV3PPcma ,  100.646 ,  4.973 ,  557\n",
      "flt18maFEV1OFEV6PPcma , flt18ma ,  FEV1OFEV6PPcma ,  100.662 ,  5.602 ,  557\n",
      "flt18maFEV3OFEV6PPcma , flt18ma ,  FEV3OFEV6PPcma ,  100.018 ,  1.377 ,  557\n",
      "flt18maFEV3OFEV6PPcma , flt18ma ,  FEV3OFEV6PPcma ,  100.018 ,  1.377 ,  557\n",
      "flt18maFEV6OFVCPPcma , flt18ma ,  FEV6OFVCPPcma ,  100.002 ,  0.452 ,  557\n",
      "flt18maMMEFOFVCPPcma , flt18ma ,  MMEFOFVCPPcma ,  102.897 ,  22.824 ,  557\n",
      "flt18maMMEFOPEFRPPcma , flt18ma ,  MMEFOPEFRPPcma ,  101.901 ,  18.602 ,  557\n",
      "flt18maPEFROFEV1PPcma , flt18ma ,  PEFROFEV1PPcma ,  100.649 ,  14.593 ,  557\n",
      "flt18maPEFROFEV6PPcma , flt18ma ,  PEFROFEV6PPcma ,  101.309 ,  16.703 ,  557\n",
      "flt18maPEFROFVCPPcma , flt18ma ,  PEFROFVCPPcma ,  101.309 ,  16.72 ,  557\n",
      "flt18maFEF75PPOFVCPPPPcma , flt18ma ,  FEF75PPOFVCPPPPcma ,  100.009 ,  32.386 ,  557\n",
      "flt18maMMEFPPOFVCPPPPcma , flt18ma ,  MMEFPPOFVCPPPPcma ,  99.962 ,  22.088 ,  557\n",
      "flt18maMMEFPPOPEFRPPPPcma , flt18ma ,  MMEFPPOPEFRPPPPcma ,  100.294 ,  18.21 ,  557\n",
      "flt18maPEFRPPOFEV1PPPPcma , flt18ma ,  PEFRPPOFEV1PPPPcma ,  99.968 ,  14.258 ,  557\n",
      "flt18maPEFRPPOFVCPPPPcma , flt18ma ,  PEFRPPOFVCPPPPcma ,  99.963 ,  16.267 ,  557\n"
     ]
    }
   ],
   "source": [
    "# create df PPcmavalues\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"mean\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "PPcmavalues= pd.DataFrame(columns = column_names)\n",
    "PPcmavalues.name = 'PPcmavalues'\n",
    "print (PPcmavalues)\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n",
    "        mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma]\n",
    "PPcmalist = [ 'EXPIRPPcma', 'FEF75PPcma', 'FEV05PPcma', 'FEV1PPcma', 'FEV3PPcma','FEV6PPcma',\n",
    "           'FVCPPcma',  'MMEFPPcma', 'PEFRPPcma', \n",
    "           'FEF75OFVCPPcma', 'FEF75OPEFRPPcma',  \n",
    "           'FEV05OFEV3PPcma', 'FEV05OFVCPPcma', \n",
    "           'FEV1OFVCPPcma', 'FEV1OFEV3PPcma', 'FEV1OFEV6PPcma', \n",
    "           'FEV3OFEV6PPcma', 'FEV3OFEV6PPcma','FEV6OFVCPPcma', \n",
    "           'MMEFOFVCPPcma', 'MMEFOPEFRPPcma', 'PEFROFEV1PPcma', 'PEFROFEV6PPcma', 'PEFROFVCPPcma',  \n",
    "           'FEF75PPOFVCPPPPcma','MMEFPPOFVCPPPPcma','MMEFPPOPEFRPPPPcma', 'PEFRPPOFEV1PPPPcma','PEFRPPOFVCPPPPcma']\n",
    " #   print (df.name)\n",
    "for df in ftoa:\n",
    "    for y in PPcmalist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "        df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    "        PPcmavalues = PPcmavalues.append(df2, ignore_index=True)\n",
    "  # now set index   \n",
    "PPcmavalues.set_index('dfnvarn', inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Do not understand why not work below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dfname</th>\n",
       "      <th>var</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dfnvarn</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>m20overbEXPIRPPcma</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>92.855848</td>\n",
       "      <td>32.848944</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEF75PPcma</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91.463236</td>\n",
       "      <td>39.329409</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV05PPcma</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87.174181</td>\n",
       "      <td>14.300670</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV1PPcma</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>85.076330</td>\n",
       "      <td>12.609165</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV3PPcma</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>83.891088</td>\n",
       "      <td>11.658443</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maFEF75PPOFVCPPPPcma</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.008621</td>\n",
       "      <td>32.386109</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maMMEFPPOFVCPPPPcma</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>99.962080</td>\n",
       "      <td>22.087687</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maMMEFPPOPEFRPPPPcma</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.293583</td>\n",
       "      <td>18.210297</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maPEFRPPOFEV1PPPPcma</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>99.968030</td>\n",
       "      <td>14.257725</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flt18maPEFRPPOFVCPPPPcma</th>\n",
       "      <td>flt18ma</td>\n",
       "      <td>NaN</td>\n",
       "      <td>99.963047</td>\n",
       "      <td>16.267487</td>\n",
       "      <td>557</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>464 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             dfname  var        mean        std count\n",
       "dfnvarn                                                              \n",
       "m20overbEXPIRPPcma         m20overb  NaN   92.855848  32.848944   477\n",
       "m20overbFEF75PPcma         m20overb  NaN   91.463236  39.329409   477\n",
       "m20overbFEV05PPcma         m20overb  NaN   87.174181  14.300670   477\n",
       "m20overbFEV1PPcma          m20overb  NaN   85.076330  12.609165   477\n",
       "m20overbFEV3PPcma          m20overb  NaN   83.891088  11.658443   477\n",
       "...                             ...  ...         ...        ...   ...\n",
       "flt18maFEF75PPOFVCPPPPcma   flt18ma  NaN  100.008621  32.386109   557\n",
       "flt18maMMEFPPOFVCPPPPcma    flt18ma  NaN   99.962080  22.087687   557\n",
       "flt18maMMEFPPOPEFRPPPPcma   flt18ma  NaN  100.293583  18.210297   557\n",
       "flt18maPEFRPPOFEV1PPPPcma   flt18ma  NaN   99.968030  14.257725   557\n",
       "flt18maPEFRPPOFVCPPPPcma    flt18ma  NaN   99.963047  16.267487   557\n",
       "\n",
       "[464 rows x 5 columns]"
      ]
     },
     "execution_count": 349,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PPcmavalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "m20overbEXPIRPPcma , m20overb ,  EXPIRPPcma ,  92.856 ,  32.849 ,  477\n",
      "m20overbFEF75PPcma , m20overb ,  FEF75PPcma ,  91.463 ,  39.329 ,  477\n",
      "m20overbFEV05PPcma , m20overb ,  FEV05PPcma ,  87.174 ,  14.301 ,  477\n",
      "m20overbFEV1PPcma , m20overb ,  FEV1PPcma ,  85.076 ,  12.609 ,  477\n",
      "m20overbFEV3PPcma , m20overb ,  FEV3PPcma ,  83.891 ,  11.658 ,  477\n",
      "m20overbFEV6PPcma , m20overb ,  FEV6PPcma ,  83.764 ,  11.63 ,  477\n",
      "m20overbFVCPPcma , m20overb ,  FVCPPcma ,  83.616 ,  11.774 ,  477\n",
      "m20overbMMEFPPcma , m20overb ,  MMEFPPcma ,  90.841 ,  26.942 ,  477\n",
      "m20overbPEFRPPcma , m20overb ,  PEFRPPcma ,  92.775 ,  18.387 ,  477\n",
      "m20overbFEF75OFVCPPcma , m20overb ,  FEF75OFVCPPcma ,  107.349 ,  50.19 ,  477\n",
      "m20overbFEF75OPEFRPPcma , m20overb ,  FEF75OPEFRPPcma ,  97.909 ,  50.59 ,  477\n",
      "m20overbFEV05OFEV3PPcma , m20overb ,  FEV05OFEV3PPcma ,  102.775 ,  10.692 ,  477\n",
      "m20overbFEV05OFVCPPcma , m20overb ,  FEV05OFVCPPcma ,  103.146 ,  12.433 ,  477\n",
      "m20overbFEV1OFEV3PPcma , m20overb ,  FEV1OFEV3PPcma ,  100.927 ,  5.855 ,  477\n",
      "m20overbFEV1OFEV6PPcma , m20overb ,  FEV1OFEV6PPcma ,  101.047 ,  7.268 ,  477\n",
      "m20overbFEV1OFVCPPcma , m20overb ,  FEV1OFVCPPcma ,  101.253 ,  8.071 ,  477\n",
      "m20overbFEV3OFEV6PPcma , m20overb ,  FEV3OFEV6PPcma ,  100.096 ,  2.078 ,  477\n",
      "m20overbFEV3OFVCPPcma , m20overb ,  FEV3OFVCPPcma ,  100.295 ,  3.379 ,  477\n",
      "m20overbFEV6OFVCPPcma , m20overb ,  FEV6OFVCPPcma ,  100.202 ,  1.886 ,  477\n",
      "m20overbMMEFOFVCPPcma , m20overb ,  MMEFOFVCPPcma ,  106.234 ,  32.042 ,  477\n",
      "m20overbMMEFOPEFRPPcma , m20overb ,  MMEFOPEFRPPcma ,  96.766 ,  25.571 ,  477\n",
      "m20overbPEFROFEV1PPcma , m20overb ,  PEFROFEV1PPcma ,  108.282 ,  15.754 ,  477\n",
      "m20overbPEFROFEV6PPcma , m20overb ,  PEFROFEV6PPcma ,  109.585 ,  19.365 ,  477\n",
      "m20overbPEFROFVCPPcma , m20overb ,  PEFROFVCPPcma ,  109.84 ,  19.802 ,  477\n",
      "m20overbFEF75PPOFVCPPPPcma , m20overb ,  FEF75PPOFVCPPPPcma ,  100.581 ,  46.124 ,  477\n",
      "m20overbMMEFPPOFVCPPPPcma , m20overb ,  MMEFPPOFVCPPPPcma ,  100.07 ,  29.051 ,  477\n",
      "m20overbMMEFPPOPEFRPPPPcma , m20overb ,  MMEFPPOPEFRPPPPcma ,  100.189 ,  25.481 ,  477\n",
      "m20overbPEFRPPOFEV1PPPPcma , m20overb ,  PEFRPPOFEV1PPPPcma ,  99.802 ,  14.43 ,  477\n",
      "m20overbPEFRPPOFVCPPPPcma , m20overb ,  PEFRPPOFVCPPPPcma ,  100.017 ,  17.887 ,  477\n",
      "m20overcmaEXPIRPPcma , m20overcma ,  EXPIRPPcma ,  100.012 ,  32.151 ,  1130\n",
      "m20overcmaFEF75PPcma , m20overcma ,  FEF75PPcma ,  100.492 ,  50.461 ,  1130\n",
      "m20overcmaFEV05PPcma , m20overcma ,  FEV05PPcma ,  100.026 ,  14.116 ,  1130\n",
      "m20overcmaFEV1PPcma , m20overcma ,  FEV1PPcma ,  100.053 ,  12.917 ,  1130\n",
      "m20overcmaFEV3PPcma , m20overcma ,  FEV3PPcma ,  100.062 ,  12.297 ,  1130\n",
      "m20overcmaFEV6PPcma , m20overcma ,  FEV6PPcma ,  100.052 ,  12.204 ,  1130\n",
      "m20overcmaFVCPPcma , m20overcma ,  FVCPPcma ,  100.035 ,  12.267 ,  1130\n",
      "m20overcmaMMEFPPcma , m20overcma ,  MMEFPPcma ,  100.212 ,  29.947 ,  1130\n",
      "m20overcmaPEFRPPcma , m20overcma ,  PEFRPPcma ,  100.032 ,  17.304 ,  1130\n",
      "m20overcmaFEF75OFVCPPcma , m20overcma ,  FEF75OFVCPPcma ,  101.653 ,  61.762 ,  1130\n",
      "m20overcmaFEF75OPEFRPPcma , m20overcma ,  FEF75OPEFRPPcma ,  102.158 ,  63.267 ,  1130\n",
      "m20overcmaFEV05OFEV3PPcma , m20overcma ,  FEV05OFEV3PPcma ,  100.0 ,  9.524 ,  1130\n",
      "m20overcmaFEV05OFVCPPcma , m20overcma ,  FEV05OFVCPPcma ,  99.999 ,  11.239 ,  1130\n",
      "m20overcmaFEV1OFEV3PPcma , m20overcma ,  FEV1OFEV3PPcma ,  100.0 ,  5.131 ,  1130\n",
      "m20overcmaFEV1OFEV6PPcma , m20overcma ,  FEV1OFEV6PPcma ,  100.0 ,  6.466 ,  1130\n",
      "m20overcmaFEV1OFVCPPcma , m20overcma ,  FEV1OFVCPPcma ,  100.0 ,  7.534 ,  1130\n",
      "m20overcmaFEV3OFEV6PPcma , m20overcma ,  FEV3OFEV6PPcma ,  100.0 ,  1.979 ,  1130\n",
      "m20overcmaFEV3OFVCPPcma , m20overcma ,  FEV3OFVCPPcma ,  100.001 ,  3.659 ,  1130\n",
      "m20overcmaFEV6OFVCPPcma , m20overcma ,  FEV6OFVCPPcma ,  100.0 ,  2.194 ,  1130\n",
      "m20overcmaMMEFOFVCPPcma , m20overcma ,  MMEFOFVCPPcma ,  99.991 ,  31.458 ,  1130\n",
      "m20overcmaMMEFOPEFRPPcma , m20overcma ,  MMEFOPEFRPPcma ,  100.055 ,  27.358 ,  1130\n",
      "m20overcmaPEFROFEV1PPcma , m20overcma ,  PEFROFEV1PPcma ,  99.994 ,  13.93 ,  1130\n",
      "m20overcmaPEFROFEV6PPcma , m20overcma ,  PEFROFEV6PPcma ,  99.999 ,  16.5 ,  1130\n",
      "m20overcmaPEFROFVCPPcma , m20overcma ,  PEFROFVCPPcma ,  100.0 ,  16.951 ,  1130\n",
      "m20overcmaFEF75PPOFVCPPPPcma , m20overcma ,  FEF75PPOFVCPPPPcma ,  100.001 ,  54.209 ,  1130\n",
      "m20overcmaMMEFPPOFVCPPPPcma , m20overcma ,  MMEFPPOFVCPPPPcma ,  100.0 ,  31.433 ,  1130\n",
      "m20overcmaMMEFPPOPEFRPPPPcma , m20overcma ,  MMEFPPOPEFRPPPPcma ,  100.0 ,  27.0 ,  1130\n",
      "m20overcmaPEFRPPOFEV1PPPPcma , m20overcma ,  PEFRPPOFEV1PPPPcma ,  100.0 ,  13.72 ,  1130\n",
      "m20overcmaPEFRPPOFVCPPPPcma , m20overcma ,  PEFRPPOFVCPPPPcma ,  100.0 ,  16.675 ,  1130\n",
      "m20overcEXPIRPPcma , m20overc ,  EXPIRPPcma ,  100.721 ,  33.216 ,  528\n",
      "m20overcFEF75PPcma , m20overc ,  FEF75PPcma ,  97.691 ,  44.965 ,  528\n",
      "m20overcFEV05PPcma , m20overc ,  FEV05PPcma ,  99.448 ,  15.164 ,  528\n",
      "m20overcFEV1PPcma , m20overc ,  FEV1PPcma ,  99.862 ,  13.929 ,  528\n",
      "m20overcFEV3PPcma , m20overc ,  FEV3PPcma ,  100.268 ,  13.114 ,  528\n",
      "m20overcFEV6PPcma , m20overc ,  FEV6PPcma ,  100.259 ,  12.859 ,  528\n",
      "m20overcFVCPPcma , m20overc ,  FVCPPcma ,  100.233 ,  12.905 ,  528\n",
      "m20overcMMEFPPcma , m20overc ,  MMEFPPcma ,  98.582 ,  32.214 ,  528\n",
      "m20overcPEFRPPcma , m20overc ,  PEFRPPcma ,  99.586 ,  17.388 ,  528\n",
      "m20overcFEF75OFVCPPcma , m20overc ,  FEF75OFVCPPcma ,  98.89 ,  56.457 ,  528\n",
      "m20overcFEF75OPEFRPPcma , m20overc ,  FEF75OPEFRPPcma ,  101.802 ,  65.353 ,  528\n",
      "m20overcFEV05OFEV3PPcma , m20overc ,  FEV05OFEV3PPcma ,  97.826 ,  9.252 ,  528\n",
      "m20overcFEV05OFVCPPcma , m20overc ,  FEV05OFVCPPcma ,  97.766 ,  11.196 ,  528\n",
      "m20overcFEV1OFEV3PPcma , m20overc ,  FEV1OFEV3PPcma ,  99.006 ,  5.17 ,  528\n",
      "m20overcFEV1OFEV6PPcma , m20overc ,  FEV1OFEV6PPcma ,  98.947 ,  6.621 ,  528\n",
      "m20overcFEV1OFVCPPcma , m20overc ,  FEV1OFVCPPcma ,  98.968 ,  7.915 ,  528\n",
      "m20overcFEV3OFEV6PPcma , m20overc ,  FEV3OFEV6PPcma ,  99.946 ,  2.175 ,  528\n",
      "m20overcFEV3OFVCPPcma , m20overc ,  FEV3OFVCPPcma ,  99.97 ,  4.143 ,  528\n",
      "m20overcFEV6OFVCPPcma , m20overc ,  FEV6OFVCPPcma ,  100.022 ,  2.566 ,  528\n",
      "m20overcMMEFOFVCPPcma , m20overc ,  MMEFOFVCPPcma ,  94.912 ,  31.916 ,  528\n",
      "m20overcMMEFOPEFRPPcma , m20overc ,  MMEFOPEFRPPcma ,  96.743 ,  27.633 ,  528\n",
      "m20overcPEFROFEV1PPcma , m20overc ,  PEFROFEV1PPcma ,  98.976 ,  12.637 ,  528\n",
      "m20overcPEFROFEV6PPcma , m20overc ,  PEFROFEV6PPcma ,  97.892 ,  15.293 ,  528\n",
      "m20overcPEFROFVCPPcma , m20overc ,  PEFROFVCPPcma ,  97.896 ,  15.868 ,  528\n",
      "m20overcFEF75PPOFVCPPPPcma , m20overc ,  FEF75PPOFVCPPPPcma ,  99.026 ,  48.516 ,  528\n",
      "m20overcMMEFPPOFVCPPPPcma , m20overc ,  MMEFPPOFVCPPPPcma ,  99.661 ,  33.379 ,  528\n",
      "m20overcMMEFPPOPEFRPPPPcma , m20overc ,  MMEFPPOPEFRPPPPcma ,  99.326 ,  27.932 ,  528\n",
      "m20overcPEFRPPOFEV1PPPPcma , m20overc ,  PEFRPPOFEV1PPPPcma ,  100.037 ,  12.472 ,  528\n",
      "m20overcPEFRPPOFVCPPPPcma , m20overc ,  PEFRPPOFVCPPPPcma ,  99.932 ,  15.773 ,  528\n",
      "m20overmaEXPIRPPcma , m20overma ,  EXPIRPPcma ,  99.39 ,  31.203 ,  602\n",
      "m20overmaFEF75PPcma , m20overma ,  FEF75PPcma ,  102.949 ,  54.75 ,  602\n",
      "m20overmaFEV05PPcma , m20overma ,  FEV05PPcma ,  100.533 ,  13.12 ,  602\n",
      "m20overmaFEV1PPcma , m20overma ,  FEV1PPcma ,  100.22 ,  11.968 ,  602\n",
      "m20overmaFEV3PPcma , m20overma ,  FEV3PPcma ,  99.88 ,  11.541 ,  602\n",
      "m20overmaFEV6PPcma , m20overma ,  FEV6PPcma ,  99.87 ,  11.607 ,  602\n",
      "m20overmaFVCPPcma , m20overma ,  FVCPPcma ,  99.861 ,  11.687 ,  602\n",
      "m20overmaMMEFPPcma , m20overma ,  MMEFPPcma ,  101.642 ,  27.755 ,  602\n",
      "m20overmaPEFRPPcma , m20overma ,  PEFRPPcma ,  100.423 ,  17.235 ,  602\n",
      "m20overmaFEF75OFVCPPcma , m20overma ,  FEF75OFVCPPcma ,  104.077 ,  66.018 ,  602\n",
      "m20overmaFEF75OPEFRPPcma , m20overma ,  FEF75OPEFRPPcma ,  102.47 ,  61.433 ,  602\n",
      "m20overmaFEV05OFEV3PPcma , m20overma ,  FEV05OFEV3PPcma ,  101.907 ,  9.356 ,  602\n",
      "m20overmaFEV05OFVCPPcma , m20overma ,  FEV05OFVCPPcma ,  101.958 ,  10.916 ,  602\n",
      "m20overmaFEV1OFEV3PPcma , m20overma ,  FEV1OFEV3PPcma ,  100.872 ,  4.938 ,  602\n",
      "m20overmaFEV1OFEV6PPcma , m20overma ,  FEV1OFEV6PPcma ,  100.923 ,  6.187 ,  602\n",
      "m20overmaFEV1OFVCPPcma , m20overma ,  FEV1OFVCPPcma ,  100.905 ,  7.066 ,  602\n",
      "m20overmaFEV3OFEV6PPcma , m20overma ,  FEV3OFEV6PPcma ,  100.048 ,  1.789 ,  602\n",
      "m20overmaFEV3OFVCPPcma , m20overma ,  FEV3OFVCPPcma ,  100.027 ,  3.177 ,  602\n",
      "m20overmaFEV6OFVCPPcma , m20overma ,  FEV6OFVCPPcma ,  99.98 ,  1.809 ,  602\n",
      "m20overmaMMEFOFVCPPcma , m20overma ,  MMEFOFVCPPcma ,  104.446 ,  30.386 ,  602\n",
      "m20overmaMMEFOPEFRPPcma , m20overma ,  MMEFOPEFRPPcma ,  102.961 ,  26.803 ,  602\n",
      "m20overmaPEFROFEV1PPcma , m20overma ,  PEFROFEV1PPcma ,  100.887 ,  14.926 ,  602\n",
      "m20overmaPEFROFEV6PPcma , m20overma ,  PEFROFEV6PPcma ,  101.847 ,  17.293 ,  602\n",
      "m20overmaPEFROFVCPPcma , m20overma ,  PEFROFVCPPcma ,  101.845 ,  17.654 ,  602\n",
      "m20overmaFEF75PPOFVCPPPPcma , m20overma ,  FEF75PPOFVCPPPPcma ,  100.469 ,  52.25 ,  602\n",
      "m20overmaMMEFPPOFVCPPPPcma , m20overma ,  MMEFPPOFVCPPPPcma ,  100.335 ,  29.439 ,  602\n",
      "m20overmaMMEFPPOPEFRPPPPcma , m20overma ,  MMEFPPOPEFRPPPPcma ,  100.64 ,  26.077 ,  602\n",
      "m20overmaPEFRPPOFEV1PPPPcma , m20overma ,  PEFRPPOFEV1PPPPcma ,  99.987 ,  14.64 ,  602\n",
      "m20overmaPEFRPPOFVCPPPPcma , m20overma ,  PEFRPPOFVCPPPPcma ,  100.066 ,  17.231 ,  602\n",
      "f18overbEXPIRPPcma , f18overb ,  EXPIRPPcma ,  98.202 ,  40.863 ,  957\n",
      "f18overbFEF75PPcma , f18overb ,  FEF75PPcma ,  87.676 ,  45.742 ,  957\n",
      "f18overbFEV05PPcma , f18overb ,  FEV05PPcma ,  88.064 ,  14.584 ,  957\n",
      "f18overbFEV1PPcma , f18overb ,  FEV1PPcma ,  85.558 ,  12.911 ,  957\n",
      "f18overbFEV3PPcma , f18overb ,  FEV3PPcma ,  84.425 ,  12.42 ,  957\n",
      "f18overbFEV6PPcma , f18overb ,  FEV6PPcma ,  84.486 ,  12.358 ,  957\n",
      "f18overbFVCPPcma , f18overb ,  FVCPPcma ,  84.569 ,  12.48 ,  957\n",
      "f18overbMMEFPPcma , f18overb ,  MMEFPPcma ,  90.722 ,  29.787 ,  957\n",
      "f18overbPEFRPPcma , f18overb ,  PEFRPPcma ,  96.372 ,  19.89 ,  957\n",
      "f18overbFEF75OFVCPPcma , f18overb ,  FEF75OFVCPPcma ,  103.218 ,  65.316 ,  957\n",
      "f18overbFEF75OPEFRPPcma , f18overb ,  FEF75OPEFRPPcma ,  92.098 ,  59.649 ,  957\n",
      "f18overbFEV05OFEV3PPcma , f18overb ,  FEV05OFEV3PPcma ,  103.105 ,  9.937 ,  957\n",
      "f18overbFEV05OFVCPPcma , f18overb ,  FEV05OFVCPPcma ,  102.947 ,  11.625 ,  957\n",
      "f18overbFEV1OFEV3PPcma , f18overb ,  FEV1OFEV3PPcma ,  100.906 ,  5.211 ,  957\n",
      "f18overbFEV1OFEV6PPcma , f18overb ,  FEV1OFEV6PPcma ,  100.807 ,  6.649 ,  957\n",
      "f18overbFEV1OFVCPPcma , f18overb ,  FEV1OFVCPPcma ,  100.732 ,  7.652 ,  957\n",
      "f18overbFEV3OFEV6PPcma , f18overb ,  FEV3OFEV6PPcma ,  99.89 ,  2.292 ,  957\n",
      "f18overbFEV3OFVCPPcma , f18overb ,  FEV3OFVCPPcma ,  99.805 ,  3.727 ,  957\n",
      "f18overbFEV6OFVCPPcma , f18overb ,  FEV6OFVCPPcma ,  99.911 ,  2.094 ,  957\n",
      "f18overbMMEFOFVCPPcma , f18overb ,  MMEFOFVCPPcma ,  104.528 ,  35.108 ,  957\n",
      "f18overbMMEFOPEFRPPcma , f18overb ,  MMEFOPEFRPPcma ,  92.86 ,  26.995 ,  957\n",
      "f18overbPEFROFEV1PPcma , f18overb ,  PEFROFEV1PPcma ,  111.599 ,  17.953 ,  957\n",
      "f18overbPEFROFEV6PPcma , f18overb ,  PEFROFEV6PPcma ,  112.51 ,  20.605 ,  957\n",
      "f18overbPEFROFVCPPcma , f18overb ,  PEFROFVCPPcma ,  112.454 ,  21.052 ,  957\n",
      "f18overbFEF75PPOFVCPPPPcma , f18overb ,  FEF75PPOFVCPPPPcma ,  100.295 ,  54.798 ,  957\n",
      "f18overbMMEFPPOFVCPPPPcma , f18overb ,  MMEFPPOFVCPPPPcma ,  100.163 ,  32.984 ,  957\n",
      "f18overbMMEFPPOPEFRPPPPcma , f18overb ,  MMEFPPOPEFRPPPPcma ,  100.127 ,  28.298 ,  957\n",
      "f18overbPEFRPPOFEV1PPPPcma , f18overb ,  PEFRPPOFEV1PPPPcma ,  99.857 ,  15.657 ,  957\n",
      "f18overbPEFRPPOFVCPPPPcma , f18overb ,  PEFRPPOFVCPPPPcma ,  99.919 ,  18.303 ,  957\n",
      "f18overcmaEXPIRPPcma , f18overcma ,  EXPIRPPcma ,  100.073 ,  36.501 ,  2113\n",
      "f18overcmaFEF75PPcma , f18overcma ,  FEF75PPcma ,  100.634 ,  51.17 ,  2113\n",
      "f18overcmaFEV05PPcma , f18overcma ,  FEV05PPcma ,  100.05 ,  14.653 ,  2113\n",
      "f18overcmaFEV1PPcma , f18overcma ,  FEV1PPcma ,  100.079 ,  13.69 ,  2113\n",
      "f18overcmaFEV3PPcma , f18overcma ,  FEV3PPcma ,  100.085 ,  13.319 ,  2113\n",
      "f18overcmaFEV6PPcma , f18overcma ,  FEV6PPcma ,  100.065 ,  13.301 ,  2113\n",
      "f18overcmaFVCPPcma , f18overcma ,  FVCPPcma ,  100.041 ,  13.411 ,  2113\n",
      "f18overcmaMMEFPPcma , f18overcma ,  MMEFPPcma ,  100.3 ,  31.094 ,  2113\n",
      "f18overcmaPEFRPPcma , f18overcma ,  PEFRPPcma ,  100.031 ,  18.64 ,  2113\n",
      "f18overcmaFEF75OFVCPPcma , f18overcma ,  FEF75OFVCPPcma ,  102.378 ,  68.357 ,  2113\n",
      "f18overcmaFEF75OPEFRPPcma , f18overcma ,  FEF75OPEFRPPcma ,  103.207 ,  65.59 ,  2113\n",
      "f18overcmaFEV05OFEV3PPcma , f18overcma ,  FEV05OFEV3PPcma ,  100.0 ,  9.61 ,  2113\n",
      "f18overcmaFEV05OFVCPPcma , f18overcma ,  FEV05OFVCPPcma ,  99.999 ,  11.265 ,  2113\n",
      "f18overcmaFEV1OFEV3PPcma , f18overcma ,  FEV1OFEV3PPcma ,  100.0 ,  5.179 ,  2113\n",
      "f18overcmaFEV1OFEV6PPcma , f18overcma ,  FEV1OFEV6PPcma ,  100.0 ,  6.517 ,  2113\n",
      "f18overcmaFEV1OFVCPPcma , f18overcma ,  FEV1OFVCPPcma ,  100.001 ,  7.64 ,  2113\n",
      "f18overcmaFEV3OFEV6PPcma , f18overcma ,  FEV3OFEV6PPcma ,  100.0 ,  2.077 ,  2113\n",
      "f18overcmaFEV3OFVCPPcma , f18overcma ,  FEV3OFVCPPcma ,  100.001 ,  3.818 ,  2113\n",
      "f18overcmaFEV6OFVCPPcma , f18overcma ,  FEV6OFVCPPcma ,  100.0 ,  2.271 ,  2113\n",
      "f18overcmaMMEFOFVCPPcma , f18overcma ,  MMEFOFVCPPcma ,  99.993 ,  33.8 ,  2113\n",
      "f18overcmaMMEFOPEFRPPcma , f18overcma ,  MMEFOPEFRPPcma ,  100.053 ,  28.831 ,  2113\n",
      "f18overcmaPEFROFEV1PPcma , f18overcma ,  PEFROFEV1PPcma ,  99.994 ,  15.522 ,  2113\n",
      "f18overcmaPEFROFEV6PPcma , f18overcma ,  PEFROFEV6PPcma ,  99.999 ,  17.84 ,  2113\n",
      "f18overcmaPEFROFVCPPcma , f18overcma ,  PEFROFVCPPcma ,  100.0 ,  18.227 ,  2113\n",
      "f18overcmaFEF75PPOFVCPPPPcma , f18overcma ,  FEF75PPOFVCPPPPcma ,  100.001 ,  61.567 ,  2113\n",
      "f18overcmaMMEFPPOFVCPPPPcma , f18overcma ,  MMEFPPOFVCPPPPcma ,  100.0 ,  33.35 ,  2113\n",
      "f18overcmaMMEFPPOPEFRPPPPcma , f18overcma ,  MMEFPPOPEFRPPPPcma ,  100.0 ,  28.504 ,  2113\n",
      "f18overcmaPEFRPPOFEV1PPPPcma , f18overcma ,  PEFRPPOFEV1PPPPcma ,  100.0 ,  15.366 ,  2113\n",
      "f18overcmaPEFRPPOFVCPPPPcma , f18overcma ,  PEFRPPOFVCPPPPcma ,  100.0 ,  17.967 ,  2113\n",
      "f18overcEXPIRPPcma , f18overc ,  EXPIRPPcma ,  98.264 ,  35.761 ,  1108\n",
      "f18overcFEF75PPcma , f18overc ,  FEF75PPcma ,  100.003 ,  53.202 ,  1108\n",
      "f18overcFEV05PPcma , f18overc ,  FEV05PPcma ,  99.944 ,  15.287 ,  1108\n",
      "f18overcFEV1PPcma , f18overc ,  FEV1PPcma ,  100.288 ,  14.519 ,  1108\n",
      "f18overcFEV3PPcma , f18overc ,  FEV3PPcma ,  100.507 ,  14.158 ,  1108\n",
      "f18overcFEV6PPcma , f18overc ,  FEV6PPcma ,  100.416 ,  14.111 ,  1108\n",
      "f18overcFVCPPcma , f18overc ,  FVCPPcma ,  100.253 ,  14.21 ,  1108\n",
      "f18overcMMEFPPcma , f18overc ,  MMEFPPcma ,  99.731 ,  33.507 ,  1108\n",
      "f18overcPEFRPPcma , f18overc ,  PEFRPPcma ,  100.624 ,  18.612 ,  1108\n",
      "f18overcFEF75OFVCPPcma , f18overc ,  FEF75OFVCPPcma ,  102.921 ,  73.91 ,  1108\n",
      "f18overcFEF75OPEFRPPcma , f18overc ,  FEF75OPEFRPPcma ,  104.808 ,  73.394 ,  1108\n",
      "f18overcFEV05OFEV3PPcma , f18overc ,  FEV05OFEV3PPcma ,  98.594 ,  9.127 ,  1108\n",
      "f18overcFEV05OFVCPPcma , f18overc ,  FEV05OFVCPPcma ,  98.742 ,  11.151 ,  1108\n",
      "f18overcFEV1OFEV3PPcma , f18overc ,  FEV1OFEV3PPcma ,  99.456 ,  5.101 ,  1108\n",
      "f18overcFEV1OFEV6PPcma , f18overc ,  FEV1OFEV6PPcma ,  99.506 ,  6.593 ,  1108\n",
      "f18overcFEV1OFVCPPcma , f18overc ,  FEV1OFVCPPcma ,  99.623 ,  7.987 ,  1108\n",
      "f18overcFEV3OFEV6PPcma , f18overc ,  FEV3OFEV6PPcma ,  100.051 ,  2.234 ,  1108\n",
      "f18overcFEV3OFVCPPcma , f18overc ,  FEV3OFVCPPcma ,  100.166 ,  4.284 ,  1108\n",
      "f18overcFEV6OFVCPPcma , f18overc ,  FEV6OFVCPPcma ,  100.112 ,  2.607 ,  1108\n",
      "f18overcMMEFOFVCPPcma , f18overc ,  MMEFOFVCPPcma ,  96.562 ,  34.668 ,  1108\n",
      "f18overcMMEFOPEFRPPcma , f18overc ,  MMEFOPEFRPPcma ,  97.182 ,  30.34 ,  1108\n",
      "f18overcPEFROFEV1PPcma , f18overc ,  PEFROFEV1PPcma ,  99.76 ,  14.845 ,  1108\n",
      "f18overcPEFROFEV6PPcma , f18overc ,  PEFROFEV6PPcma ,  99.177 ,  17.0 ,  1108\n",
      "f18overcPEFROFVCPPcma , f18overc ,  PEFROFVCPPcma ,  99.282 ,  17.539 ,  1108\n",
      "f18overcFEF75PPOFVCPPPPcma , f18overc ,  FEF75PPOFVCPPPPcma ,  99.298 ,  63.131 ,  1108\n",
      "f18overcMMEFPPOFVCPPPPcma , f18overc ,  MMEFPPOFVCPPPPcma ,  99.651 ,  35.023 ,  1108\n",
      "f18overcMMEFPPOPEFRPPPPcma , f18overc ,  MMEFPPOPEFRPPPPcma ,  99.398 ,  30.326 ,  1108\n",
      "f18overcPEFRPPOFEV1PPPPcma , f18overc ,  PEFRPPOFEV1PPPPcma ,  100.075 ,  14.665 ,  1108\n",
      "f18overcPEFRPPOFVCPPPPcma , f18overc ,  PEFRPPOFVCPPPPcma ,  99.985 ,  17.319 ,  1108\n",
      "f18overmaEXPIRPPcma , f18overma ,  EXPIRPPcma ,  102.067 ,  37.216 ,  1005\n",
      "f18overmaFEF75PPcma , f18overma ,  FEF75PPcma ,  101.331 ,  48.848 ,  1005\n",
      "f18overmaFEV05PPcma , f18overma ,  FEV05PPcma ,  100.167 ,  13.928 ,  1005\n",
      "f18overmaFEV1PPcma , f18overma ,  FEV1PPcma ,  99.849 ,  12.716 ,  1005\n",
      "f18overmaFEV3PPcma , f18overma ,  FEV3PPcma ,  99.62 ,  12.318 ,  1005\n",
      "f18overmaFEV6PPcma , f18overma ,  FEV6PPcma ,  99.677 ,  12.342 ,  1005\n",
      "f18overmaFVCPPcma , f18overma ,  FVCPPcma ,  99.806 ,  12.475 ,  1005\n",
      "f18overmaMMEFPPcma , f18overma ,  MMEFPPcma ,  100.927 ,  28.197 ,  1005\n",
      "f18overmaPEFRPPcma , f18overma ,  PEFRPPcma ,  99.378 ,  18.658 ,  1005\n",
      "f18overmaFEF75OFVCPPcma , f18overma ,  FEF75OFVCPPcma ,  101.779 ,  61.688 ,  1005\n",
      "f18overmaFEF75OPEFRPPcma , f18overma ,  FEF75OPEFRPPcma ,  101.442 ,  55.719 ,  1005\n",
      "f18overmaFEV05OFEV3PPcma , f18overma ,  FEV05OFEV3PPcma ,  101.551 ,  9.892 ,  1005\n",
      "f18overmaFEV05OFVCPPcma , f18overma ,  FEV05OFVCPPcma ,  101.385 ,  11.233 ,  1005\n",
      "f18overmaFEV1OFEV3PPcma , f18overma ,  FEV1OFEV3PPcma ,  100.6 ,  5.201 ,  1005\n",
      "f18overmaFEV1OFEV6PPcma , f18overma ,  FEV1OFEV6PPcma ,  100.545 ,  6.392 ,  1005\n",
      "f18overmaFEV1OFVCPPcma , f18overma ,  FEV1OFVCPPcma ,  100.419 ,  7.218 ,  1005\n",
      "f18overmaFEV3OFEV6PPcma , f18overma ,  FEV3OFEV6PPcma ,  99.944 ,  1.889 ,  1005\n",
      "f18overmaFEV3OFVCPPcma , f18overma ,  FEV3OFVCPPcma ,  99.818 ,  3.22 ,  1005\n",
      "f18overmaFEV6OFVCPPcma , f18overma ,  FEV6OFVCPPcma ,  99.876 ,  1.824 ,  1005\n",
      "f18overmaMMEFOFVCPPcma , f18overma ,  MMEFOFVCPPcma ,  103.776 ,  32.416 ,  1005\n",
      "f18overmaMMEFOPEFRPPcma , f18overma ,  MMEFOPEFRPPcma ,  103.218 ,  26.73 ,  1005\n",
      "f18overmaPEFROFEV1PPcma , f18overma ,  PEFROFEV1PPcma ,  100.251 ,  16.24 ,  1005\n",
      "f18overmaPEFROFEV6PPcma , f18overma ,  PEFROFEV6PPcma ,  100.905 ,  18.688 ,  1005\n",
      "f18overmaPEFROFVCPPcma , f18overma ,  PEFROFVCPPcma ,  100.791 ,  18.935 ,  1005\n",
      "f18overmaFEF75PPOFVCPPPPcma , f18overma ,  FEF75PPOFVCPPPPcma ,  100.586 ,  59.573 ,  1005\n",
      "f18overmaMMEFPPOFVCPPPPcma , f18overma ,  MMEFPPOFVCPPPPcma ,  100.789 ,  37.269 ,  1005\n",
      "f18overmaMMEFPPOPEFRPPPPcma , f18overma ,  MMEFPPOPEFRPPPPcma ,  100.83 ,  27.681 ,  1005\n",
      "f18overmaPEFRPPOFEV1PPPPcma , f18overma ,  PEFRPPOFEV1PPPPcma ,  99.946 ,  16.097 ,  1005\n",
      "f18overmaPEFRPPOFVCPPPPcma , f18overma ,  PEFRPPOFVCPPPPcma ,  100.045 ,  18.722 ,  1005\n",
      "mlt20bEXPIRPPcma , mlt20b ,  EXPIRPPcma ,  95.177 ,  39.371 ,  599\n",
      "mlt20bFEF75PPcma , mlt20b ,  FEF75PPcma ,  82.0 ,  32.29 ,  599\n",
      "mlt20bFEV05PPcma , mlt20b ,  FEV05PPcma ,  87.025 ,  12.701 ,  599\n",
      "mlt20bFEV1PPcma , mlt20b ,  FEV1PPcma ,  84.077 ,  11.205 ,  599\n",
      "mlt20bFEV3PPcma , mlt20b ,  FEV3PPcma ,  83.407 ,  10.737 ,  599\n",
      "mlt20bFEV6PPcma , mlt20b ,  FEV6PPcma ,  83.626 ,  10.783 ,  599\n",
      "mlt20bFVCPPcma , mlt20b ,  FVCPPcma ,  83.691 ,  10.808 ,  599\n",
      "mlt20bMMEFPPcma , mlt20b ,  MMEFPPcma ,  87.303 ,  24.272 ,  599\n",
      "mlt20bPEFRPPcma , mlt20b ,  PEFRPPcma ,  94.57 ,  16.426 ,  599\n",
      "mlt20bFEF75OFVCPPcma , mlt20b ,  FEF75OFVCPPcma ,  98.392 ,  39.886 ,  599\n",
      "mlt20bFEF75OPEFRPPcma , mlt20b ,  FEF75OPEFRPPcma ,  86.777 ,  31.053 ,  599\n",
      "mlt20bFEV05OFEV3PPcma , mlt20b ,  FEV05OFEV3PPcma ,  103.804 ,  10.58 ,  599\n",
      "mlt20bFEV05OFVCPPcma , mlt20b ,  FEV05OFVCPPcma ,  103.53 ,  11.527 ,  599\n",
      "mlt20bFEV1OFEV3PPcma , mlt20b ,  FEV1OFEV3PPcma ,  100.677 ,  6.059 ,  599\n",
      "mlt20bFEV1OFEV6PPcma , mlt20b ,  FEV1OFEV6PPcma ,  100.46 ,  7.07 ,  599\n",
      "mlt20bFEV1OFVCPPcma , mlt20b ,  FEV1OFVCPPcma ,  100.398 ,  7.262 ,  599\n",
      "mlt20bFEV3OFEV6PPcma , mlt20b ,  FEV3OFEV6PPcma ,  99.769 ,  1.711 ,  599\n",
      "mlt20bFEV3OFVCPPcma , mlt20b ,  FEV3OFVCPPcma ,  99.704 ,  2.017 ,  599\n",
      "mlt20bFEV6OFVCPPcma , mlt20b ,  FEV6OFVCPPcma ,  99.933 ,  0.624 ,  599\n",
      "mlt20bMMEFOFVCPPcma , mlt20b ,  MMEFOFVCPPcma ,  103.819 ,  29.137 ,  599\n",
      "mlt20bMMEFOPEFRPPcma , mlt20b ,  MMEFOPEFRPPcma ,  92.006 ,  19.549 ,  599\n",
      "mlt20bPEFROFEV1PPcma , mlt20b ,  PEFROFEV1PPcma ,  111.769 ,  14.182 ,  599\n",
      "mlt20bPEFROFEV6PPcma , mlt20b ,  PEFROFEV6PPcma ,  112.372 ,  18.124 ,  599\n",
      "mlt20bPEFROFVCPPcma , mlt20b ,  PEFROFVCPPcma ,  112.311 ,  18.243 ,  599\n",
      "mlt20bFEF75PPOFVCPPPPcma , mlt20b ,  FEF75PPOFVCPPPPcma ,  100.0 ,  40.515 ,  599\n",
      "mlt20bMMEFPPOFVCPPPPcma , mlt20b ,  MMEFPPOFVCPPPPcma ,  99.984 ,  27.971 ,  599\n",
      "mlt20bMMEFPPOPEFRPPPPcma , mlt20b ,  MMEFPPOPEFRPPPPcma ,  99.562 ,  21.193 ,  599\n",
      "mlt20bPEFRPPOFEV1PPPPcma , mlt20b ,  PEFRPPOFEV1PPPPcma ,  99.919 ,  12.485 ,  599\n",
      "mlt20bPEFRPPOFVCPPPPcma , mlt20b ,  PEFRPPOFVCPPPPcma ,  99.974 ,  15.983 ,  599\n",
      "mlt20cmaEXPIRPPcma , mlt20cma ,  EXPIRPPcma ,  99.995 ,  35.687 ,  1019\n",
      "mlt20cmaFEF75PPcma , mlt20cma ,  FEF75PPcma ,  100.389 ,  34.284 ,  1019\n",
      "mlt20cmaFEV05PPcma , mlt20cma ,  FEV05PPcma ,  100.069 ,  12.461 ,  1019\n",
      "mlt20cmaFEV1PPcma , mlt20cma ,  FEV1PPcma ,  100.096 ,  11.073 ,  1019\n",
      "mlt20cmaFEV3PPcma , mlt20cma ,  FEV3PPcma ,  100.073 ,  10.629 ,  1019\n",
      "mlt20cmaFEV6PPcma , mlt20cma ,  FEV6PPcma ,  100.059 ,  10.657 ,  1019\n",
      "mlt20cmaFVCPPcma , mlt20cma ,  FVCPPcma ,  100.056 ,  10.688 ,  1019\n",
      "mlt20cmaMMEFPPcma , mlt20cma ,  MMEFPPcma ,  100.152 ,  23.635 ,  1019\n",
      "mlt20cmaPEFRPPcma , mlt20cma ,  PEFRPPcma ,  100.07 ,  15.959 ,  1019\n",
      "mlt20cmaFEF75OFVCPPcma , mlt20cma ,  FEF75OFVCPPcma ,  100.0 ,  34.941 ,  1019\n",
      "mlt20cmaFEF75OPEFRPPcma , mlt20cma ,  FEF75OPEFRPPcma ,  100.0 ,  33.238 ,  1019\n",
      "mlt20cmaFEV05OFEV3PPcma , mlt20cma ,  FEV05OFEV3PPcma ,  100.0 ,  9.674 ,  1019\n",
      "mlt20cmaFEV05OFVCPPcma , mlt20cma ,  FEV05OFVCPPcma ,  100.0 ,  10.356 ,  1019\n",
      "mlt20cmaFEV1OFEV3PPcma , mlt20cma ,  FEV1OFEV3PPcma ,  100.0 ,  5.533 ,  1019\n",
      "mlt20cmaFEV1OFEV6PPcma , mlt20cma ,  FEV1OFEV6PPcma ,  100.0 ,  6.355 ,  1019\n",
      "mlt20cmaFEV1OFVCPPcma , mlt20cma ,  FEV1OFVCPPcma ,  100.0 ,  6.503 ,  1019\n",
      "mlt20cmaFEV3OFEV6PPcma , mlt20cma ,  FEV3OFEV6PPcma ,  100.0 ,  1.465 ,  1019\n",
      "mlt20cmaFEV3OFVCPPcma , mlt20cma ,  FEV3OFVCPPcma ,  100.0 ,  1.74 ,  1019\n",
      "mlt20cmaFEV6OFVCPPcma , mlt20cma ,  FEV6OFVCPPcma ,  100.0 ,  0.59 ,  1019\n",
      "mlt20cmaMMEFOFVCPPcma , mlt20cma ,  MMEFOFVCPPcma ,  100.0 ,  24.248 ,  1019\n",
      "mlt20cmaMMEFOPEFRPPcma , mlt20cma ,  MMEFOPEFRPPcma ,  100.0 ,  18.609 ,  1019\n",
      "mlt20cmaPEFROFEV1PPcma , mlt20cma ,  PEFROFEV1PPcma ,  100.0 ,  13.028 ,  1019\n",
      "mlt20cmaPEFROFEV6PPcma , mlt20cma ,  PEFROFEV6PPcma ,  100.0 ,  15.682 ,  1019\n",
      "mlt20cmaPEFROFVCPPcma , mlt20cma ,  PEFROFVCPPcma ,  100.0 ,  15.719 ,  1019\n",
      "mlt20cmaFEF75PPOFVCPPPPcma , mlt20cma ,  FEF75PPOFVCPPPPcma ,  100.0 ,  35.139 ,  1019\n",
      "mlt20cmaMMEFPPOFVCPPPPcma , mlt20cma ,  MMEFPPOFVCPPPPcma ,  100.0 ,  24.133 ,  1019\n",
      "mlt20cmaMMEFPPOPEFRPPPPcma , mlt20cma ,  MMEFPPOPEFRPPPPcma ,  100.0 ,  18.68 ,  1019\n",
      "mlt20cmaPEFRPPOFEV1PPPPcma , mlt20cma ,  PEFRPPOFEV1PPPPcma ,  100.0 ,  12.785 ,  1019\n",
      "mlt20cmaPEFRPPOFVCPPPPcma , mlt20cma ,  PEFRPPOFVCPPPPcma ,  100.0 ,  15.458 ,  1019\n",
      "mlt20cEXPIRPPcma , mlt20c ,  EXPIRPPcma ,  102.192 ,  35.163 ,  419\n",
      "mlt20cFEF75PPcma , mlt20c ,  FEF75PPcma ,  93.615 ,  31.885 ,  419\n",
      "mlt20cFEV05PPcma , mlt20c ,  FEV05PPcma ,  97.386 ,  12.007 ,  419\n",
      "mlt20cFEV1PPcma , mlt20c ,  FEV1PPcma ,  97.722 ,  10.563 ,  419\n",
      "mlt20cFEV3PPcma , mlt20c ,  FEV3PPcma ,  98.636 ,  10.135 ,  419\n",
      "mlt20cFEV6PPcma , mlt20c ,  FEV6PPcma ,  98.74 ,  10.185 ,  419\n",
      "mlt20cFVCPPcma , mlt20c ,  FVCPPcma ,  98.739 ,  10.257 ,  419\n",
      "mlt20cMMEFPPcma , mlt20c ,  MMEFPPcma ,  94.833 ,  22.596 ,  419\n",
      "mlt20cPEFRPPcma , mlt20c ,  PEFRPPcma ,  98.433 ,  15.35 ,  419\n",
      "mlt20cFEF75OFVCPPcma , mlt20c ,  FEF75OFVCPPcma ,  94.908 ,  33.317 ,  419\n",
      "mlt20cFEF75OPEFRPPcma , mlt20c ,  FEF75OPEFRPPcma ,  95.419 ,  29.649 ,  419\n",
      "mlt20cFEV05OFEV3PPcma , mlt20c ,  FEV05OFEV3PPcma ,  98.208 ,  9.442 ,  419\n",
      "mlt20cFEV05OFVCPPcma , mlt20c ,  FEV05OFVCPPcma ,  98.144 ,  10.188 ,  419\n",
      "mlt20cFEV1OFEV3PPcma , mlt20c ,  FEV1OFEV3PPcma ,  98.935 ,  5.6 ,  419\n",
      "mlt20cFEV1OFEV6PPcma , mlt20c ,  FEV1OFEV6PPcma ,  98.854 ,  6.445 ,  419\n",
      "mlt20cFEV1OFVCPPcma , mlt20c ,  FEV1OFVCPPcma ,  98.867 ,  6.589 ,  419\n",
      "mlt20cFEV3OFEV6PPcma , mlt20c ,  FEV3OFEV6PPcma ,  99.915 ,  1.429 ,  419\n",
      "mlt20cFEV3OFVCPPcma , mlt20c ,  FEV3OFVCPPcma ,  99.928 ,  1.721 ,  419\n",
      "mlt20cFEV6OFVCPPcma , mlt20c ,  FEV6OFVCPPcma ,  100.013 ,  0.642 ,  419\n",
      "mlt20cMMEFOFVCPPcma , mlt20c ,  MMEFOFVCPPcma ,  95.417 ,  23.544 ,  419\n",
      "mlt20cMMEFOPEFRPPcma , mlt20c ,  MMEFOPEFRPPcma ,  96.28 ,  17.601 ,  419\n",
      "mlt20cPEFROFEV1PPcma , mlt20c ,  PEFROFEV1PPcma ,  100.056 ,  12.191 ,  419\n",
      "mlt20cPEFROFEV6PPcma , mlt20c ,  PEFROFEV6PPcma ,  98.926 ,  15.024 ,  419\n",
      "mlt20cPEFROFVCPPcma , mlt20c ,  PEFROFVCPPcma ,  98.944 ,  15.104 ,  419\n",
      "mlt20cFEF75PPOFVCPPPPcma , mlt20c ,  FEF75PPOFVCPPPPcma ,  100.0 ,  35.286 ,  419\n",
      "mlt20cMMEFPPOFVCPPPPcma , mlt20c ,  MMEFPPOFVCPPPPcma ,  99.988 ,  24.623 ,  419\n",
      "mlt20cMMEFPPOPEFRPPPPcma , mlt20c ,  MMEFPPOPEFRPPPPcma ,  99.805 ,  18.176 ,  419\n",
      "mlt20cPEFRPPOFEV1PPPPcma , mlt20c ,  PEFRPPOFEV1PPPPcma ,  99.916 ,  11.748 ,  419\n",
      "mlt20cPEFRPPOFVCPPPPcma , mlt20c ,  PEFRPPOFVCPPPPcma ,  99.951 ,  14.907 ,  419\n",
      "mlt20maEXPIRPPcma , mlt20ma ,  EXPIRPPcma ,  98.461 ,  35.998 ,  600\n",
      "mlt20maFEF75PPcma , mlt20ma ,  FEF75PPcma ,  105.12 ,  35.123 ,  600\n",
      "mlt20maFEV05PPcma , mlt20ma ,  FEV05PPcma ,  101.943 ,  12.439 ,  600\n",
      "mlt20maFEV1PPcma , mlt20ma ,  FEV1PPcma ,  101.754 ,  11.128 ,  600\n",
      "mlt20maFEV3PPcma , mlt20ma ,  FEV3PPcma ,  101.076 ,  10.857 ,  600\n",
      "mlt20maFEV6PPcma , mlt20ma ,  FEV6PPcma ,  100.979 ,  10.889 ,  600\n",
      "mlt20maFVCPPcma , mlt20ma ,  FVCPPcma ,  100.975 ,  10.894 ,  600\n",
      "mlt20maMMEFPPcma , mlt20ma ,  MMEFPPcma ,  103.867 ,  23.653 ,  600\n",
      "mlt20maPEFRPPcma , mlt20ma ,  PEFRPPcma ,  101.213 ,  16.287 ,  600\n",
      "mlt20maFEF75OFVCPPcma , mlt20ma ,  FEF75OFVCPPcma ,  103.556 ,  35.629 ,  600\n",
      "mlt20maFEF75OPEFRPPcma , mlt20ma ,  FEF75OPEFRPPcma ,  103.199 ,  35.203 ,  600\n",
      "mlt20maFEV05OFEV3PPcma , mlt20ma ,  FEV05OFEV3PPcma ,  101.252 ,  9.645 ,  600\n",
      "mlt20maFEV05OFVCPPcma , mlt20ma ,  FEV05OFVCPPcma ,  101.296 ,  10.283 ,  600\n",
      "mlt20maFEV1OFEV3PPcma , mlt20ma ,  FEV1OFEV3PPcma ,  100.744 ,  5.366 ,  600\n",
      "mlt20maFEV1OFEV6PPcma , mlt20ma ,  FEV1OFEV6PPcma ,  100.8 ,  6.172 ,  600\n",
      "mlt20maFEV1OFVCPPcma , mlt20ma ,  FEV1OFVCPPcma ,  100.791 ,  6.329 ,  600\n",
      "mlt20maFEV3OFEV6PPcma , mlt20ma ,  FEV3OFEV6PPcma ,  100.059 ,  1.488 ,  600\n",
      "mlt20maFEV3OFVCPPcma , mlt20ma ,  FEV3OFVCPPcma ,  100.05 ,  1.753 ,  600\n",
      "mlt20maFEV6OFVCPPcma , mlt20ma ,  FEV6OFVCPPcma ,  99.991 ,  0.552 ,  600\n",
      "mlt20maMMEFOFVCPPcma , mlt20ma ,  MMEFOFVCPPcma ,  103.201 ,  24.237 ,  600\n",
      "mlt20maMMEFOPEFRPPcma , mlt20ma ,  MMEFOPEFRPPcma ,  102.598 ,  18.865 ,  600\n",
      "mlt20maPEFROFEV1PPcma , mlt20ma ,  PEFROFEV1PPcma ,  99.961 ,  13.592 ,  600\n",
      "mlt20maPEFROFEV6PPcma , mlt20ma ,  PEFROFEV6PPcma ,  100.75 ,  16.096 ,  600\n",
      "mlt20maPEFROFVCPPcma , mlt20ma ,  PEFROFVCPPcma ,  100.737 ,  16.106 ,  600\n",
      "mlt20maFEF75PPOFVCPPPPcma , mlt20ma ,  FEF75PPOFVCPPPPcma ,  100.189 ,  34.644 ,  600\n",
      "mlt20maMMEFPPOFVCPPPPcma , mlt20ma ,  MMEFPPOFVCPPPPcma ,  100.116 ,  23.429 ,  600\n",
      "mlt20maMMEFPPOPEFRPPPPcma , mlt20ma ,  MMEFPPOPEFRPPPPcma ,  100.211 ,  18.475 ,  600\n",
      "mlt20maPEFRPPOFEV1PPPPcma , mlt20ma ,  PEFRPPOFEV1PPPPcma ,  100.041 ,  13.447 ,  600\n",
      "mlt20maPEFRPPOFVCPPPPcma , mlt20ma ,  PEFRPPOFVCPPPPcma ,  100.061 ,  15.839 ,  600\n",
      "flt18bEXPIRPPcma , flt18b ,  EXPIRPPcma ,  93.882 ,  41.469 ,  590\n",
      "flt18bFEF75PPcma , flt18b ,  FEF75PPcma ,  83.034 ,  30.466 ,  590\n",
      "flt18bFEV05PPcma , flt18b ,  FEV05PPcma ,  87.705 ,  12.561 ,  590\n",
      "flt18bFEV1PPcma , flt18b ,  FEV1PPcma ,  85.338 ,  11.177 ,  590\n",
      "flt18bFEV3PPcma , flt18b ,  FEV3PPcma ,  85.232 ,  10.812 ,  590\n",
      "flt18bFEV6PPcma , flt18b ,  FEV6PPcma ,  85.426 ,  10.812 ,  590\n",
      "flt18bFVCPPcma , flt18b ,  FVCPPcma ,  85.519 ,  10.827 ,  590\n",
      "flt18bMMEFPPcma , flt18b ,  MMEFPPcma ,  87.641 ,  23.34 ,  590\n",
      "flt18bPEFRPPcma , flt18b ,  PEFRPPcma ,  95.767 ,  17.197 ,  590\n",
      "flt18bFEF75OFVCPPcma , flt18b ,  FEF75OFVCPPcma ,  97.622 ,  38.582 ,  590\n",
      "flt18bFEF75OPEFRPPcma , flt18b ,  FEF75OPEFRPPcma ,  87.18 ,  31.292 ,  590\n",
      "flt18bFEV05OFEV3PPcma , flt18b ,  FEV05OFEV3PPcma ,  102.138 ,  11.177 ,  590\n",
      "flt18bFEV05OFVCPPcma , flt18b ,  FEV05OFVCPPcma ,  101.881 ,  12.124 ,  590\n",
      "flt18bFEV1OFEV3PPcma , flt18b ,  FEV1OFEV3PPcma ,  99.959 ,  6.563 ,  590\n",
      "flt18bFEV1OFEV6PPcma , flt18b ,  FEV1OFEV6PPcma ,  99.746 ,  7.482 ,  590\n",
      "flt18bFEV1OFVCPPcma , flt18b ,  FEV1OFVCPPcma ,  99.685 ,  7.834 ,  590\n",
      "flt18bFEV3OFEV6PPcma , flt18b ,  FEV3OFEV6PPcma ,  99.751 ,  1.788 ,  590\n",
      "flt18bFEV3OFVCPPcma , flt18b ,  FEV3OFVCPPcma ,  99.671 ,  2.538 ,  590\n",
      "flt18bFEV6OFVCPPcma , flt18b ,  FEV6OFVCPPcma ,  99.909 ,  1.214 ,  590\n",
      "flt18bMMEFOFVCPPcma , flt18b ,  MMEFOFVCPPcma ,  101.355 ,  28.491 ,  590\n",
      "flt18bMMEFOPEFRPPcma , flt18b ,  MMEFOPEFRPPcma ,  90.851 ,  19.119 ,  590\n",
      "flt18bPEFROFEV1PPcma , flt18b ,  PEFROFEV1PPcma ,  111.12 ,  15.755 ,  590\n",
      "flt18bPEFROFEV6PPcma , flt18b ,  PEFROFEV6PPcma ,  111.026 ,  19.552 ,  590\n",
      "flt18bPEFROFVCPPcma , flt18b ,  PEFROFVCPPcma ,  110.976 ,  19.727 ,  590\n",
      "flt18bFEF75PPOFVCPPPPcma , flt18b ,  FEF75PPOFVCPPPPcma ,  100.765 ,  40.073 ,  590\n",
      "flt18bMMEFPPOFVCPPPPcma , flt18b ,  MMEFPPOFVCPPPPcma ,  100.558 ,  28.242 ,  590\n",
      "flt18bMMEFPPOPEFRPPPPcma , flt18b ,  MMEFPPOPEFRPPPPcma ,  99.65 ,  20.919 ,  590\n",
      "flt18bPEFRPPOFEV1PPPPcma , flt18b ,  PEFRPPOFEV1PPPPcma ,  100.068 ,  13.973 ,  590\n",
      "flt18bPEFRPPOFVCPPPPcma , flt18b ,  PEFRPPOFVCPPPPcma ,  100.358 ,  17.633 ,  590\n",
      "flt18cmaEXPIRPPcma , flt18cma ,  EXPIRPPcma ,  99.996 ,  40.453 ,  966\n",
      "flt18cmaFEF75PPcma , flt18cma ,  FEF75PPcma ,  100.12 ,  31.259 ,  966\n",
      "flt18cmaFEV05PPcma , flt18cma ,  FEV05PPcma ,  100.012 ,  12.942 ,  966\n",
      "flt18cmaFEV1PPcma , flt18cma ,  FEV1PPcma ,  100.045 ,  11.496 ,  966\n",
      "flt18cmaFEV3PPcma , flt18cma ,  FEV3PPcma ,  100.044 ,  11.424 ,  966\n",
      "flt18cmaFEV6PPcma , flt18cma ,  FEV6PPcma ,  100.036 ,  11.543 ,  966\n",
      "flt18cmaFVCPPcma , flt18cma ,  FVCPPcma ,  100.035 ,  11.535 ,  966\n",
      "flt18cmaMMEFPPcma , flt18cma ,  MMEFPPcma ,  99.996 ,  22.312 ,  966\n",
      "flt18cmaPEFRPPcma , flt18cma ,  PEFRPPcma ,  99.997 ,  17.092 ,  966\n",
      "flt18cmaFEF75OFVCPPcma , flt18cma ,  FEF75OFVCPPcma ,  100.0 ,  32.697 ,  966\n",
      "flt18cmaFEF75OPEFRPPcma , flt18cma ,  FEF75OPEFRPPcma ,  100.002 ,  32.63 ,  966\n",
      "flt18cmaFEV05OFEV3PPcma , flt18cma ,  FEV05OFEV3PPcma ,  100.0 ,  9.703 ,  966\n",
      "flt18cmaFEV05OFVCPPcma , flt18cma ,  FEV05OFVCPPcma ,  100.0 ,  10.167 ,  966\n",
      "flt18cmaFEV1OFEV3PPcma , flt18cma ,  FEV1OFEV3PPcma ,  100.0 ,  5.217 ,  966\n",
      "flt18cmaFEV1OFEV6PPcma , flt18cma ,  FEV1OFEV6PPcma ,  100.0 ,  5.836 ,  966\n",
      "flt18cmaFEV1OFVCPPcma , flt18cma ,  FEV1OFVCPPcma ,  100.0 ,  5.947 ,  966\n",
      "flt18cmaFEV3OFEV6PPcma , flt18cma ,  FEV3OFEV6PPcma ,  100.0 ,  1.328 ,  966\n",
      "flt18cmaFEV3OFVCPPcma , flt18cma ,  FEV3OFVCPPcma ,  100.0 ,  1.542 ,  966\n",
      "flt18cmaFEV6OFVCPPcma , flt18cma ,  FEV6OFVCPPcma ,  100.0 ,  0.461 ,  966\n",
      "flt18cmaMMEFOFVCPPcma , flt18cma ,  MMEFOFVCPPcma ,  100.0 ,  22.955 ,  966\n",
      "flt18cmaMMEFOPEFRPPcma , flt18cma ,  MMEFOPEFRPPcma ,  100.0 ,  18.036 ,  966\n",
      "flt18cmaPEFROFEV1PPcma , flt18cma ,  PEFROFEV1PPcma ,  100.0 ,  13.553 ,  966\n",
      "flt18cmaPEFROFEV6PPcma , flt18cma ,  PEFROFEV6PPcma ,  100.0 ,  15.844 ,  966\n",
      "flt18cmaPEFROFVCPPcma , flt18cma ,  PEFROFVCPPcma ,  100.0 ,  15.864 ,  966\n",
      "flt18cmaFEF75PPOFVCPPPPcma , flt18cma ,  FEF75PPOFVCPPPPcma ,  100.0 ,  32.731 ,  966\n",
      "flt18cmaMMEFPPOFVCPPPPcma , flt18cma ,  MMEFPPOFVCPPPPcma ,  100.0 ,  22.757 ,  966\n",
      "flt18cmaMMEFPPOPEFRPPPPcma , flt18cma ,  MMEFPPOPEFRPPPPcma ,  100.0 ,  18.004 ,  966\n",
      "flt18cmaPEFRPPOFEV1PPPPcma , flt18cma ,  PEFRPPOFEV1PPPPcma ,  100.0 ,  13.327 ,  966\n",
      "flt18cmaPEFRPPOFVCPPPPcma , flt18cma ,  PEFRPPOFVCPPPPcma ,  100.0 ,  15.605 ,  966\n",
      "flt18cEXPIRPPcma , flt18c ,  EXPIRPPcma ,  103.96 ,  40.113 ,  409\n",
      "flt18cFEF75PPcma , flt18c ,  FEF75PPcma ,  95.582 ,  29.578 ,  409\n",
      "flt18cFEV05PPcma , flt18c ,  FEV05PPcma ,  98.065 ,  12.079 ,  409\n",
      "flt18cFEV1PPcma , flt18c ,  FEV1PPcma ,  98.743 ,  10.888 ,  409\n",
      "flt18cFEV3PPcma , flt18c ,  FEV3PPcma ,  99.558 ,  10.858 ,  409\n",
      "flt18cFEV6PPcma , flt18c ,  FEV6PPcma ,  99.571 ,  11.025 ,  409\n",
      "flt18cFVCPPcma , flt18c ,  FVCPPcma ,  99.576 ,  11.014 ,  409\n",
      "flt18cMMEFPPcma , flt18c ,  MMEFPPcma ,  96.055 ,  21.366 ,  409\n",
      "flt18cPEFRPPcma , flt18c ,  PEFRPPcma ,  98.183 ,  14.979 ,  409\n",
      "flt18cFEF75OFVCPPcma , flt18c ,  FEF75OFVCPPcma ,  95.924 ,  31.264 ,  409\n",
      "flt18cFEF75OPEFRPPcma , flt18c ,  FEF75OPEFRPPcma ,  96.95 ,  29.064 ,  409\n",
      "flt18cFEV05OFEV3PPcma , flt18c ,  FEV05OFEV3PPcma ,  98.265 ,  9.568 ,  409\n",
      "flt18cFEV05OFVCPPcma , flt18c ,  FEV05OFVCPPcma ,  98.244 ,  10.048 ,  409\n",
      "flt18cFEV1OFEV3PPcma , flt18c ,  FEV1OFEV3PPcma ,  99.12 ,  5.415 ,  409\n",
      "flt18cFEV1OFEV6PPcma , flt18c ,  FEV1OFEV6PPcma ,  99.099 ,  6.032 ,  409\n",
      "flt18cFEV1OFVCPPcma , flt18c ,  FEV1OFVCPPcma ,  99.097 ,  6.138 ,  409\n",
      "flt18cFEV3OFEV6PPcma , flt18c ,  FEV3OFEV6PPcma ,  99.976 ,  1.258 ,  409\n",
      "flt18cFEV3OFVCPPcma , flt18c ,  FEV3OFVCPPcma ,  99.974 ,  1.483 ,  409\n",
      "flt18cFEV6OFVCPPcma , flt18c ,  FEV6OFVCPPcma ,  99.998 ,  0.474 ,  409\n",
      "flt18cMMEFOFVCPPcma , flt18c ,  MMEFOFVCPPcma ,  96.054 ,  22.569 ,  409\n",
      "flt18cMMEFOPEFRPPcma , flt18c ,  MMEFOPEFRPPcma ,  97.411 ,  16.919 ,  409\n",
      "flt18cPEFROFEV1PPcma , flt18c ,  PEFROFEV1PPcma ,  99.115 ,  11.953 ,  409\n",
      "flt18cPEFROFEV6PPcma , flt18c ,  PEFROFEV6PPcma ,  98.217 ,  14.423 ,  409\n",
      "flt18cPEFROFVCPPcma , flt18c ,  PEFROFVCPPcma ,  98.216 ,  14.45 ,  409\n",
      "flt18cFEF75PPOFVCPPPPcma , flt18c ,  FEF75PPOFVCPPPPcma ,  100.095 ,  32.622 ,  409\n",
      "flt18cMMEFPPOFVCPPPPcma , flt18c ,  MMEFPPOFVCPPPPcma ,  100.097 ,  23.154 ,  409\n",
      "flt18cMMEFPPOPEFRPPPPcma , flt18c ,  MMEFPPOPEFRPPPPcma ,  99.689 ,  17.264 ,  409\n",
      "flt18cPEFRPPOFEV1PPPPcma , flt18c ,  PEFRPPOFEV1PPPPcma ,  100.028 ,  11.899 ,  409\n",
      "flt18cPEFRPPOFVCPPPPcma , flt18c ,  PEFRPPOFVCPPPPcma ,  100.04 ,  14.487 ,  409\n",
      "flt18maEXPIRPPcma , flt18ma ,  EXPIRPPcma ,  97.085 ,  40.49 ,  557\n",
      "flt18maFEF75PPcma , flt18ma ,  FEF75PPcma ,  103.452 ,  32.058 ,  557\n",
      "flt18maFEV05PPcma , flt18ma ,  FEV05PPcma ,  101.442 ,  13.372 ,  557\n",
      "flt18maFEV1PPcma , flt18ma ,  FEV1PPcma ,  101.001 ,  11.841 ,  557\n",
      "flt18maFEV3PPcma , flt18ma ,  FEV3PPcma ,  100.401 ,  11.82 ,  557\n",
      "flt18maFEV6PPcma , flt18ma ,  FEV6PPcma ,  100.377 ,  11.907 ,  557\n",
      "flt18maFVCPPcma , flt18ma ,  FVCPPcma ,  100.372 ,  11.901 ,  557\n",
      "flt18maMMEFPPcma , flt18ma ,  MMEFPPcma ,  102.89 ,  22.565 ,  557\n",
      "flt18maPEFRPPcma , flt18ma ,  PEFRPPcma ,  101.33 ,  18.39 ,  557\n",
      "flt18maFEF75OFVCPPcma , flt18ma ,  FEF75OFVCPPcma ,  102.993 ,  33.423 ,  557\n",
      "flt18maFEF75OPEFRPPcma , flt18ma ,  FEF75OPEFRPPcma ,  102.243 ,  34.874 ,  557\n",
      "flt18maFEV05OFEV3PPcma , flt18ma ,  FEV05OFEV3PPcma ,  101.274 ,  9.611 ,  557\n",
      "flt18maFEV05OFVCPPcma , flt18ma ,  FEV05OFVCPPcma ,  101.289 ,  10.069 ,  557\n",
      "flt18maFEV1OFEV3PPcma , flt18ma ,  FEV1OFEV3PPcma ,  100.646 ,  4.973 ,  557\n",
      "flt18maFEV1OFEV6PPcma , flt18ma ,  FEV1OFEV6PPcma ,  100.662 ,  5.602 ,  557\n",
      "flt18maFEV1OFVCPPcma , flt18ma ,  FEV1OFVCPPcma ,  100.663 ,  5.718 ,  557\n",
      "flt18maFEV3OFEV6PPcma , flt18ma ,  FEV3OFEV6PPcma ,  100.018 ,  1.377 ,  557\n",
      "flt18maFEV3OFVCPPcma , flt18ma ,  FEV3OFVCPPcma ,  100.019 ,  1.585 ,  557\n",
      "flt18maFEV6OFVCPPcma , flt18ma ,  FEV6OFVCPPcma ,  100.002 ,  0.452 ,  557\n",
      "flt18maMMEFOFVCPPcma , flt18ma ,  MMEFOFVCPPcma ,  102.897 ,  22.824 ,  557\n",
      "flt18maMMEFOPEFRPPcma , flt18ma ,  MMEFOPEFRPPcma ,  101.901 ,  18.602 ,  557\n",
      "flt18maPEFROFEV1PPcma , flt18ma ,  PEFROFEV1PPcma ,  100.649 ,  14.593 ,  557\n",
      "flt18maPEFROFEV6PPcma , flt18ma ,  PEFROFEV6PPcma ,  101.309 ,  16.703 ,  557\n",
      "flt18maPEFROFVCPPcma , flt18ma ,  PEFROFVCPPcma ,  101.309 ,  16.72 ,  557\n",
      "flt18maFEF75PPOFVCPPPPcma , flt18ma ,  FEF75PPOFVCPPPPcma ,  100.009 ,  32.386 ,  557\n",
      "flt18maMMEFPPOFVCPPPPcma , flt18ma ,  MMEFPPOFVCPPPPcma ,  99.962 ,  22.088 ,  557\n",
      "flt18maMMEFPPOPEFRPPPPcma , flt18ma ,  MMEFPPOPEFRPPPPcma ,  100.294 ,  18.21 ,  557\n",
      "flt18maPEFRPPOFEV1PPPPcma , flt18ma ,  PEFRPPOFEV1PPPPcma ,  99.968 ,  14.258 ,  557\n",
      "flt18maPEFRPPOFVCPPPPcma , flt18ma ,  PEFRPPOFVCPPPPcma ,  99.963 ,  16.267 ,  557\n"
     ]
    }
   ],
   "source": [
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n",
    "        mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma]\n",
    "\n",
    "PPcmalist = ['EXPIRPPcma','FEF75PPcma','FEV05PPcma', 'FEV1PPcma','FEV3PPcma', 'FEV6PPcma','FVCPPcma',\n",
    "            'MMEFPPcma', 'PEFRPPcma',\n",
    "            'FEF75OFVCPPcma', 'FEF75OPEFRPPcma',\n",
    "            'FEV05OFEV3PPcma','FEV05OFVCPPcma', 'FEV1OFEV3PPcma',\n",
    "            'FEV1OFEV6PPcma','FEV1OFVCPPcma','FEV3OFEV6PPcma', 'FEV3OFVCPPcma', 'FEV6OFVCPPcma', \n",
    "            'MMEFOFVCPPcma', 'MMEFOPEFRPPcma', 'PEFROFEV1PPcma',\n",
    "            'PEFROFEV6PPcma', 'PEFROFVCPPcma', \n",
    "            'FEF75PPOFVCPPPPcma','MMEFPPOFVCPPPPcma','MMEFPPOPEFRPPPPcma', \n",
    "             'PEFRPPOFEV1PPPPcma','PEFRPPOFVCPPPPcma']\n",
    "for df in ftoa:\n",
    " #   print (df.name)\n",
    "    for y in PPcmalist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "#        df2 =         df2 = {'dfnvarn': [dfnvarn], 'dfname': y.name, 'var': xx, \n",
    "#                             'intercept': intercept, 'b1': b1, 'b2': b2, 'b3': b3, 'r2':r2, 'std':std, 'count':count}                          \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NOW create best values for PP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsppbestcma (df):  #calculate the best values = cma values (called by c, ma, cma)\n",
    "    df['FEF75OFVCPPbest'] = df['FEF75OFVCPPcma'] \n",
    "    df['FEF75OPEFRPPbest'] = df['FEF75OPEFRPPcma']   \n",
    "    \n",
    "    df['FEV05OFVCPPbest'] = df['FEV05OFVCPPcma']\n",
    "    df['FEV05OFEV3PPbest'] = df['FEV05OFEV3PPcma']\n",
    "    \n",
    "    df['FEV1OFVCPPbest'] = df['FEV1OFVCPPcma']\n",
    "    df['PEFROFVCbest'] = df['PEFROFVCPPcma']\n",
    "    df['FEV1OFEV3PPbest'] = df['FEV1OFEV3PPcma']\n",
    "    df['FEV1OFEV6PPbest'] = df['FEV1OFEV6PPcma']\n",
    "    df['PEFROFVCPPbest'] = df['PEFROFVCPPcma']\n",
    "    df['PEFROFEV6PPbest'] = df['PEFROFEV6PPcma']\n",
    "    df['PEFROFEV1PPbest'] = df['PEFROFEV1PPcma'] \n",
    "    df['FEV3OFEV6PPbest'] = df['FEV3OFEV6PPcma'] \n",
    "    df['FEV3OFVCPPbest'] = df['FEV3OFVCPPcma'] \n",
    "    df['FEV6OFVCPPbest'] = df['FEV6OFVCPPcma'] \n",
    "    df['MMEFOFVCPPbest'] = df['MMEFOFVCPPcma'] \n",
    "    df['MMEFOPEFRPPbest'] = df['MMEFOPEFRPPcma'] \n",
    "    \n",
    "    df['MMEFPPOPEFRPPPPbest'] = df['MMEFPPOPEFRPPPPcma']\n",
    "    df['MMEFPPOFVCPPPPbest'] = df['MMEFPPOFVCPPPPcma']   \n",
    "    df['PEFRPPOFVCPPPPbest'] = df['PEFRPPOFVCPPPPcma']  \n",
    "    df['PEFRPPOFEV1PPPPbest'] = df['PEFRPPOFEV1PPPPcma']\n",
    "    df['FEF75PPOFVCPPPPbest'] = df['FEF75PPOFVCPPPPcma']   \n",
    "    df['FEV05PPbest'] = df['FEV05PPcma'] \n",
    "    df['FEV1PPbest'] = df['FEV1PPcma']  \n",
    "    df['FVCPPbest'] = df['FVCPPcma']\n",
    "    df['PEFRPPbest'] = df['PEFRPPcma']   \n",
    "    df['FEV3PPbest'] = df['FEV3PPcma']  \n",
    "    df['FEV6PPbest'] = df['FEV6PPcma']  \n",
    "    df['MMEFPPbest'] = df['MMEFPPcma']\n",
    "    df['FEF75PPbest'] = df['FEF75PPcma']   \n",
    "    df['EXPIRPPbest'] = df['EXPIRPPcma']  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsppbestb (df):  #calculate the best values = B values (called by B SUBSETS)\n",
    "    df['FEF75OFVCPPbest'] = df['FEF75OFVCPPcma'] \n",
    "    df['FEF75OPEFRPPbest'] = df['FEF75OPEFRPPcma']   \n",
    "    df['FEV05OFVCPPbest'] = df['FEV05OFVCPPcma']\n",
    "    df['FEV05OFEV3PPbest'] = df['FEV05OFEV3PPcma']\n",
    "    df['FEV1OFVCPPbest'] = df['FEV1OFVCPP']\n",
    "    df['PEFROFVCbest'] = df['PEFROFVCPP']\n",
    "    df['FEV1OFEV3PPbest'] = df['FEV1OFEV3PP']\n",
    "    df['FEV1OFEV6PPbest'] = df['FEV1OFEV6PP']\n",
    "    df['PEFROFVCPPbest'] = df['PEFROFVCPP']\n",
    "    df['PEFROFEV6PPbest'] = df['PEFROFEV6PP']\n",
    "    df['PEFROFEV1PPbest'] = df['PEFROFEV1PP']\n",
    "    df['FEV3OFEV6PPbest'] = df['FEV3OFEV6PP']\n",
    "    df['FEV3OFVCPPbest'] = df['FEV3OFVCPP']  \n",
    "    df['FEV6OFVCPPbest'] = df['FEV6OFVCPP'] \n",
    "    df['MMEFOFVCPPbest'] = df['MMEFOFVCPP'] \n",
    "    df['MMEFOPEFRPPbest'] = df['MMEFOPEFRPP'] \n",
    "    df['MMEFPPOPEFRPPPPbest'] = df['MMEFPPOPEFRPPPP']\n",
    "    df['MMEFPPOFVCPPPPbest'] = df['MMEFPPOFVCPPPP']   \n",
    "    df['PEFRPPOFVCPPPPbest'] = df['PEFRPPOFVCPPPP']  \n",
    "    df['PEFRPPOFEV1PPPPbest'] = df['PEFRPPOFEV1PPPP']\n",
    "    df['FEF75PPOFVCPPPPbest'] = df['FEF75PPOFVCPPPP']   \n",
    "    df['FEV05PPbest'] = df['FEV05PP']  \n",
    "    df['FEV1PPbest'] = df['FEV1PP']  \n",
    "    df['FVCPPbest'] = df['FVCPP']\n",
    "    df['PEFRPPbest'] = df['PEFRPP']   \n",
    "    df['FEV3PPbest'] = df['FEV3PP']  \n",
    "    df['FEV6PPbest'] = df['FEV6PP']  \n",
    "    df['MMEFPPbest'] = df['MMEFPP']\n",
    "    df['FEF75PPbest'] = df['FEF75PP']   \n",
    "    df['EXPIRPPbest'] = df['EXPIRPP']  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # Remove the CWD from sys.path while we load stuff.\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if sys.path[0] == '':\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  from ipykernel import kernelapp as app\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  app.launch_new_instance()\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:22: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:24: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:25: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:27: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:29: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:30: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:32: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:33: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:34: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "#framestoanalyze = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, \n",
    "#                   mlt20b, mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma, \n",
    "#                   mallcma, mallb, mallc, mallma, fallcma, fallb, fallc, fallma]\n",
    "fta = [m20overcma, m20overc, m20overma, f18overcma, f18overc, f18overma, \n",
    "       mlt20cma, mlt20c, mlt20ma, flt18cma, flt18c, flt18ma]\n",
    "for y in fta:\n",
    "    createvarsppbestcma(y) # for y in fta:\n",
    " #   createvarsppbestcma(y)\n",
    "fta = [m20overb, f18overb, mlt20b, flt18b]\n",
    "for y in fta:\n",
    "    createvarsppbestb(y)         \n",
    "          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# then recombine to all now that has more PP and best values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 471,
   "metadata": {},
   "outputs": [],
   "source": [
    "allc = pd.concat([mlt20c, m20overc, flt18c, f18overc])\n",
    "allb = pd.concat([mlt20b, m20overb, flt18b, f18overb])\n",
    "allma = pd.concat([mlt20ma, m20overma, flt18ma, f18overma])\n",
    "allcma = pd.concat([allc, allma])\n",
    "alltotal = pd.concat([allc, allb, allma])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 472,
   "metadata": {},
   "outputs": [],
   "source": [
    "allc.name = \"allc\"\n",
    "allb.name = \"allb\"\n",
    "allma.name = \"allma\"\n",
    "allcma.name = \"allcma\"\n",
    "alltotal.name = \"alltotal\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# then Do scatter plot of PPbest vs age to assess whether obvious difference of variations by age"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Many patient had expiratory time under 3 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x122ba24d0>"
      ]
     },
     "execution_count": 473,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    " alltotal.plot.scatter('MXPAXTMR', 'EXPIR', s = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "metadata": {},
   "outputs": [],
   "source": [
    "def doscatter(y):\n",
    "  alltotal.plot.scatter('MXPAXTMR', y, s = 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# change to AGE rather than MXPAXTMR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "metadata": {},
   "outputs": [],
   "source": [
    "alltotal['AGE'] = alltotal['MXPAXTMR']/12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "metadata": {},
   "outputs": [],
   "source": [
    "def doscatterage(y):\n",
    "  alltotal.plot.scatter('AGE', y, s = 2, c='black')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PP variation same over age except for FEF75 and MMEF which have higher values above age 600 (50 yo)\n",
    "so should have different upper and LLN for those\n",
    "otherwise can have same LLN and ULN from STD for all other variables; and for those with FEF75 and MMEF have"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "does work for 8 of 8 values, 10 of 10 ratios, 5 of 5 ppopp ratios - 23"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "metadata": {},
   "outputs": [],
   "source": [
    "varsppbest = ['EXPIRPPbest', 'FEF75PPbest', 'FEV05PPbest', 'FEV1PPbest', 'FEV3PPbest', 'FEV6PPbest', 'FVCPPbest', \n",
    "              'MMEFPPbest', 'PEFRPPbest',\n",
    "              'FEF75OFVCPPbest', 'FEF75OPEFRPPbest',\n",
    "              'FEV05OFEV3PPbest', 'FEV05OFVCPPbest', 'FEV1OFEV3PPbest',\n",
    "              'FEV1OFEV6PPbest', 'FEV1OFVCPPbest','FEV3OFEV6PPbest','FEV3OFVCPPbest','PEFROFEV1PPbest', \n",
    "              'PEFROFEV6PPbest', 'PEFROFVCPPbest', \n",
    "              'FEV6OFVCPPbest','MMEFOFVCPPbest', 'MMEFOPEFRPPbest',\n",
    "              'PEFRPPOFEV1PPPPbest', 'PEFRPPOFVCPPPPbest', 'MMEFPPOFVCPPPPbest', \n",
    "              'MMEFPPOPEFRPPPPbest', 'FEF75PPOFVCPPPPbest']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 478,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/pandas/plotting/_matplotlib/core.py:320: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n",
      "  fig = self.plt.figure(figsize=self.figsize)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for y in varsppbest:\n",
    "    doscatterage(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create PPbestvalues array which has mean and stdev of the best percent predicted variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# not work for mallcma\n",
    "create PPbest - with the mean, STD and count of best %predicted\n",
    "which should then be used for detemining LLN.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PPbestvalues\n",
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, mean, std, count]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "m20overbEXPIRPPbest , m20overb ,  EXPIRPPbest ,  99.999 ,  35.225 ,  477\n",
      "m20overbFEF75PPbest , m20overb ,  FEF75PPbest ,  100.029 ,  42.311 ,  477\n",
      "m20overbFEV05PPbest , m20overb ,  FEV05PPbest ,  100.012 ,  16.393 ,  477\n",
      "m20overbFEV1PPbest , m20overb ,  FEV1PPbest ,  100.015 ,  14.812 ,  477\n",
      "m20overbFEV3PPbest , m20overb ,  FEV3PPbest ,  100.006 ,  13.869 ,  477\n",
      "m20overbFEV6PPbest , m20overb ,  FEV6PPbest ,  100.0 ,  13.838 ,  477\n",
      "m20overbFVCPPbest , m20overb ,  FVCPPbest ,  99.999 ,  14.025 ,  477\n",
      "m20overbMMEFPPbest , m20overb ,  MMEFPPbest ,  100.046 ,  29.565 ,  477\n",
      "m20overbPEFRPPbest , m20overb ,  PEFRPPbest ,  100.004 ,  19.78 ,  477\n",
      "m20overbFEF75OFVCPPbest , m20overb ,  FEF75OFVCPPbest ,  107.349 ,  50.19 ,  477\n",
      "m20overbFEF75OPEFRPPbest , m20overb ,  FEF75OPEFRPPbest ,  97.909 ,  50.59 ,  477\n",
      "m20overbFEV05OFEV3PPbest , m20overb ,  FEV05OFEV3PPbest ,  102.775 ,  10.692 ,  477\n",
      "m20overbFEV05OFVCPPbest , m20overb ,  FEV05OFVCPPbest ,  103.146 ,  12.433 ,  477\n",
      "m20overbFEV1OFEV3PPbest , m20overb ,  FEV1OFEV3PPbest ,  100.0 ,  5.8 ,  477\n",
      "m20overbFEV1OFEV6PPbest , m20overb ,  FEV1OFEV6PPbest ,  100.0 ,  7.191 ,  477\n",
      "m20overbFEV1OFVCPPbest , m20overb ,  FEV1OFVCPPbest ,  99.999 ,  7.961 ,  477\n",
      "m20overbFEV3OFEV6PPbest , m20overb ,  FEV3OFEV6PPbest ,  100.0 ,  2.075 ,  477\n",
      "m20overbFEV3OFVCPPbest , m20overb ,  FEV3OFVCPPbest ,  100.0 ,  3.349 ,  477\n",
      "m20overbPEFROFEV1PPbest , m20overb ,  PEFROFEV1PPbest ,  99.999 ,  14.548 ,  477\n",
      "m20overbPEFROFEV6PPbest , m20overb ,  PEFROFEV6PPbest ,  100.0 ,  17.684 ,  477\n",
      "m20overbPEFROFVCPPbest , m20overb ,  PEFROFVCPPbest ,  100.0 ,  18.048 ,  477\n",
      "m20overbFEV6OFVCPPbest , m20overb ,  FEV6OFVCPPbest ,  100.0 ,  1.852 ,  477\n",
      "m20overbMMEFOFVCPPbest , m20overb ,  MMEFOFVCPPbest ,  99.935 ,  30.095 ,  477\n",
      "m20overbMMEFOPEFRPPbest , m20overb ,  MMEFOPEFRPPbest ,  99.977 ,  25.798 ,  477\n",
      "m20overbPEFRPPOFEV1PPPPbest , m20overb ,  PEFRPPOFEV1PPPPbest ,  100.0 ,  14.475 ,  477\n",
      "m20overbPEFRPPOFVCPPPPbest , m20overb ,  PEFRPPOFVCPPPPbest ,  100.0 ,  17.897 ,  477\n",
      "m20overbMMEFPPOFVCPPPPbest , m20overb ,  MMEFPPOFVCPPPPbest ,  100.0 ,  29.043 ,  477\n",
      "m20overbMMEFPPOPEFRPPPPbest , m20overb ,  MMEFPPOPEFRPPPPbest ,  100.0 ,  25.31 ,  477\n",
      "m20overbFEF75PPOFVCPPPPbest , m20overb ,  FEF75PPOFVCPPPPbest ,  100.0 ,  45.936 ,  477\n",
      "m20overcmaEXPIRPPbest , m20overcma ,  EXPIRPPbest ,  100.012 ,  32.151 ,  1130\n",
      "m20overcmaFEF75PPbest , m20overcma ,  FEF75PPbest ,  100.492 ,  50.461 ,  1130\n",
      "m20overcmaFEV05PPbest , m20overcma ,  FEV05PPbest ,  100.026 ,  14.116 ,  1130\n",
      "m20overcmaFEV1PPbest , m20overcma ,  FEV1PPbest ,  100.053 ,  12.917 ,  1130\n",
      "m20overcmaFEV3PPbest , m20overcma ,  FEV3PPbest ,  100.062 ,  12.297 ,  1130\n",
      "m20overcmaFEV6PPbest , m20overcma ,  FEV6PPbest ,  100.052 ,  12.204 ,  1130\n",
      "m20overcmaFVCPPbest , m20overcma ,  FVCPPbest ,  100.035 ,  12.267 ,  1130\n",
      "m20overcmaMMEFPPbest , m20overcma ,  MMEFPPbest ,  100.212 ,  29.947 ,  1130\n",
      "m20overcmaPEFRPPbest , m20overcma ,  PEFRPPbest ,  100.032 ,  17.304 ,  1130\n",
      "m20overcmaFEF75OFVCPPbest , m20overcma ,  FEF75OFVCPPbest ,  101.653 ,  61.762 ,  1130\n",
      "m20overcmaFEF75OPEFRPPbest , m20overcma ,  FEF75OPEFRPPbest ,  102.158 ,  63.267 ,  1130\n",
      "m20overcmaFEV05OFEV3PPbest , m20overcma ,  FEV05OFEV3PPbest ,  100.0 ,  9.524 ,  1130\n",
      "m20overcmaFEV05OFVCPPbest , m20overcma ,  FEV05OFVCPPbest ,  99.999 ,  11.239 ,  1130\n",
      "m20overcmaFEV1OFEV3PPbest , m20overcma ,  FEV1OFEV3PPbest ,  100.0 ,  5.131 ,  1130\n",
      "m20overcmaFEV1OFEV6PPbest , m20overcma ,  FEV1OFEV6PPbest ,  100.0 ,  6.466 ,  1130\n",
      "m20overcmaFEV1OFVCPPbest , m20overcma ,  FEV1OFVCPPbest ,  100.0 ,  7.534 ,  1130\n",
      "m20overcmaFEV3OFEV6PPbest , m20overcma ,  FEV3OFEV6PPbest ,  100.0 ,  1.979 ,  1130\n",
      "m20overcmaFEV3OFVCPPbest , m20overcma ,  FEV3OFVCPPbest ,  100.001 ,  3.659 ,  1130\n",
      "m20overcmaPEFROFEV1PPbest , m20overcma ,  PEFROFEV1PPbest ,  99.994 ,  13.93 ,  1130\n",
      "m20overcmaPEFROFEV6PPbest , m20overcma ,  PEFROFEV6PPbest ,  99.999 ,  16.5 ,  1130\n",
      "m20overcmaPEFROFVCPPbest , m20overcma ,  PEFROFVCPPbest ,  100.0 ,  16.951 ,  1130\n",
      "m20overcmaFEV6OFVCPPbest , m20overcma ,  FEV6OFVCPPbest ,  100.0 ,  2.194 ,  1130\n",
      "m20overcmaMMEFOFVCPPbest , m20overcma ,  MMEFOFVCPPbest ,  99.991 ,  31.458 ,  1130\n",
      "m20overcmaMMEFOPEFRPPbest , m20overcma ,  MMEFOPEFRPPbest ,  100.055 ,  27.358 ,  1130\n",
      "m20overcmaPEFRPPOFEV1PPPPbest , m20overcma ,  PEFRPPOFEV1PPPPbest ,  100.0 ,  13.72 ,  1130\n",
      "m20overcmaPEFRPPOFVCPPPPbest , m20overcma ,  PEFRPPOFVCPPPPbest ,  100.0 ,  16.675 ,  1130\n",
      "m20overcmaMMEFPPOFVCPPPPbest , m20overcma ,  MMEFPPOFVCPPPPbest ,  100.0 ,  31.433 ,  1130\n",
      "m20overcmaMMEFPPOPEFRPPPPbest , m20overcma ,  MMEFPPOPEFRPPPPbest ,  100.0 ,  27.0 ,  1130\n",
      "m20overcmaFEF75PPOFVCPPPPbest , m20overcma ,  FEF75PPOFVCPPPPbest ,  100.001 ,  54.209 ,  1130\n",
      "m20overcEXPIRPPbest , m20overc ,  EXPIRPPbest ,  100.721 ,  33.216 ,  528\n",
      "m20overcFEF75PPbest , m20overc ,  FEF75PPbest ,  97.691 ,  44.965 ,  528\n",
      "m20overcFEV05PPbest , m20overc ,  FEV05PPbest ,  99.448 ,  15.164 ,  528\n",
      "m20overcFEV1PPbest , m20overc ,  FEV1PPbest ,  99.862 ,  13.929 ,  528\n",
      "m20overcFEV3PPbest , m20overc ,  FEV3PPbest ,  100.268 ,  13.114 ,  528\n",
      "m20overcFEV6PPbest , m20overc ,  FEV6PPbest ,  100.259 ,  12.859 ,  528\n",
      "m20overcFVCPPbest , m20overc ,  FVCPPbest ,  100.233 ,  12.905 ,  528\n",
      "m20overcMMEFPPbest , m20overc ,  MMEFPPbest ,  98.582 ,  32.214 ,  528\n",
      "m20overcPEFRPPbest , m20overc ,  PEFRPPbest ,  99.586 ,  17.388 ,  528\n",
      "m20overcFEF75OFVCPPbest , m20overc ,  FEF75OFVCPPbest ,  98.89 ,  56.457 ,  528\n",
      "m20overcFEF75OPEFRPPbest , m20overc ,  FEF75OPEFRPPbest ,  101.802 ,  65.353 ,  528\n",
      "m20overcFEV05OFEV3PPbest , m20overc ,  FEV05OFEV3PPbest ,  97.826 ,  9.252 ,  528\n",
      "m20overcFEV05OFVCPPbest , m20overc ,  FEV05OFVCPPbest ,  97.766 ,  11.196 ,  528\n",
      "m20overcFEV1OFEV3PPbest , m20overc ,  FEV1OFEV3PPbest ,  99.006 ,  5.17 ,  528\n",
      "m20overcFEV1OFEV6PPbest , m20overc ,  FEV1OFEV6PPbest ,  98.947 ,  6.621 ,  528\n",
      "m20overcFEV1OFVCPPbest , m20overc ,  FEV1OFVCPPbest ,  98.968 ,  7.915 ,  528\n",
      "m20overcFEV3OFEV6PPbest , m20overc ,  FEV3OFEV6PPbest ,  99.946 ,  2.175 ,  528\n",
      "m20overcFEV3OFVCPPbest , m20overc ,  FEV3OFVCPPbest ,  99.97 ,  4.143 ,  528\n",
      "m20overcPEFROFEV1PPbest , m20overc ,  PEFROFEV1PPbest ,  98.976 ,  12.637 ,  528\n",
      "m20overcPEFROFEV6PPbest , m20overc ,  PEFROFEV6PPbest ,  97.892 ,  15.293 ,  528\n",
      "m20overcPEFROFVCPPbest , m20overc ,  PEFROFVCPPbest ,  97.896 ,  15.868 ,  528\n",
      "m20overcFEV6OFVCPPbest , m20overc ,  FEV6OFVCPPbest ,  100.022 ,  2.566 ,  528\n",
      "m20overcMMEFOFVCPPbest , m20overc ,  MMEFOFVCPPbest ,  94.912 ,  31.916 ,  528\n",
      "m20overcMMEFOPEFRPPbest , m20overc ,  MMEFOPEFRPPbest ,  96.743 ,  27.633 ,  528\n",
      "m20overcPEFRPPOFEV1PPPPbest , m20overc ,  PEFRPPOFEV1PPPPbest ,  100.037 ,  12.472 ,  528\n",
      "m20overcPEFRPPOFVCPPPPbest , m20overc ,  PEFRPPOFVCPPPPbest ,  99.932 ,  15.773 ,  528\n",
      "m20overcMMEFPPOFVCPPPPbest , m20overc ,  MMEFPPOFVCPPPPbest ,  99.661 ,  33.379 ,  528\n",
      "m20overcMMEFPPOPEFRPPPPbest , m20overc ,  MMEFPPOPEFRPPPPbest ,  99.326 ,  27.932 ,  528\n",
      "m20overcFEF75PPOFVCPPPPbest , m20overc ,  FEF75PPOFVCPPPPbest ,  99.026 ,  48.516 ,  528\n",
      "m20overmaEXPIRPPbest , m20overma ,  EXPIRPPbest ,  99.39 ,  31.203 ,  602\n",
      "m20overmaFEF75PPbest , m20overma ,  FEF75PPbest ,  102.949 ,  54.75 ,  602\n",
      "m20overmaFEV05PPbest , m20overma ,  FEV05PPbest ,  100.533 ,  13.12 ,  602\n",
      "m20overmaFEV1PPbest , m20overma ,  FEV1PPbest ,  100.22 ,  11.968 ,  602\n",
      "m20overmaFEV3PPbest , m20overma ,  FEV3PPbest ,  99.88 ,  11.541 ,  602\n",
      "m20overmaFEV6PPbest , m20overma ,  FEV6PPbest ,  99.87 ,  11.607 ,  602\n",
      "m20overmaFVCPPbest , m20overma ,  FVCPPbest ,  99.861 ,  11.687 ,  602\n",
      "m20overmaMMEFPPbest , m20overma ,  MMEFPPbest ,  101.642 ,  27.755 ,  602\n",
      "m20overmaPEFRPPbest , m20overma ,  PEFRPPbest ,  100.423 ,  17.235 ,  602\n",
      "m20overmaFEF75OFVCPPbest , m20overma ,  FEF75OFVCPPbest ,  104.077 ,  66.018 ,  602\n",
      "m20overmaFEF75OPEFRPPbest , m20overma ,  FEF75OPEFRPPbest ,  102.47 ,  61.433 ,  602\n",
      "m20overmaFEV05OFEV3PPbest , m20overma ,  FEV05OFEV3PPbest ,  101.907 ,  9.356 ,  602\n",
      "m20overmaFEV05OFVCPPbest , m20overma ,  FEV05OFVCPPbest ,  101.958 ,  10.916 ,  602\n",
      "m20overmaFEV1OFEV3PPbest , m20overma ,  FEV1OFEV3PPbest ,  100.872 ,  4.938 ,  602\n",
      "m20overmaFEV1OFEV6PPbest , m20overma ,  FEV1OFEV6PPbest ,  100.923 ,  6.187 ,  602\n",
      "m20overmaFEV1OFVCPPbest , m20overma ,  FEV1OFVCPPbest ,  100.905 ,  7.066 ,  602\n",
      "m20overmaFEV3OFEV6PPbest , m20overma ,  FEV3OFEV6PPbest ,  100.048 ,  1.789 ,  602\n",
      "m20overmaFEV3OFVCPPbest , m20overma ,  FEV3OFVCPPbest ,  100.027 ,  3.177 ,  602\n",
      "m20overmaPEFROFEV1PPbest , m20overma ,  PEFROFEV1PPbest ,  100.887 ,  14.926 ,  602\n",
      "m20overmaPEFROFEV6PPbest , m20overma ,  PEFROFEV6PPbest ,  101.847 ,  17.293 ,  602\n",
      "m20overmaPEFROFVCPPbest , m20overma ,  PEFROFVCPPbest ,  101.845 ,  17.654 ,  602\n",
      "m20overmaFEV6OFVCPPbest , m20overma ,  FEV6OFVCPPbest ,  99.98 ,  1.809 ,  602\n",
      "m20overmaMMEFOFVCPPbest , m20overma ,  MMEFOFVCPPbest ,  104.446 ,  30.386 ,  602\n",
      "m20overmaMMEFOPEFRPPbest , m20overma ,  MMEFOPEFRPPbest ,  102.961 ,  26.803 ,  602\n",
      "m20overmaPEFRPPOFEV1PPPPbest , m20overma ,  PEFRPPOFEV1PPPPbest ,  99.987 ,  14.64 ,  602\n",
      "m20overmaPEFRPPOFVCPPPPbest , m20overma ,  PEFRPPOFVCPPPPbest ,  100.066 ,  17.231 ,  602\n",
      "m20overmaMMEFPPOFVCPPPPbest , m20overma ,  MMEFPPOFVCPPPPbest ,  100.335 ,  29.439 ,  602\n",
      "m20overmaMMEFPPOPEFRPPPPbest , m20overma ,  MMEFPPOPEFRPPPPbest ,  100.64 ,  26.077 ,  602\n",
      "m20overmaFEF75PPOFVCPPPPbest , m20overma ,  FEF75PPOFVCPPPPbest ,  100.469 ,  52.25 ,  602\n",
      "f18overbEXPIRPPbest , f18overb ,  EXPIRPPbest ,  100.062 ,  41.639 ,  957\n",
      "f18overbFEF75PPbest , f18overb ,  FEF75PPbest ,  100.207 ,  49.262 ,  957\n",
      "f18overbFEV05PPbest , f18overb ,  FEV05PPbest ,  100.042 ,  16.439 ,  957\n",
      "f18overbFEV1PPbest , f18overb ,  FEV1PPbest ,  100.061 ,  15.054 ,  957\n",
      "f18overbFEV3PPbest , f18overb ,  FEV3PPbest ,  100.069 ,  14.713 ,  957\n",
      "f18overbFEV6PPbest , f18overb ,  FEV6PPbest ,  100.055 ,  14.604 ,  957\n",
      "f18overbFVCPPbest , f18overb ,  FVCPPbest ,  100.043 ,  14.731 ,  957\n",
      "f18overbMMEFPPbest , f18overb ,  MMEFPPbest ,  100.138 ,  32.845 ,  957\n",
      "f18overbPEFRPPbest , f18overb ,  PEFRPPbest ,  100.029 ,  20.527 ,  957\n",
      "f18overbFEF75OFVCPPbest , f18overb ,  FEF75OFVCPPbest ,  103.218 ,  65.316 ,  957\n",
      "f18overbFEF75OPEFRPPbest , f18overb ,  FEF75OPEFRPPbest ,  92.098 ,  59.649 ,  957\n",
      "f18overbFEV05OFEV3PPbest , f18overb ,  FEV05OFEV3PPbest ,  103.105 ,  9.937 ,  957\n",
      "f18overbFEV05OFVCPPbest , f18overb ,  FEV05OFVCPPbest ,  102.947 ,  11.625 ,  957\n",
      "f18overbFEV1OFEV3PPbest , f18overb ,  FEV1OFEV3PPbest ,  100.0 ,  5.163 ,  957\n",
      "f18overbFEV1OFEV6PPbest , f18overb ,  FEV1OFEV6PPbest ,  100.001 ,  6.597 ,  957\n",
      "f18overbFEV1OFVCPPbest , f18overb ,  FEV1OFVCPPbest ,  100.002 ,  7.594 ,  957\n",
      "f18overbFEV3OFEV6PPbest , f18overb ,  FEV3OFEV6PPbest ,  100.0 ,  2.294 ,  957\n",
      "f18overbFEV3OFVCPPbest , f18overb ,  FEV3OFVCPPbest ,  100.001 ,  3.722 ,  957\n",
      "f18overbPEFROFEV1PPbest , f18overb ,  PEFROFEV1PPbest ,  99.996 ,  16.108 ,  957\n",
      "f18overbPEFROFEV6PPbest , f18overb ,  PEFROFEV6PPbest ,  100.0 ,  18.331 ,  957\n",
      "f18overbPEFROFVCPPbest , f18overb ,  PEFROFVCPPbest ,  100.0 ,  18.746 ,  957\n",
      "f18overbFEV6OFVCPPbest , f18overb ,  FEV6OFVCPPbest ,  100.0 ,  2.085 ,  957\n",
      "f18overbMMEFOFVCPPbest , f18overb ,  MMEFOFVCPPbest ,  100.041 ,  33.481 ,  957\n",
      "f18overbMMEFOPEFRPPbest , f18overb ,  MMEFOPEFRPPbest ,  100.069 ,  28.664 ,  957\n",
      "f18overbPEFRPPOFEV1PPPPbest , f18overb ,  PEFRPPOFEV1PPPPbest ,  100.0 ,  15.68 ,  957\n",
      "f18overbPEFRPPOFVCPPPPbest , f18overb ,  PEFRPPOFVCPPPPbest ,  100.0 ,  18.314 ,  957\n",
      "f18overbMMEFPPOFVCPPPPbest , f18overb ,  MMEFPPOFVCPPPPbest ,  100.0 ,  32.932 ,  957\n",
      "f18overbMMEFPPOPEFRPPPPbest , f18overb ,  MMEFPPOPEFRPPPPbest ,  100.0 ,  28.282 ,  957\n",
      "f18overbFEF75PPOFVCPPPPbest , f18overb ,  FEF75PPOFVCPPPPbest ,  100.0 ,  54.653 ,  957\n",
      "f18overcmaEXPIRPPbest , f18overcma ,  EXPIRPPbest ,  100.073 ,  36.501 ,  2113\n",
      "f18overcmaFEF75PPbest , f18overcma ,  FEF75PPbest ,  100.634 ,  51.17 ,  2113\n",
      "f18overcmaFEV05PPbest , f18overcma ,  FEV05PPbest ,  100.05 ,  14.653 ,  2113\n",
      "f18overcmaFEV1PPbest , f18overcma ,  FEV1PPbest ,  100.079 ,  13.69 ,  2113\n",
      "f18overcmaFEV3PPbest , f18overcma ,  FEV3PPbest ,  100.085 ,  13.319 ,  2113\n",
      "f18overcmaFEV6PPbest , f18overcma ,  FEV6PPbest ,  100.065 ,  13.301 ,  2113\n",
      "f18overcmaFVCPPbest , f18overcma ,  FVCPPbest ,  100.041 ,  13.411 ,  2113\n",
      "f18overcmaMMEFPPbest , f18overcma ,  MMEFPPbest ,  100.3 ,  31.094 ,  2113\n",
      "f18overcmaPEFRPPbest , f18overcma ,  PEFRPPbest ,  100.031 ,  18.64 ,  2113\n",
      "f18overcmaFEF75OFVCPPbest , f18overcma ,  FEF75OFVCPPbest ,  102.378 ,  68.357 ,  2113\n",
      "f18overcmaFEF75OPEFRPPbest , f18overcma ,  FEF75OPEFRPPbest ,  103.207 ,  65.59 ,  2113\n",
      "f18overcmaFEV05OFEV3PPbest , f18overcma ,  FEV05OFEV3PPbest ,  100.0 ,  9.61 ,  2113\n",
      "f18overcmaFEV05OFVCPPbest , f18overcma ,  FEV05OFVCPPbest ,  99.999 ,  11.265 ,  2113\n",
      "f18overcmaFEV1OFEV3PPbest , f18overcma ,  FEV1OFEV3PPbest ,  100.0 ,  5.179 ,  2113\n",
      "f18overcmaFEV1OFEV6PPbest , f18overcma ,  FEV1OFEV6PPbest ,  100.0 ,  6.517 ,  2113\n",
      "f18overcmaFEV1OFVCPPbest , f18overcma ,  FEV1OFVCPPbest ,  100.001 ,  7.64 ,  2113\n",
      "f18overcmaFEV3OFEV6PPbest , f18overcma ,  FEV3OFEV6PPbest ,  100.0 ,  2.077 ,  2113\n",
      "f18overcmaFEV3OFVCPPbest , f18overcma ,  FEV3OFVCPPbest ,  100.001 ,  3.818 ,  2113\n",
      "f18overcmaPEFROFEV1PPbest , f18overcma ,  PEFROFEV1PPbest ,  99.994 ,  15.522 ,  2113\n",
      "f18overcmaPEFROFEV6PPbest , f18overcma ,  PEFROFEV6PPbest ,  99.999 ,  17.84 ,  2113\n",
      "f18overcmaPEFROFVCPPbest , f18overcma ,  PEFROFVCPPbest ,  100.0 ,  18.227 ,  2113\n",
      "f18overcmaFEV6OFVCPPbest , f18overcma ,  FEV6OFVCPPbest ,  100.0 ,  2.271 ,  2113\n",
      "f18overcmaMMEFOFVCPPbest , f18overcma ,  MMEFOFVCPPbest ,  99.993 ,  33.8 ,  2113\n",
      "f18overcmaMMEFOPEFRPPbest , f18overcma ,  MMEFOPEFRPPbest ,  100.053 ,  28.831 ,  2113\n",
      "f18overcmaPEFRPPOFEV1PPPPbest , f18overcma ,  PEFRPPOFEV1PPPPbest ,  100.0 ,  15.366 ,  2113\n",
      "f18overcmaPEFRPPOFVCPPPPbest , f18overcma ,  PEFRPPOFVCPPPPbest ,  100.0 ,  17.967 ,  2113\n",
      "f18overcmaMMEFPPOFVCPPPPbest , f18overcma ,  MMEFPPOFVCPPPPbest ,  100.0 ,  33.35 ,  2113\n",
      "f18overcmaMMEFPPOPEFRPPPPbest , f18overcma ,  MMEFPPOPEFRPPPPbest ,  100.0 ,  28.504 ,  2113\n",
      "f18overcmaFEF75PPOFVCPPPPbest , f18overcma ,  FEF75PPOFVCPPPPbest ,  100.001 ,  61.567 ,  2113\n",
      "f18overcEXPIRPPbest , f18overc ,  EXPIRPPbest ,  98.264 ,  35.761 ,  1108\n",
      "f18overcFEF75PPbest , f18overc ,  FEF75PPbest ,  100.003 ,  53.202 ,  1108\n",
      "f18overcFEV05PPbest , f18overc ,  FEV05PPbest ,  99.944 ,  15.287 ,  1108\n",
      "f18overcFEV1PPbest , f18overc ,  FEV1PPbest ,  100.288 ,  14.519 ,  1108\n",
      "f18overcFEV3PPbest , f18overc ,  FEV3PPbest ,  100.507 ,  14.158 ,  1108\n",
      "f18overcFEV6PPbest , f18overc ,  FEV6PPbest ,  100.416 ,  14.111 ,  1108\n",
      "f18overcFVCPPbest , f18overc ,  FVCPPbest ,  100.253 ,  14.21 ,  1108\n",
      "f18overcMMEFPPbest , f18overc ,  MMEFPPbest ,  99.731 ,  33.507 ,  1108\n",
      "f18overcPEFRPPbest , f18overc ,  PEFRPPbest ,  100.624 ,  18.612 ,  1108\n",
      "f18overcFEF75OFVCPPbest , f18overc ,  FEF75OFVCPPbest ,  102.921 ,  73.91 ,  1108\n",
      "f18overcFEF75OPEFRPPbest , f18overc ,  FEF75OPEFRPPbest ,  104.808 ,  73.394 ,  1108\n",
      "f18overcFEV05OFEV3PPbest , f18overc ,  FEV05OFEV3PPbest ,  98.594 ,  9.127 ,  1108\n",
      "f18overcFEV05OFVCPPbest , f18overc ,  FEV05OFVCPPbest ,  98.742 ,  11.151 ,  1108\n",
      "f18overcFEV1OFEV3PPbest , f18overc ,  FEV1OFEV3PPbest ,  99.456 ,  5.101 ,  1108\n",
      "f18overcFEV1OFEV6PPbest , f18overc ,  FEV1OFEV6PPbest ,  99.506 ,  6.593 ,  1108\n",
      "f18overcFEV1OFVCPPbest , f18overc ,  FEV1OFVCPPbest ,  99.623 ,  7.987 ,  1108\n",
      "f18overcFEV3OFEV6PPbest , f18overc ,  FEV3OFEV6PPbest ,  100.051 ,  2.234 ,  1108\n",
      "f18overcFEV3OFVCPPbest , f18overc ,  FEV3OFVCPPbest ,  100.166 ,  4.284 ,  1108\n",
      "f18overcPEFROFEV1PPbest , f18overc ,  PEFROFEV1PPbest ,  99.76 ,  14.845 ,  1108\n",
      "f18overcPEFROFEV6PPbest , f18overc ,  PEFROFEV6PPbest ,  99.177 ,  17.0 ,  1108\n",
      "f18overcPEFROFVCPPbest , f18overc ,  PEFROFVCPPbest ,  99.282 ,  17.539 ,  1108\n",
      "f18overcFEV6OFVCPPbest , f18overc ,  FEV6OFVCPPbest ,  100.112 ,  2.607 ,  1108\n",
      "f18overcMMEFOFVCPPbest , f18overc ,  MMEFOFVCPPbest ,  96.562 ,  34.668 ,  1108\n",
      "f18overcMMEFOPEFRPPbest , f18overc ,  MMEFOPEFRPPbest ,  97.182 ,  30.34 ,  1108\n",
      "f18overcPEFRPPOFEV1PPPPbest , f18overc ,  PEFRPPOFEV1PPPPbest ,  100.075 ,  14.665 ,  1108\n",
      "f18overcPEFRPPOFVCPPPPbest , f18overc ,  PEFRPPOFVCPPPPbest ,  99.985 ,  17.319 ,  1108\n",
      "f18overcMMEFPPOFVCPPPPbest , f18overc ,  MMEFPPOFVCPPPPbest ,  99.651 ,  35.023 ,  1108\n",
      "f18overcMMEFPPOPEFRPPPPbest , f18overc ,  MMEFPPOPEFRPPPPbest ,  99.398 ,  30.326 ,  1108\n",
      "f18overcFEF75PPOFVCPPPPbest , f18overc ,  FEF75PPOFVCPPPPbest ,  99.298 ,  63.131 ,  1108\n",
      "f18overmaEXPIRPPbest , f18overma ,  EXPIRPPbest ,  102.067 ,  37.216 ,  1005\n",
      "f18overmaFEF75PPbest , f18overma ,  FEF75PPbest ,  101.331 ,  48.848 ,  1005\n",
      "f18overmaFEV05PPbest , f18overma ,  FEV05PPbest ,  100.167 ,  13.928 ,  1005\n",
      "f18overmaFEV1PPbest , f18overma ,  FEV1PPbest ,  99.849 ,  12.716 ,  1005\n",
      "f18overmaFEV3PPbest , f18overma ,  FEV3PPbest ,  99.62 ,  12.318 ,  1005\n",
      "f18overmaFEV6PPbest , f18overma ,  FEV6PPbest ,  99.677 ,  12.342 ,  1005\n",
      "f18overmaFVCPPbest , f18overma ,  FVCPPbest ,  99.806 ,  12.475 ,  1005\n",
      "f18overmaMMEFPPbest , f18overma ,  MMEFPPbest ,  100.927 ,  28.197 ,  1005\n",
      "f18overmaPEFRPPbest , f18overma ,  PEFRPPbest ,  99.378 ,  18.658 ,  1005\n",
      "f18overmaFEF75OFVCPPbest , f18overma ,  FEF75OFVCPPbest ,  101.779 ,  61.688 ,  1005\n",
      "f18overmaFEF75OPEFRPPbest , f18overma ,  FEF75OPEFRPPbest ,  101.442 ,  55.719 ,  1005\n",
      "f18overmaFEV05OFEV3PPbest , f18overma ,  FEV05OFEV3PPbest ,  101.551 ,  9.892 ,  1005\n",
      "f18overmaFEV05OFVCPPbest , f18overma ,  FEV05OFVCPPbest ,  101.385 ,  11.233 ,  1005\n",
      "f18overmaFEV1OFEV3PPbest , f18overma ,  FEV1OFEV3PPbest ,  100.6 ,  5.201 ,  1005\n",
      "f18overmaFEV1OFEV6PPbest , f18overma ,  FEV1OFEV6PPbest ,  100.545 ,  6.392 ,  1005\n",
      "f18overmaFEV1OFVCPPbest , f18overma ,  FEV1OFVCPPbest ,  100.419 ,  7.218 ,  1005\n",
      "f18overmaFEV3OFEV6PPbest , f18overma ,  FEV3OFEV6PPbest ,  99.944 ,  1.889 ,  1005\n",
      "f18overmaFEV3OFVCPPbest , f18overma ,  FEV3OFVCPPbest ,  99.818 ,  3.22 ,  1005\n",
      "f18overmaPEFROFEV1PPbest , f18overma ,  PEFROFEV1PPbest ,  100.251 ,  16.24 ,  1005\n",
      "f18overmaPEFROFEV6PPbest , f18overma ,  PEFROFEV6PPbest ,  100.905 ,  18.688 ,  1005\n",
      "f18overmaPEFROFVCPPbest , f18overma ,  PEFROFVCPPbest ,  100.791 ,  18.935 ,  1005\n",
      "f18overmaFEV6OFVCPPbest , f18overma ,  FEV6OFVCPPbest ,  99.876 ,  1.824 ,  1005\n",
      "f18overmaMMEFOFVCPPbest , f18overma ,  MMEFOFVCPPbest ,  103.776 ,  32.416 ,  1005\n",
      "f18overmaMMEFOPEFRPPbest , f18overma ,  MMEFOPEFRPPbest ,  103.218 ,  26.73 ,  1005\n",
      "f18overmaPEFRPPOFEV1PPPPbest , f18overma ,  PEFRPPOFEV1PPPPbest ,  99.946 ,  16.097 ,  1005\n",
      "f18overmaPEFRPPOFVCPPPPbest , f18overma ,  PEFRPPOFVCPPPPbest ,  100.045 ,  18.722 ,  1005\n",
      "f18overmaMMEFPPOFVCPPPPbest , f18overma ,  MMEFPPOFVCPPPPbest ,  100.789 ,  37.269 ,  1005\n",
      "f18overmaMMEFPPOPEFRPPPPbest , f18overma ,  MMEFPPOPEFRPPPPbest ,  100.83 ,  27.681 ,  1005\n",
      "f18overmaFEF75PPOFVCPPPPbest , f18overma ,  FEF75PPOFVCPPPPbest ,  100.586 ,  59.573 ,  1005\n",
      "mlt20bEXPIRPPbest , mlt20b ,  EXPIRPPbest ,  99.98 ,  41.39 ,  599\n",
      "mlt20bFEF75PPbest , mlt20b ,  FEF75PPbest ,  100.2 ,  39.343 ,  599\n",
      "mlt20bFEV05PPbest , mlt20b ,  FEV05PPbest ,  100.146 ,  14.67 ,  599\n",
      "mlt20bFEV1PPbest , mlt20b ,  FEV1PPbest ,  100.219 ,  13.466 ,  599\n",
      "mlt20bFEV3PPbest , mlt20b ,  FEV3PPbest ,  100.269 ,  13.058 ,  599\n",
      "mlt20bFEV6PPbest , mlt20b ,  FEV6PPbest ,  100.253 ,  13.045 ,  599\n",
      "mlt20bFVCPPbest , mlt20b ,  FVCPPbest ,  100.251 ,  13.063 ,  599\n",
      "mlt20bMMEFPPbest , mlt20b ,  MMEFPPbest ,  100.144 ,  27.874 ,  599\n",
      "mlt20bPEFRPPbest , mlt20b ,  PEFRPPbest ,  100.112 ,  17.439 ,  599\n",
      "mlt20bFEF75OFVCPPbest , mlt20b ,  FEF75OFVCPPbest ,  98.392 ,  39.886 ,  599\n",
      "mlt20bFEF75OPEFRPPbest , mlt20b ,  FEF75OPEFRPPbest ,  86.777 ,  31.053 ,  599\n",
      "mlt20bFEV05OFEV3PPbest , mlt20b ,  FEV05OFEV3PPbest ,  103.804 ,  10.58 ,  599\n",
      "mlt20bFEV05OFVCPPbest , mlt20b ,  FEV05OFVCPPbest ,  103.53 ,  11.527 ,  599\n",
      "mlt20bFEV1OFEV3PPbest , mlt20b ,  FEV1OFEV3PPbest ,  100.0 ,  6.009 ,  599\n",
      "mlt20bFEV1OFEV6PPbest , mlt20b ,  FEV1OFEV6PPbest ,  100.0 ,  7.029 ,  599\n",
      "mlt20bFEV1OFVCPPbest , mlt20b ,  FEV1OFVCPPbest ,  100.0 ,  7.227 ,  599\n",
      "mlt20bFEV3OFEV6PPbest , mlt20b ,  FEV3OFEV6PPbest ,  100.0 ,  1.715 ,  599\n",
      "mlt20bFEV3OFVCPPbest , mlt20b ,  FEV3OFVCPPbest ,  100.0 ,  2.023 ,  599\n",
      "mlt20bPEFROFEV1PPbest , mlt20b ,  PEFROFEV1PPbest ,  100.0 ,  12.688 ,  599\n",
      "mlt20bPEFROFEV6PPbest , mlt20b ,  PEFROFEV6PPbest ,  100.0 ,  16.12 ,  599\n",
      "mlt20bPEFROFVCPPbest , mlt20b ,  PEFROFVCPPbest ,  100.0 ,  16.235 ,  599\n",
      "mlt20bFEV6OFVCPPbest , mlt20b ,  FEV6OFVCPPbest ,  100.0 ,  0.623 ,  599\n",
      "mlt20bMMEFOFVCPPbest , mlt20b ,  MMEFOFVCPPbest ,  100.0 ,  28.038 ,  599\n",
      "mlt20bMMEFOPEFRPPbest , mlt20b ,  MMEFOPEFRPPbest ,  100.0 ,  21.222 ,  599\n",
      "mlt20bPEFRPPOFEV1PPPPbest , mlt20b ,  PEFRPPOFEV1PPPPbest ,  100.0 ,  12.493 ,  599\n",
      "mlt20bPEFRPPOFVCPPPPbest , mlt20b ,  PEFRPPOFVCPPPPbest ,  100.0 ,  15.984 ,  599\n",
      "mlt20bMMEFPPOFVCPPPPbest , mlt20b ,  MMEFPPOFVCPPPPbest ,  100.0 ,  27.977 ,  599\n",
      "mlt20bMMEFPPOPEFRPPPPbest , mlt20b ,  MMEFPPOPEFRPPPPbest ,  100.0 ,  21.287 ,  599\n",
      "mlt20bFEF75PPOFVCPPPPbest , mlt20b ,  FEF75PPOFVCPPPPbest ,  100.0 ,  40.519 ,  599\n",
      "mlt20cmaEXPIRPPbest , mlt20cma ,  EXPIRPPbest ,  99.995 ,  35.687 ,  1019\n",
      "mlt20cmaFEF75PPbest , mlt20cma ,  FEF75PPbest ,  100.389 ,  34.284 ,  1019\n",
      "mlt20cmaFEV05PPbest , mlt20cma ,  FEV05PPbest ,  100.069 ,  12.461 ,  1019\n",
      "mlt20cmaFEV1PPbest , mlt20cma ,  FEV1PPbest ,  100.096 ,  11.073 ,  1019\n",
      "mlt20cmaFEV3PPbest , mlt20cma ,  FEV3PPbest ,  100.073 ,  10.629 ,  1019\n",
      "mlt20cmaFEV6PPbest , mlt20cma ,  FEV6PPbest ,  100.059 ,  10.657 ,  1019\n",
      "mlt20cmaFVCPPbest , mlt20cma ,  FVCPPbest ,  100.056 ,  10.688 ,  1019\n",
      "mlt20cmaMMEFPPbest , mlt20cma ,  MMEFPPbest ,  100.152 ,  23.635 ,  1019\n",
      "mlt20cmaPEFRPPbest , mlt20cma ,  PEFRPPbest ,  100.07 ,  15.959 ,  1019\n",
      "mlt20cmaFEF75OFVCPPbest , mlt20cma ,  FEF75OFVCPPbest ,  100.0 ,  34.941 ,  1019\n",
      "mlt20cmaFEF75OPEFRPPbest , mlt20cma ,  FEF75OPEFRPPbest ,  100.0 ,  33.238 ,  1019\n",
      "mlt20cmaFEV05OFEV3PPbest , mlt20cma ,  FEV05OFEV3PPbest ,  100.0 ,  9.674 ,  1019\n",
      "mlt20cmaFEV05OFVCPPbest , mlt20cma ,  FEV05OFVCPPbest ,  100.0 ,  10.356 ,  1019\n",
      "mlt20cmaFEV1OFEV3PPbest , mlt20cma ,  FEV1OFEV3PPbest ,  100.0 ,  5.533 ,  1019\n",
      "mlt20cmaFEV1OFEV6PPbest , mlt20cma ,  FEV1OFEV6PPbest ,  100.0 ,  6.355 ,  1019\n",
      "mlt20cmaFEV1OFVCPPbest , mlt20cma ,  FEV1OFVCPPbest ,  100.0 ,  6.503 ,  1019\n",
      "mlt20cmaFEV3OFEV6PPbest , mlt20cma ,  FEV3OFEV6PPbest ,  100.0 ,  1.465 ,  1019\n",
      "mlt20cmaFEV3OFVCPPbest , mlt20cma ,  FEV3OFVCPPbest ,  100.0 ,  1.74 ,  1019\n",
      "mlt20cmaPEFROFEV1PPbest , mlt20cma ,  PEFROFEV1PPbest ,  100.0 ,  13.028 ,  1019\n",
      "mlt20cmaPEFROFEV6PPbest , mlt20cma ,  PEFROFEV6PPbest ,  100.0 ,  15.682 ,  1019\n",
      "mlt20cmaPEFROFVCPPbest , mlt20cma ,  PEFROFVCPPbest ,  100.0 ,  15.719 ,  1019\n",
      "mlt20cmaFEV6OFVCPPbest , mlt20cma ,  FEV6OFVCPPbest ,  100.0 ,  0.59 ,  1019\n",
      "mlt20cmaMMEFOFVCPPbest , mlt20cma ,  MMEFOFVCPPbest ,  100.0 ,  24.248 ,  1019\n",
      "mlt20cmaMMEFOPEFRPPbest , mlt20cma ,  MMEFOPEFRPPbest ,  100.0 ,  18.609 ,  1019\n",
      "mlt20cmaPEFRPPOFEV1PPPPbest , mlt20cma ,  PEFRPPOFEV1PPPPbest ,  100.0 ,  12.785 ,  1019\n",
      "mlt20cmaPEFRPPOFVCPPPPbest , mlt20cma ,  PEFRPPOFVCPPPPbest ,  100.0 ,  15.458 ,  1019\n",
      "mlt20cmaMMEFPPOFVCPPPPbest , mlt20cma ,  MMEFPPOFVCPPPPbest ,  100.0 ,  24.133 ,  1019\n",
      "mlt20cmaMMEFPPOPEFRPPPPbest , mlt20cma ,  MMEFPPOPEFRPPPPbest ,  100.0 ,  18.68 ,  1019\n",
      "mlt20cmaFEF75PPOFVCPPPPbest , mlt20cma ,  FEF75PPOFVCPPPPbest ,  100.0 ,  35.139 ,  1019\n",
      "mlt20cEXPIRPPbest , mlt20c ,  EXPIRPPbest ,  102.192 ,  35.163 ,  419\n",
      "mlt20cFEF75PPbest , mlt20c ,  FEF75PPbest ,  93.615 ,  31.885 ,  419\n",
      "mlt20cFEV05PPbest , mlt20c ,  FEV05PPbest ,  97.386 ,  12.007 ,  419\n",
      "mlt20cFEV1PPbest , mlt20c ,  FEV1PPbest ,  97.722 ,  10.563 ,  419\n",
      "mlt20cFEV3PPbest , mlt20c ,  FEV3PPbest ,  98.636 ,  10.135 ,  419\n",
      "mlt20cFEV6PPbest , mlt20c ,  FEV6PPbest ,  98.74 ,  10.185 ,  419\n",
      "mlt20cFVCPPbest , mlt20c ,  FVCPPbest ,  98.739 ,  10.257 ,  419\n",
      "mlt20cMMEFPPbest , mlt20c ,  MMEFPPbest ,  94.833 ,  22.596 ,  419\n",
      "mlt20cPEFRPPbest , mlt20c ,  PEFRPPbest ,  98.433 ,  15.35 ,  419\n",
      "mlt20cFEF75OFVCPPbest , mlt20c ,  FEF75OFVCPPbest ,  94.908 ,  33.317 ,  419\n",
      "mlt20cFEF75OPEFRPPbest , mlt20c ,  FEF75OPEFRPPbest ,  95.419 ,  29.649 ,  419\n",
      "mlt20cFEV05OFEV3PPbest , mlt20c ,  FEV05OFEV3PPbest ,  98.208 ,  9.442 ,  419\n",
      "mlt20cFEV05OFVCPPbest , mlt20c ,  FEV05OFVCPPbest ,  98.144 ,  10.188 ,  419\n",
      "mlt20cFEV1OFEV3PPbest , mlt20c ,  FEV1OFEV3PPbest ,  98.935 ,  5.6 ,  419\n",
      "mlt20cFEV1OFEV6PPbest , mlt20c ,  FEV1OFEV6PPbest ,  98.854 ,  6.445 ,  419\n",
      "mlt20cFEV1OFVCPPbest , mlt20c ,  FEV1OFVCPPbest ,  98.867 ,  6.589 ,  419\n",
      "mlt20cFEV3OFEV6PPbest , mlt20c ,  FEV3OFEV6PPbest ,  99.915 ,  1.429 ,  419\n",
      "mlt20cFEV3OFVCPPbest , mlt20c ,  FEV3OFVCPPbest ,  99.928 ,  1.721 ,  419\n",
      "mlt20cPEFROFEV1PPbest , mlt20c ,  PEFROFEV1PPbest ,  100.056 ,  12.191 ,  419\n",
      "mlt20cPEFROFEV6PPbest , mlt20c ,  PEFROFEV6PPbest ,  98.926 ,  15.024 ,  419\n",
      "mlt20cPEFROFVCPPbest , mlt20c ,  PEFROFVCPPbest ,  98.944 ,  15.104 ,  419\n",
      "mlt20cFEV6OFVCPPbest , mlt20c ,  FEV6OFVCPPbest ,  100.013 ,  0.642 ,  419\n",
      "mlt20cMMEFOFVCPPbest , mlt20c ,  MMEFOFVCPPbest ,  95.417 ,  23.544 ,  419\n",
      "mlt20cMMEFOPEFRPPbest , mlt20c ,  MMEFOPEFRPPbest ,  96.28 ,  17.601 ,  419\n",
      "mlt20cPEFRPPOFEV1PPPPbest , mlt20c ,  PEFRPPOFEV1PPPPbest ,  99.916 ,  11.748 ,  419\n",
      "mlt20cPEFRPPOFVCPPPPbest , mlt20c ,  PEFRPPOFVCPPPPbest ,  99.951 ,  14.907 ,  419\n",
      "mlt20cMMEFPPOFVCPPPPbest , mlt20c ,  MMEFPPOFVCPPPPbest ,  99.988 ,  24.623 ,  419\n",
      "mlt20cMMEFPPOPEFRPPPPbest , mlt20c ,  MMEFPPOPEFRPPPPbest ,  99.805 ,  18.176 ,  419\n",
      "mlt20cFEF75PPOFVCPPPPbest , mlt20c ,  FEF75PPOFVCPPPPbest ,  100.0 ,  35.286 ,  419\n",
      "mlt20maEXPIRPPbest , mlt20ma ,  EXPIRPPbest ,  98.461 ,  35.998 ,  600\n",
      "mlt20maFEF75PPbest , mlt20ma ,  FEF75PPbest ,  105.12 ,  35.123 ,  600\n",
      "mlt20maFEV05PPbest , mlt20ma ,  FEV05PPbest ,  101.943 ,  12.439 ,  600\n",
      "mlt20maFEV1PPbest , mlt20ma ,  FEV1PPbest ,  101.754 ,  11.128 ,  600\n",
      "mlt20maFEV3PPbest , mlt20ma ,  FEV3PPbest ,  101.076 ,  10.857 ,  600\n",
      "mlt20maFEV6PPbest , mlt20ma ,  FEV6PPbest ,  100.979 ,  10.889 ,  600\n",
      "mlt20maFVCPPbest , mlt20ma ,  FVCPPbest ,  100.975 ,  10.894 ,  600\n",
      "mlt20maMMEFPPbest , mlt20ma ,  MMEFPPbest ,  103.867 ,  23.653 ,  600\n",
      "mlt20maPEFRPPbest , mlt20ma ,  PEFRPPbest ,  101.213 ,  16.287 ,  600\n",
      "mlt20maFEF75OFVCPPbest , mlt20ma ,  FEF75OFVCPPbest ,  103.556 ,  35.629 ,  600\n",
      "mlt20maFEF75OPEFRPPbest , mlt20ma ,  FEF75OPEFRPPbest ,  103.199 ,  35.203 ,  600\n",
      "mlt20maFEV05OFEV3PPbest , mlt20ma ,  FEV05OFEV3PPbest ,  101.252 ,  9.645 ,  600\n",
      "mlt20maFEV05OFVCPPbest , mlt20ma ,  FEV05OFVCPPbest ,  101.296 ,  10.283 ,  600\n",
      "mlt20maFEV1OFEV3PPbest , mlt20ma ,  FEV1OFEV3PPbest ,  100.744 ,  5.366 ,  600\n",
      "mlt20maFEV1OFEV6PPbest , mlt20ma ,  FEV1OFEV6PPbest ,  100.8 ,  6.172 ,  600\n",
      "mlt20maFEV1OFVCPPbest , mlt20ma ,  FEV1OFVCPPbest ,  100.791 ,  6.329 ,  600\n",
      "mlt20maFEV3OFEV6PPbest , mlt20ma ,  FEV3OFEV6PPbest ,  100.059 ,  1.488 ,  600\n",
      "mlt20maFEV3OFVCPPbest , mlt20ma ,  FEV3OFVCPPbest ,  100.05 ,  1.753 ,  600\n",
      "mlt20maPEFROFEV1PPbest , mlt20ma ,  PEFROFEV1PPbest ,  99.961 ,  13.592 ,  600\n",
      "mlt20maPEFROFEV6PPbest , mlt20ma ,  PEFROFEV6PPbest ,  100.75 ,  16.096 ,  600\n",
      "mlt20maPEFROFVCPPbest , mlt20ma ,  PEFROFVCPPbest ,  100.737 ,  16.106 ,  600\n",
      "mlt20maFEV6OFVCPPbest , mlt20ma ,  FEV6OFVCPPbest ,  99.991 ,  0.552 ,  600\n",
      "mlt20maMMEFOFVCPPbest , mlt20ma ,  MMEFOFVCPPbest ,  103.201 ,  24.237 ,  600\n",
      "mlt20maMMEFOPEFRPPbest , mlt20ma ,  MMEFOPEFRPPbest ,  102.598 ,  18.865 ,  600\n",
      "mlt20maPEFRPPOFEV1PPPPbest , mlt20ma ,  PEFRPPOFEV1PPPPbest ,  100.041 ,  13.447 ,  600\n",
      "mlt20maPEFRPPOFVCPPPPbest , mlt20ma ,  PEFRPPOFVCPPPPbest ,  100.061 ,  15.839 ,  600\n",
      "mlt20maMMEFPPOFVCPPPPbest , mlt20ma ,  MMEFPPOFVCPPPPbest ,  100.116 ,  23.429 ,  600\n",
      "mlt20maMMEFPPOPEFRPPPPbest , mlt20ma ,  MMEFPPOPEFRPPPPbest ,  100.211 ,  18.475 ,  600\n",
      "mlt20maFEF75PPOFVCPPPPbest , mlt20ma ,  FEF75PPOFVCPPPPbest ,  100.189 ,  34.644 ,  600\n",
      "flt18bEXPIRPPbest , flt18b ,  EXPIRPPbest ,  100.001 ,  43.857 ,  590\n",
      "flt18bFEF75PPbest , flt18b ,  FEF75PPbest ,  100.246 ,  36.9 ,  590\n",
      "flt18bFEV05PPbest , flt18b ,  FEV05PPbest ,  100.033 ,  14.239 ,  590\n",
      "flt18bFEV1PPbest , flt18b ,  FEV1PPbest ,  100.038 ,  13.103 ,  590\n",
      "flt18bFEV3PPbest , flt18b ,  FEV3PPbest ,  99.99 ,  12.696 ,  590\n",
      "flt18bFEV6PPbest , flt18b ,  FEV6PPbest ,  99.987 ,  12.672 ,  590\n",
      "flt18bFVCPPbest , flt18b ,  FVCPPbest ,  99.986 ,  12.67 ,  590\n",
      "flt18bMMEFPPbest , flt18b ,  MMEFPPbest ,  100.119 ,  26.535 ,  590\n",
      "flt18bPEFRPPbest , flt18b ,  PEFRPPbest ,  100.019 ,  17.892 ,  590\n",
      "flt18bFEF75OFVCPPbest , flt18b ,  FEF75OFVCPPbest ,  97.622 ,  38.582 ,  590\n",
      "flt18bFEF75OPEFRPPbest , flt18b ,  FEF75OPEFRPPbest ,  87.18 ,  31.292 ,  590\n",
      "flt18bFEV05OFEV3PPbest , flt18b ,  FEV05OFEV3PPbest ,  102.138 ,  11.177 ,  590\n",
      "flt18bFEV05OFVCPPbest , flt18b ,  FEV05OFVCPPbest ,  101.881 ,  12.124 ,  590\n",
      "flt18bFEV1OFEV3PPbest , flt18b ,  FEV1OFEV3PPbest ,  100.0 ,  6.526 ,  590\n",
      "flt18bFEV1OFEV6PPbest , flt18b ,  FEV1OFEV6PPbest ,  100.0 ,  7.464 ,  590\n",
      "flt18bFEV1OFVCPPbest , flt18b ,  FEV1OFVCPPbest ,  100.0 ,  7.822 ,  590\n",
      "flt18bFEV3OFEV6PPbest , flt18b ,  FEV3OFEV6PPbest ,  100.0 ,  1.79 ,  590\n",
      "flt18bFEV3OFVCPPbest , flt18b ,  FEV3OFVCPPbest ,  100.0 ,  2.543 ,  590\n",
      "flt18bPEFROFEV1PPbest , flt18b ,  PEFROFEV1PPbest ,  100.0 ,  14.166 ,  590\n",
      "flt18bPEFROFEV6PPbest , flt18b ,  PEFROFEV6PPbest ,  100.0 ,  17.577 ,  590\n",
      "flt18bPEFROFVCPPbest , flt18b ,  PEFROFVCPPbest ,  100.0 ,  17.744 ,  590\n",
      "flt18bFEV6OFVCPPbest , flt18b ,  FEV6OFVCPPbest ,  100.0 ,  1.212 ,  590\n",
      "flt18bMMEFOFVCPPbest , flt18b ,  MMEFOFVCPPbest ,  100.0 ,  28.062 ,  590\n",
      "flt18bMMEFOPEFRPPbest , flt18b ,  MMEFOPEFRPPbest ,  100.0 ,  21.008 ,  590\n",
      "flt18bPEFRPPOFEV1PPPPbest , flt18b ,  PEFRPPOFEV1PPPPbest ,  100.0 ,  13.963 ,  590\n",
      "flt18bPEFRPPOFVCPPPPbest , flt18b ,  PEFRPPOFVCPPPPbest ,  100.0 ,  17.568 ,  590\n",
      "flt18bMMEFPPOFVCPPPPbest , flt18b ,  MMEFPPOFVCPPPPbest ,  100.0 ,  28.057 ,  590\n",
      "flt18bMMEFPPOPEFRPPPPbest , flt18b ,  MMEFPPOPEFRPPPPbest ,  100.0 ,  20.987 ,  590\n",
      "flt18bFEF75PPOFVCPPPPbest , flt18b ,  FEF75PPOFVCPPPPbest ,  100.0 ,  39.706 ,  590\n",
      "flt18cmaEXPIRPPbest , flt18cma ,  EXPIRPPbest ,  99.996 ,  40.453 ,  966\n",
      "flt18cmaFEF75PPbest , flt18cma ,  FEF75PPbest ,  100.12 ,  31.259 ,  966\n",
      "flt18cmaFEV05PPbest , flt18cma ,  FEV05PPbest ,  100.012 ,  12.942 ,  966\n",
      "flt18cmaFEV1PPbest , flt18cma ,  FEV1PPbest ,  100.045 ,  11.496 ,  966\n",
      "flt18cmaFEV3PPbest , flt18cma ,  FEV3PPbest ,  100.044 ,  11.424 ,  966\n",
      "flt18cmaFEV6PPbest , flt18cma ,  FEV6PPbest ,  100.036 ,  11.543 ,  966\n",
      "flt18cmaFVCPPbest , flt18cma ,  FVCPPbest ,  100.035 ,  11.535 ,  966\n",
      "flt18cmaMMEFPPbest , flt18cma ,  MMEFPPbest ,  99.996 ,  22.312 ,  966\n",
      "flt18cmaPEFRPPbest , flt18cma ,  PEFRPPbest ,  99.997 ,  17.092 ,  966\n",
      "flt18cmaFEF75OFVCPPbest , flt18cma ,  FEF75OFVCPPbest ,  100.0 ,  32.697 ,  966\n",
      "flt18cmaFEF75OPEFRPPbest , flt18cma ,  FEF75OPEFRPPbest ,  100.002 ,  32.63 ,  966\n",
      "flt18cmaFEV05OFEV3PPbest , flt18cma ,  FEV05OFEV3PPbest ,  100.0 ,  9.703 ,  966\n",
      "flt18cmaFEV05OFVCPPbest , flt18cma ,  FEV05OFVCPPbest ,  100.0 ,  10.167 ,  966\n",
      "flt18cmaFEV1OFEV3PPbest , flt18cma ,  FEV1OFEV3PPbest ,  100.0 ,  5.217 ,  966\n",
      "flt18cmaFEV1OFEV6PPbest , flt18cma ,  FEV1OFEV6PPbest ,  100.0 ,  5.836 ,  966\n",
      "flt18cmaFEV1OFVCPPbest , flt18cma ,  FEV1OFVCPPbest ,  100.0 ,  5.947 ,  966\n",
      "flt18cmaFEV3OFEV6PPbest , flt18cma ,  FEV3OFEV6PPbest ,  100.0 ,  1.328 ,  966\n",
      "flt18cmaFEV3OFVCPPbest , flt18cma ,  FEV3OFVCPPbest ,  100.0 ,  1.542 ,  966\n",
      "flt18cmaPEFROFEV1PPbest , flt18cma ,  PEFROFEV1PPbest ,  100.0 ,  13.553 ,  966\n",
      "flt18cmaPEFROFEV6PPbest , flt18cma ,  PEFROFEV6PPbest ,  100.0 ,  15.844 ,  966\n",
      "flt18cmaPEFROFVCPPbest , flt18cma ,  PEFROFVCPPbest ,  100.0 ,  15.864 ,  966\n",
      "flt18cmaFEV6OFVCPPbest , flt18cma ,  FEV6OFVCPPbest ,  100.0 ,  0.461 ,  966\n",
      "flt18cmaMMEFOFVCPPbest , flt18cma ,  MMEFOFVCPPbest ,  100.0 ,  22.955 ,  966\n",
      "flt18cmaMMEFOPEFRPPbest , flt18cma ,  MMEFOPEFRPPbest ,  100.0 ,  18.036 ,  966\n",
      "flt18cmaPEFRPPOFEV1PPPPbest , flt18cma ,  PEFRPPOFEV1PPPPbest ,  100.0 ,  13.327 ,  966\n",
      "flt18cmaPEFRPPOFVCPPPPbest , flt18cma ,  PEFRPPOFVCPPPPbest ,  100.0 ,  15.605 ,  966\n",
      "flt18cmaMMEFPPOFVCPPPPbest , flt18cma ,  MMEFPPOFVCPPPPbest ,  100.0 ,  22.757 ,  966\n",
      "flt18cmaMMEFPPOPEFRPPPPbest , flt18cma ,  MMEFPPOPEFRPPPPbest ,  100.0 ,  18.004 ,  966\n",
      "flt18cmaFEF75PPOFVCPPPPbest , flt18cma ,  FEF75PPOFVCPPPPbest ,  100.0 ,  32.731 ,  966\n",
      "flt18cEXPIRPPbest , flt18c ,  EXPIRPPbest ,  103.96 ,  40.113 ,  409\n",
      "flt18cFEF75PPbest , flt18c ,  FEF75PPbest ,  95.582 ,  29.578 ,  409\n",
      "flt18cFEV05PPbest , flt18c ,  FEV05PPbest ,  98.065 ,  12.079 ,  409\n",
      "flt18cFEV1PPbest , flt18c ,  FEV1PPbest ,  98.743 ,  10.888 ,  409\n",
      "flt18cFEV3PPbest , flt18c ,  FEV3PPbest ,  99.558 ,  10.858 ,  409\n",
      "flt18cFEV6PPbest , flt18c ,  FEV6PPbest ,  99.571 ,  11.025 ,  409\n",
      "flt18cFVCPPbest , flt18c ,  FVCPPbest ,  99.576 ,  11.014 ,  409\n",
      "flt18cMMEFPPbest , flt18c ,  MMEFPPbest ,  96.055 ,  21.366 ,  409\n",
      "flt18cPEFRPPbest , flt18c ,  PEFRPPbest ,  98.183 ,  14.979 ,  409\n",
      "flt18cFEF75OFVCPPbest , flt18c ,  FEF75OFVCPPbest ,  95.924 ,  31.264 ,  409\n",
      "flt18cFEF75OPEFRPPbest , flt18c ,  FEF75OPEFRPPbest ,  96.95 ,  29.064 ,  409\n",
      "flt18cFEV05OFEV3PPbest , flt18c ,  FEV05OFEV3PPbest ,  98.265 ,  9.568 ,  409\n",
      "flt18cFEV05OFVCPPbest , flt18c ,  FEV05OFVCPPbest ,  98.244 ,  10.048 ,  409\n",
      "flt18cFEV1OFEV3PPbest , flt18c ,  FEV1OFEV3PPbest ,  99.12 ,  5.415 ,  409\n",
      "flt18cFEV1OFEV6PPbest , flt18c ,  FEV1OFEV6PPbest ,  99.099 ,  6.032 ,  409\n",
      "flt18cFEV1OFVCPPbest , flt18c ,  FEV1OFVCPPbest ,  99.097 ,  6.138 ,  409\n",
      "flt18cFEV3OFEV6PPbest , flt18c ,  FEV3OFEV6PPbest ,  99.976 ,  1.258 ,  409\n",
      "flt18cFEV3OFVCPPbest , flt18c ,  FEV3OFVCPPbest ,  99.974 ,  1.483 ,  409\n",
      "flt18cPEFROFEV1PPbest , flt18c ,  PEFROFEV1PPbest ,  99.115 ,  11.953 ,  409\n",
      "flt18cPEFROFEV6PPbest , flt18c ,  PEFROFEV6PPbest ,  98.217 ,  14.423 ,  409\n",
      "flt18cPEFROFVCPPbest , flt18c ,  PEFROFVCPPbest ,  98.216 ,  14.45 ,  409\n",
      "flt18cFEV6OFVCPPbest , flt18c ,  FEV6OFVCPPbest ,  99.998 ,  0.474 ,  409\n",
      "flt18cMMEFOFVCPPbest , flt18c ,  MMEFOFVCPPbest ,  96.054 ,  22.569 ,  409\n",
      "flt18cMMEFOPEFRPPbest , flt18c ,  MMEFOPEFRPPbest ,  97.411 ,  16.919 ,  409\n",
      "flt18cPEFRPPOFEV1PPPPbest , flt18c ,  PEFRPPOFEV1PPPPbest ,  100.028 ,  11.899 ,  409\n",
      "flt18cPEFRPPOFVCPPPPbest , flt18c ,  PEFRPPOFVCPPPPbest ,  100.04 ,  14.487 ,  409\n",
      "flt18cMMEFPPOFVCPPPPbest , flt18c ,  MMEFPPOFVCPPPPbest ,  100.097 ,  23.154 ,  409\n",
      "flt18cMMEFPPOPEFRPPPPbest , flt18c ,  MMEFPPOPEFRPPPPbest ,  99.689 ,  17.264 ,  409\n",
      "flt18cFEF75PPOFVCPPPPbest , flt18c ,  FEF75PPOFVCPPPPbest ,  100.095 ,  32.622 ,  409\n",
      "flt18maEXPIRPPbest , flt18ma ,  EXPIRPPbest ,  97.085 ,  40.49 ,  557\n",
      "flt18maFEF75PPbest , flt18ma ,  FEF75PPbest ,  103.452 ,  32.058 ,  557\n",
      "flt18maFEV05PPbest , flt18ma ,  FEV05PPbest ,  101.442 ,  13.372 ,  557\n",
      "flt18maFEV1PPbest , flt18ma ,  FEV1PPbest ,  101.001 ,  11.841 ,  557\n",
      "flt18maFEV3PPbest , flt18ma ,  FEV3PPbest ,  100.401 ,  11.82 ,  557\n",
      "flt18maFEV6PPbest , flt18ma ,  FEV6PPbest ,  100.377 ,  11.907 ,  557\n",
      "flt18maFVCPPbest , flt18ma ,  FVCPPbest ,  100.372 ,  11.901 ,  557\n",
      "flt18maMMEFPPbest , flt18ma ,  MMEFPPbest ,  102.89 ,  22.565 ,  557\n",
      "flt18maPEFRPPbest , flt18ma ,  PEFRPPbest ,  101.33 ,  18.39 ,  557\n",
      "flt18maFEF75OFVCPPbest , flt18ma ,  FEF75OFVCPPbest ,  102.993 ,  33.423 ,  557\n",
      "flt18maFEF75OPEFRPPbest , flt18ma ,  FEF75OPEFRPPbest ,  102.243 ,  34.874 ,  557\n",
      "flt18maFEV05OFEV3PPbest , flt18ma ,  FEV05OFEV3PPbest ,  101.274 ,  9.611 ,  557\n",
      "flt18maFEV05OFVCPPbest , flt18ma ,  FEV05OFVCPPbest ,  101.289 ,  10.069 ,  557\n",
      "flt18maFEV1OFEV3PPbest , flt18ma ,  FEV1OFEV3PPbest ,  100.646 ,  4.973 ,  557\n",
      "flt18maFEV1OFEV6PPbest , flt18ma ,  FEV1OFEV6PPbest ,  100.662 ,  5.602 ,  557\n",
      "flt18maFEV1OFVCPPbest , flt18ma ,  FEV1OFVCPPbest ,  100.663 ,  5.718 ,  557\n",
      "flt18maFEV3OFEV6PPbest , flt18ma ,  FEV3OFEV6PPbest ,  100.018 ,  1.377 ,  557\n",
      "flt18maFEV3OFVCPPbest , flt18ma ,  FEV3OFVCPPbest ,  100.019 ,  1.585 ,  557\n",
      "flt18maPEFROFEV1PPbest , flt18ma ,  PEFROFEV1PPbest ,  100.649 ,  14.593 ,  557\n",
      "flt18maPEFROFEV6PPbest , flt18ma ,  PEFROFEV6PPbest ,  101.309 ,  16.703 ,  557\n",
      "flt18maPEFROFVCPPbest , flt18ma ,  PEFROFVCPPbest ,  101.309 ,  16.72 ,  557\n",
      "flt18maFEV6OFVCPPbest , flt18ma ,  FEV6OFVCPPbest ,  100.002 ,  0.452 ,  557\n",
      "flt18maMMEFOFVCPPbest , flt18ma ,  MMEFOFVCPPbest ,  102.897 ,  22.824 ,  557\n",
      "flt18maMMEFOPEFRPPbest , flt18ma ,  MMEFOPEFRPPbest ,  101.901 ,  18.602 ,  557\n",
      "flt18maPEFRPPOFEV1PPPPbest , flt18ma ,  PEFRPPOFEV1PPPPbest ,  99.968 ,  14.258 ,  557\n",
      "flt18maPEFRPPOFVCPPPPbest , flt18ma ,  PEFRPPOFVCPPPPbest ,  99.963 ,  16.267 ,  557\n",
      "flt18maMMEFPPOFVCPPPPbest , flt18ma ,  MMEFPPOFVCPPPPbest ,  99.962 ,  22.088 ,  557\n",
      "flt18maMMEFPPOPEFRPPPPbest , flt18ma ,  MMEFPPOPEFRPPPPbest ,  100.294 ,  18.21 ,  557\n",
      "flt18maFEF75PPOFVCPPPPbest , flt18ma ,  FEF75PPOFVCPPPPbest ,  100.009 ,  32.386 ,  557\n",
      "alltotalEXPIRPPbest , alltotal ,  EXPIRPPbest ,  100.026 ,  37.877 ,  7851\n",
      "alltotalFEF75PPbest , alltotal ,  FEF75PPbest ,  100.368 ,  44.356 ,  7851\n",
      "alltotalFEV05PPbest , alltotal ,  FEV05PPbest ,  100.047 ,  14.421 ,  7851\n",
      "alltotalFEV1PPbest , alltotal ,  FEV1PPbest ,  100.075 ,  13.197 ,  7851\n",
      "alltotalFEV3PPbest , alltotal ,  FEV3PPbest ,  100.075 ,  12.778 ,  7851\n",
      "alltotalFEV6PPbest , alltotal ,  FEV6PPbest ,  100.062 ,  12.756 ,  7851\n",
      "alltotalFVCPPbest , alltotal ,  FVCPPbest ,  100.051 ,  12.83 ,  7851\n",
      "alltotalMMEFPPbest , alltotal ,  MMEFPPbest ,  100.17 ,  28.621 ,  7851\n",
      "alltotalPEFRPPbest , alltotal ,  PEFRPPbest ,  100.035 ,  18.103 ,  7851\n",
      "alltotalFEF75OFVCPPbest , alltotal ,  FEF75OFVCPPbest ,  101.415 ,  54.825 ,  7851\n",
      "alltotalFEF75OPEFRPPbest , alltotal ,  FEF75OPEFRPPbest ,  98.111 ,  52.689 ,  7851\n",
      "alltotalFEV05OFEV3PPbest , alltotal ,  FEV05OFEV3PPbest ,  100.998 ,  10.028 ,  7851\n",
      "alltotalFEV05OFVCPPbest , alltotal ,  FEV05OFVCPPbest ,  100.961 ,  11.307 ,  7851\n",
      "alltotalFEV1OFEV3PPbest , alltotal ,  FEV1OFEV3PPbest ,  100.0 ,  5.436 ,  7851\n",
      "alltotalFEV1OFEV6PPbest , alltotal ,  FEV1OFEV6PPbest ,  100.0 ,  6.576 ,  7851\n",
      "alltotalFEV1OFVCPPbest , alltotal ,  FEV1OFVCPPbest ,  100.001 ,  7.289 ,  7851\n",
      "alltotalFEV3OFEV6PPbest , alltotal ,  FEV3OFEV6PPbest ,  100.0 ,  1.894 ,  7851\n",
      "alltotalFEV3OFVCPPbest , alltotal ,  FEV3OFVCPPbest ,  100.0 ,  3.114 ,  7851\n",
      "alltotalPEFROFEV1PPbest , alltotal ,  PEFROFEV1PPbest ,  99.997 ,  14.459 ,  7851\n",
      "alltotalPEFROFEV6PPbest , alltotal ,  PEFROFEV6PPbest ,  99.999 ,  17.041 ,  7851\n",
      "alltotalPEFROFVCPPbest , alltotal ,  PEFROFVCPPbest ,  100.0 ,  17.319 ,  7851\n",
      "alltotalFEV6OFVCPPbest , alltotal ,  FEV6OFVCPPbest ,  100.0 ,  1.74 ,  7851\n",
      "alltotalMMEFOFVCPPbest , alltotal ,  MMEFOFVCPPbest ,  99.998 ,  30.019 ,  7851\n",
      "alltotalMMEFOPEFRPPbest , alltotal ,  MMEFOPEFRPPbest ,  100.029 ,  24.981 ,  7851\n",
      "alltotalPEFRPPOFEV1PPPPbest , alltotal ,  PEFRPPOFEV1PPPPbest ,  100.003 ,  14.226 ,  7851\n",
      "alltotalPEFRPPOFVCPPPPbest , alltotal ,  PEFRPPOFVCPPPPbest ,  100.006 ,  17.032 ,  7851\n",
      "alltotalMMEFPPOFVCPPPPbest , alltotal ,  MMEFPPOFVCPPPPbest ,  100.065 ,  30.502 ,  7851\n",
      "alltotalMMEFPPOPEFRPPPPbest , alltotal ,  MMEFPPOPEFRPPPPbest ,  100.035 ,  24.875 ,  7851\n",
      "alltotalFEF75PPOFVCPPPPbest , alltotal ,  FEF75PPOFVCPPPPbest ,  99.966 ,  49.048 ,  7851\n"
     ]
    }
   ],
   "source": [
    "# create df PPbestvalues\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"mean\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "PPbestvalues= pd.DataFrame(columns = column_names)\n",
    "PPbestvalues.name = 'PPbestvalues'\n",
    "print (PPbestvalues.name)\n",
    "print (PPbestvalues)\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b,\n",
    "           mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma,flt18c, flt18ma, alltotal] # not work for mall\n",
    "PPlist = ['FEV05OFEV3PP', 'FEV05OFVCPP',\n",
    "           'FEV1OFEV3PP','FEV1OFEV6PP','FEV1OFVCPP', 'FEV3OFEV6PP', 'FEV3OFVCPP', 'FEV6OFVCPP',\n",
    "           'MMEFOFVCPP', 'MMEFOPEFRPP', 'PEFROFEV1PP', 'PEFROFEV6PP', 'PEFROFVCPP',\n",
    "           'EXPIRPP', 'FEF75PP', 'FEV05PP', 'FEV1PP', 'FEV3PP', 'FEV6PP', 'FVCPP',\n",
    "           'MMEFPP',  'PEFRPP',\n",
    "           'FEF75PPOFVCPPPP','MMEFPPOFVCPPPP','MMEFPPOPEFRPPPP', 'PEFRPPOFEV1PPPP','PEFRPPOFVCPPPP']\n",
    "PPlist = varsppbest\n",
    "for df in ftoa:\n",
    "#    print (df.name)\n",
    "    for y in PPlist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "        df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'var': y,'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    "        PPbestvalues = PPbestvalues.append(df2, ignore_index=True)\n",
    "   \n",
    "    # now set index   \n",
    "PPbestvalues.set_index('dfnvarn', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               dfname                  var        mean  \\\n",
      "dfnvarn                                                                  \n",
      "m20overbEXPIRPPbest          m20overb          EXPIRPPbest   99.999055   \n",
      "m20overbFEF75PPbest          m20overb          FEF75PPbest  100.029383   \n",
      "m20overbFEV05PPbest          m20overb          FEV05PPbest  100.012423   \n",
      "m20overbFEV1PPbest           m20overb           FEV1PPbest  100.015339   \n",
      "m20overbFEV3PPbest           m20overb           FEV3PPbest  100.006147   \n",
      "...                               ...                  ...         ...   \n",
      "alltotalPEFRPPOFEV1PPPPbest  alltotal  PEFRPPOFEV1PPPPbest  100.003031   \n",
      "alltotalPEFRPPOFVCPPPPbest   alltotal   PEFRPPOFVCPPPPbest  100.005582   \n",
      "alltotalMMEFPPOFVCPPPPbest   alltotal   MMEFPPOFVCPPPPbest  100.065220   \n",
      "alltotalMMEFPPOPEFRPPPPbest  alltotal  MMEFPPOPEFRPPPPbest  100.035441   \n",
      "alltotalFEF75PPOFVCPPPPbest  alltotal  FEF75PPOFVCPPPPbest   99.966486   \n",
      "\n",
      "                                   std count  \n",
      "dfnvarn                                       \n",
      "m20overbEXPIRPPbest          35.225265   477  \n",
      "m20overbFEF75PPbest          42.310937   477  \n",
      "m20overbFEV05PPbest          16.393031   477  \n",
      "m20overbFEV1PPbest           14.811547   477  \n",
      "m20overbFEV3PPbest           13.869118   477  \n",
      "...                                ...   ...  \n",
      "alltotalPEFRPPOFEV1PPPPbest  14.226370  7851  \n",
      "alltotalPEFRPPOFVCPPPPbest   17.031662  7851  \n",
      "alltotalMMEFPPOFVCPPPPbest   30.502181  7851  \n",
      "alltotalMMEFPPOPEFRPPPPbest  24.875221  7851  \n",
      "alltotalFEF75PPOFVCPPPPbest  49.048132  7851  \n",
      "\n",
      "[493 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "print(PPbestvalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 481,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dfname</th>\n",
       "      <th>var</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dfnvarn</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>m20overbEXPIRPPbest</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>EXPIRPPbest</td>\n",
       "      <td>99.999055</td>\n",
       "      <td>35.225265</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEF75PPbest</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>FEF75PPbest</td>\n",
       "      <td>100.029383</td>\n",
       "      <td>42.310937</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV05PPbest</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>FEV05PPbest</td>\n",
       "      <td>100.012423</td>\n",
       "      <td>16.393031</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV1PPbest</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>FEV1PPbest</td>\n",
       "      <td>100.015339</td>\n",
       "      <td>14.811547</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m20overbFEV3PPbest</th>\n",
       "      <td>m20overb</td>\n",
       "      <td>FEV3PPbest</td>\n",
       "      <td>100.006147</td>\n",
       "      <td>13.869118</td>\n",
       "      <td>477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alltotalPEFRPPOFEV1PPPPbest</th>\n",
       "      <td>alltotal</td>\n",
       "      <td>PEFRPPOFEV1PPPPbest</td>\n",
       "      <td>100.003031</td>\n",
       "      <td>14.226370</td>\n",
       "      <td>7851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alltotalPEFRPPOFVCPPPPbest</th>\n",
       "      <td>alltotal</td>\n",
       "      <td>PEFRPPOFVCPPPPbest</td>\n",
       "      <td>100.005582</td>\n",
       "      <td>17.031662</td>\n",
       "      <td>7851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alltotalMMEFPPOFVCPPPPbest</th>\n",
       "      <td>alltotal</td>\n",
       "      <td>MMEFPPOFVCPPPPbest</td>\n",
       "      <td>100.065220</td>\n",
       "      <td>30.502181</td>\n",
       "      <td>7851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alltotalMMEFPPOPEFRPPPPbest</th>\n",
       "      <td>alltotal</td>\n",
       "      <td>MMEFPPOPEFRPPPPbest</td>\n",
       "      <td>100.035441</td>\n",
       "      <td>24.875221</td>\n",
       "      <td>7851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alltotalFEF75PPOFVCPPPPbest</th>\n",
       "      <td>alltotal</td>\n",
       "      <td>FEF75PPOFVCPPPPbest</td>\n",
       "      <td>99.966486</td>\n",
       "      <td>49.048132</td>\n",
       "      <td>7851</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>493 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               dfname                  var        mean  \\\n",
       "dfnvarn                                                                  \n",
       "m20overbEXPIRPPbest          m20overb          EXPIRPPbest   99.999055   \n",
       "m20overbFEF75PPbest          m20overb          FEF75PPbest  100.029383   \n",
       "m20overbFEV05PPbest          m20overb          FEV05PPbest  100.012423   \n",
       "m20overbFEV1PPbest           m20overb           FEV1PPbest  100.015339   \n",
       "m20overbFEV3PPbest           m20overb           FEV3PPbest  100.006147   \n",
       "...                               ...                  ...         ...   \n",
       "alltotalPEFRPPOFEV1PPPPbest  alltotal  PEFRPPOFEV1PPPPbest  100.003031   \n",
       "alltotalPEFRPPOFVCPPPPbest   alltotal   PEFRPPOFVCPPPPbest  100.005582   \n",
       "alltotalMMEFPPOFVCPPPPbest   alltotal   MMEFPPOFVCPPPPbest  100.065220   \n",
       "alltotalMMEFPPOPEFRPPPPbest  alltotal  MMEFPPOPEFRPPPPbest  100.035441   \n",
       "alltotalFEF75PPOFVCPPPPbest  alltotal  FEF75PPOFVCPPPPbest   99.966486   \n",
       "\n",
       "                                   std count  \n",
       "dfnvarn                                       \n",
       "m20overbEXPIRPPbest          35.225265   477  \n",
       "m20overbFEF75PPbest          42.310937   477  \n",
       "m20overbFEV05PPbest          16.393031   477  \n",
       "m20overbFEV1PPbest           14.811547   477  \n",
       "m20overbFEV3PPbest           13.869118   477  \n",
       "...                                ...   ...  \n",
       "alltotalPEFRPPOFEV1PPPPbest  14.226370  7851  \n",
       "alltotalPEFRPPOFVCPPPPbest   17.031662  7851  \n",
       "alltotalMMEFPPOFVCPPPPbest   30.502181  7851  \n",
       "alltotalMMEFPPOPEFRPPPPbest  24.875221  7851  \n",
       "alltotalFEF75PPOFVCPPPPbest  49.048132  7851  \n",
       "\n",
       "[493 rows x 5 columns]"
      ]
     },
     "execution_count": 481,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PPbestvalues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now do PPbestlt600 PPbest600over PPbest720over"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 482,
   "metadata": {},
   "outputs": [],
   "source": [
    "alltotallt600 = alltotal.query('MXPAXTMR < 600')\n",
    "alltotallt600.name = \"alltotallt600\"\n",
    "alltotal600over = alltotal.query('MXPAXTMR >= 600')\n",
    "alltotal600over.name = \"alltotal600over\"\n",
    "alltotallt720 = alltotal.query('MXPAXTMR < 720')\n",
    "alltotallt720.name = \"alltotallt720\"\n",
    "alltotal720over = alltotal.query('MXPAXTMR >= 720')\n",
    "alltotal720over.name = \"alltotal720over\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PPbestvalueslt600\n",
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, mean, std, count]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "alltotallt600EXPIRPPbest , alltotallt600 ,  EXPIRPPbest ,  99.756 ,  37.642 ,  6499\n",
      "alltotallt600FEF75PPbest , alltotallt600 ,  FEF75PPbest ,  100.138 ,  36.594 ,  6499\n",
      "alltotallt600FEV05PPbest , alltotallt600 ,  FEV05PPbest ,  100.131 ,  13.264 ,  6499\n",
      "alltotallt600FEV1PPbest , alltotallt600 ,  FEV1PPbest ,  100.115 ,  12.007 ,  6499\n",
      "alltotallt600FEV3PPbest , alltotallt600 ,  FEV3PPbest ,  100.121 ,  11.736 ,  6499\n",
      "alltotallt600FEV6PPbest , alltotallt600 ,  FEV6PPbest ,  100.117 ,  11.772 ,  6499\n",
      "alltotallt600FVCPPbest , alltotallt600 ,  FVCPPbest ,  100.089 ,  11.778 ,  6499\n",
      "alltotallt600MMEFPPbest , alltotallt600 ,  MMEFPPbest ,  100.323 ,  25.215 ,  6499\n",
      "alltotallt600PEFRPPbest , alltotallt600 ,  PEFRPPbest ,  100.168 ,  16.894 ,  6499\n",
      "alltotallt600FEF75OFVCPPbest , alltotallt600 ,  FEF75OFVCPPbest ,  99.6 ,  38.955 ,  6499\n",
      "alltotallt600FEF75OPEFRPPbest , alltotallt600 ,  FEF75OPEFRPPbest ,  95.274 ,  35.62 ,  6499\n",
      "alltotallt600FEV05OFEV3PPbest , alltotallt600 ,  FEV05OFEV3PPbest ,  101.146 ,  10.041 ,  6499\n",
      "alltotallt600FEV05OFVCPPbest , alltotallt600 ,  FEV05OFVCPPbest ,  101.118 ,  10.932 ,  6499\n",
      "alltotallt600FEV1OFEV3PPbest , alltotallt600 ,  FEV1OFEV3PPbest ,  99.991 ,  5.433 ,  6499\n",
      "alltotallt600FEV1OFEV6PPbest , alltotallt600 ,  FEV1OFEV6PPbest ,  99.987 ,  6.383 ,  6499\n",
      "alltotallt600FEV1OFVCPPbest , alltotallt600 ,  FEV1OFVCPPbest ,  100.009 ,  6.732 ,  6499\n",
      "alltotallt600FEV3OFEV6PPbest , alltotallt600 ,  FEV3OFEV6PPbest ,  99.997 ,  1.664 ,  6499\n",
      "alltotallt600FEV3OFVCPPbest , alltotallt600 ,  FEV3OFVCPPbest ,  100.022 ,  2.331 ,  6499\n",
      "alltotallt600PEFROFEV1PPbest , alltotallt600 ,  PEFROFEV1PPbest ,  100.084 ,  13.754 ,  6499\n",
      "alltotallt600PEFROFEV6PPbest , alltotallt600 ,  PEFROFEV6PPbest ,  100.096 ,  16.407 ,  6499\n",
      "alltotallt600PEFROFVCPPbest , alltotallt600 ,  PEFROFVCPPbest ,  100.133 ,  16.538 ,  6499\n",
      "alltotallt600FEV6OFVCPPbest , alltotallt600 ,  FEV6OFVCPPbest ,  100.027 ,  1.051 ,  6499\n",
      "alltotallt600MMEFOFVCPPbest , alltotallt600 ,  MMEFOFVCPPbest ,  100.238 ,  26.238 ,  6499\n",
      "alltotallt600MMEFOPEFRPPbest , alltotallt600 ,  MMEFOPEFRPPbest ,  100.022 ,  20.726 ,  6499\n",
      "alltotallt600PEFRPPOFEV1PPPPbest , alltotallt600 ,  PEFRPPOFEV1PPPPbest ,  100.061 ,  13.483 ,  6499\n",
      "alltotallt600PEFRPPOFVCPPPPbest , alltotallt600 ,  PEFRPPOFVCPPPPbest ,  100.091 ,  16.185 ,  6499\n",
      "alltotallt600MMEFPPOFVCPPPPbest , alltotallt600 ,  MMEFPPOFVCPPPPbest ,  100.26 ,  25.792 ,  6499\n",
      "alltotallt600MMEFPPOPEFRPPPPbest , alltotallt600 ,  MMEFPPOPEFRPPPPbest ,  100.152 ,  20.553 ,  6499\n",
      "alltotallt600FEF75PPOFVCPPPPbest , alltotallt600 ,  FEF75PPOFVCPPPPbest ,  99.96 ,  38.78 ,  6499\n"
     ]
    }
   ],
   "source": [
    "# create df PPbestvalueslt600 with mean, std, count just for alltotal\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"mean\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "PPbestvalueslt600= pd.DataFrame(columns = column_names)\n",
    "PPbestvalueslt600.name = 'PPbestvalueslt600'\n",
    "print (PPbestvalueslt600.name)\n",
    "print (PPbestvalueslt600)\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [alltotallt600]\n",
    "PPlist = varsppbest\n",
    "for df in ftoa:\n",
    "#    print (df.name)\n",
    "    for y in PPlist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "        df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    "        PPbestvalueslt600 = PPbestvalueslt600.append(df2, ignore_index=True)\n",
    "   \n",
    "    # now set index   \n",
    "PPbestvalueslt600.set_index('dfnvarn', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 484,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PPbestvalues600over\n",
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, mean, std, count]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "alltotal600overEXPIRPPbest , alltotal600over ,  EXPIRPPbest ,  101.325 ,  38.977 ,  1352\n",
      "alltotal600overFEF75PPbest , alltotal600over ,  FEF75PPbest ,  101.47 ,  70.635 ,  1352\n",
      "alltotal600overFEV05PPbest , alltotal600over ,  FEV05PPbest ,  99.643 ,  19.027 ,  1352\n",
      "alltotal600overFEV1PPbest , alltotal600over ,  FEV1PPbest ,  99.881 ,  17.847 ,  1352\n",
      "alltotal600overFEV3PPbest , alltotal600over ,  FEV3PPbest ,  99.854 ,  16.918 ,  1352\n",
      "alltotal600overFEV6PPbest , alltotal600over ,  FEV6PPbest ,  99.797 ,  16.699 ,  1352\n",
      "alltotal600overFVCPPbest , alltotal600over ,  FVCPPbest ,  99.865 ,  17.005 ,  1352\n",
      "alltotal600overMMEFPPbest , alltotal600over ,  MMEFPPbest ,  99.433 ,  41.242 ,  1352\n",
      "alltotal600overPEFRPPbest , alltotal600over ,  PEFRPPbest ,  99.4 ,  23.042 ,  1352\n",
      "alltotal600overFEF75OFVCPPbest , alltotal600over ,  FEF75OFVCPPbest ,  110.143 ,  100.37 ,  1352\n",
      "alltotal600overFEF75OPEFRPPbest , alltotal600over ,  FEF75OPEFRPPbest ,  111.751 ,  99.013 ,  1352\n",
      "alltotal600overFEV05OFEV3PPbest , alltotal600over ,  FEV05OFEV3PPbest ,  100.285 ,  9.938 ,  1352\n",
      "alltotal600overFEV05OFVCPPbest , alltotal600over ,  FEV05OFVCPPbest ,  100.207 ,  12.939 ,  1352\n",
      "alltotal600overFEV1OFEV3PPbest , alltotal600over ,  FEV1OFEV3PPbest ,  100.041 ,  5.454 ,  1352\n",
      "alltotal600overFEV1OFEV6PPbest , alltotal600over ,  FEV1OFEV6PPbest ,  100.065 ,  7.437 ,  1352\n",
      "alltotal600overFEV1OFVCPPbest , alltotal600over ,  FEV1OFVCPPbest ,  99.958 ,  9.527 ,  1352\n",
      "alltotal600overFEV3OFEV6PPbest , alltotal600over ,  FEV3OFEV6PPbest ,  100.015 ,  2.741 ,  1352\n",
      "alltotal600overFEV3OFVCPPbest , alltotal600over ,  FEV3OFVCPPbest ,  99.898 ,  5.495 ,  1352\n",
      "alltotal600overPEFROFEV1PPbest , alltotal600over ,  PEFROFEV1PPbest ,  99.58 ,  17.457 ,  1352\n",
      "alltotal600overPEFROFEV6PPbest , alltotal600over ,  PEFROFEV6PPbest ,  99.536 ,  19.806 ,  1352\n",
      "alltotal600overPEFROFVCPPbest , alltotal600over ,  PEFROFVCPPbest ,  99.362 ,  20.66 ,  1352\n",
      "alltotal600overFEV6OFVCPPbest , alltotal600over ,  FEV6OFVCPPbest ,  99.87 ,  3.502 ,  1352\n",
      "alltotal600overMMEFOFVCPPbest , alltotal600over ,  MMEFOFVCPPbest ,  98.843 ,  43.855 ,  1352\n",
      "alltotal600overMMEFOPEFRPPbest , alltotal600over ,  MMEFOPEFRPPbest ,  100.066 ,  39.495 ,  1352\n",
      "alltotal600overPEFRPPOFEV1PPPPbest , alltotal600over ,  PEFRPPOFEV1PPPPbest ,  99.722 ,  17.363 ,  1352\n",
      "alltotal600overPEFRPPOFVCPPPPbest , alltotal600over ,  PEFRPPOFVCPPPPbest ,  99.593 ,  20.624 ,  1352\n",
      "alltotal600overMMEFPPOFVCPPPPbest , alltotal600over ,  MMEFPPOFVCPPPPbest ,  99.127 ,  46.96 ,  1352\n",
      "alltotal600overMMEFPPOPEFRPPPPbest , alltotal600over ,  MMEFPPOPEFRPPPPbest ,  99.474 ,  39.538 ,  1352\n",
      "alltotal600overFEF75PPOFVCPPPPbest , alltotal600over ,  FEF75PPOFVCPPPPbest ,  99.997 ,  82.129 ,  1352\n"
     ]
    }
   ],
   "source": [
    "# create df PPbestvalues600over with mean, std, count just for alltotal\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"mean\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "PPbestvalues600over= pd.DataFrame(columns = column_names)\n",
    "PPbestvalues600over.name = 'PPbestvalues600over'\n",
    "print (PPbestvalues600over.name)\n",
    "print (PPbestvalues600over)\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [alltotal600over]\n",
    "PPlist = varsppbest\n",
    "for df in ftoa:\n",
    "#    print (df.name)\n",
    "    for y in PPlist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "        df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    "        PPbestvalues600over = PPbestvalues600over.append(df2, ignore_index=True)\n",
    "   \n",
    "    # now set index   \n",
    "PPbestvalues600over.set_index('dfnvarn', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PPbestvalueslt720\n",
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, mean, std, count]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "alltotallt720EXPIRPPbest , alltotallt720 ,  EXPIRPPbest ,  99.948 ,  37.561 ,  6867\n",
      "alltotallt720FEF75PPbest , alltotallt720 ,  FEF75PPbest ,  100.16 ,  37.844 ,  6867\n",
      "alltotallt720FEV05PPbest , alltotallt720 ,  FEV05PPbest ,  100.081 ,  13.425 ,  6867\n",
      "alltotallt720FEV1PPbest , alltotallt720 ,  FEV1PPbest ,  100.07 ,  12.168 ,  6867\n",
      "alltotallt720FEV3PPbest , alltotallt720 ,  FEV3PPbest ,  100.047 ,  11.853 ,  6867\n",
      "alltotallt720FEV6PPbest , alltotallt720 ,  FEV6PPbest ,  100.041 ,  11.871 ,  6867\n",
      "alltotallt720FVCPPbest , alltotallt720 ,  FVCPPbest ,  100.028 ,  11.879 ,  6867\n",
      "alltotallt720MMEFPPbest , alltotallt720 ,  MMEFPPbest ,  100.253 ,  25.629 ,  6867\n",
      "alltotallt720PEFRPPbest , alltotallt720 ,  PEFRPPbest ,  100.081 ,  17.045 ,  6867\n",
      "alltotallt720FEF75OFVCPPbest , alltotallt720 ,  FEF75OFVCPPbest ,  99.036 ,  39.971 ,  6867\n",
      "alltotallt720FEF75OPEFRPPbest , alltotallt720 ,  FEF75OPEFRPPbest ,  94.821 ,  37.04 ,  6867\n",
      "alltotallt720FEV05OFEV3PPbest , alltotallt720 ,  FEV05OFEV3PPbest ,  101.196 ,  10.007 ,  6867\n",
      "alltotallt720FEV05OFVCPPbest , alltotallt720 ,  FEV05OFVCPPbest ,  101.132 ,  10.955 ,  6867\n",
      "alltotallt720FEV1OFEV3PPbest , alltotallt720 ,  FEV1OFEV3PPbest ,  100.021 ,  5.393 ,  6867\n",
      "alltotallt720FEV1OFEV6PPbest , alltotallt720 ,  FEV1OFEV6PPbest ,  100.001 ,  6.363 ,  6867\n",
      "alltotallt720FEV1OFVCPPbest , alltotallt720 ,  FEV1OFVCPPbest ,  99.998 ,  6.771 ,  6867\n",
      "alltotallt720FEV3OFEV6PPbest , alltotallt720 ,  FEV3OFEV6PPbest ,  99.984 ,  1.688 ,  6867\n",
      "alltotallt720FEV3OFVCPPbest , alltotallt720 ,  FEV3OFVCPPbest ,  99.983 ,  2.449 ,  6867\n",
      "alltotallt720PEFROFEV1PPbest , alltotallt720 ,  PEFROFEV1PPbest ,  100.157 ,  13.956 ,  6867\n",
      "alltotallt720PEFROFEV6PPbest , alltotallt720 ,  PEFROFEV6PPbest ,  100.187 ,  16.559 ,  6867\n",
      "alltotallt720PEFROFVCPPbest , alltotallt720 ,  PEFROFVCPPbest ,  100.199 ,  16.704 ,  6867\n",
      "alltotallt720FEV6OFVCPPbest , alltotallt720 ,  FEV6OFVCPPbest ,  100.004 ,  1.18 ,  6867\n",
      "alltotallt720MMEFOFVCPPbest , alltotallt720 ,  MMEFOFVCPPbest ,  100.236 ,  26.7 ,  6867\n",
      "alltotallt720MMEFOPEFRPPbest , alltotallt720 ,  MMEFOPEFRPPbest ,  99.992 ,  21.381 ,  6867\n",
      "alltotallt720PEFRPPOFEV1PPPPbest , alltotallt720 ,  PEFRPPOFEV1PPPPbest ,  100.027 ,  13.661 ,  6867\n",
      "alltotallt720PEFRPPOFVCPPPPbest , alltotallt720 ,  PEFRPPOFVCPPPPbest ,  100.056 ,  16.329 ,  6867\n",
      "alltotallt720MMEFPPOFVCPPPPbest , alltotallt720 ,  MMEFPPOFVCPPPPbest ,  100.197 ,  26.197 ,  6867\n",
      "alltotallt720MMEFPPOPEFRPPPPbest , alltotallt720 ,  MMEFPPOPEFRPPPPbest ,  100.155 ,  21.198 ,  6867\n",
      "alltotallt720FEF75PPOFVCPPPPbest , alltotallt720 ,  FEF75PPOFVCPPPPbest ,  99.917 ,  40.157 ,  6867\n"
     ]
    }
   ],
   "source": [
    "# create df PPbestvalueslt720 with mean, std, count just for alltotal\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"mean\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "PPbestvalueslt720= pd.DataFrame(columns = column_names)\n",
    "PPbestvalueslt720.name = 'PPbestvalueslt720'\n",
    "print (PPbestvalueslt720.name)\n",
    "print (PPbestvalueslt720)\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [alltotallt720]\n",
    "PPlist = varsppbest\n",
    "for df in ftoa:\n",
    "#    print (df.name)\n",
    "    for y in PPlist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "        df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    "        PPbestvalueslt720 = PPbestvalueslt720.append(df2, ignore_index=True)\n",
    "   \n",
    "    # now set index   \n",
    "PPbestvalueslt720.set_index('dfnvarn', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PPbestvalues720over\n",
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, mean, std, count]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "alltotal720overEXPIRPPbest , alltotal720over ,  EXPIRPPbest ,  100.569 ,  40.03 ,  984\n",
      "alltotal720overFEF75PPbest , alltotal720over ,  FEF75PPbest ,  101.816 ,  75.535 ,  984\n",
      "alltotal720overFEV05PPbest , alltotal720over ,  FEV05PPbest ,  99.811 ,  20.046 ,  984\n",
      "alltotal720overFEV1PPbest , alltotal720over ,  FEV1PPbest ,  100.107 ,  18.885 ,  984\n",
      "alltotal720overFEV3PPbest , alltotal720over ,  FEV3PPbest ,  100.269 ,  17.959 ,  984\n",
      "alltotal720overFEV6PPbest , alltotal720over ,  FEV6PPbest ,  100.209 ,  17.755 ,  984\n",
      "alltotal720overFVCPPbest , alltotal720over ,  FVCPPbest ,  100.206 ,  18.134 ,  984\n",
      "alltotal720overMMEFPPbest , alltotal720over ,  MMEFPPbest ,  99.594 ,  44.194 ,  984\n",
      "alltotal720overPEFRPPbest , alltotal720over ,  PEFRPPbest ,  99.719 ,  24.24 ,  984\n",
      "alltotal720overFEF75OFVCPPbest , alltotal720over ,  FEF75OFVCPPbest ,  118.023 ,  111.928 ,  984\n",
      "alltotal720overFEF75OPEFRPPbest , alltotal720over ,  FEF75OPEFRPPbest ,  121.072 ,  109.469 ,  984\n",
      "alltotal720overFEV05OFEV3PPbest , alltotal720over ,  FEV05OFEV3PPbest ,  99.613 ,  10.067 ,  984\n",
      "alltotal720overFEV05OFVCPPbest , alltotal720over ,  FEV05OFVCPPbest ,  99.763 ,  13.461 ,  984\n",
      "alltotal720overFEV1OFEV3PPbest , alltotal720over ,  FEV1OFEV3PPbest ,  99.85 ,  5.729 ,  984\n",
      "alltotal720overFEV1OFEV6PPbest , alltotal720over ,  FEV1OFEV6PPbest ,  99.994 ,  7.907 ,  984\n",
      "alltotal720overFEV1OFVCPPbest , alltotal720over ,  FEV1OFVCPPbest ,  100.021 ,  10.202 ,  984\n",
      "alltotal720overFEV3OFEV6PPbest , alltotal720over ,  FEV3OFEV6PPbest ,  100.114 ,  2.951 ,  984\n",
      "alltotal720overFEV3OFVCPPbest , alltotal720over ,  FEV3OFVCPPbest ,  100.118 ,  5.96 ,  984\n",
      "alltotal720overPEFROFEV1PPbest , alltotal720over ,  PEFROFEV1PPbest ,  98.88 ,  17.546 ,  984\n",
      "alltotal720overPEFROFEV6PPbest , alltotal720over ,  PEFROFEV6PPbest ,  98.691 ,  20.047 ,  984\n",
      "alltotal720overPEFROFVCPPbest , alltotal720over ,  PEFROFVCPPbest ,  98.609 ,  21.073 ,  984\n",
      "alltotal720overFEV6OFVCPPbest , alltotal720over ,  FEV6OFVCPPbest ,  99.973 ,  3.803 ,  984\n",
      "alltotal720overMMEFOFVCPPbest , alltotal720over ,  MMEFOFVCPPbest ,  98.338 ,  47.05 ,  984\n",
      "alltotal720overMMEFOPEFRPPbest , alltotal720over ,  MMEFOPEFRPPbest ,  100.292 ,  42.31 ,  984\n",
      "alltotal720overPEFRPPOFEV1PPPPbest , alltotal720over ,  PEFRPPOFEV1PPPPbest ,  99.834 ,  17.685 ,  984\n",
      "alltotal720overPEFRPPOFVCPPPPbest , alltotal720over ,  PEFRPPOFVCPPPPbest ,  99.652 ,  21.305 ,  984\n",
      "alltotal720overMMEFPPOFVCPPPPbest , alltotal720over ,  MMEFPPOFVCPPPPbest ,  99.143 ,  51.336 ,  984\n",
      "alltotal720overMMEFPPOPEFRPPPPbest , alltotal720over ,  MMEFPPOPEFRPPPPbest ,  99.203 ,  42.449 ,  984\n",
      "alltotal720overFEF75PPOFVCPPPPbest , alltotal720over ,  FEF75PPOFVCPPPPbest ,  100.313 ,  89.152 ,  984\n"
     ]
    }
   ],
   "source": [
    "# create df PPbestvalues720over with mean, std, count just for alltotal\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"mean\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "PPbestvalues720over= pd.DataFrame(columns = column_names)\n",
    "PPbestvalues720over.name = 'PPbestvalues720over'\n",
    "print (PPbestvalues720over.name)\n",
    "print (PPbestvalues720over)\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [alltotal720over]\n",
    "PPlist = varsppbest\n",
    "for df in ftoa:\n",
    "#    print (df.name)\n",
    "    for y in PPlist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "        df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    "        PPbestvalues720over = PPbestvalues600over.append(df2, ignore_index=True)\n",
    "   \n",
    "    # now set index   \n",
    "PPbestvalues720over.set_index('dfnvarn', inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now print the mean std, count for each variable for alltotal, alltotallt600, alltotalover600"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               dfname                  var        mean  \\\n",
      "dfnvarn                                                                  \n",
      "m20overbEXPIRPPbest          m20overb          EXPIRPPbest   99.999055   \n",
      "m20overbFEF75PPbest          m20overb          FEF75PPbest  100.029383   \n",
      "m20overbFEV05PPbest          m20overb          FEV05PPbest  100.012423   \n",
      "m20overbFEV1PPbest           m20overb           FEV1PPbest  100.015339   \n",
      "m20overbFEV3PPbest           m20overb           FEV3PPbest  100.006147   \n",
      "...                               ...                  ...         ...   \n",
      "alltotalPEFRPPOFEV1PPPPbest  alltotal  PEFRPPOFEV1PPPPbest  100.003031   \n",
      "alltotalPEFRPPOFVCPPPPbest   alltotal   PEFRPPOFVCPPPPbest  100.005582   \n",
      "alltotalMMEFPPOFVCPPPPbest   alltotal   MMEFPPOFVCPPPPbest  100.065220   \n",
      "alltotalMMEFPPOPEFRPPPPbest  alltotal  MMEFPPOPEFRPPPPbest  100.035441   \n",
      "alltotalFEF75PPOFVCPPPPbest  alltotal  FEF75PPOFVCPPPPbest   99.966486   \n",
      "\n",
      "                                   std count  \n",
      "dfnvarn                                       \n",
      "m20overbEXPIRPPbest          35.225265   477  \n",
      "m20overbFEF75PPbest          42.310937   477  \n",
      "m20overbFEV05PPbest          16.393031   477  \n",
      "m20overbFEV1PPbest           14.811547   477  \n",
      "m20overbFEV3PPbest           13.869118   477  \n",
      "...                                ...   ...  \n",
      "alltotalPEFRPPOFEV1PPPPbest  14.226370  7851  \n",
      "alltotalPEFRPPOFVCPPPPbest   17.031662  7851  \n",
      "alltotalMMEFPPOFVCPPPPbest   30.502181  7851  \n",
      "alltotalMMEFPPOPEFRPPPPbest  24.875221  7851  \n",
      "alltotalFEF75PPOFVCPPPPbest  49.048132  7851  \n",
      "\n",
      "[493 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "print (PPbestvalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100.00053797028134\n"
     ]
    }
   ],
   "source": [
    "    df = alltotal\n",
    "    y = 'FEV1OFVCPPbest'\n",
    "    vn = df.name + 'FEV1OFVCPPbest'\n",
    " #   df['FEV1OFVCLLNPred'] = (df.FEV1OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "\n",
    "print (PPbestvalues.loc[vn,'mean'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 489,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['EXPIRPPbest', 'FEF75PPbest', 'FEV05PPbest', 'FEV1PPbest', 'FEV3PPbest', 'FEV6PPbest', 'FVCPPbest', 'MMEFPPbest', 'PEFRPPbest', 'FEF75OFVCPPbest', 'FEF75OPEFRPPbest', 'FEV05OFEV3PPbest', 'FEV05OFVCPPbest', 'FEV1OFEV3PPbest', 'FEV1OFEV6PPbest', 'FEV1OFVCPPbest', 'FEV3OFEV6PPbest', 'FEV3OFVCPPbest', 'PEFROFEV1PPbest', 'PEFROFEV6PPbest', 'PEFROFVCPPbest', 'FEV6OFVCPPbest', 'MMEFOFVCPPbest', 'MMEFOPEFRPPbest', 'PEFRPPOFEV1PPPPbest', 'PEFRPPOFVCPPPPbest', 'MMEFPPOFVCPPPPbest', 'MMEFPPOPEFRPPPPbest', 'FEF75PPOFVCPPPPbest']\n"
     ]
    }
   ],
   "source": [
    "print (varsppbest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dfvarn, df, var, mean, std, count\n",
      "alltotalEXPIRPPbest , alltotal ,  EXPIRPPbest ,  100.026 ,  37.877 ,  7851\n",
      "alltotalFEF75PPbest , alltotal ,  FEF75PPbest ,  100.368 ,  44.356 ,  7851\n",
      "alltotalFEV05PPbest , alltotal ,  FEV05PPbest ,  100.047 ,  14.421 ,  7851\n",
      "alltotalFEV1PPbest , alltotal ,  FEV1PPbest ,  100.075 ,  13.197 ,  7851\n",
      "alltotalFEV3PPbest , alltotal ,  FEV3PPbest ,  100.075 ,  12.778 ,  7851\n",
      "alltotalFEV6PPbest , alltotal ,  FEV6PPbest ,  100.062 ,  12.756 ,  7851\n",
      "alltotalFVCPPbest , alltotal ,  FVCPPbest ,  100.051 ,  12.83 ,  7851\n",
      "alltotalMMEFPPbest , alltotal ,  MMEFPPbest ,  100.17 ,  28.621 ,  7851\n",
      "alltotalPEFRPPbest , alltotal ,  PEFRPPbest ,  100.035 ,  18.103 ,  7851\n",
      "alltotalFEF75OFVCPPbest , alltotal ,  FEF75OFVCPPbest ,  101.415 ,  54.825 ,  7851\n",
      "alltotalFEF75OPEFRPPbest , alltotal ,  FEF75OPEFRPPbest ,  98.111 ,  52.689 ,  7851\n",
      "alltotalFEV05OFEV3PPbest , alltotal ,  FEV05OFEV3PPbest ,  100.998 ,  10.028 ,  7851\n",
      "alltotalFEV05OFVCPPbest , alltotal ,  FEV05OFVCPPbest ,  100.961 ,  11.307 ,  7851\n",
      "alltotalFEV1OFEV3PPbest , alltotal ,  FEV1OFEV3PPbest ,  100.0 ,  5.436 ,  7851\n",
      "alltotalFEV1OFEV6PPbest , alltotal ,  FEV1OFEV6PPbest ,  100.0 ,  6.576 ,  7851\n",
      "alltotalFEV1OFVCPPbest , alltotal ,  FEV1OFVCPPbest ,  100.001 ,  7.289 ,  7851\n",
      "alltotalFEV3OFEV6PPbest , alltotal ,  FEV3OFEV6PPbest ,  100.0 ,  1.894 ,  7851\n",
      "alltotalFEV3OFVCPPbest , alltotal ,  FEV3OFVCPPbest ,  100.0 ,  3.114 ,  7851\n",
      "alltotalPEFROFEV1PPbest , alltotal ,  PEFROFEV1PPbest ,  99.997 ,  14.459 ,  7851\n",
      "alltotalPEFROFEV6PPbest , alltotal ,  PEFROFEV6PPbest ,  99.999 ,  17.041 ,  7851\n",
      "alltotalPEFROFVCPPbest , alltotal ,  PEFROFVCPPbest ,  100.0 ,  17.319 ,  7851\n",
      "alltotalFEV6OFVCPPbest , alltotal ,  FEV6OFVCPPbest ,  100.0 ,  1.74 ,  7851\n",
      "alltotalMMEFOFVCPPbest , alltotal ,  MMEFOFVCPPbest ,  99.998 ,  30.019 ,  7851\n",
      "alltotalMMEFOPEFRPPbest , alltotal ,  MMEFOPEFRPPbest ,  100.029 ,  24.981 ,  7851\n",
      "alltotalPEFRPPOFEV1PPPPbest , alltotal ,  PEFRPPOFEV1PPPPbest ,  100.003 ,  14.226 ,  7851\n",
      "alltotalPEFRPPOFVCPPPPbest , alltotal ,  PEFRPPOFVCPPPPbest ,  100.006 ,  17.032 ,  7851\n",
      "alltotalMMEFPPOFVCPPPPbest , alltotal ,  MMEFPPOFVCPPPPbest ,  100.065 ,  30.502 ,  7851\n",
      "alltotalMMEFPPOPEFRPPPPbest , alltotal ,  MMEFPPOPEFRPPPPbest ,  100.035 ,  24.875 ,  7851\n",
      "alltotalFEF75PPOFVCPPPPbest , alltotal ,  FEF75PPOFVCPPPPbest ,  99.966 ,  49.048 ,  7851\n",
      "alltotallt600EXPIRPPbest , alltotallt600 ,  EXPIRPPbest ,  99.756 ,  37.642 ,  6499\n",
      "alltotallt600FEF75PPbest , alltotallt600 ,  FEF75PPbest ,  100.138 ,  36.594 ,  6499\n",
      "alltotallt600FEV05PPbest , alltotallt600 ,  FEV05PPbest ,  100.131 ,  13.264 ,  6499\n",
      "alltotallt600FEV1PPbest , alltotallt600 ,  FEV1PPbest ,  100.115 ,  12.007 ,  6499\n",
      "alltotallt600FEV3PPbest , alltotallt600 ,  FEV3PPbest ,  100.121 ,  11.736 ,  6499\n",
      "alltotallt600FEV6PPbest , alltotallt600 ,  FEV6PPbest ,  100.117 ,  11.772 ,  6499\n",
      "alltotallt600FVCPPbest , alltotallt600 ,  FVCPPbest ,  100.089 ,  11.778 ,  6499\n",
      "alltotallt600MMEFPPbest , alltotallt600 ,  MMEFPPbest ,  100.323 ,  25.215 ,  6499\n",
      "alltotallt600PEFRPPbest , alltotallt600 ,  PEFRPPbest ,  100.168 ,  16.894 ,  6499\n",
      "alltotallt600FEF75OFVCPPbest , alltotallt600 ,  FEF75OFVCPPbest ,  99.6 ,  38.955 ,  6499\n",
      "alltotallt600FEF75OPEFRPPbest , alltotallt600 ,  FEF75OPEFRPPbest ,  95.274 ,  35.62 ,  6499\n",
      "alltotallt600FEV05OFEV3PPbest , alltotallt600 ,  FEV05OFEV3PPbest ,  101.146 ,  10.041 ,  6499\n",
      "alltotallt600FEV05OFVCPPbest , alltotallt600 ,  FEV05OFVCPPbest ,  101.118 ,  10.932 ,  6499\n",
      "alltotallt600FEV1OFEV3PPbest , alltotallt600 ,  FEV1OFEV3PPbest ,  99.991 ,  5.433 ,  6499\n",
      "alltotallt600FEV1OFEV6PPbest , alltotallt600 ,  FEV1OFEV6PPbest ,  99.987 ,  6.383 ,  6499\n",
      "alltotallt600FEV1OFVCPPbest , alltotallt600 ,  FEV1OFVCPPbest ,  100.009 ,  6.732 ,  6499\n",
      "alltotallt600FEV3OFEV6PPbest , alltotallt600 ,  FEV3OFEV6PPbest ,  99.997 ,  1.664 ,  6499\n",
      "alltotallt600FEV3OFVCPPbest , alltotallt600 ,  FEV3OFVCPPbest ,  100.022 ,  2.331 ,  6499\n",
      "alltotallt600PEFROFEV1PPbest , alltotallt600 ,  PEFROFEV1PPbest ,  100.084 ,  13.754 ,  6499\n",
      "alltotallt600PEFROFEV6PPbest , alltotallt600 ,  PEFROFEV6PPbest ,  100.096 ,  16.407 ,  6499\n",
      "alltotallt600PEFROFVCPPbest , alltotallt600 ,  PEFROFVCPPbest ,  100.133 ,  16.538 ,  6499\n",
      "alltotallt600FEV6OFVCPPbest , alltotallt600 ,  FEV6OFVCPPbest ,  100.027 ,  1.051 ,  6499\n",
      "alltotallt600MMEFOFVCPPbest , alltotallt600 ,  MMEFOFVCPPbest ,  100.238 ,  26.238 ,  6499\n",
      "alltotallt600MMEFOPEFRPPbest , alltotallt600 ,  MMEFOPEFRPPbest ,  100.022 ,  20.726 ,  6499\n",
      "alltotallt600PEFRPPOFEV1PPPPbest , alltotallt600 ,  PEFRPPOFEV1PPPPbest ,  100.061 ,  13.483 ,  6499\n",
      "alltotallt600PEFRPPOFVCPPPPbest , alltotallt600 ,  PEFRPPOFVCPPPPbest ,  100.091 ,  16.185 ,  6499\n",
      "alltotallt600MMEFPPOFVCPPPPbest , alltotallt600 ,  MMEFPPOFVCPPPPbest ,  100.26 ,  25.792 ,  6499\n",
      "alltotallt600MMEFPPOPEFRPPPPbest , alltotallt600 ,  MMEFPPOPEFRPPPPbest ,  100.152 ,  20.553 ,  6499\n",
      "alltotallt600FEF75PPOFVCPPPPbest , alltotallt600 ,  FEF75PPOFVCPPPPbest ,  99.96 ,  38.78 ,  6499\n",
      "alltotal600overEXPIRPPbest , alltotal600over ,  EXPIRPPbest ,  101.325 ,  38.977 ,  1352\n",
      "alltotal600overFEF75PPbest , alltotal600over ,  FEF75PPbest ,  101.47 ,  70.635 ,  1352\n",
      "alltotal600overFEV05PPbest , alltotal600over ,  FEV05PPbest ,  99.643 ,  19.027 ,  1352\n",
      "alltotal600overFEV1PPbest , alltotal600over ,  FEV1PPbest ,  99.881 ,  17.847 ,  1352\n",
      "alltotal600overFEV3PPbest , alltotal600over ,  FEV3PPbest ,  99.854 ,  16.918 ,  1352\n",
      "alltotal600overFEV6PPbest , alltotal600over ,  FEV6PPbest ,  99.797 ,  16.699 ,  1352\n",
      "alltotal600overFVCPPbest , alltotal600over ,  FVCPPbest ,  99.865 ,  17.005 ,  1352\n",
      "alltotal600overMMEFPPbest , alltotal600over ,  MMEFPPbest ,  99.433 ,  41.242 ,  1352\n",
      "alltotal600overPEFRPPbest , alltotal600over ,  PEFRPPbest ,  99.4 ,  23.042 ,  1352\n",
      "alltotal600overFEF75OFVCPPbest , alltotal600over ,  FEF75OFVCPPbest ,  110.143 ,  100.37 ,  1352\n",
      "alltotal600overFEF75OPEFRPPbest , alltotal600over ,  FEF75OPEFRPPbest ,  111.751 ,  99.013 ,  1352\n",
      "alltotal600overFEV05OFEV3PPbest , alltotal600over ,  FEV05OFEV3PPbest ,  100.285 ,  9.938 ,  1352\n",
      "alltotal600overFEV05OFVCPPbest , alltotal600over ,  FEV05OFVCPPbest ,  100.207 ,  12.939 ,  1352\n",
      "alltotal600overFEV1OFEV3PPbest , alltotal600over ,  FEV1OFEV3PPbest ,  100.041 ,  5.454 ,  1352\n",
      "alltotal600overFEV1OFEV6PPbest , alltotal600over ,  FEV1OFEV6PPbest ,  100.065 ,  7.437 ,  1352\n",
      "alltotal600overFEV1OFVCPPbest , alltotal600over ,  FEV1OFVCPPbest ,  99.958 ,  9.527 ,  1352\n",
      "alltotal600overFEV3OFEV6PPbest , alltotal600over ,  FEV3OFEV6PPbest ,  100.015 ,  2.741 ,  1352\n",
      "alltotal600overFEV3OFVCPPbest , alltotal600over ,  FEV3OFVCPPbest ,  99.898 ,  5.495 ,  1352\n",
      "alltotal600overPEFROFEV1PPbest , alltotal600over ,  PEFROFEV1PPbest ,  99.58 ,  17.457 ,  1352\n",
      "alltotal600overPEFROFEV6PPbest , alltotal600over ,  PEFROFEV6PPbest ,  99.536 ,  19.806 ,  1352\n",
      "alltotal600overPEFROFVCPPbest , alltotal600over ,  PEFROFVCPPbest ,  99.362 ,  20.66 ,  1352\n",
      "alltotal600overFEV6OFVCPPbest , alltotal600over ,  FEV6OFVCPPbest ,  99.87 ,  3.502 ,  1352\n",
      "alltotal600overMMEFOFVCPPbest , alltotal600over ,  MMEFOFVCPPbest ,  98.843 ,  43.855 ,  1352\n",
      "alltotal600overMMEFOPEFRPPbest , alltotal600over ,  MMEFOPEFRPPbest ,  100.066 ,  39.495 ,  1352\n",
      "alltotal600overPEFRPPOFEV1PPPPbest , alltotal600over ,  PEFRPPOFEV1PPPPbest ,  99.722 ,  17.363 ,  1352\n",
      "alltotal600overPEFRPPOFVCPPPPbest , alltotal600over ,  PEFRPPOFVCPPPPbest ,  99.593 ,  20.624 ,  1352\n",
      "alltotal600overMMEFPPOFVCPPPPbest , alltotal600over ,  MMEFPPOFVCPPPPbest ,  99.127 ,  46.96 ,  1352\n",
      "alltotal600overMMEFPPOPEFRPPPPbest , alltotal600over ,  MMEFPPOPEFRPPPPbest ,  99.474 ,  39.538 ,  1352\n",
      "alltotal600overFEF75PPOFVCPPPPbest , alltotal600over ,  FEF75PPOFVCPPPPbest ,  99.997 ,  82.129 ,  1352\n",
      "alltotallt720EXPIRPPbest , alltotallt720 ,  EXPIRPPbest ,  99.948 ,  37.561 ,  6867\n",
      "alltotallt720FEF75PPbest , alltotallt720 ,  FEF75PPbest ,  100.16 ,  37.844 ,  6867\n",
      "alltotallt720FEV05PPbest , alltotallt720 ,  FEV05PPbest ,  100.081 ,  13.425 ,  6867\n",
      "alltotallt720FEV1PPbest , alltotallt720 ,  FEV1PPbest ,  100.07 ,  12.168 ,  6867\n",
      "alltotallt720FEV3PPbest , alltotallt720 ,  FEV3PPbest ,  100.047 ,  11.853 ,  6867\n",
      "alltotallt720FEV6PPbest , alltotallt720 ,  FEV6PPbest ,  100.041 ,  11.871 ,  6867\n",
      "alltotallt720FVCPPbest , alltotallt720 ,  FVCPPbest ,  100.028 ,  11.879 ,  6867\n",
      "alltotallt720MMEFPPbest , alltotallt720 ,  MMEFPPbest ,  100.253 ,  25.629 ,  6867\n",
      "alltotallt720PEFRPPbest , alltotallt720 ,  PEFRPPbest ,  100.081 ,  17.045 ,  6867\n",
      "alltotallt720FEF75OFVCPPbest , alltotallt720 ,  FEF75OFVCPPbest ,  99.036 ,  39.971 ,  6867\n",
      "alltotallt720FEF75OPEFRPPbest , alltotallt720 ,  FEF75OPEFRPPbest ,  94.821 ,  37.04 ,  6867\n",
      "alltotallt720FEV05OFEV3PPbest , alltotallt720 ,  FEV05OFEV3PPbest ,  101.196 ,  10.007 ,  6867\n",
      "alltotallt720FEV05OFVCPPbest , alltotallt720 ,  FEV05OFVCPPbest ,  101.132 ,  10.955 ,  6867\n",
      "alltotallt720FEV1OFEV3PPbest , alltotallt720 ,  FEV1OFEV3PPbest ,  100.021 ,  5.393 ,  6867\n",
      "alltotallt720FEV1OFEV6PPbest , alltotallt720 ,  FEV1OFEV6PPbest ,  100.001 ,  6.363 ,  6867\n",
      "alltotallt720FEV1OFVCPPbest , alltotallt720 ,  FEV1OFVCPPbest ,  99.998 ,  6.771 ,  6867\n",
      "alltotallt720FEV3OFEV6PPbest , alltotallt720 ,  FEV3OFEV6PPbest ,  99.984 ,  1.688 ,  6867\n",
      "alltotallt720FEV3OFVCPPbest , alltotallt720 ,  FEV3OFVCPPbest ,  99.983 ,  2.449 ,  6867\n",
      "alltotallt720PEFROFEV1PPbest , alltotallt720 ,  PEFROFEV1PPbest ,  100.157 ,  13.956 ,  6867\n",
      "alltotallt720PEFROFEV6PPbest , alltotallt720 ,  PEFROFEV6PPbest ,  100.187 ,  16.559 ,  6867\n",
      "alltotallt720PEFROFVCPPbest , alltotallt720 ,  PEFROFVCPPbest ,  100.199 ,  16.704 ,  6867\n",
      "alltotallt720FEV6OFVCPPbest , alltotallt720 ,  FEV6OFVCPPbest ,  100.004 ,  1.18 ,  6867\n",
      "alltotallt720MMEFOFVCPPbest , alltotallt720 ,  MMEFOFVCPPbest ,  100.236 ,  26.7 ,  6867\n",
      "alltotallt720MMEFOPEFRPPbest , alltotallt720 ,  MMEFOPEFRPPbest ,  99.992 ,  21.381 ,  6867\n",
      "alltotallt720PEFRPPOFEV1PPPPbest , alltotallt720 ,  PEFRPPOFEV1PPPPbest ,  100.027 ,  13.661 ,  6867\n",
      "alltotallt720PEFRPPOFVCPPPPbest , alltotallt720 ,  PEFRPPOFVCPPPPbest ,  100.056 ,  16.329 ,  6867\n",
      "alltotallt720MMEFPPOFVCPPPPbest , alltotallt720 ,  MMEFPPOFVCPPPPbest ,  100.197 ,  26.197 ,  6867\n",
      "alltotallt720MMEFPPOPEFRPPPPbest , alltotallt720 ,  MMEFPPOPEFRPPPPbest ,  100.155 ,  21.198 ,  6867\n",
      "alltotallt720FEF75PPOFVCPPPPbest , alltotallt720 ,  FEF75PPOFVCPPPPbest ,  99.917 ,  40.157 ,  6867\n",
      "alltotal720overEXPIRPPbest , alltotal720over ,  EXPIRPPbest ,  100.569 ,  40.03 ,  984\n",
      "alltotal720overFEF75PPbest , alltotal720over ,  FEF75PPbest ,  101.816 ,  75.535 ,  984\n",
      "alltotal720overFEV05PPbest , alltotal720over ,  FEV05PPbest ,  99.811 ,  20.046 ,  984\n",
      "alltotal720overFEV1PPbest , alltotal720over ,  FEV1PPbest ,  100.107 ,  18.885 ,  984\n",
      "alltotal720overFEV3PPbest , alltotal720over ,  FEV3PPbest ,  100.269 ,  17.959 ,  984\n",
      "alltotal720overFEV6PPbest , alltotal720over ,  FEV6PPbest ,  100.209 ,  17.755 ,  984\n",
      "alltotal720overFVCPPbest , alltotal720over ,  FVCPPbest ,  100.206 ,  18.134 ,  984\n",
      "alltotal720overMMEFPPbest , alltotal720over ,  MMEFPPbest ,  99.594 ,  44.194 ,  984\n",
      "alltotal720overPEFRPPbest , alltotal720over ,  PEFRPPbest ,  99.719 ,  24.24 ,  984\n",
      "alltotal720overFEF75OFVCPPbest , alltotal720over ,  FEF75OFVCPPbest ,  118.023 ,  111.928 ,  984\n",
      "alltotal720overFEF75OPEFRPPbest , alltotal720over ,  FEF75OPEFRPPbest ,  121.072 ,  109.469 ,  984\n",
      "alltotal720overFEV05OFEV3PPbest , alltotal720over ,  FEV05OFEV3PPbest ,  99.613 ,  10.067 ,  984\n",
      "alltotal720overFEV05OFVCPPbest , alltotal720over ,  FEV05OFVCPPbest ,  99.763 ,  13.461 ,  984\n",
      "alltotal720overFEV1OFEV3PPbest , alltotal720over ,  FEV1OFEV3PPbest ,  99.85 ,  5.729 ,  984\n",
      "alltotal720overFEV1OFEV6PPbest , alltotal720over ,  FEV1OFEV6PPbest ,  99.994 ,  7.907 ,  984\n",
      "alltotal720overFEV1OFVCPPbest , alltotal720over ,  FEV1OFVCPPbest ,  100.021 ,  10.202 ,  984\n",
      "alltotal720overFEV3OFEV6PPbest , alltotal720over ,  FEV3OFEV6PPbest ,  100.114 ,  2.951 ,  984\n",
      "alltotal720overFEV3OFVCPPbest , alltotal720over ,  FEV3OFVCPPbest ,  100.118 ,  5.96 ,  984\n",
      "alltotal720overPEFROFEV1PPbest , alltotal720over ,  PEFROFEV1PPbest ,  98.88 ,  17.546 ,  984\n",
      "alltotal720overPEFROFEV6PPbest , alltotal720over ,  PEFROFEV6PPbest ,  98.691 ,  20.047 ,  984\n",
      "alltotal720overPEFROFVCPPbest , alltotal720over ,  PEFROFVCPPbest ,  98.609 ,  21.073 ,  984\n",
      "alltotal720overFEV6OFVCPPbest , alltotal720over ,  FEV6OFVCPPbest ,  99.973 ,  3.803 ,  984\n",
      "alltotal720overMMEFOFVCPPbest , alltotal720over ,  MMEFOFVCPPbest ,  98.338 ,  47.05 ,  984\n",
      "alltotal720overMMEFOPEFRPPbest , alltotal720over ,  MMEFOPEFRPPbest ,  100.292 ,  42.31 ,  984\n",
      "alltotal720overPEFRPPOFEV1PPPPbest , alltotal720over ,  PEFRPPOFEV1PPPPbest ,  99.834 ,  17.685 ,  984\n",
      "alltotal720overPEFRPPOFVCPPPPbest , alltotal720over ,  PEFRPPOFVCPPPPbest ,  99.652 ,  21.305 ,  984\n",
      "alltotal720overMMEFPPOFVCPPPPbest , alltotal720over ,  MMEFPPOFVCPPPPbest ,  99.143 ,  51.336 ,  984\n",
      "alltotal720overMMEFPPOPEFRPPPPbest , alltotal720over ,  MMEFPPOPEFRPPPPbest ,  99.203 ,  42.449 ,  984\n",
      "alltotal720overFEF75PPOFVCPPPPbest , alltotal720over ,  FEF75PPOFVCPPPPbest ,  100.313 ,  89.152 ,  984\n"
     ]
    }
   ],
   "source": [
    " \n",
    "    print (\"dfvarn, df, var, mean, std, count\")\n",
    "    for df in [alltotal, alltotallt600, alltotal600over, alltotallt720, alltotal720over]:\n",
    "        for y in varsppbest:\n",
    "            print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now compare our LLNX (meanX * (1 - 1.645 * STDPPX) to Hankinson LLN (from equation) for each variable and each group.  Have already created variables Xllnh from Hankinson equation.  Need create variables Xlln using our equation.  Create an array which contains the above values (similar to ratiovars)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check that can do zscore"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First create our LLNPred variables which equal predicted mean * (1 - 1.645 * stdpp) for all datatframes for all variables \n",
    "problem with mallcmaFEV1OFVCPP\n",
    "Then create new fields of the LLN diffs for Hankinson variables\n",
    "Then compare those LLN diffs\n",
    "Then could also create array with Hansen LLN\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createvarsllnPred(df):  #calculate the lln for each variable\n",
    " #   vn = df.name + 'FEF75OFVCPP'\n",
    " #   df['FEF75OFVCLLNPred'] = (df.FEF75OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    " #   vn = df.name + 'FEF75OPEFRPP'\n",
    "  #  df['FEF75OPEFRLLNPred'] = (df.FEF75OPEFRPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "#    vn = df.name + 'FEF75OFVCPP'\n",
    " #   df['FEF75OFVCLLNPred'] = (df.FEF75OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "#    vn = df.name + 'FEF75OPEFRPP'\n",
    "#    df['FEF75OPEFRLLNPred'] = (df.FEF75OPEFRPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "#    vn = df.name + 'FEV05OFEV3PP'\n",
    " #   df['FEV05OFEV3LLNPred'] = (df.FEV05OFEV3Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "#    vn = df.name + 'FEV05OFVCPP'\n",
    "#    df['FEV05OFVCPPLLNPred'] = (df.FEV05OFVCPPPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "    vn = df.name + 'FEV1OFVCPP'\n",
    "    df['FEV1OFVCLLNPred'] = (df.FEV1OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "    vn = dfa.name + 'PEFROFVCPP'\n",
    "    df['PEFROFVCLLNPred'] = (df.PEFROFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))         \n",
    "    vn = df.name + 'FEV1OFEV6PP'\n",
    "    df['FEV1OFEV6LLNPred'] = (df.FEV1OFEV6Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'PEFROFVCPP'\n",
    "    df['PEFROFVCLLNPred'] = (df.PEFROFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'PEFROFEV6PP'\n",
    "    df['PEFROFEV6LLNPred'] = (df.PEFROFEV6Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'PEFROFEV1PP'\n",
    "    df['PEFROFEV1LLNPred'] = (df.PEFROFEV1Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'FEV3OFVCPP'\n",
    "    df['FEV3OFVCLLNPred'] = (df.FEV3OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'FEV6OFVCPP'\n",
    "    df['FEV6OFVCLLNPred'] = (df.FEV6OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "    vn = df.name + 'FEV05PP'\n",
    "    df['FEV05LLNPred'] = (df.FEV05Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'FEV1PP'\n",
    "    df['FEV1LLNPred'] = (df.FEV1Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'FVCPP'\n",
    "    df['FVCLLNPred'] = (df.FVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'PEFRPP'\n",
    "    df['PEFRLLNPred'] = (df.PEFRPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'FEV3PP'\n",
    "    df['FEV3LLNPred'] = (df.FEV3Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'FEV6PP'\n",
    "    df['FEV6LLNPred'] = (df.FEV6Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'MMEFPP'\n",
    "    df['MMEFLLNPred'] = (df.MMEFPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'FEF75PP'\n",
    "    df['FEF75LLNPred'] = (df.FEF75Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'EXPIRPP'\n",
    "    df['EXPIRLLNPred'] = (df.EXPIRPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for y in framestoanalyze:\n",
    "    print (y.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not do creatvarsllnPred for now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alltotal\n"
     ]
    }
   ],
   "source": [
    "alltotal.name = \"alltotal\"\n",
    "ftoa = framestoanalyze\n",
    "ftoaall = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n",
    "        mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma,  alltotal]\n",
    "ftoa = [ftoaall]\n",
    "# just do for alltotal\n",
    "# ftoa = [alltotal]\n",
    "print (alltotal.name)\n",
    "# for y in ftoa:\n",
    " #   createvarsllnPred(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now similar to Hankinson show how many are below the LLN  *****\n",
    "Also need do upperlimitnormal for PEFR, PEFRPP/FVCPP;  but can use``````"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Also do upperlimit normal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Try doing for equation with z-score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Is giving error not finding "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ?PPValues - or should it be PPValuesbest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alltotal\n",
      "alltotalFEV1PPbest\n",
      "FEV1,  alltotal ,  0 ,  7851 ,  0.0\n"
     ]
    }
   ],
   "source": [
    "    df = alltotal\n",
    "#    df = mlt20b\n",
    "    print (df.name)\n",
    "    vn = df.name + 'FEV1PPbest'\n",
    " #   vn = df.name + 'FEV1' + 'PP'\n",
    "    print (vn)\n",
    "    df['FEV1LLNPred'] = (df.FEV1Pred * (1 - 1.645* ((PPbestvalues.loc[vn, 'std'])))) \n",
    "    print (\"FEV1, \", df.name, \", \",len(df.query('FEV1 < FEV1LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('FEV1 < FEV1LLNPred'))/len(df)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 494,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "    def getfraction (df,var):\n",
    "        df = alltotal\n",
    "        vn = df.name + var + \"PPbest\" \n",
    "        vPred = var + \"Pred\"\n",
    "        varn3 = var\n",
    "        varn2 = var\n",
    "        list = ['EXPIR', 'FEF75', 'FEV1', 'FEV3', 'FEV6', 'FVC', 'MMEF']\n",
    " #       print (df.name)\n",
    "#        print (var, \" \",  \" \", varn3, \" \", vn, \" \", vPred)   \n",
    "#        df['FEV1LLNPred'] = (df.FEV1Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    " #       print (varn2, df.name, \", \",len(df.query('SPPFEV1 < FEV1LLNPred')), \", \", \n",
    " #          len(df), \", \", len(df.query('SPPFEV1 < FEV1LLNPred'))/len(df)) \n",
    "        zscore = 1.645\n",
    "        zscoreu = 1.645\n",
    "        std = PPbestvalues.loc[vn, 'std']\n",
    "        zstd = zscore*std\n",
    "        zstdu = zscoreu * std\n",
    "  \n",
    "        fraction =  len(df.query(varn3 + \"<\" + vPred + \"* (1-\"  + str(zstd) + ')'))/len(df)\n",
    "        fractionu =  len(df.query(varn3 + \">\" + vPred + \"* (1+\"  + str(zstd) + ')'))/len(df)\n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "        print (df.name, \", \", var, \", \", round(std,4), \", \", round (zscore,4), \", \", round (fraction,5), \n",
    "               \", \", round(zscoreu,4), \" \", round(fractionu,5))\n",
    "\n",
    "\n",
    "  #      finalz = zscore\n",
    " #       return finalz \n",
    " #          len(df.query('SPPFEV1 < FEV1LLNPred'))/len(df)) \n",
    "\n",
    "\n",
    "#    vn = df.name + 'FEV1PP'\n",
    "#   df['FEV1LLNPred'] = (df.FEV1Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 495,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alltotalFEV1PPbest   13.197027910289226\n"
     ]
    }
   ],
   "source": [
    "var = \"FEV1\"\n",
    "# var = \"PEFRPPOFEV1PP\"\n",
    "df = alltotal\n",
    "vn = df.name + var + \"PPbest\" \n",
    "vPred = var + \"Pred\"\n",
    "varn3 = var\n",
    "varn2 = var \n",
    "std = PPbestvalues.loc[vn, 'std']\n",
    "print (vn, \" \", std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 556,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dframe, parameter, std, LLN zscore, <LLN, ULN zscore, >ULN\n",
      "alltotal ,  FEF75 ,  44.3558 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV05 ,  14.4212 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV1 ,  13.197 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV3 ,  12.7782 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV6 ,  12.7564 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FVC ,  12.8299 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  MMEF ,  28.6207 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  PEFR ,  18.1027 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEF75OFVC ,  54.8248 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEF75OPEFR ,  52.6892 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV1OFEV3 ,  5.4361 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV1OFEV6 ,  6.5762 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV1OFVC ,  7.2892 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV3OFEV6 ,  1.8935 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV3OFVC ,  3.1141 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  PEFROFEV1 ,  14.4595 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  PEFROFEV6 ,  17.0409 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  PEFROFVC ,  17.3188 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  FEV6OFVC ,  1.7404 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  MMEFOFVC ,  30.0189 ,  1.645 ,  0.0 ,  1.645   0.0\n",
      "alltotal ,  MMEFOPEFR ,  24.9805 ,  1.645 ,  0.0 ,  1.645   0.0\n"
     ]
    }
   ],
   "source": [
    "df = alltotal\n",
    "print (\"dframe, parameter, std, LLN zscore, <LLN, ULN zscore, >ULN\")\n",
    "var = \"FEV1\"\n",
    "varlist = ['FEF75', 'FEV05', 'FEV1', 'FEV3', 'FEV6', 'FVC', \n",
    "            'MMEF', 'PEFR', \n",
    "            'FEF75OFVC', 'FEF75OPEFR','FEV1OFEV3',\n",
    "            'FEV1OFEV6', 'FEV1OFVC','FEV3OFEV6','FEV3OFVC','PEFROFEV1',\n",
    "            'PEFROFEV6', 'PEFROFVC', \n",
    "            'FEV6OFVC','MMEFOFVC', 'MMEFOPEFR']\n",
    "   #         'PEFRPPOFEV1PP'] #, 'PEFRPPOFVCPP', 'MMEFPPOFVCPP', \n",
    "#           'MMEFPPOPEFRPP', 'FEF75PPOFVCPP']'EXPIR'\n",
    "for var in varlist:\n",
    "    getfraction (df, var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "now is not working from PPvalues for variable PPbest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Need the variable + \"Pred\" (e.g. FVCPred, or FEF75OFVCPred - which should be calculated from best values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now try doing with PPbest for lln, uln"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7851\n",
      "0.05629856069290536\n"
     ]
    }
   ],
   "source": [
    "    df = alltotal\n",
    "    vPPbest = \"FEV1PPbest\"\n",
    "    llnp = 80\n",
    "    print (len(df))\n",
    "    fraction =  len(df.query(vPPbest + \"<\" + str(llnp)))/len(df)\n",
    "    print (fraction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Want for each age group, the # in age group, # PPbest below LLN 87.79, # with FEV1OFVC below 70% for FEV1/FVC\n",
    "\n",
    "THIS shows not good fit to 0.05 young age too low; older too high\n",
    "so need do separate analysis of LLN for lower ages (<600) and older, with vary older LLN equation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The following creates output vs age of fraction with FEV1/FVC below 70% pred \n",
    "(e.g. meet GOLD COPD criteria)  Along with # in each 2 year age group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FEV1OFVC monthrange +/- 24 every 24 months\n",
      "month, year, agemin,  agemax, # in age, n<70%, f<70%\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  4 ,  0.0059\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  7 ,  0.004736\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  7 ,  0.005271\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  6 ,  0.00597\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  5 ,  0.005394\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  8 ,  0.009604\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  7 ,  0.01059\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  8 ,  0.013311\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  10 ,  0.017094\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  5 ,  0.009259\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  3 ,  0.005906\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  4 ,  0.008048\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  6 ,  0.012987\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  5 ,  0.011848\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  3 ,  0.008043\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  6 ,  0.016173\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  13 ,  0.033679\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  12 ,  0.034985\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  9 ,  0.034091\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  6 ,  0.028708\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  3 ,  0.017341\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  6 ,  0.040268\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  11 ,  0.068323\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  13 ,  0.077844\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  11 ,  0.075862\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  7 ,  0.060345\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  17 ,  0.117241\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  28 ,  0.159091\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  28 ,  0.162791\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  25 ,  0.153374\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  23 ,  0.148387\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  32 ,  0.196319\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  34 ,  0.2\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  31 ,  0.208054\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  32 ,  0.235294\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  25 ,  0.223214\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  32 ,  0.278261\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  41 ,  0.315385\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  33 ,  0.388235\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  26 ,  0.38806\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  10 ,  0.243902\n",
      "1080 ,  90.0 ,  1056 , 1104 ,  11 ,  0 ,  0.0\n"
     ]
    }
   ],
   "source": [
    "    vPPbest = \"FEV1OFVCPPbest\"\n",
    "    vbest = \"FEV1OFVC\"\n",
    "    agemonth = \"MXPAXTMR\"\n",
    "    monthrange = 24\n",
    "    monthdiff = 24\n",
    "    month = 72\n",
    "    print (vbest,  \"monthrange +/-\", monthrange, \"every\", monthdiff, \"months\")\n",
    "    print (\"month, year, agemin,  agemax, # in age, n<70%, f<70%\")    \n",
    "     # do months from 8 yr(96 mo) to 90 (1080)\n",
    "    for i in range (42):\n",
    " #   dftemp = alltotal.query('MXPAXTMR >100')\n",
    "        month = month + monthdiff\n",
    "        lmonth = month -monthrange\n",
    "        hmonth = month + monthrange\n",
    "        dftemp = alltotal.query(agemonth + \">\" + str(lmonth)).query(agemonth + \"<\" + str(hmonth))\n",
    "        flt70 = len(dftemp.query(vbest + \"< 70\"))\n",
    "        a = \"-\"\n",
    "        if len(dftemp) > 0:\n",
    "            a = round(flt70/len(dftemp),6)\n",
    "        print (month, \", \", round (month/12,1), \", \", lmonth, \",\",hmonth, \", \", len(dftemp), \", \",\n",
    "               flt70, \", \", a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Need create optimalLLN and optimalULN in alltotal\n",
    "- optimal limit = (age < 600) * lln from alltotallt600 + (age >=720) * lln from alltotal720over + (age >= 600 and age < 720) * (age - 600) * (lln from alltotal720over - lln from alltotallt600)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alltotalFEV1OFVC 87.797175\n"
     ]
    }
   ],
   "source": [
    "var = \"FEV1OFVC\"\n",
    "# var = \"FEV1\"\n",
    "df = alltotal\n",
    "vn = df.name + var\n",
    "temp = LLNULNbest.loc[vn,'lln']\n",
    "print (vn, temp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now want for each variable over age range the # that are below LLN or above ULN\n",
    "initially comparing alltotal to alltotallt600, alltotal600over, alltotal720over, and alltotaloptimal \n",
    "- just one variable FEV1/FVC for now\n",
    "- then for all variables using optimal limits\n",
    "- optimal limit = (age < 600) * lln from alltotallt600 + (age >=720) * lln from alltotal720over + \n",
    "    (age >= 600 and age < 720) * (age - 600) * (lln from alltotal720over - lln from alltotallt600)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alltotalFEV1OFVC\n"
     ]
    }
   ],
   "source": [
    "print (vn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# looks like can do <600 and 600 over"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 536,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FEV1OFVC  LLNa  87.797175 monthrange  12 monthdiff  24\n",
      "month, year, agemin,  agemax, # in age, # < 87.797175  ,f< 87.797175 , #< 88.477 , f< 88.477 #< 84.668 f< 84.668 #< 82 f< 82\n",
      "108 ,  9.0 ,  96 , 120 ,  672 ,  26 ,  0.03869 ,  33 ,  0.049107 ,  9 ,  0.013393 ,  4 ,  0.005952\n",
      "132 ,  11.0 ,  120 , 144 ,  770 ,  25 ,  0.032468 ,  30 ,  0.038961 ,  11 ,  0.014286 ,  4 ,  0.005195\n",
      "156 ,  13.0 ,  144 , 168 ,  528 ,  25 ,  0.047348 ,  28 ,  0.05303 ,  13 ,  0.024621 ,  4 ,  0.007576\n",
      "180 ,  15.0 ,  168 , 192 ,  447 ,  16 ,  0.035794 ,  19 ,  0.042506 ,  5 ,  0.011186 ,  3 ,  0.006711\n",
      "204 ,  17.0 ,  192 , 216 ,  464 ,  26 ,  0.056034 ,  29 ,  0.0625 ,  10 ,  0.021552 ,  5 ,  0.010776\n",
      "228 ,  19.0 ,  216 , 240 ,  353 ,  27 ,  0.076487 ,  30 ,  0.084986 ,  8 ,  0.022663 ,  5 ,  0.014164\n",
      "252 ,  21.0 ,  240 , 264 ,  297 ,  8 ,  0.026936 ,  10 ,  0.03367 ,  1 ,  0.003367 ,  1 ,  0.003367\n",
      "276 ,  23.0 ,  264 , 288 ,  289 ,  11 ,  0.038062 ,  14 ,  0.048443 ,  9 ,  0.031142 ,  8 ,  0.027682\n",
      "300 ,  25.0 ,  288 , 312 ,  284 ,  15 ,  0.052817 ,  18 ,  0.06338 ,  7 ,  0.024648 ,  1 ,  0.003521\n",
      "324 ,  27.0 ,  312 , 336 ,  247 ,  11 ,  0.044534 ,  13 ,  0.052632 ,  3 ,  0.012146 ,  2 ,  0.008097\n",
      "348 ,  29.0 ,  336 , 360 ,  248 ,  6 ,  0.024194 ,  9 ,  0.03629 ,  3 ,  0.012097 ,  1 ,  0.004032\n",
      "372 ,  31.0 ,  360 , 384 ,  238 ,  11 ,  0.046218 ,  14 ,  0.058824 ,  4 ,  0.016807 ,  3 ,  0.012605\n",
      "396 ,  33.0 ,  384 , 408 ,  213 ,  7 ,  0.032864 ,  11 ,  0.051643 ,  1 ,  0.004695 ,  0 ,  0.0\n",
      "420 ,  35.0 ,  408 , 432 ,  196 ,  5 ,  0.02551 ,  6 ,  0.030612 ,  2 ,  0.010204 ,  1 ,  0.005102\n",
      "444 ,  37.0 ,  432 , 456 ,  171 ,  4 ,  0.023392 ,  5 ,  0.02924 ,  1 ,  0.005848 ,  0 ,  0.0\n",
      "468 ,  39.0 ,  456 , 480 ,  189 ,  10 ,  0.05291 ,  11 ,  0.058201 ,  4 ,  0.021164 ,  2 ,  0.010582\n",
      "492 ,  41.0 ,  480 , 504 ,  191 ,  10 ,  0.052356 ,  11 ,  0.057592 ,  6 ,  0.031414 ,  1 ,  0.005236\n",
      "516 ,  43.0 ,  504 , 528 ,  144 ,  8 ,  0.055556 ,  9 ,  0.0625 ,  3 ,  0.020833 ,  3 ,  0.020833\n",
      "540 ,  45.0 ,  528 , 552 ,  113 ,  8 ,  0.070796 ,  8 ,  0.070796 ,  2 ,  0.017699 ,  2 ,  0.017699\n",
      "564 ,  47.0 ,  552 , 576 ,  91 ,  2 ,  0.021978 ,  2 ,  0.021978 ,  0 ,  0.0 ,  0 ,  0.0\n",
      "588 ,  49.0 ,  576 , 600 ,  74 ,  2 ,  0.027027 ,  2 ,  0.027027 ,  1 ,  0.013514 ,  1 ,  0.013514\n",
      "612 ,  51.0 ,  600 , 624 ,  72 ,  4 ,  0.055556 ,  5 ,  0.069444 ,  3 ,  0.041667 ,  1 ,  0.013889\n",
      "636 ,  53.0 ,  624 , 648 ,  86 ,  7 ,  0.081395 ,  7 ,  0.081395 ,  5 ,  0.05814 ,  2 ,  0.023256\n",
      "660 ,  55.0 ,  648 , 672 ,  77 ,  6 ,  0.077922 ,  6 ,  0.077922 ,  5 ,  0.064935 ,  4 ,  0.051948\n",
      "684 ,  57.0 ,  672 , 696 ,  61 ,  3 ,  0.04918 ,  4 ,  0.065574 ,  2 ,  0.032787 ,  0 ,  0.0\n",
      "708 ,  59.0 ,  696 , 720 ,  52 ,  1 ,  0.019231 ,  1 ,  0.019231 ,  1 ,  0.019231 ,  0 ,  0.0\n",
      "732 ,  61.0 ,  720 , 744 ,  92 ,  12 ,  0.130435 ,  14 ,  0.152174 ,  4 ,  0.043478 ,  1 ,  0.01087\n",
      "756 ,  63.0 ,  744 , 768 ,  83 ,  3 ,  0.036145 ,  5 ,  0.060241 ,  1 ,  0.012048 ,  0 ,  0.0\n",
      "780 ,  65.0 ,  768 , 792 ,  85 ,  9 ,  0.105882 ,  10 ,  0.117647 ,  5 ,  0.058824 ,  4 ,  0.047059\n",
      "804 ,  67.0 ,  792 , 816 ,  73 ,  3 ,  0.041096 ,  3 ,  0.041096 ,  1 ,  0.013699 ,  1 ,  0.013699\n",
      "828 ,  69.0 ,  816 , 840 ,  79 ,  6 ,  0.075949 ,  6 ,  0.075949 ,  5 ,  0.063291 ,  3 ,  0.037975\n",
      "852 ,  71.0 ,  840 , 864 ,  81 ,  8 ,  0.098765 ,  11 ,  0.135802 ,  6 ,  0.074074 ,  3 ,  0.037037\n",
      "876 ,  73.0 ,  864 , 888 ,  88 ,  6 ,  0.068182 ,  9 ,  0.102273 ,  2 ,  0.022727 ,  1 ,  0.011364\n",
      "900 ,  75.0 ,  888 , 912 ,  60 ,  9 ,  0.15 ,  10 ,  0.166667 ,  6 ,  0.1 ,  4 ,  0.066667\n",
      "924 ,  77.0 ,  912 , 936 ,  74 ,  8 ,  0.108108 ,  8 ,  0.108108 ,  5 ,  0.067568 ,  4 ,  0.054054\n",
      "948 ,  79.0 ,  936 , 960 ,  38 ,  5 ,  0.131579 ,  5 ,  0.131579 ,  1 ,  0.026316 ,  0 ,  0.0\n",
      "972 ,  81.0 ,  960 , 984 ,  76 ,  11 ,  0.144737 ,  12 ,  0.157895 ,  5 ,  0.065789 ,  4 ,  0.052632\n",
      "996 ,  83.0 ,  984 , 1008 ,  50 ,  11 ,  0.22 ,  11 ,  0.22 ,  3 ,  0.06 ,  2 ,  0.04\n",
      "1020 ,  85.0 ,  1008 , 1032 ,  34 ,  3 ,  0.088235 ,  3 ,  0.088235 ,  2 ,  0.058824 ,  2 ,  0.058824\n",
      "1044 ,  87.0 ,  1032 , 1056 ,  30 ,  3 ,  0.1 ,  3 ,  0.1 ,  3 ,  0.1 ,  0 ,  0.0\n"
     ]
    }
   ],
   "source": [
    "    var = \"FEV1OFVC\"\n",
    "    vn = \"alltotal\" + var\n",
    "    vPPbest = var + \"PPbest\"\n",
    "    vbest = var\n",
    "    agemonth = \"MXPAXTMR\"\n",
    "    monthrange = 12\n",
    "    monthdiff = 24\n",
    "    month = 84\n",
    "    llna = LLNULNbest.loc[vn,'lln'] # 87.79 # FOR FEV1/FVC alltotal\n",
    "    lena = len(alltotal)\n",
    "    lenb = len(alltotallt600)\n",
    "    lenc = len(alltotal600over)\n",
    "    lend = len(alltotal720over)\n",
    "    llnb = 88.477 # for FEV1/FVC alltotallt600\n",
    "    llnc = 84.668 # for FEV1/FVC alltotal600over\n",
    "    llnd = 82 # for alltotal720over\n",
    "    print (vbest, \" LLNa \", llna, \"monthrange \", monthrange, \"monthdiff \", monthdiff)\n",
    "    print (\"month, year, agemin,  agemax, # in age, # <\",\n",
    "           llna, \" ,f<\",llna, \", #<\", llnb,  \", f<\",llnb, \"#<\", llnc,\"f<\", llnc, \"#<\", llnd, \"f<\", llnd )\n",
    "     # do months from 8 yr(96 mo) to 90 (1080)\n",
    "    for i in range (40):\n",
    " #   dftemp = alltotal.query('MXPAXTMR >100')\n",
    "        month = month + monthdiff\n",
    "        lmonth = month -monthrange\n",
    "        hmonth = month + monthrange\n",
    "        dftemp = alltotal.query(agemonth + \">\" + str(lmonth)).query(agemonth + \"<\" + str(hmonth))\n",
    "        fractiona =  len(dftemp.query(vPPbest + \"<\" + str(llna)))\n",
    "        fractionb =  len(dftemp.query(vPPbest + \"<\" + str(llnb)))\n",
    "        fractionc =  len(dftemp.query(vPPbest + \"<\" + str(llnc)))\n",
    "        fractiond =  len(dftemp.query(vPPbest + \"<\" + str(llnd)))\n",
    "\n",
    "        print (month, \", \", round (month/12,1), \", \", lmonth, \",\",hmonth, \", \", len(dftemp), \", \",\n",
    "               fractiona, \", \", round(fractiona/len(dftemp),6), \", \", \n",
    "               fractionb, \", \", round(fractionb/len(dftemp),6), \", \", \n",
    "               fractionc, \", \", round(fractionc/len(dftemp),6), \", \",\n",
    "               fractiond, \", \", round(fractiond/len(dftemp),6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 561,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "    def getzscore2PP (df,var, dfstd):\n",
    " #. The PPbest value is stored as varPPbest - e.g. FEV1PPbest\n",
    "#. Want to determine the LLNP for which 5% are below LLNP\n",
    "# start with LLNP = 100 - stdev * 1.645\n",
    "    \n",
    "# starte with ULNP = 100 + stdev * 1.645\n",
    "#       print (var)\n",
    "        vn = df.name + var + \"PPbest\" \n",
    "        vnstd = dfstd.name + var + \"PPbest\" \n",
    "#       for y in varsppbest:\n",
    "#            print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "\n",
    " #       vnstd = df.name + var + \"PPbest\"\n",
    "        vPPbest = var + \"PPbest\"\n",
    "  #      std = df.loc[:vn.std()] # get std from the variable for the dataframe\n",
    "\n",
    " #       std = PPbestvalues.loc[vnstd, 'std'] # get the STD from the PPbestvalues array\n",
    "    # instead get std from the file itself\n",
    "        std = df.loc[:,vPPbest].std()\n",
    "        count = df.loc[:,vPPbest].count()\n",
    "    # need get std from the \n",
    "     \n",
    "        # now    print (std)should change to compare FEV1PPbest *e.g. 70%\n",
    "        llnp = 100 - std * 1.645\n",
    "        ulnp = 100 + std * 1.645\n",
    "        diff = 2\n",
    "        if llnp <0:\n",
    "            llnp = 0\n",
    "            diff = 10\n",
    "#        print (\"std \", std, \"std*1.645 \", std*1.645, \" llnp \", llnp, \" ulnp \",ulnp)\n",
    "#        print (std)\n",
    "\n",
    "        for i in range (20):\n",
    "            fraction =  len(df.query(vPPbest + \"<\" + str(llnp)))/len(df)\n",
    "  #          print (\"fraction \",fraction, \" diff \", diff)\n",
    "            if fraction < 0.05:\n",
    "                llnp = llnp + diff\n",
    "  #              print (i, \" \", fraction, \" \", zscore, \" \", diff)\n",
    "                fraction =  len(df.query(vPPbest + \"<\" + str(llnp)))/len(df)\n",
    "\n",
    "   #         print (\"fraction< \",fraction, \" diff \", diff)\n",
    "                if fraction > 0.05:\n",
    "                    diff = diff/2\n",
    "            if fraction > 0.05:\n",
    "                llnp = llnp - diff\n",
    "  #              print (i, \" \", fraction, \" \", zscore, \" \", diff)\n",
    "                fraction =  len(df.query(vPPbest + \"<\" + str(llnp)))/len(df)\n",
    "  #              print (\"fraction> \",fraction, \" diff \", diff)\n",
    "                if fraction < 0.05:\n",
    "                    diff = diff/2\n",
    "\n",
    "        diff = 2\n",
    "        if ulnp > 0:\n",
    "            ulnp = 100\n",
    "            diff = 10\n",
    "        for i in range (30): # LATER CHANGE TO 20\n",
    "            fractionu =  len(df.query(vPPbest + \">\" + str(ulnp)))/len(df)\n",
    "            if fractionu < 0.05:\n",
    "                ulnp = ulnp - diff\n",
    "  #               print (i, \" \", fractionu, \" \", zscoreu, \" \", diff)\n",
    "                fractionu =  len(df.query(vPPbest + \">\" + str(ulnp)))/len(df)\n",
    "                if fractionu > 0.05:\n",
    "                    diff = diff/2\n",
    "            if fractionu > 0.05:\n",
    "                ulnp = ulnp + diff\n",
    "   #              print (i, \" \", fractionu, \" \", zscoreu, \" \", diff)\n",
    "                fractionu =  len(df.query(vPPbest + \">\" + str(ulnp)))/len(df)\n",
    "                if fractionu < 0.05:\n",
    "                    diff = diff/2\n",
    "\n",
    "        print (df.name, \", \", var, \", \", round(std,6), \", \", round (llnp,6), \", \", round(fraction, 6),\n",
    "               \", \", round(ulnp,6), \", \", round(fractionu,6))\n",
    "        d= dict();\n",
    "        d['dfnvarn'] = df.name + var\n",
    "        d['dfname'] = df.name\n",
    "        d['std'] = round(std,6) \n",
    "    # NEED std from the particular variable;  it had been from best vars array\n",
    "        d['var'] = var\n",
    "        d['ltlln'] = round(fraction, 6)\n",
    "        d['overuln'] = round (fractionu,6)\n",
    "        d['lln'] = round (llnp, 6)\n",
    "        d['uln'] = round (ulnp, 6)\n",
    "        d['count'] = count\n",
    "        return d\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# It is is printing SD from the alltotal, not forlt600 and 600 over**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 562,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LLNULNbest\n",
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, std, lln, ltlln, uln, overuln]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, std, lln, ltlln, uln, overuln\n",
      "dframe, parameter, std, LLN zscore, <LLN, ULN zscore, >ULN\n",
      "alltotal ,  EXPIR ,  37.876966 ,  33.155892 ,  0.04993 ,  164.366831 ,  0.04993\n",
      "alltotal ,  FEF75 ,  44.355766 ,  46.187109 ,  0.04993 ,  174.302799 ,  0.04993\n",
      "alltotal ,  FEV05 ,  14.421205 ,  76.852835 ,  0.050057 ,  122.893102 ,  0.04993\n",
      "alltotal ,  FEV1 ,  13.197028 ,  78.825088 ,  0.050057 ,  121.158233 ,  0.050057\n",
      "alltotal ,  FEV3 ,  12.778216 ,  79.712364 ,  0.04993 ,  120.616684 ,  0.04993\n",
      "alltotal ,  FEV6 ,  12.756425 ,  79.851973 ,  0.04993 ,  120.309883 ,  0.04993\n",
      "alltotal ,  FVC ,  12.829929 ,  79.800125 ,  0.050057 ,  120.580507 ,  0.050057\n",
      "alltotal ,  MMEF ,  28.620679 ,  57.661628 ,  0.04993 ,  147.734522 ,  0.04993\n",
      "alltotal ,  PEFR ,  18.102747 ,  70.791481 ,  0.04993 ,  129.732723 ,  0.04993\n",
      "alltotal ,  FEF75OFVC ,  54.824842 ,  45.563134 ,  0.04993 ,  178.32119 ,  0.050057\n",
      "alltotal ,  FEF75OPEFR ,  52.689244 ,  46.451194 ,  0.04993 ,  171.457825 ,  0.04993\n",
      "alltotal ,  FEV05OFEV3 ,  10.027862 ,  84.294053 ,  0.04993 ,  116.43308 ,  0.04993\n",
      "alltotal ,  FEV05OFVC ,  11.307436 ,  82.109157 ,  0.04993 ,  118.351756 ,  0.050057\n",
      "alltotal ,  FEV1OFEV3 ,  5.436103 ,  90.73984 ,  0.04993 ,  108.335738 ,  0.04993\n",
      "alltotal ,  FEV1OFEV6 ,  6.576157 ,  88.951113 ,  0.050057 ,  110.137571 ,  0.04993\n",
      "alltotal ,  FEV1OFVC ,  7.289182 ,  87.797175 ,  0.050057 ,  111.146724 ,  0.04993\n",
      "alltotal ,  FEV3OFEV6 ,  1.893511 ,  96.93202 ,  0.04993 ,  102.452044 ,  0.04993\n",
      "alltotal ,  FEV3OFVC ,  3.114068 ,  94.836313 ,  0.04993 ,  104.067235 ,  0.04993\n",
      "alltotal ,  FEV6OFVC ,  1.740377 ,  97.074602 ,  0.04993 ,  102.374445 ,  0.04993\n",
      "alltotal ,  MMEFOFVC ,  30.018892 ,  56.845973 ,  0.04993 ,  149.569551 ,  0.04993\n",
      "alltotal ,  MMEFOPEFR ,  24.980541 ,  64.159863 ,  0.04993 ,  139.906229 ,  0.04993\n",
      "alltotal ,  PEFROFEV1 ,  14.459498 ,  76.982401 ,  0.04993 ,  123.680662 ,  0.04993\n",
      "alltotal ,  PEFROFEV6 ,  17.040901 ,  73.565204 ,  0.04993 ,  128.751815 ,  0.04993\n",
      "alltotal ,  PEFROFVC ,  17.318812 ,  73.004676 ,  0.050057 ,  129.417815 ,  0.04993\n",
      "alltotallt600 ,  EXPIR ,  37.641535 ,  32.875711 ,  0.049854 ,  163.145962 ,  0.049854\n",
      "alltotallt600 ,  FEF75 ,  36.594281 ,  50.828226 ,  0.050008 ,  166.464405 ,  0.049854\n",
      "alltotallt600 ,  FEV05 ,  13.264013 ,  78.72263 ,  0.049854 ,  121.540755 ,  0.049854\n",
      "alltotallt600 ,  FEV1 ,  12.00698 ,  80.72811 ,  0.049854 ,  119.598674 ,  0.049854\n",
      "alltotallt600 ,  FEV3 ,  11.736032 ,  80.950552 ,  0.049854 ,  119.159999 ,  0.049854\n",
      "alltotallt600 ,  FEV6 ,  11.772396 ,  81.080801 ,  0.050008 ,  119.172718 ,  0.049854\n",
      "alltotallt600 ,  FVC ,  11.77818 ,  81.004072 ,  0.049854 ,  119.267746 ,  0.050008\n",
      "alltotallt600 ,  MMEF ,  25.215265 ,  61.537888 ,  0.049854 ,  143.54448 ,  0.050008\n",
      "alltotallt600 ,  PEFR ,  16.893843 ,  72.906405 ,  0.049854 ,  127.522605 ,  0.050008\n",
      "alltotallt600 ,  FEF75OFVC ,  38.954854 ,  49.493545 ,  0.049854 ,  168.776885 ,  0.050008\n",
      "alltotallt600 ,  FEF75OPEFR ,  35.619775 ,  50.019014 ,  0.049854 ,  159.36933 ,  0.049854\n",
      "alltotallt600 ,  FEV05OFEV3 ,  10.040762 ,  84.31258 ,  0.050008 ,  116.728126 ,  0.049854\n",
      "alltotallt600 ,  FEV05OFVC ,  10.932024 ,  83.02735 ,  0.049854 ,  118.107287 ,  0.049854\n",
      "alltotallt600 ,  FEV1OFEV3 ,  5.432768 ,  90.659161 ,  0.050008 ,  108.495231 ,  0.050008\n",
      "alltotallt600 ,  FEV1OFEV6 ,  6.382981 ,  89.057356 ,  0.049854 ,  109.966516 ,  0.049854\n",
      "alltotallt600 ,  FEV1OFVC ,  6.731847 ,  88.477121 ,  0.049854 ,  110.499894 ,  0.050008\n",
      "alltotallt600 ,  FEV3OFEV6 ,  1.66411 ,  97.137623 ,  0.050008 ,  102.207035 ,  0.050008\n",
      "alltotallt600 ,  FEV3OFVC ,  2.331241 ,  96.020375 ,  0.049854 ,  103.052935 ,  0.049854\n",
      "alltotallt600 ,  FEV6OFVC ,  1.051405 ,  98.167016 ,  0.049854 ,  101.422998 ,  0.049854\n",
      "alltotallt600 ,  MMEFOFVC ,  26.237758 ,  60.98499 ,  0.049854 ,  145.34113 ,  0.049854\n",
      "alltotallt600 ,  MMEFOPEFR ,  20.725596 ,  68.125847 ,  0.049854 ,  135.064896 ,  0.050008\n",
      "alltotallt600 ,  PEFROFEV1 ,  13.754039 ,  78.310457 ,  0.049854 ,  122.966533 ,  0.049854\n",
      "alltotallt600 ,  PEFROFEV6 ,  16.407244 ,  74.473256 ,  0.049854 ,  128.152649 ,  0.050008\n",
      "alltotallt600 ,  PEFROFVC ,  16.538032 ,  74.335232 ,  0.049854 ,  128.549576 ,  0.049854\n",
      "alltotal600over ,  EXPIR ,  38.97696 ,  38.301873 ,  0.050296 ,  169.978087 ,  0.050296\n",
      "alltotal600over ,  FEF75 ,  70.635433 ,  31.791172 ,  0.050296 ,  218.879051 ,  0.049556\n",
      "alltotal600over ,  FEV05 ,  19.026803 ,  66.474682 ,  0.049556 ,  128.725683 ,  0.049556\n",
      "alltotal600over ,  FEV1 ,  17.846826 ,  70.629905 ,  0.049556 ,  127.899191 ,  0.049556\n",
      "alltotal600over ,  FEV3 ,  16.918225 ,  72.439625 ,  0.049556 ,  127.520769 ,  0.049556\n",
      "alltotal600over ,  FEV6 ,  16.698973 ,  72.596022 ,  0.049556 ,  127.240776 ,  0.049556\n",
      "alltotal600over ,  FVC ,  17.00504 ,  71.586669 ,  0.049556 ,  126.380013 ,  0.049556\n",
      "alltotal600over ,  MMEF ,  41.241801 ,  39.993557 ,  0.049556 ,  174.087673 ,  0.049556\n",
      "alltotal600over ,  PEFR ,  23.042413 ,  59.258569 ,  0.050296 ,  136.822262 ,  0.049556\n",
      "alltotal600over ,  FEF75OFVC ,  100.370287 ,  34.387207 ,  0.049556 ,  282.568359 ,  0.049556\n",
      "alltotal600over ,  FEF75OPEFR ,  99.012643 ,  35.517502 ,  0.049556 ,  289.658203 ,  0.050296\n",
      "alltotal600over ,  FEV05OFEV3 ,  9.938425 ,  83.891417 ,  0.049556 ,  114.136227 ,  0.049556\n",
      "alltotal600over ,  FEV05OFVC ,  12.93919 ,  78.898245 ,  0.050296 ,  120.46288 ,  0.049556\n",
      "alltotal600over ,  FEV1OFEV3 ,  5.453934 ,  91.293354 ,  0.049556 ,  107.399228 ,  0.049556\n",
      "alltotal600over ,  FEV1OFEV6 ,  7.437299 ,  88.501544 ,  0.049556 ,  110.960764 ,  0.049556\n",
      "alltotal600over ,  FEV1OFVC ,  9.526534 ,  84.668154 ,  0.049556 ,  114.910613 ,  0.050296\n",
      "alltotal600over ,  FEV3OFEV6 ,  2.741008 ,  96.073822 ,  0.049556 ,  105.62407 ,  0.049556\n",
      "alltotal600over ,  FEV3OFVC ,  5.494968 ,  91.102536 ,  0.050296 ,  110.057857 ,  0.049556\n",
      "alltotal600over ,  FEV6OFVC ,  3.501717 ,  93.836222 ,  0.049556 ,  105.050549 ,  0.049556\n",
      "alltotal600over ,  MMEFOFVC ,  43.855377 ,  42.844233 ,  0.049556 ,  179.500863 ,  0.049556\n",
      "alltotal600over ,  MMEFOPEFR ,  39.495291 ,  49.543186 ,  0.050296 ,  175.648849 ,  0.049556\n",
      "alltotal600over ,  PEFROFEV1 ,  17.457174 ,  70.678487 ,  0.050296 ,  128.334006 ,  0.049556\n",
      "alltotal600over ,  PEFROFEV6 ,  19.806286 ,  67.445295 ,  0.049556 ,  132.631474 ,  0.050296\n",
      "alltotal600over ,  PEFROFVC ,  20.659541 ,  66.047022 ,  0.049556 ,  135.642057 ,  0.050296\n"
     ]
    }
   ],
   "source": [
    "# create  array with all the uln lln (for dfs e.g. alltotal, alltotallt600, alltotal600over)\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"std\", \"lln\", \"ltlln\", \"uln\", \"overuln\"]\n",
    "# print (column_names)\n",
    "LLNULNbest = pd.DataFrame(columns = column_names)\n",
    "LLNULNbest.name = 'LLNULNbest'\n",
    "print (LLNULNbest.name)\n",
    "print (LLNULNbest)\n",
    "print(\"dfvarname, dataframe, variable, std, lln, ltlln, uln, overuln\")\n",
    "\n",
    "dflist = [alltotal, alltotallt600, alltotal600over] #, alltotallt720, alltotal720over]\n",
    "dfa = alltotal\n",
    "print (\"dframe, parameter, std, LLN zscore, <LLN, ULN zscore, >ULN\")\n",
    "varlist = ['EXPIR', 'FEF75', 'FEV05', 'FEV1', 'FEV3', 'FEV6', 'FVC', \n",
    "            'MMEF', 'PEFR', \n",
    "            'FEF75OFVC', 'FEF75OPEFR',\n",
    "            'FEV05OFEV3', \n",
    "            'FEV05OFVC',\n",
    "            'FEV1OFEV3',\n",
    "            'FEV1OFEV6', 'FEV1OFVC', 'FEV3OFEV6',\n",
    "            'FEV3OFVC', 'FEV6OFVC',\n",
    "            'MMEFOFVC', 'MMEFOPEFR',\n",
    "            'PEFROFEV1', 'PEFROFEV6', 'PEFROFVC']\n",
    "  #          'PEFRPPOFEV1PP', 'PEFRPPOFVCPP', 'MMEFPPOFVCPP']\n",
    "\n",
    "#           'MMEFPPOPEFRPP', 'FEF75PPOFVCPP']\n",
    "df2 = \"\"\n",
    "for df in dflist:\n",
    "    for var in varlist:\n",
    "        res = getzscore2PP (df, var, dfa)\n",
    "        y= var\n",
    "#        print (res)\n",
    "   #     print(df.name + y, \",\", df.name, \", \", y, \", \", res) # round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    "    #    df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "  \n",
    "        LLNULNbest = LLNULNbest.append(res, ignore_index=True)\n",
    "   \n",
    "    # now set index   \n",
    "LLNULNbest.set_index('dfnvarn', inplace=True)\n",
    "#. A for df in ftoa:\n",
    "#    print (df.name)\n",
    "# A     for y in PPlist:\n",
    " #. A       print(df.name + y, \",\", df.name, \", \", y, \", \", round(df.loc[:,y].mean(),3), \", \", round(df.loc[:,y].std(),3), \", \", df.loc[:,y].count())\n",
    " #. A       df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    " #. A       PPbestvalues720over = PPbestvalues600over.append(df2, ignore_index=True)\n",
    "   \n",
    "    # now set index   \n",
    "#. APPbestvalues720over.set_index('dfnvarn', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# should have print out below this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- alltotallt600 and alltotal600over fit best"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'alltotallt720FEV1OFVC'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'alltotallt720FEV1OFVC'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-504-44c21aa072fe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mllnb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNULNbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alltotallt600\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lln'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# 88.477 # for FEV1/FVC alltotallt600\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0mllnc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNULNbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alltotal600over\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lln'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m#84.668 # for FEV1/FVC alltotal600over\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mllnc2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNULNbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alltotallt720\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lln'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0mllnd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNULNbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alltotal720over\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lln'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m#82  for alltotal720over\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mvbest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\" LLNa \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mllna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"mrange \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmonthrange\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"mdiff \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmonthdiff\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"all, lt600, 600over, lt720, 720over\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1759\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1760\u001b[0m                     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1761\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1762\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1763\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1269\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1270\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1271\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1272\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1273\u001b[0m             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1386\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_label_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m                 \u001b[0;31m# we have yielded a scalar ?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1962\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1963\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1964\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1965\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m    622\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no slices here, handle elsewhere\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    623\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 624\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_xs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3535\u001b[0m             \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrop_level\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdrop_level\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3536\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3537\u001b[0;31m             \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3538\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3539\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'alltotallt720FEV1OFVC'"
     ]
    }
   ],
   "source": [
    "    df = alltotal\n",
    "    var = 'FEV1OFVC'\n",
    "    vn = df.name + var\n",
    "    vPPbest = var + \"PPbest\"\n",
    "    vbest = var\n",
    "    agemonth = \"MXPAXTMR\"\n",
    "    monthrange = 24\n",
    "    monthdiff = 24\n",
    "    month = 84\n",
    "    llna = LLNULNbest.loc[\"alltotal\" + var,'lln'] # 87.79 # FOR FEV1/FVC alltotal\n",
    "    lena = len(alltotal)\n",
    "    lenb = len(alltotallt600)\n",
    "    lenc = len(alltotal600over)\n",
    "    lenc2 = len(alltotallt720)\n",
    "    lend = len(alltotal720over)\n",
    "    llnb = LLNULNbest.loc[\"alltotallt600\" + var,'lln'] # 88.477 # for FEV1/FVC alltotallt600\n",
    "    llnc = LLNULNbest.loc[\"alltotal600over\" + var,'lln'] #84.668 # for FEV1/FVC alltotal600over\n",
    "    llnc2 = LLNULNbest.loc[\"alltotallt720\" + var,'lln']\n",
    "    llnd = LLNULNbest.loc[\"alltotal720over\" + var,'lln'] #82  for alltotal720over\n",
    "    print (vbest, \" LLNa \", llna, \"mrange \", monthrange, \"mdiff \", monthdiff, \"all, lt600, 600over, lt720, 720over\")\n",
    "    print (\"month, year, agemin,  agemax, # in age, # <\",\n",
    "           round(llna,2), \" ,f<\", \", #<\", round(llnb,2),  \", f<\",\"#<\", round(llnc,2), \"#<\", round(llnc2,2),\"f<\",  \n",
    "           \"#<\", round(llnd,2), \"f<\")\n",
    "     # do months from 8 yr(96 mo) to 90 (1080)\n",
    "    for i in range (40):\n",
    " #   dftemp = alltotal.query('MXPAXTMR >100')\n",
    "        month = month + monthdiff\n",
    "        lmonth = month -monthrange\n",
    "        hmonth = month + monthrange\n",
    "        dftemp = alltotal.query(agemonth + \">\" + str(lmonth)).query(agemonth + \"<\" + str(hmonth))\n",
    "        fractiona =  len(dftemp.query(vPPbest + \"<\" + str(llna)))\n",
    "        fractionb =  len(dftemp.query(vPPbest + \"<\" + str(llnb)))\n",
    "        fractionc =  len(dftemp.query(vPPbest + \"<\" + str(llnc)))\n",
    "        fractionc2 =  len(dftemp.query(vPPbest + \"<\" + str(llnc2)))\n",
    "        fractiond =  len(dftemp.query(vPPbest + \"<\" + str(llnd)))\n",
    "\n",
    "        print (month, \", \", round (month/12,1), \", \", lmonth, \",\",hmonth, \", \", len(dftemp), \", \",\n",
    "               fractiona, \", \", round(fractiona/len(dftemp),3), \", \", \n",
    "               fractionb, \", \", round(fractionb/len(dftemp),3), \", \", \n",
    "               fractionc, \", \", round(fractionc/len(dftemp),3), \", \",\n",
    "               fractionc2, \", \", round(fractionc2/len(dftemp),3), \", \",\n",
    "               fractiond, \", \", round(fractiond/len(dftemp),3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now for FEV1OFVC compare fraction below LLN us, Hankinson, Hansen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'alltotallt720FEV1OFVC'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'alltotallt720FEV1OFVC'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-505-e021de789773>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mllnb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNULNbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alltotallt600\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lln'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# 88.477 # for FEV1/FVC alltotallt600\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mllnc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNULNbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alltotal600over\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lln'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m#84.668 # for FEV1/FVC alltotal600over\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mllnc2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNULNbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alltotallt720\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lln'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0mllnd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNULNbest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"alltotal720over\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lln'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m#82  for alltotal720over\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mvbest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\" LLNa \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mllna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"mrange \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmonthrange\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"mdiff \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmonthdiff\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"all, lt600, 600over, Hankinson, Hansen\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1759\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1760\u001b[0m                     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1761\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1762\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1763\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1269\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1270\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1271\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1272\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1273\u001b[0m             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1386\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_label_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m                 \u001b[0;31m# we have yielded a scalar ?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1962\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1963\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1964\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1965\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m    622\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"no slices here, handle elsewhere\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    623\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 624\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_xs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3535\u001b[0m             \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrop_level\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdrop_level\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3536\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3537\u001b[0;31m             \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3538\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3539\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'alltotallt720FEV1OFVC'"
     ]
    }
   ],
   "source": [
    "    df = alltotal\n",
    "    var = 'FEV1OFVC'\n",
    "    vn = df.name + var\n",
    "    vPPbest = var + \"PPbest\"\n",
    "    vbest = var\n",
    "    varllnh = var + \"LLNPredh\"\n",
    "    varllnhansen = var + \"LLNPredhansen\"\n",
    "    agemonth = \"MXPAXTMR\"\n",
    "    monthrange = 24\n",
    "    monthdiff = 24\n",
    "    month = 84\n",
    "    llna = LLNULNbest.loc[\"alltotal\" + var,'lln'] # 87.79 # FOR FEV1/FVC alltotal\n",
    "    lena = len(alltotal)\n",
    "    lenb = len(alltotallt600)\n",
    "    lenc = len(alltotal600over)\n",
    "    lenc2 = len(alltotallt720)\n",
    "    lend = len(alltotal720over)\n",
    "    llnb = LLNULNbest.loc[\"alltotallt600\" + var,'lln'] # 88.477 # for FEV1/FVC alltotallt600\n",
    "    llnc = LLNULNbest.loc[\"alltotal600over\" + var,'lln'] #84.668 # for FEV1/FVC alltotal600over\n",
    "    llnc2 = LLNULNbest.loc[\"alltotallt720\" + var,'lln']\n",
    "    llnd = LLNULNbest.loc[\"alltotal720over\" + var,'lln'] #82  for alltotal720over\n",
    "    print (vbest, \" LLNa \", llna, \"mrange \", monthrange, \"mdiff \", monthdiff, \"all, lt600, 600over, Hankinson, Hansen\")\n",
    "    print (\"month, year, agemin,  agemax, # in age, # <\",\n",
    "           round(llna,2), \" ,f<\", \", #<\", round(llnb,2),  \", f<\",\"#<\", round(llnc,2), \"#<, Hankinson f<\",  \n",
    "           \"#<, Hansen, f<\")\n",
    "     # do months from 8 yr(96 mo) to 90 (1080)\n",
    "    for i in range (40):\n",
    " #   dftemp = alltotal.query('MXPAXTMR >100')\n",
    "        month = month + monthdiff\n",
    "        lmonth = month -monthrange\n",
    "        hmonth = month + monthrange\n",
    "        dftemp = alltotal.query(agemonth + \">\" + str(lmonth)).query(agemonth + \"<\" + str(hmonth))\n",
    "        fractiona =  len(dftemp.query(vPPbest + \"<\" + str(llna)))\n",
    "        fractionb =  len(dftemp.query(vPPbest + \"<\" + str(llnb)))\n",
    "        fractionc =  len(dftemp.query(vPPbest + \"<\" + str(llnc)))\n",
    "        fractionc2 =  len(dftemp.query(vPPbest + \"<\" + str(llnc2)))\n",
    "        fractiond =  len(dftemp.query(vPPbest + \"<\" + str(llnd)))\n",
    "        fractionh =   len(dftemp.query(var + \"<\" + varllnh))\n",
    "        fractionhansen =   len(dftemp.query(var + \"<\" + varllnhansen))\n",
    "\n",
    "        print (month, \", \", round (month/12,1), \", \", lmonth, \",\",hmonth, \", \", len(dftemp), \", \",\n",
    "               fractiona, \", \", round(fractiona/len(dftemp),3), \", \", \n",
    "               fractionb, \", \", round(fractionb/len(dftemp),3), \", \", \n",
    "               fractionc, \", \", round(fractionc/len(dftemp),3), \", \",\n",
    "               fractionh, \", \", round(fractionh/len(dftemp),3), \", \",\n",
    "               fractiond, \", \", round(fractiond/len(dftemp),3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now need create LLNPredopt and ULNPPredopt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now need create LLNPPredopt and ULNPPredopt\n",
    "- have varPPbest\n",
    "- need deterine havw many subjects have PP below LLN\n",
    "have predicted (varPredbest) value (mean) from the regressions\n",
    "- already have varLLNPred as LLN using varPred * (1 - 1.654 *STD)\n",
    "- Need varLLNPredopt as LLN using varPredbest * lln(from LLNULNbest)/100\n",
    "- varPredbest = var/varPPbest*100\n",
    "- need LLNPredopt\n",
    "- from ULNLLNbest for lt600 and 600 over, create variables LLNPPredopt and ULNPredopt,\n",
    "-   which equals the measured value \n",
    "- LLNPredopt = predicted value * (lln/100) (with lln from LLNULNbest)\n",
    "- ULNPredopt = predicted value * (uln/100) (with uln from LLNULNbest)\n",
    "- then later can determine fraction of subjects in each age group with value below LLNpred or above ULNpred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create varLLNPredopt and varULNPredopt for dataframe df (alltotal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88.477126\n"
     ]
    }
   ],
   "source": [
    "print (LLNULNbest.loc['alltotallt600' + var, 'lln'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "metadata": {},
   "outputs": [],
   "source": [
    "    df = alltotal\n",
    "    var = \"FEV1OFVC\"\n",
    "    df['FEV1OFVCLLNPredopt'] = df.FEV1OFVC/df.FEV1OFVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV1OFVCULNPredopt'] = df.FEV1OFVC/df.FEV1OFVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV1OFEV3\"\n",
    "    df['FEV1OFEV3LLNPredopt'] = df.FEV1OFEV3/df.FEV1OFEV3PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV1OFEV3ULNPredopt'] = df.FEV1OFEV3/df.FEV1OFEV3PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV1OFEV6\"\n",
    "    df['FEV1OFEV6LLNPredopt'] = df.FEV1OFEV6/df.FEV1OFEV6PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV1OFEV6ULNPredopt'] = df.FEV1OFEV6/df.FEV1OFEV6PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "#    var = \"EXPIR\"\n",
    " #   df['EXPIRLNPredopt'] = df.EXPIR/df.EXPIRPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    " #        (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "#    df['EXPIRULNPredopt'] = df.EXPIR/df.EXPIRPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    " #        (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEF75\"\n",
    "    df['FEF75LLNPredopt'] = df.FEF75/df.FEF75PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEF75ULNPredopt'] = df.FEF75/df.FEF75PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"MMEF\"\n",
    "    df['MMEFLLNPredopt'] = df.MMEF/df.MMEFPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['MMEFULNPredopt'] = df.MMEF/df.MMEFPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV6\"\n",
    "    df['FEV6LLNPredopt'] = df.FEV6/df.FEV6PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV6ULNPredopt'] = df.FEV6/df.FEV6PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV3\"\n",
    "    df['FEV3LLNPredopt'] = df.FEV3/df.FEV3PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV3ULNPredopt'] = df.FEV3/df.FEV3PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"PEFR\"\n",
    "    df['PEFRLLNPredopt'] = df.PEFR/df.PEFRPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['PEFRULNPredopt'] = df.PEFR/df.PEFRPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FVC\"\n",
    "    df['FVCLLNPredopt'] = df.FVC/df.FVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FVCULNPredopt'] = df.FVC/df.FVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV1\"\n",
    "    df['FEV1LLNPredopt'] = df.FEV1/df.FEV1PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV1ULNPredopt'] = df.FEV1/df.FEV1PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV05\"\n",
    "    df['FEV05LLNPredopt'] = df.FEV05/df.FEV05PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV05ULNPredopt'] = df.FEV05/df.FEV05PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"MMEFOPEFR\"\n",
    "    df['MMEFOPEFRLLNPredopt'] = df.MMEFOPEFR/df.MMEFOPEFRPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['MMEFOPEFRULNPredopt'] = df.MMEFOPEFR/df.MMEFOPEFRPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"MMEFOFVC\"\n",
    "    df['MMEFOFVCLLNPredopt'] = df.MMEFOFVC/df.MMEFOFVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['MMEFOFVCULNPredopt'] = df.MMEFOFVC/df.MMEFOFVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV6OFVC\"\n",
    "    df['FEV6OFVCLLNPredopt'] = df.FEV6OFVC/df.FEV6OFVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV6OFVCULNPredopt'] = df.FEV6OFVC/df.FEV6OFVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV3OFEV6\"\n",
    "    df['FEV3OFEV6LLNPredopt'] = df.FEV3OFEV6/df.FEV3OFEV6PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV3OFEV6ULNPredopt'] = df.FEV3OFEV6/df.FEV3OFEV6PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV3OFVC\"\n",
    "    df['FEV3OFVCLLNPredopt'] = df.FEV3OFVC/df.FEV3OFVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV3OFVCULNPredopt'] = df.FEV3OFVC/df.FEV3OFVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"PEFROFEV1\"\n",
    "    df['PEFROFEV1LLNPredopt'] = df.PEFROFEV1/df.PEFROFEV1PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['PEFROFEV1ULNPredopt'] = df.PEFROFEV1/df.PEFROFEV1PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"PEFROFEV6\"\n",
    "    df['PEFROFEV6LLNPredopt'] = df.PEFROFEV6/df.PEFROFEV6PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['PEFROFEV6ULNPredopt'] = df.PEFROFEV6/df.PEFROFEV6PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"PEFROFVC\"\n",
    "    df['PEFROFVCLLNPredopt'] = df.PEFROFVC/df.PEFROFVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['PEFROFVCULNPredopt'] = df.PEFROFVC/df.PEFROFVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEF75OFVC\"\n",
    "    df['FEF75OFVCLLNPredopt'] = df.FEF75OFVC/df.FEF75OFVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEF75OFVCULNPredopt'] = df.FEF75OFVC/df.FEF75OFVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"PEFROFEV1\"\n",
    "    df['PEFROFEV1LLNPredopt'] = df.PEFROFEV1/df.PEFROFEV1PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['PEFROFEV1ULNPredopt'] = df.PEFROFEV1/df.PEFROFEV1PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV05OFEV3\"\n",
    "    df['FEV05OFEV3LLNPredopt'] = df.FEV05OFEV3/df.FEV05OFEV3PPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV05OFEV3ULNPredopt'] = df.FEV05OFEV3/df.FEV05OFEV3PPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEV05OFVC\"\n",
    "    df['FEV05OFVCLLNPredopt'] = df.FEV05OFVC/df.FEV05OFVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEV05OFVCULNPredopt'] = df.FEV05OFVC/df.FEV05OFVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEF75OPEFR\"\n",
    "    df['FEF75OPEFRLLNPredopt'] = df.FEF75OPEFR/df.FEF75OPEFRPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEF75OPEFRULNPredopt'] = df.FEF75OPEFR/df.FEF75OPEFRPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n",
    "    var = \"FEF75OFVC\"\n",
    "    df['FEF75OFVCLLNPredopt'] = df.FEF75OFVC/df.FEF75OFVCPPbest*100 * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'lln']/100)\n",
    "    df['FEF75OFVCULNPredopt'] = df.FEF75OFVC/df.FEF75OFVCPPbest * 100* ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "         (df.MXPAXTMR >=600)* LLNULNbest.loc['alltotal600over' + var, 'uln']/100) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- That should have created FEV1OFVCLLNPred and FEV1OFVCULNPred for FEV1OFVC\n",
    "- now should check graph of this value vs age"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NOT USE\n",
    "df['FEV1OFVCLLNPredopt'] = df.FEV1OFVCPred * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'lln']/100 +\n",
    "     (df.MXPAXTMR >= 600) * (df.MXPAXTMR < 720) *   (720 - df.MXPAXTMR) / 120 *                            \n",
    "     (LLNULNbest.loc['alltotal720over' + var, 'lln'] - LLNULNbest.loc['alltotallt600' + var, 'lln']) +\n",
    "     (df.MXPAXTMR >=720)* LLNULNbest.loc['alltotal720over' + var, 'lln']/100  )   \n",
    "df['FEV1OFVCULNPredopt'] = df.FEV1OFVCPred * ((df.MXPAXTMR < 600) * LLNULNbest.loc['alltotallt600' + var, 'uln']/100 +\n",
    "     (df.MXPAXTMR >= 600) * (df.MXPAXTMR < 720) *   (720 - df.MXPAXTMR) / 120 *                            \n",
    "     (LLNULNbest.loc['alltotal720over' + var, 'lln'] - LLNULNbest.loc['alltotallt600' + var, 'uln']) +\n",
    "     (df.MXPAXTMR >=720)* LLNULNbest.loc['alltotal720over' + var, 'uln']/100  ) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 528,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printLLNULNage (df, var):\n",
    "#    df = alltotal\n",
    " #   var = \"FEV1OFVC\"\n",
    "    varl = var + \"LLNPredopt\"\n",
    "    varu = var + \"ULNPredopt\"\n",
    "    agemonth = \"MXPAXTMR\"\n",
    "    monthrange = 24\n",
    "    monthdiff = 24\n",
    "    month = 72\n",
    "    lena = len(alltotal)\n",
    "#. want to also print lln uln for PPbest array and PPULNLLN arrays for varlt600 varover600\n",
    "    print (\"var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\")\n",
    "    print ( var, \",\", round(LLNULNbest.loc['alltotal' + var, 'lln'],2), \",\", round(LLNULNbest.loc['alltotallt600' + var, 'lln'],2), \",\", \n",
    "        round(LLNULNbest.loc['alltotal600over' + var, 'lln'],2), \",\",\n",
    "        round(LLNULNbest.loc['alltotal' + var, 'uln'],2), \",\",\n",
    "        round(LLNULNbest.loc['alltotallt600' + var, 'uln'],2), \",\", round(LLNULNbest.loc['alltotal600over' + var, 'uln'],2))\n",
    "\n",
    "    print (var, \", all, \",  len(df), \",\", len(df.query(var + \"<\" + varl)), \", \", round(len(df.query(var + \"<\" + varl))/len(df),6),\",\",\n",
    "        len(df.query(var + \">\" + varu)), \", \", round(len(df.query(var + \">\" + varu))/len(df),6))\n",
    "    print (var, \", monthrange, \", monthrange, \", monthdiff, \", monthdiff)\n",
    "    print (\"month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\")\n",
    "     # do months from 8 yr(96 mo) to 90 (1080)\n",
    "    for i in range (41):\n",
    " #   dftemp = alltotal.query('MXPAXTMR >100')\n",
    "        month = month + monthdiff\n",
    "        lmonth = month -monthrange\n",
    "        hmonth = month + monthrange\n",
    "        dftemp = alltotal.query(agemonth + \">\" + str(lmonth)).query(agemonth + \"<\" + str(hmonth))\n",
    "        fractiona =  len(dftemp.query(var + \"<\" +  varl))\n",
    "        fractionu =  len(dftemp.query(var + \">\" +  varu))\n",
    "        \n",
    "        print (month, \", \", round (month/12,1), \", \", lmonth, \",\",hmonth, \", \", len(dftemp), \", \",\n",
    "               fractiona, \", \", round(fractiona/len(dftemp),6), \", \", \n",
    "               fractionu, \", \", round(fractionu/len(dftemp),6)) \n",
    "   #            fractionc, \", \", round(fractionc/len(dftemp),6), \", \",\n",
    "   #            fractiond, \", \", round(fractionc/len(dftemp),6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The following prints all of fractiouns < LLN > ULN by age\n",
    "# NOT WORKING FOR PEFROFVC\n",
    "# NOT KEEP OUTPUT as very long"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 564,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEF75 , 46.19 , 50.83 , 31.79 , 174.3 , 166.46 , 218.88\n",
      "FEF75 , all,  7851 , 391 ,  0.049803 , 392 ,  0.04993\n",
      "FEF75 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  31 ,  0.045723 ,  43 ,  0.063422\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  73 ,  0.049391 ,  69 ,  0.046685\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  72 ,  0.054217 ,  48 ,  0.036145\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  41 ,  0.040796 ,  45 ,  0.044776\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  28 ,  0.030205 ,  41 ,  0.044229\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  38 ,  0.045618 ,  33 ,  0.039616\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  26 ,  0.039334 ,  28 ,  0.04236\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  20 ,  0.033278 ,  29 ,  0.048253\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  27 ,  0.046154 ,  32 ,  0.054701\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  31 ,  0.057407 ,  32 ,  0.059259\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  26 ,  0.051181 ,  25 ,  0.049213\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  24 ,  0.04829 ,  26 ,  0.052314\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  30 ,  0.064935 ,  30 ,  0.064935\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  23 ,  0.054502 ,  24 ,  0.056872\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  19 ,  0.050938 ,  23 ,  0.061662\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  26 ,  0.070081 ,  23 ,  0.061995\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  27 ,  0.069948 ,  20 ,  0.051813\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  21 ,  0.061224 ,  17 ,  0.049563\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  19 ,  0.07197 ,  14 ,  0.05303\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  13 ,  0.062201 ,  17 ,  0.08134\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  15 ,  0.086705 ,  17 ,  0.098266\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  12 ,  0.080537 ,  9 ,  0.060403\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  6 ,  0.037267 ,  5 ,  0.031056\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  7 ,  0.041916 ,  4 ,  0.023952\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  7 ,  0.048276 ,  5 ,  0.034483\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  4 ,  0.034483 ,  4 ,  0.034483\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  9 ,  0.062069 ,  6 ,  0.041379\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  8 ,  0.045455 ,  10 ,  0.056818\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  6 ,  0.034884 ,  7 ,  0.040698\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  7 ,  0.042945 ,  10 ,  0.06135\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  8 ,  0.051613 ,  11 ,  0.070968\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  9 ,  0.055215 ,  4 ,  0.02454\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  10 ,  0.058824 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  8 ,  0.053691 ,  12 ,  0.080537\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  6 ,  0.044118 ,  8 ,  0.058824\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  3 ,  0.026786 ,  7 ,  0.0625\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  6 ,  0.052174 ,  9 ,  0.078261\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  9 ,  0.069231 ,  8 ,  0.061538\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  6 ,  0.070588 ,  5 ,  0.058824\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  6 ,  0.089552 ,  3 ,  0.044776\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  3 ,  0.073171 ,  2 ,  0.04878\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV05 , 76.85 , 78.72 , 66.47 , 122.89 , 121.54 , 128.73\n",
      "FEV05 , all,  7851 , 391 ,  0.049803 , 393 ,  0.050057\n",
      "FEV05 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  28 ,  0.041298 ,  42 ,  0.061947\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  70 ,  0.047361 ,  73 ,  0.049391\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  71 ,  0.053464 ,  60 ,  0.045181\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  47 ,  0.046766 ,  56 ,  0.055721\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  39 ,  0.042071 ,  56 ,  0.06041\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  52 ,  0.062425 ,  39 ,  0.046819\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  38 ,  0.057489 ,  27 ,  0.040847\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  22 ,  0.036606 ,  29 ,  0.048253\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  36 ,  0.061538 ,  23 ,  0.039316\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  32 ,  0.059259 ,  16 ,  0.02963\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  27 ,  0.05315 ,  22 ,  0.043307\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  28 ,  0.056338 ,  30 ,  0.060362\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  20 ,  0.04329 ,  30 ,  0.064935\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  16 ,  0.037915 ,  25 ,  0.059242\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  13 ,  0.034853 ,  26 ,  0.069705\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  12 ,  0.032345 ,  21 ,  0.056604\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  18 ,  0.046632 ,  16 ,  0.041451\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  22 ,  0.06414 ,  14 ,  0.040816\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  15 ,  0.056818 ,  12 ,  0.045455\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  7 ,  0.033493 ,  8 ,  0.038278\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  14 ,  0.080925 ,  7 ,  0.040462\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  15 ,  0.100671 ,  5 ,  0.033557\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  5 ,  0.031056 ,  4 ,  0.024845\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  6 ,  0.035928 ,  5 ,  0.02994\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  5 ,  0.034483 ,  2 ,  0.013793\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  2 ,  0.017241\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  6 ,  0.041379 ,  1 ,  0.006897\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  8 ,  0.045455 ,  0 ,  0.0\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  8 ,  0.046512 ,  3 ,  0.017442\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  5 ,  0.030675 ,  8 ,  0.04908\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  4 ,  0.025806 ,  11 ,  0.070968\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  8 ,  0.04908 ,  8 ,  0.04908\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  11 ,  0.064706 ,  5 ,  0.029412\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  13 ,  0.087248 ,  6 ,  0.040268\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  12 ,  0.088235 ,  8 ,  0.058824\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  7 ,  0.0625 ,  7 ,  0.0625\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  10 ,  0.086957 ,  12 ,  0.104348\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  10 ,  0.076923 ,  17 ,  0.130769\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  4 ,  0.047059 ,  11 ,  0.129412\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  3 ,  0.044776 ,  10 ,  0.149254\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  10 ,  0.243902\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV1 , 78.83 , 80.73 , 70.63 , 121.16 , 119.6 , 127.9\n",
      "FEV1 , all,  7851 , 392 ,  0.04993 , 391 ,  0.049803\n",
      "FEV1 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  27 ,  0.039823 ,  41 ,  0.060472\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  69 ,  0.046685 ,  71 ,  0.048038\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  72 ,  0.054217 ,  55 ,  0.041416\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  47 ,  0.046766 ,  49 ,  0.048756\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  31 ,  0.033441 ,  50 ,  0.053937\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  44 ,  0.052821 ,  34 ,  0.040816\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  39 ,  0.059002 ,  21 ,  0.03177\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  27 ,  0.044925 ,  25 ,  0.041597\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  35 ,  0.059829 ,  30 ,  0.051282\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  32 ,  0.059259 ,  26 ,  0.048148\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  24 ,  0.047244 ,  23 ,  0.045276\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  27 ,  0.054326 ,  33 ,  0.066398\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  23 ,  0.049784 ,  37 ,  0.080087\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  17 ,  0.040284 ,  27 ,  0.063981\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  13 ,  0.034853 ,  23 ,  0.061662\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  13 ,  0.03504 ,  22 ,  0.059299\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  19 ,  0.049223 ,  17 ,  0.044041\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  25 ,  0.072886 ,  16 ,  0.046647\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  19 ,  0.07197 ,  12 ,  0.045455\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  10 ,  0.047847 ,  9 ,  0.043062\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  17 ,  0.098266 ,  9 ,  0.052023\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  15 ,  0.100671 ,  6 ,  0.040268\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  5 ,  0.031056 ,  5 ,  0.031056\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  4 ,  0.023952 ,  5 ,  0.02994\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  2 ,  0.013793 ,  3 ,  0.02069\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  4 ,  0.034483\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  8 ,  0.055172 ,  2 ,  0.013793\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  9 ,  0.051136 ,  0 ,  0.0\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  8 ,  0.046512 ,  3 ,  0.017442\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  6 ,  0.03681 ,  6 ,  0.03681\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  5 ,  0.032258 ,  8 ,  0.051613\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  10 ,  0.06135 ,  10 ,  0.06135\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  11 ,  0.064706 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  11 ,  0.073826 ,  7 ,  0.04698\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  11 ,  0.080882 ,  9 ,  0.066176\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  8 ,  0.071429 ,  8 ,  0.071429\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  11 ,  0.095652 ,  9 ,  0.078261\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  11 ,  0.084615 ,  13 ,  0.1\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  3 ,  0.035294 ,  10 ,  0.117647\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  2 ,  0.029851 ,  9 ,  0.134328\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  9 ,  0.219512\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV3 , 79.71 , 80.95 , 72.44 , 120.62 , 119.16 , 127.52\n",
      "FEV3 , all,  7851 , 392 ,  0.04993 , 393 ,  0.050057\n",
      "FEV3 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  24 ,  0.035398 ,  43 ,  0.063422\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  73 ,  0.049391 ,  68 ,  0.046008\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  77 ,  0.057982 ,  55 ,  0.041416\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  48 ,  0.047761 ,  56 ,  0.055721\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  34 ,  0.036677 ,  48 ,  0.05178\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  38 ,  0.045618 ,  33 ,  0.039616\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  39 ,  0.059002 ,  22 ,  0.033283\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  31 ,  0.051581 ,  25 ,  0.041597\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  31 ,  0.052991 ,  32 ,  0.054701\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  31 ,  0.057407 ,  29 ,  0.053704\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  23 ,  0.045276 ,  23 ,  0.045276\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  26 ,  0.052314 ,  29 ,  0.05835\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  23 ,  0.049784 ,  35 ,  0.075758\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  16 ,  0.037915 ,  28 ,  0.066351\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  13 ,  0.034853 ,  21 ,  0.0563\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  12 ,  0.032345 ,  21 ,  0.056604\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  20 ,  0.051813 ,  20 ,  0.051813\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  23 ,  0.067055 ,  16 ,  0.046647\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  18 ,  0.068182 ,  11 ,  0.041667\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  12 ,  0.057416 ,  9 ,  0.043062\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  17 ,  0.098266 ,  8 ,  0.046243\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  15 ,  0.100671 ,  4 ,  0.026846\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  4 ,  0.024845 ,  4 ,  0.024845\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  4 ,  0.023952 ,  6 ,  0.035928\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  3 ,  0.02069 ,  3 ,  0.02069\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  2 ,  0.017241 ,  3 ,  0.025862\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  8 ,  0.055172 ,  2 ,  0.013793\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  9 ,  0.051136 ,  2 ,  0.011364\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  6 ,  0.034884 ,  4 ,  0.023256\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  3 ,  0.018405 ,  5 ,  0.030675\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  4 ,  0.025806 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  11 ,  0.067485 ,  9 ,  0.055215\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  16 ,  0.094118 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  15 ,  0.100671 ,  8 ,  0.053691\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  10 ,  0.073529 ,  10 ,  0.073529\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  8 ,  0.071429 ,  8 ,  0.071429\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  12 ,  0.104348 ,  10 ,  0.086957\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  10 ,  0.076923 ,  15 ,  0.115385\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  2 ,  0.023529 ,  11 ,  0.129412\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  2 ,  0.029851 ,  8 ,  0.119403\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  7 ,  0.170732\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV6 , 79.85 , 81.08 , 72.6 , 120.31 , 119.17 , 127.24\n",
      "FEV6 , all,  7851 , 391 ,  0.049803 , 393 ,  0.050057\n",
      "FEV6 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  30 ,  0.044248 ,  42 ,  0.061947\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  79 ,  0.053451 ,  70 ,  0.047361\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  76 ,  0.057229 ,  57 ,  0.042922\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  48 ,  0.047761 ,  55 ,  0.054726\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  33 ,  0.035599 ,  52 ,  0.056095\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  38 ,  0.045618 ,  38 ,  0.045618\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  43 ,  0.065053 ,  22 ,  0.033283\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  34 ,  0.056572 ,  22 ,  0.036606\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  33 ,  0.05641 ,  30 ,  0.051282\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  30 ,  0.055556 ,  29 ,  0.053704\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  17 ,  0.033465 ,  22 ,  0.043307\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  23 ,  0.046278 ,  25 ,  0.050302\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  22 ,  0.047619 ,  34 ,  0.073593\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  14 ,  0.033175 ,  29 ,  0.06872\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  10 ,  0.02681 ,  19 ,  0.050938\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  10 ,  0.026954 ,  17 ,  0.045822\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  20 ,  0.051813 ,  17 ,  0.044041\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  23 ,  0.067055 ,  18 ,  0.052478\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  18 ,  0.068182 ,  15 ,  0.056818\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  11 ,  0.052632 ,  9 ,  0.043062\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  14 ,  0.080925 ,  8 ,  0.046243\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  12 ,  0.080537 ,  3 ,  0.020134\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  3 ,  0.018634 ,  4 ,  0.024845\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  3 ,  0.017964 ,  8 ,  0.047904\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  2 ,  0.013793 ,  4 ,  0.027586\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  2 ,  0.017241\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  11 ,  0.075862 ,  1 ,  0.006897\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  11 ,  0.0625 ,  2 ,  0.011364\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  7 ,  0.040698 ,  5 ,  0.02907\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  5 ,  0.030675 ,  5 ,  0.030675\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  6 ,  0.03871 ,  6 ,  0.03871\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  13 ,  0.079755 ,  10 ,  0.06135\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  15 ,  0.088235 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  11 ,  0.073826 ,  7 ,  0.04698\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  8 ,  0.058824 ,  11 ,  0.080882\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  8 ,  0.071429 ,  8 ,  0.071429\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  11 ,  0.095652 ,  8 ,  0.069565\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  8 ,  0.061538 ,  15 ,  0.115385\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  2 ,  0.023529 ,  12 ,  0.141176\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  3 ,  0.044776 ,  7 ,  0.104478\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  7 ,  0.170732\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FVC , 79.8 , 81.0 , 71.59 , 120.58 , 119.27 , 126.38\n",
      "FVC , all,  7851 , 392 ,  0.04993 , 392 ,  0.04993\n",
      "FVC , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  27 ,  0.039823 ,  45 ,  0.066372\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  76 ,  0.051421 ,  72 ,  0.048714\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  77 ,  0.057982 ,  54 ,  0.040663\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  48 ,  0.047761 ,  55 ,  0.054726\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  32 ,  0.03452 ,  56 ,  0.06041\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  37 ,  0.044418 ,  40 ,  0.048019\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  43 ,  0.065053 ,  21 ,  0.03177\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  35 ,  0.058236 ,  21 ,  0.034942\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  32 ,  0.054701 ,  30 ,  0.051282\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  30 ,  0.055556 ,  28 ,  0.051852\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  17 ,  0.033465 ,  21 ,  0.041339\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  22 ,  0.044266 ,  24 ,  0.04829\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  23 ,  0.049784 ,  32 ,  0.069264\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  17 ,  0.040284 ,  27 ,  0.063981\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  13 ,  0.034853 ,  19 ,  0.050938\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  11 ,  0.02965 ,  21 ,  0.056604\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  22 ,  0.056995 ,  19 ,  0.049223\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  24 ,  0.069971 ,  18 ,  0.052478\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  17 ,  0.064394 ,  14 ,  0.05303\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  10 ,  0.047847 ,  8 ,  0.038278\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  14 ,  0.080925 ,  7 ,  0.040462\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  11 ,  0.073826 ,  3 ,  0.020134\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  2 ,  0.012422 ,  2 ,  0.012422\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  3 ,  0.017964 ,  5 ,  0.02994\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  2 ,  0.013793 ,  3 ,  0.02069\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  1 ,  0.008621\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  11 ,  0.075862 ,  1 ,  0.006897\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  13 ,  0.073864 ,  4 ,  0.022727\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  9 ,  0.052326 ,  5 ,  0.02907\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  6 ,  0.03681 ,  5 ,  0.030675\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  5 ,  0.032258 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  10 ,  0.06135 ,  9 ,  0.055215\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  14 ,  0.082353 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  11 ,  0.073826 ,  8 ,  0.053691\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  6 ,  0.044118 ,  11 ,  0.080882\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  6 ,  0.053571 ,  9 ,  0.080357\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  12 ,  0.104348 ,  10 ,  0.086957\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  11 ,  0.084615 ,  15 ,  0.115385\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  3 ,  0.035294 ,  12 ,  0.141176\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  3 ,  0.044776 ,  8 ,  0.119403\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  6 ,  0.146341\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "MMEF , 57.66 , 61.54 , 39.99 , 147.73 , 143.54 , 174.09\n",
      "MMEF , all,  7851 , 391 ,  0.049803 , 391 ,  0.049803\n",
      "MMEF , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  35 ,  0.051622 ,  48 ,  0.070796\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  73 ,  0.049391 ,  76 ,  0.051421\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  59 ,  0.044428 ,  44 ,  0.033133\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  36 ,  0.035821 ,  35 ,  0.034826\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  27 ,  0.029126 ,  44 ,  0.047465\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  45 ,  0.054022 ,  33 ,  0.039616\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  35 ,  0.05295 ,  25 ,  0.037821\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  16 ,  0.026622 ,  27 ,  0.044925\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  31 ,  0.052991 ,  21 ,  0.035897\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  32 ,  0.059259 ,  19 ,  0.035185\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  25 ,  0.049213 ,  20 ,  0.03937\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  24 ,  0.04829 ,  26 ,  0.052314\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  23 ,  0.049784 ,  28 ,  0.060606\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  26 ,  0.061611 ,  24 ,  0.056872\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  21 ,  0.0563 ,  28 ,  0.075067\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  20 ,  0.053908 ,  30 ,  0.080863\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  24 ,  0.062176 ,  27 ,  0.069948\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  24 ,  0.069971 ,  24 ,  0.069971\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  20 ,  0.075758 ,  18 ,  0.068182\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  18 ,  0.086124 ,  15 ,  0.07177\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  18 ,  0.104046 ,  14 ,  0.080925\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  11 ,  0.073826 ,  8 ,  0.053691\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  5 ,  0.031056 ,  2 ,  0.012422\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  6 ,  0.035928 ,  2 ,  0.011976\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  5 ,  0.034483 ,  3 ,  0.02069\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  2 ,  0.017241 ,  1 ,  0.008621\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  8 ,  0.055172 ,  3 ,  0.02069\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  10 ,  0.056818 ,  4 ,  0.022727\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  6 ,  0.034884 ,  3 ,  0.017442\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  4 ,  0.02454 ,  4 ,  0.02454\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  6 ,  0.03871 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  8 ,  0.04908 ,  8 ,  0.04908\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  12 ,  0.070588 ,  5 ,  0.029412\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  13 ,  0.087248 ,  8 ,  0.053691\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  11 ,  0.080882 ,  9 ,  0.066176\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  5 ,  0.044643 ,  8 ,  0.071429\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  4 ,  0.034783 ,  11 ,  0.095652\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  9 ,  0.069231 ,  14 ,  0.107692\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  7 ,  0.082353 ,  8 ,  0.094118\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  5 ,  0.074627 ,  10 ,  0.149254\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  3 ,  0.073171 ,  12 ,  0.292683\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "PEFR , 70.79 , 72.91 , 59.26 , 129.73 , 127.52 , 136.82\n",
      "PEFR , all,  7851 , 392 ,  0.04993 , 391 ,  0.049803\n",
      "PEFR , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  31 ,  0.045723 ,  42 ,  0.061947\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  70 ,  0.047361 ,  72 ,  0.048714\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  69 ,  0.051958 ,  61 ,  0.045934\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  51 ,  0.050746 ,  47 ,  0.046766\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  38 ,  0.040992 ,  53 ,  0.057174\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  47 ,  0.056423 ,  45 ,  0.054022\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  38 ,  0.057489 ,  25 ,  0.037821\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  22 ,  0.036606 ,  27 ,  0.044925\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  35 ,  0.059829 ,  23 ,  0.039316\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  31 ,  0.057407 ,  19 ,  0.035185\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  21 ,  0.041339 ,  21 ,  0.041339\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  24 ,  0.04829 ,  23 ,  0.046278\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  22 ,  0.047619 ,  22 ,  0.047619\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  20 ,  0.047393 ,  19 ,  0.045024\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  16 ,  0.042895 ,  22 ,  0.058981\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  18 ,  0.048518 ,  24 ,  0.06469\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  24 ,  0.062176 ,  22 ,  0.056995\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  18 ,  0.052478 ,  21 ,  0.061224\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  12 ,  0.045455 ,  20 ,  0.075758\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  13 ,  0.062201 ,  12 ,  0.057416\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  11 ,  0.063584 ,  11 ,  0.063584\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  8 ,  0.053691 ,  7 ,  0.04698\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  4 ,  0.024845 ,  5 ,  0.031056\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  5 ,  0.02994 ,  7 ,  0.041916\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  5 ,  0.034483 ,  3 ,  0.02069\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  2 ,  0.017241\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  6 ,  0.041379 ,  6 ,  0.041379\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  6 ,  0.034091 ,  6 ,  0.034091\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  8 ,  0.046512 ,  2 ,  0.011628\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  9 ,  0.055215 ,  4 ,  0.02454\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  8 ,  0.051613 ,  9 ,  0.058065\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  9 ,  0.055215 ,  9 ,  0.055215\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  12 ,  0.070588 ,  6 ,  0.035294\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  13 ,  0.087248 ,  8 ,  0.053691\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  9 ,  0.066176 ,  10 ,  0.073529\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  6 ,  0.053571 ,  7 ,  0.0625\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  12 ,  0.104348 ,  6 ,  0.052174\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  11 ,  0.084615 ,  8 ,  0.061538\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  3 ,  0.035294 ,  7 ,  0.082353\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  3 ,  0.044776 ,  10 ,  0.149254\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  11 ,  0.268293\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEF75OFVC , 45.56 , 49.49 , 34.39 , 178.32 , 168.78 , 282.57\n",
      "FEF75OFVC , all,  7851 , 393 ,  0.050057 , 408 ,  0.051968\n",
      "FEF75OFVC , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  36 ,  0.053097 ,  47 ,  0.069322\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  66 ,  0.044655 ,  71 ,  0.048038\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  59 ,  0.044428 ,  42 ,  0.031627\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  38 ,  0.037811 ,  37 ,  0.036816\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  23 ,  0.024811 ,  35 ,  0.037756\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  29 ,  0.034814 ,  38 ,  0.045618\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  18 ,  0.027231 ,  51 ,  0.077156\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  15 ,  0.024958 ,  53 ,  0.088186\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  24 ,  0.041026 ,  45 ,  0.076923\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  25 ,  0.046296 ,  34 ,  0.062963\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  20 ,  0.03937 ,  24 ,  0.047244\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  23 ,  0.046278 ,  25 ,  0.050302\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  29 ,  0.062771 ,  22 ,  0.047619\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  24 ,  0.056872 ,  14 ,  0.033175\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  26 ,  0.069705 ,  16 ,  0.042895\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  33 ,  0.088949 ,  20 ,  0.053908\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  37 ,  0.095855 ,  14 ,  0.036269\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  32 ,  0.093294 ,  11 ,  0.03207\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  29 ,  0.109848 ,  12 ,  0.045455\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  23 ,  0.110048 ,  13 ,  0.062201\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  20 ,  0.115607 ,  12 ,  0.069364\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  12 ,  0.080537 ,  7 ,  0.04698\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  8 ,  0.049689 ,  3 ,  0.018634\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  10 ,  0.05988 ,  2 ,  0.011976\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  9 ,  0.062069 ,  2 ,  0.013793\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  7 ,  0.060345 ,  1 ,  0.008621\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  11 ,  0.075862 ,  5 ,  0.034483\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  11 ,  0.0625 ,  8 ,  0.045455\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  11 ,  0.063953 ,  5 ,  0.02907\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  11 ,  0.067485 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  11 ,  0.070968 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  12 ,  0.07362 ,  3 ,  0.018405\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  10 ,  0.058824 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  7 ,  0.04698 ,  14 ,  0.09396\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  3 ,  0.022059 ,  10 ,  0.073529\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  0 ,  0.0 ,  8 ,  0.071429\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  3 ,  0.026087 ,  16 ,  0.13913\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  4 ,  0.030769 ,  22 ,  0.169231\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  1 ,  0.011765 ,  15 ,  0.176471\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  0 ,  0.0 ,  12 ,  0.179104\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  0 ,  0.0 ,  11 ,  0.268293\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEF75OPEFR , 46.45 , 50.02 , 35.52 , 171.46 , 159.37 , 289.66\n",
      "FEF75OPEFR , all,  7851 , 391 ,  0.049803 , 419 ,  0.053369\n",
      "FEF75OPEFR , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  34 ,  0.050147 ,  42 ,  0.061947\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  69 ,  0.046685 ,  63 ,  0.042625\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  62 ,  0.046687 ,  46 ,  0.034639\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  39 ,  0.038806 ,  45 ,  0.044776\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  22 ,  0.023732 ,  39 ,  0.042071\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  24 ,  0.028812 ,  39 ,  0.046819\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  15 ,  0.022693 ,  52 ,  0.078669\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  12 ,  0.019967 ,  50 ,  0.083195\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  16 ,  0.02735 ,  41 ,  0.070085\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  18 ,  0.033333 ,  37 ,  0.068519\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  21 ,  0.041339 ,  29 ,  0.057087\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  23 ,  0.046278 ,  23 ,  0.046278\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  20 ,  0.04329 ,  22 ,  0.047619\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  22 ,  0.052133 ,  18 ,  0.042654\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  26 ,  0.069705 ,  14 ,  0.037534\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  36 ,  0.097035 ,  16 ,  0.043127\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  45 ,  0.11658 ,  17 ,  0.044041\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  42 ,  0.122449 ,  12 ,  0.034985\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  35 ,  0.132576 ,  8 ,  0.030303\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  21 ,  0.100478 ,  10 ,  0.047847\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  21 ,  0.121387 ,  9 ,  0.052023\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  15 ,  0.100671 ,  5 ,  0.033557\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  11 ,  0.068323 ,  3 ,  0.018634\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  12 ,  0.071856 ,  4 ,  0.023952\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  12 ,  0.082759 ,  4 ,  0.027586\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  9 ,  0.077586 ,  3 ,  0.025862\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  10 ,  0.068966 ,  7 ,  0.048276\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  10 ,  0.056818 ,  7 ,  0.039773\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  8 ,  0.046512 ,  4 ,  0.023256\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  10 ,  0.06135 ,  8 ,  0.04908\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  14 ,  0.090323 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  11 ,  0.067485 ,  5 ,  0.030675\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  9 ,  0.052941 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  7 ,  0.04698 ,  12 ,  0.080537\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  2 ,  0.014706 ,  12 ,  0.088235\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  0 ,  0.0 ,  11 ,  0.098214\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  1 ,  0.008696 ,  19 ,  0.165217\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  1 ,  0.007692 ,  21 ,  0.161538\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  0 ,  0.0 ,  12 ,  0.141176\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  0 ,  0.0 ,  15 ,  0.223881\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  0 ,  0.0 ,  17 ,  0.414634\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV05OFEV3 , 84.29 , 84.31 , 83.89 , 116.43 , 116.73 , 114.14\n",
      "FEV05OFEV3 , all,  7851 , 393 ,  0.050057 , 391 ,  0.049803\n",
      "FEV05OFEV3 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  36 ,  0.053097 ,  32 ,  0.047198\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  67 ,  0.045332 ,  66 ,  0.044655\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  55 ,  0.041416 ,  62 ,  0.046687\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  47 ,  0.046766 ,  53 ,  0.052736\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  50 ,  0.053937 ,  73 ,  0.078749\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  53 ,  0.063625 ,  70 ,  0.084034\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  39 ,  0.059002 ,  42 ,  0.06354\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  35 ,  0.058236 ,  32 ,  0.053245\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  43 ,  0.073504 ,  24 ,  0.041026\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  28 ,  0.051852 ,  18 ,  0.033333\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  20 ,  0.03937 ,  21 ,  0.041339\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  30 ,  0.060362 ,  18 ,  0.036217\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  27 ,  0.058442 ,  11 ,  0.02381\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  22 ,  0.052133 ,  13 ,  0.030806\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  16 ,  0.042895 ,  17 ,  0.045576\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  10 ,  0.026954 ,  17 ,  0.045822\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  17 ,  0.044041 ,  15 ,  0.03886\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  16 ,  0.046647 ,  16 ,  0.046647\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  10 ,  0.037879 ,  12 ,  0.045455\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  7 ,  0.033493 ,  9 ,  0.043062\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  4 ,  0.023121 ,  12 ,  0.069364\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  5 ,  0.033557 ,  9 ,  0.060403\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  4 ,  0.024845 ,  7 ,  0.043478\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  7 ,  0.041916 ,  11 ,  0.065868\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  6 ,  0.041379 ,  12 ,  0.082759\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  2 ,  0.017241 ,  10 ,  0.086207\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  5 ,  0.034483 ,  9 ,  0.062069\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  4 ,  0.022727 ,  14 ,  0.079545\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  4 ,  0.023256 ,  10 ,  0.05814\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  8 ,  0.04908 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  9 ,  0.058065 ,  8 ,  0.051613\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  10 ,  0.06135 ,  7 ,  0.042945\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  8 ,  0.047059 ,  9 ,  0.052941\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  8 ,  0.053691 ,  10 ,  0.067114\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  12 ,  0.088235 ,  3 ,  0.022059\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  9 ,  0.080357 ,  2 ,  0.017857\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  13 ,  0.113043 ,  3 ,  0.026087\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  13 ,  0.1 ,  2 ,  0.015385\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  3 ,  0.035294 ,  1 ,  0.011765\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  4 ,  0.059701 ,  1 ,  0.014925\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  4 ,  0.097561 ,  2 ,  0.04878\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV05OFVC , 82.11 , 83.03 , 78.9 , 118.35 , 118.11 , 120.46\n",
      "FEV05OFVC , all,  7851 , 391 ,  0.049803 , 391 ,  0.049803\n",
      "FEV05OFVC , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  37 ,  0.054572 ,  30 ,  0.044248\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  69 ,  0.046685 ,  60 ,  0.040595\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  58 ,  0.043675 ,  51 ,  0.038404\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  47 ,  0.046766 ,  45 ,  0.044776\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  50 ,  0.053937 ,  66 ,  0.071197\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  51 ,  0.061224 ,  60 ,  0.072029\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  36 ,  0.054463 ,  39 ,  0.059002\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  30 ,  0.049917 ,  36 ,  0.0599\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  39 ,  0.066667 ,  30 ,  0.051282\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  30 ,  0.055556 ,  22 ,  0.040741\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  22 ,  0.043307 ,  18 ,  0.035433\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  22 ,  0.044266 ,  17 ,  0.034205\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  25 ,  0.054113 ,  14 ,  0.030303\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  24 ,  0.056872 ,  17 ,  0.040284\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  16 ,  0.042895 ,  26 ,  0.069705\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  16 ,  0.043127 ,  24 ,  0.06469\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  23 ,  0.059585 ,  15 ,  0.03886\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  16 ,  0.046647 ,  19 ,  0.055394\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  12 ,  0.045455 ,  18 ,  0.068182\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  10 ,  0.047847 ,  15 ,  0.07177\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  4 ,  0.023121 ,  13 ,  0.075145\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  4 ,  0.026846 ,  7 ,  0.04698\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  4 ,  0.024845 ,  3 ,  0.018634\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  6 ,  0.035928 ,  3 ,  0.017964\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  5 ,  0.034483 ,  4 ,  0.027586\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  4 ,  0.034483\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  6 ,  0.041379 ,  8 ,  0.055172\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  5 ,  0.028409 ,  12 ,  0.068182\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  6 ,  0.034884 ,  8 ,  0.046512\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  9 ,  0.055215 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  9 ,  0.058065 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  11 ,  0.067485 ,  6 ,  0.03681\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  9 ,  0.052941 ,  11 ,  0.064706\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  7 ,  0.04698 ,  12 ,  0.080537\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  11 ,  0.080882 ,  5 ,  0.036765\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  9 ,  0.080357 ,  6 ,  0.053571\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  9 ,  0.078261 ,  8 ,  0.069565\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  10 ,  0.076923 ,  7 ,  0.053846\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  7 ,  0.082353 ,  6 ,  0.070588\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  4 ,  0.059701 ,  7 ,  0.104478\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  5 ,  0.121951\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV1OFEV3 , 90.74 , 90.66 , 91.29 , 108.34 , 108.5 , 107.4\n",
      "FEV1OFEV3 , all,  7851 , 392 ,  0.04993 , 393 ,  0.050057\n",
      "FEV1OFEV3 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  31 ,  0.045723 ,  50 ,  0.073746\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  66 ,  0.044655 ,  79 ,  0.053451\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  65 ,  0.048946 ,  50 ,  0.037651\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  54 ,  0.053731 ,  61 ,  0.060697\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  58 ,  0.062567 ,  67 ,  0.072276\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  70 ,  0.084034 ,  63 ,  0.07563\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  48 ,  0.072617 ,  53 ,  0.080182\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  30 ,  0.049917 ,  47 ,  0.078203\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  41 ,  0.070085 ,  41 ,  0.070085\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  33 ,  0.061111 ,  30 ,  0.055556\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  19 ,  0.037402 ,  19 ,  0.037402\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  23 ,  0.046278 ,  14 ,  0.028169\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  22 ,  0.047619 ,  13 ,  0.028139\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  12 ,  0.028436 ,  10 ,  0.023697\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  7 ,  0.018767 ,  12 ,  0.032172\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  8 ,  0.021563 ,  11 ,  0.02965\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  14 ,  0.036269 ,  4 ,  0.010363\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  15 ,  0.043732 ,  0 ,  0.0\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  11 ,  0.041667 ,  1 ,  0.003788\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  5 ,  0.023923 ,  2 ,  0.009569\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  2 ,  0.011561 ,  7 ,  0.040462\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  5 ,  0.033557 ,  7 ,  0.04698\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  7 ,  0.043478 ,  4 ,  0.024845\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  7 ,  0.041916 ,  5 ,  0.02994\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  4 ,  0.027586 ,  6 ,  0.041379\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  1 ,  0.008621 ,  5 ,  0.043103\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  3 ,  0.02069 ,  8 ,  0.055172\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  4 ,  0.022727 ,  13 ,  0.073864\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  6 ,  0.034884 ,  9 ,  0.052326\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  9 ,  0.055215 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  9 ,  0.058065 ,  9 ,  0.058065\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  8 ,  0.04908 ,  8 ,  0.04908\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  6 ,  0.035294 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  7 ,  0.04698 ,  12 ,  0.080537\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  14 ,  0.102941 ,  7 ,  0.051471\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  11 ,  0.098214 ,  4 ,  0.035714\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  11 ,  0.095652 ,  8 ,  0.069565\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  12 ,  0.092308 ,  7 ,  0.053846\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  4 ,  0.047059 ,  4 ,  0.047059\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  4 ,  0.059701 ,  4 ,  0.059701\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  4 ,  0.097561 ,  3 ,  0.073171\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV1OFEV6 , 88.95 , 89.06 , 88.5 , 110.14 , 109.97 , 110.96\n",
      "FEV1OFEV6 , all,  7851 , 391 ,  0.049803 , 391 ,  0.049803\n",
      "FEV1OFEV6 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  37 ,  0.054572 ,  48 ,  0.070796\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  69 ,  0.046685 ,  76 ,  0.051421\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  65 ,  0.048946 ,  47 ,  0.035392\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  51 ,  0.050746 ,  51 ,  0.050746\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  52 ,  0.056095 ,  54 ,  0.058252\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  64 ,  0.076831 ,  56 ,  0.067227\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  41 ,  0.062027 ,  53 ,  0.080182\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  24 ,  0.039933 ,  50 ,  0.083195\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  33 ,  0.05641 ,  44 ,  0.075214\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  29 ,  0.053704 ,  31 ,  0.057407\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  20 ,  0.03937 ,  20 ,  0.03937\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  24 ,  0.04829 ,  16 ,  0.032193\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  24 ,  0.051948 ,  14 ,  0.030303\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  14 ,  0.033175 ,  9 ,  0.021327\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  8 ,  0.021448 ,  14 ,  0.037534\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  13 ,  0.03504 ,  17 ,  0.045822\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  21 ,  0.054404 ,  7 ,  0.018135\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  19 ,  0.055394 ,  4 ,  0.011662\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  15 ,  0.056818 ,  9 ,  0.034091\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  9 ,  0.043062 ,  7 ,  0.033493\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  5 ,  0.028902 ,  7 ,  0.040462\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  5 ,  0.033557 ,  6 ,  0.040268\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  5 ,  0.031056 ,  4 ,  0.024845\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  7 ,  0.041916 ,  5 ,  0.02994\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  4 ,  0.027586 ,  4 ,  0.027586\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  2 ,  0.017241 ,  2 ,  0.017241\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  4 ,  0.027586 ,  5 ,  0.034483\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  6 ,  0.034091 ,  9 ,  0.051136\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  8 ,  0.046512 ,  6 ,  0.034884\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  9 ,  0.055215 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  9 ,  0.058065 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  7 ,  0.042945 ,  3 ,  0.018405\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  7 ,  0.041176 ,  8 ,  0.047059\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  9 ,  0.060403 ,  12 ,  0.080537\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  12 ,  0.088235 ,  8 ,  0.058824\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  6 ,  0.053571 ,  8 ,  0.071429\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  7 ,  0.06087 ,  13 ,  0.113043\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  11 ,  0.084615 ,  12 ,  0.092308\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  7 ,  0.082353 ,  7 ,  0.082353\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  6 ,  0.089552 ,  6 ,  0.089552\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  3 ,  0.073171 ,  4 ,  0.097561\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV1OFVC , 87.8 , 88.48 , 84.67 , 111.15 , 110.5 , 114.91\n",
      "FEV1OFVC , all,  7851 , 392 ,  0.04993 , 391 ,  0.049803\n",
      "FEV1OFVC , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  35 ,  0.051622 ,  46 ,  0.067847\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  65 ,  0.043978 ,  72 ,  0.048714\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  59 ,  0.044428 ,  41 ,  0.030873\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  47 ,  0.046766 ,  44 ,  0.043781\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  48 ,  0.05178 ,  47 ,  0.050701\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  60 ,  0.072029 ,  48 ,  0.057623\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  41 ,  0.062027 ,  48 ,  0.072617\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  24 ,  0.039933 ,  48 ,  0.079867\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  32 ,  0.054701 ,  43 ,  0.073504\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  31 ,  0.057407 ,  32 ,  0.059259\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  22 ,  0.043307 ,  21 ,  0.041339\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  23 ,  0.046278 ,  18 ,  0.036217\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  27 ,  0.058442 ,  19 ,  0.041126\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  19 ,  0.045024 ,  15 ,  0.035545\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  11 ,  0.029491 ,  17 ,  0.045576\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  16 ,  0.043127 ,  19 ,  0.051213\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  22 ,  0.056995 ,  13 ,  0.033679\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  21 ,  0.061224 ,  10 ,  0.029155\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  17 ,  0.064394 ,  11 ,  0.041667\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  10 ,  0.047847 ,  11 ,  0.052632\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  4 ,  0.023121 ,  10 ,  0.057803\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  5 ,  0.033557 ,  6 ,  0.040268\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  8 ,  0.049689 ,  2 ,  0.012422\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  10 ,  0.05988 ,  3 ,  0.017964\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  7 ,  0.048276 ,  3 ,  0.02069\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  1 ,  0.008621\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  5 ,  0.034483 ,  3 ,  0.02069\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  5 ,  0.028409 ,  6 ,  0.034091\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  7 ,  0.040698 ,  5 ,  0.02907\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  7 ,  0.042945 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  8 ,  0.051613 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  11 ,  0.067485 ,  3 ,  0.018405\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  8 ,  0.047059 ,  9 ,  0.052941\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  8 ,  0.053691 ,  13 ,  0.087248\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  11 ,  0.080882 ,  8 ,  0.058824\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  6 ,  0.053571 ,  9 ,  0.080357\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  6 ,  0.052174 ,  15 ,  0.130435\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  8 ,  0.061538 ,  15 ,  0.115385\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  5 ,  0.058824 ,  8 ,  0.094118\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  5 ,  0.074627 ,  7 ,  0.104478\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  3 ,  0.073171 ,  5 ,  0.121951\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV3OFEV6 , 96.93 , 97.14 , 96.07 , 102.45 , 102.21 , 105.62\n",
      "FEV3OFEV6 , all,  7851 , 392 ,  0.04993 , 390 ,  0.049675\n",
      "FEV3OFEV6 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  32 ,  0.047198 ,  3 ,  0.004425\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  78 ,  0.052774 ,  4 ,  0.002706\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  80 ,  0.060241 ,  1 ,  0.000753\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  46 ,  0.045771 ,  0 ,  0.0\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  28 ,  0.030205 ,  0 ,  0.0\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  35 ,  0.042017 ,  0 ,  0.0\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  24 ,  0.036309 ,  15 ,  0.022693\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  23 ,  0.03827 ,  40 ,  0.066556\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  30 ,  0.051282 ,  43 ,  0.073504\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  29 ,  0.053704 ,  47 ,  0.087037\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  24 ,  0.047244 ,  60 ,  0.11811\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  23 ,  0.046278 ,  72 ,  0.144869\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  28 ,  0.060606 ,  63 ,  0.136364\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  24 ,  0.056872 ,  49 ,  0.116114\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  17 ,  0.045576 ,  48 ,  0.128686\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  24 ,  0.06469 ,  41 ,  0.110512\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  30 ,  0.07772 ,  31 ,  0.080311\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  21 ,  0.061224 ,  31 ,  0.090379\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  18 ,  0.068182 ,  28 ,  0.106061\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  12 ,  0.057416 ,  21 ,  0.100478\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  7 ,  0.040462 ,  23 ,  0.132948\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  9 ,  0.060403 ,  10 ,  0.067114\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  6 ,  0.037267 ,  0 ,  0.0\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  5 ,  0.02994 ,  0 ,  0.0\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  4 ,  0.027586 ,  0 ,  0.0\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  0 ,  0.0\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  6 ,  0.041379 ,  0 ,  0.0\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  6 ,  0.034091 ,  3 ,  0.017045\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  6 ,  0.034884 ,  8 ,  0.046512\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  7 ,  0.042945 ,  10 ,  0.06135\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  5 ,  0.032258 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  7 ,  0.042945 ,  4 ,  0.02454\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  10 ,  0.058824 ,  10 ,  0.058824\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  11 ,  0.073826 ,  14 ,  0.09396\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  11 ,  0.080882 ,  9 ,  0.066176\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  5 ,  0.044643 ,  9 ,  0.080357\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  3 ,  0.026087 ,  17 ,  0.147826\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  12 ,  0.092308 ,  18 ,  0.138462\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  14 ,  0.164706 ,  10 ,  0.117647\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  6 ,  0.089552 ,  7 ,  0.104478\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  3 ,  0.073171\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV3OFVC , 94.84 , 96.02 , 91.1 , 104.07 , 103.05 , 110.06\n",
      "FEV3OFVC , all,  7851 , 393 ,  0.050057 , 392 ,  0.04993\n",
      "FEV3OFVC , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  20 ,  0.029499 ,  0 ,  0.0\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  50 ,  0.033829 ,  0 ,  0.0\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  51 ,  0.038404 ,  0 ,  0.0\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  29 ,  0.028856 ,  0 ,  0.0\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  20 ,  0.021575 ,  0 ,  0.0\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  31 ,  0.037215 ,  0 ,  0.0\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  22 ,  0.033283 ,  0 ,  0.0\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  20 ,  0.033278 ,  5 ,  0.008319\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  27 ,  0.046154 ,  22 ,  0.037607\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  28 ,  0.051852 ,  40 ,  0.074074\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  27 ,  0.05315 ,  57 ,  0.112205\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  30 ,  0.060362 ,  74 ,  0.148893\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  36 ,  0.077922 ,  69 ,  0.149351\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  29 ,  0.06872 ,  60 ,  0.14218\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  22 ,  0.058981 ,  60 ,  0.160858\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  35 ,  0.09434 ,  54 ,  0.145553\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  43 ,  0.111399 ,  43 ,  0.111399\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  36 ,  0.104956 ,  45 ,  0.131195\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  30 ,  0.113636 ,  38 ,  0.143939\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  23 ,  0.110048 ,  28 ,  0.133971\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  17 ,  0.098266 ,  28 ,  0.16185\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  11 ,  0.073826 ,  10 ,  0.067114\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  4 ,  0.024845 ,  0 ,  0.0\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  5 ,  0.02994 ,  0 ,  0.0\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  6 ,  0.041379 ,  0 ,  0.0\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  0 ,  0.0\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  9 ,  0.062069 ,  0 ,  0.0\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  10 ,  0.056818 ,  1 ,  0.005682\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  7 ,  0.040698 ,  3 ,  0.017442\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  6 ,  0.03681 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  6 ,  0.03871 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  7 ,  0.042945 ,  4 ,  0.02454\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  9 ,  0.052941 ,  10 ,  0.058824\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  10 ,  0.067114 ,  14 ,  0.09396\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  9 ,  0.066176 ,  9 ,  0.066176\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  6 ,  0.053571 ,  9 ,  0.080357\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  10 ,  0.086957 ,  17 ,  0.147826\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  12 ,  0.092308 ,  20 ,  0.153846\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  6 ,  0.070588 ,  12 ,  0.141176\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  4 ,  0.059701 ,  10 ,  0.149254\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  2 ,  0.04878 ,  6 ,  0.146341\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "FEV6OFVC , 97.07 , 98.17 , 93.84 , 102.37 , 101.42 , 105.05\n",
      "FEV6OFVC , all,  7851 , 392 ,  0.04993 , 393 ,  0.050057\n",
      "FEV6OFVC , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  19 ,  0.028024 ,  0 ,  0.0\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  38 ,  0.02571 ,  0 ,  0.0\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  33 ,  0.024849 ,  0 ,  0.0\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  18 ,  0.01791 ,  0 ,  0.0\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  12 ,  0.012945 ,  0 ,  0.0\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  16 ,  0.019208 ,  0 ,  0.0\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  14 ,  0.02118 ,  0 ,  0.0\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  15 ,  0.024958 ,  0 ,  0.0\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  19 ,  0.032479 ,  0 ,  0.0\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  25 ,  0.046296 ,  0 ,  0.0\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  25 ,  0.049213 ,  0 ,  0.0\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  24 ,  0.04829 ,  3 ,  0.006036\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  32 ,  0.069264 ,  22 ,  0.047619\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  30 ,  0.07109 ,  39 ,  0.092417\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  27 ,  0.072386 ,  68 ,  0.182306\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  41 ,  0.110512 ,  105 ,  0.283019\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  58 ,  0.150259 ,  91 ,  0.235751\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  55 ,  0.16035 ,  80 ,  0.233236\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  46 ,  0.174242 ,  83 ,  0.314394\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  38 ,  0.181818 ,  67 ,  0.320574\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  33 ,  0.190751 ,  56 ,  0.323699\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  18 ,  0.120805 ,  21 ,  0.14094\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  4 ,  0.024845 ,  0 ,  0.0\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  5 ,  0.02994 ,  0 ,  0.0\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  6 ,  0.041379 ,  0 ,  0.0\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  4 ,  0.034483 ,  0 ,  0.0\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  7 ,  0.048276 ,  0 ,  0.0\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  8 ,  0.045455 ,  0 ,  0.0\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  7 ,  0.040698 ,  2 ,  0.011628\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  7 ,  0.042945 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  10 ,  0.064516 ,  5 ,  0.032258\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  10 ,  0.06135 ,  0 ,  0.0\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  7 ,  0.041176 ,  2 ,  0.011765\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  9 ,  0.060403 ,  3 ,  0.020134\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  8 ,  0.058824 ,  5 ,  0.036765\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  5 ,  0.044643 ,  11 ,  0.098214\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  9 ,  0.078261 ,  22 ,  0.191304\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  9 ,  0.069231 ,  28 ,  0.215385\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  7 ,  0.082353 ,  20 ,  0.235294\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  7 ,  0.104478 ,  15 ,  0.223881\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  3 ,  0.073171 ,  10 ,  0.243902\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "MMEFOFVC , 56.85 , 60.98 , 42.84 , 149.57 , 145.34 , 179.5\n",
      "MMEFOFVC , all,  7851 , 392 ,  0.04993 , 391 ,  0.049803\n",
      "MMEFOFVC , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  38 ,  0.056047 ,  33 ,  0.048673\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  68 ,  0.046008 ,  71 ,  0.048038\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  60 ,  0.045181 ,  57 ,  0.042922\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  43 ,  0.042786 ,  39 ,  0.038806\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  37 ,  0.039914 ,  50 ,  0.053937\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  49 ,  0.058824 ,  35 ,  0.042017\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  34 ,  0.051437 ,  22 ,  0.033283\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  18 ,  0.02995 ,  26 ,  0.043261\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  32 ,  0.054701 ,  16 ,  0.02735\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  33 ,  0.061111 ,  15 ,  0.027778\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  20 ,  0.03937 ,  24 ,  0.047244\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  23 ,  0.046278 ,  22 ,  0.044266\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  27 ,  0.058442 ,  17 ,  0.036797\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  18 ,  0.042654 ,  21 ,  0.049763\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  15 ,  0.040214 ,  28 ,  0.075067\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  19 ,  0.051213 ,  31 ,  0.083558\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  26 ,  0.067358 ,  30 ,  0.07772\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  25 ,  0.072886 ,  31 ,  0.090379\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  21 ,  0.079545 ,  23 ,  0.087121\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  15 ,  0.07177 ,  21 ,  0.100478\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  10 ,  0.057803 ,  20 ,  0.115607\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  7 ,  0.04698 ,  10 ,  0.067114\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  4 ,  0.024845 ,  3 ,  0.018634\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  6 ,  0.035928 ,  3 ,  0.017964\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  6 ,  0.041379 ,  2 ,  0.013793\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  3 ,  0.025862\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  8 ,  0.055172 ,  9 ,  0.062069\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  9 ,  0.051136 ,  10 ,  0.056818\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  7 ,  0.040698 ,  5 ,  0.02907\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  6 ,  0.03681 ,  6 ,  0.03681\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  6 ,  0.03871 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  6 ,  0.03681 ,  5 ,  0.030675\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  9 ,  0.052941 ,  10 ,  0.058824\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  11 ,  0.073826 ,  13 ,  0.087248\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  9 ,  0.066176 ,  7 ,  0.051471\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  6 ,  0.053571 ,  6 ,  0.053571\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  11 ,  0.095652 ,  11 ,  0.095652\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  13 ,  0.1 ,  11 ,  0.084615\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  6 ,  0.070588 ,  7 ,  0.082353\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  4 ,  0.059701 ,  7 ,  0.104478\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  2 ,  0.04878 ,  5 ,  0.121951\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "MMEFOPEFR , 64.16 , 68.13 , 49.54 , 139.91 , 135.06 , 175.65\n",
      "MMEFOPEFR , all,  7851 , 391 ,  0.049803 , 391 ,  0.049803\n",
      "MMEFOPEFR , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  36 ,  0.053097 ,  34 ,  0.050147\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  71 ,  0.048038 ,  63 ,  0.042625\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  59 ,  0.044428 ,  40 ,  0.03012\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  38 ,  0.037811 ,  34 ,  0.033831\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  27 ,  0.029126 ,  35 ,  0.037756\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  36 ,  0.043217 ,  30 ,  0.036014\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  27 ,  0.040847 ,  33 ,  0.049924\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  19 ,  0.031614 ,  32 ,  0.053245\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  25 ,  0.042735 ,  30 ,  0.051282\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  25 ,  0.046296 ,  33 ,  0.061111\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  21 ,  0.041339 ,  29 ,  0.057087\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  21 ,  0.042254 ,  23 ,  0.046278\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  28 ,  0.060606 ,  24 ,  0.051948\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  23 ,  0.054502 ,  24 ,  0.056872\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  20 ,  0.053619 ,  25 ,  0.067024\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  25 ,  0.067385 ,  33 ,  0.088949\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  31 ,  0.080311 ,  36 ,  0.093264\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  34 ,  0.099125 ,  26 ,  0.075802\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  28 ,  0.106061 ,  14 ,  0.05303\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  15 ,  0.07177 ,  14 ,  0.066986\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  17 ,  0.098266 ,  14 ,  0.080925\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  12 ,  0.080537 ,  9 ,  0.060403\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  6 ,  0.037267 ,  4 ,  0.024845\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  6 ,  0.035928 ,  4 ,  0.023952\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  3 ,  0.02069 ,  4 ,  0.027586\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  1 ,  0.008621 ,  2 ,  0.017241\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  6 ,  0.041379 ,  4 ,  0.027586\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  10 ,  0.056818 ,  5 ,  0.028409\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  11 ,  0.063953 ,  4 ,  0.023256\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  7 ,  0.042945 ,  7 ,  0.042945\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  8 ,  0.051613 ,  7 ,  0.045161\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  10 ,  0.06135 ,  8 ,  0.04908\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  12 ,  0.070588 ,  11 ,  0.064706\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  11 ,  0.073826 ,  10 ,  0.067114\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  6 ,  0.044118 ,  8 ,  0.058824\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  5 ,  0.044643 ,  9 ,  0.080357\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  9 ,  0.078261 ,  12 ,  0.104348\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  8 ,  0.061538 ,  11 ,  0.084615\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  4 ,  0.047059 ,  6 ,  0.070588\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  4 ,  0.059701 ,  5 ,  0.074627\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  2 ,  0.04878 ,  7 ,  0.170732\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "PEFROFEV1 , 76.98 , 78.31 , 70.68 , 123.68 , 122.97 , 128.33\n",
      "PEFROFEV1 , all,  7851 , 391 ,  0.049803 , 393 ,  0.050057\n",
      "PEFROFEV1 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  37 ,  0.054572 ,  30 ,  0.044248\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  71 ,  0.048038 ,  74 ,  0.050068\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  56 ,  0.042169 ,  66 ,  0.049699\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  40 ,  0.039801 ,  37 ,  0.036816\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  44 ,  0.047465 ,  37 ,  0.039914\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  43 ,  0.051621 ,  36 ,  0.043217\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  36 ,  0.054463 ,  26 ,  0.039334\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  41 ,  0.06822 ,  22 ,  0.036606\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  46 ,  0.078632 ,  24 ,  0.041026\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  33 ,  0.061111 ,  22 ,  0.040741\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  21 ,  0.041339 ,  25 ,  0.049213\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  22 ,  0.044266 ,  22 ,  0.044266\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  21 ,  0.045455 ,  18 ,  0.038961\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  22 ,  0.052133 ,  19 ,  0.045024\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  17 ,  0.045576 ,  19 ,  0.050938\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  14 ,  0.037736 ,  24 ,  0.06469\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  19 ,  0.049223 ,  37 ,  0.095855\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  12 ,  0.034985 ,  33 ,  0.09621\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  12 ,  0.045455 ,  23 ,  0.087121\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  18 ,  0.086124 ,  17 ,  0.08134\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  7 ,  0.040462 ,  17 ,  0.098266\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  4 ,  0.026846 ,  11 ,  0.073826\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  5 ,  0.031056 ,  7 ,  0.043478\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  5 ,  0.02994 ,  11 ,  0.065868\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  4 ,  0.027586 ,  11 ,  0.075862\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  9 ,  0.077586\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  6 ,  0.041379 ,  11 ,  0.075862\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  5 ,  0.028409 ,  7 ,  0.039773\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  6 ,  0.034884 ,  3 ,  0.017442\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  9 ,  0.055215 ,  6 ,  0.03681\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  10 ,  0.064516 ,  10 ,  0.064516\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  13 ,  0.079755 ,  12 ,  0.07362\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  10 ,  0.058824 ,  9 ,  0.052941\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  5 ,  0.033557 ,  8 ,  0.053691\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  11 ,  0.080882 ,  6 ,  0.044118\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  11 ,  0.098214 ,  4 ,  0.035714\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  7 ,  0.06087 ,  5 ,  0.043478\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  9 ,  0.069231 ,  4 ,  0.030769\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  6 ,  0.070588 ,  2 ,  0.023529\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  3 ,  0.044776 ,  1 ,  0.014925\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  2 ,  0.04878 ,  1 ,  0.02439\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "PEFROFEV6 , 73.57 , 74.47 , 67.45 , 128.75 , 128.15 , 132.63\n",
      "PEFROFEV6 , all,  7851 , 392 ,  0.04993 , 393 ,  0.050057\n",
      "PEFROFEV6 , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  36 ,  0.053097 ,  36 ,  0.053097\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  66 ,  0.044655 ,  81 ,  0.054804\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  52 ,  0.039157 ,  69 ,  0.051958\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  37 ,  0.036816 ,  40 ,  0.039801\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  47 ,  0.050701 ,  42 ,  0.045307\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  50 ,  0.060024 ,  39 ,  0.046819\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  34 ,  0.051437 ,  30 ,  0.045386\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  34 ,  0.056572 ,  23 ,  0.03827\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  48 ,  0.082051 ,  17 ,  0.02906\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  35 ,  0.064815 ,  21 ,  0.038889\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  21 ,  0.041339 ,  27 ,  0.05315\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  25 ,  0.050302 ,  21 ,  0.042254\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  25 ,  0.054113 ,  15 ,  0.032468\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  23 ,  0.054502 ,  17 ,  0.040284\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  14 ,  0.037534 ,  17 ,  0.045576\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  14 ,  0.037736 ,  17 ,  0.045822\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  19 ,  0.049223 ,  28 ,  0.072539\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  11 ,  0.03207 ,  31 ,  0.090379\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  12 ,  0.045455 ,  24 ,  0.090909\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  18 ,  0.086124 ,  19 ,  0.090909\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  8 ,  0.046243 ,  17 ,  0.098266\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  5 ,  0.033557 ,  11 ,  0.073826\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  4 ,  0.024845 ,  7 ,  0.043478\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  4 ,  0.023952 ,  10 ,  0.05988\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  4 ,  0.027586 ,  8 ,  0.055172\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  8 ,  0.068966\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  7 ,  0.048276 ,  10 ,  0.068966\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  7 ,  0.039773 ,  6 ,  0.034091\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  7 ,  0.040698 ,  4 ,  0.023256\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  9 ,  0.055215 ,  5 ,  0.030675\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  12 ,  0.077419 ,  11 ,  0.070968\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  13 ,  0.079755 ,  14 ,  0.08589\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  10 ,  0.058824 ,  10 ,  0.058824\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  8 ,  0.053691 ,  9 ,  0.060403\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  8 ,  0.058824 ,  4 ,  0.029412\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  6 ,  0.053571 ,  3 ,  0.026786\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  7 ,  0.06087 ,  3 ,  0.026087\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  11 ,  0.084615 ,  3 ,  0.023077\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  8 ,  0.094118 ,  3 ,  0.035294\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  3 ,  0.044776 ,  3 ,  0.044776\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  1 ,  0.02439 ,  3 ,  0.073171\n",
      "var, LLNall, LLNlt600, LLN600over, ULNall, ULNlt600, ULN600over\n",
      "PEFROFVC , 73.0 , 74.34 , 66.05 , 129.42 , 128.55 , 135.64\n",
      "PEFROFVC , all,  7851 , 391 ,  0.049803 , 392 ,  0.04993\n",
      "PEFROFVC , monthrange,  24 , monthdiff,  24\n",
      "month, year, agemin,  agemax, # in age, # < LLN, f < LLN, # > ULN, f > ULN\n",
      "96 ,  8.0 ,  72 , 120 ,  678 ,  34 ,  0.050147 ,  36 ,  0.053097\n",
      "120 ,  10.0 ,  96 , 144 ,  1478 ,  63 ,  0.042625 ,  77 ,  0.052097\n",
      "144 ,  12.0 ,  120 , 168 ,  1328 ,  52 ,  0.039157 ,  65 ,  0.048946\n",
      "168 ,  14.0 ,  144 , 192 ,  1005 ,  38 ,  0.037811 ,  39 ,  0.038806\n",
      "192 ,  16.0 ,  168 , 216 ,  927 ,  43 ,  0.046386 ,  40 ,  0.04315\n",
      "216 ,  18.0 ,  192 , 240 ,  833 ,  46 ,  0.055222 ,  36 ,  0.043217\n",
      "240 ,  20.0 ,  216 , 264 ,  661 ,  34 ,  0.051437 ,  28 ,  0.04236\n",
      "264 ,  22.0 ,  240 , 288 ,  601 ,  34 ,  0.056572 ,  23 ,  0.03827\n",
      "288 ,  24.0 ,  264 , 312 ,  585 ,  48 ,  0.082051 ,  18 ,  0.030769\n",
      "312 ,  26.0 ,  288 , 336 ,  540 ,  36 ,  0.066667 ,  24 ,  0.044444\n",
      "336 ,  28.0 ,  312 , 360 ,  508 ,  21 ,  0.041339 ,  29 ,  0.057087\n",
      "360 ,  30.0 ,  336 , 384 ,  497 ,  24 ,  0.04829 ,  20 ,  0.040241\n",
      "384 ,  32.0 ,  360 , 408 ,  462 ,  25 ,  0.054113 ,  15 ,  0.032468\n",
      "408 ,  34.0 ,  384 , 432 ,  422 ,  23 ,  0.054502 ,  18 ,  0.042654\n",
      "432 ,  36.0 ,  408 , 456 ,  373 ,  14 ,  0.037534 ,  19 ,  0.050938\n",
      "456 ,  38.0 ,  432 , 480 ,  371 ,  18 ,  0.048518 ,  21 ,  0.056604\n",
      "480 ,  40.0 ,  456 , 504 ,  386 ,  23 ,  0.059585 ,  30 ,  0.07772\n",
      "504 ,  42.0 ,  480 , 528 ,  343 ,  11 ,  0.03207 ,  32 ,  0.093294\n",
      "528 ,  44.0 ,  504 , 552 ,  264 ,  13 ,  0.049242 ,  24 ,  0.090909\n",
      "552 ,  46.0 ,  528 , 576 ,  209 ,  19 ,  0.090909 ,  19 ,  0.090909\n",
      "576 ,  48.0 ,  552 , 600 ,  173 ,  9 ,  0.052023 ,  18 ,  0.104046\n",
      "600 ,  50.0 ,  576 , 624 ,  149 ,  7 ,  0.04698 ,  12 ,  0.080537\n",
      "624 ,  52.0 ,  600 , 648 ,  161 ,  5 ,  0.031056 ,  7 ,  0.043478\n",
      "648 ,  54.0 ,  624 , 672 ,  167 ,  4 ,  0.023952 ,  10 ,  0.05988\n",
      "672 ,  56.0 ,  648 , 696 ,  145 ,  4 ,  0.027586 ,  7 ,  0.048276\n",
      "696 ,  58.0 ,  672 , 720 ,  116 ,  3 ,  0.025862 ,  8 ,  0.068966\n",
      "720 ,  60.0 ,  696 , 744 ,  145 ,  7 ,  0.048276 ,  9 ,  0.062069\n",
      "744 ,  62.0 ,  720 , 768 ,  176 ,  7 ,  0.039773 ,  5 ,  0.028409\n",
      "768 ,  64.0 ,  744 , 792 ,  172 ,  5 ,  0.02907 ,  6 ,  0.034884\n",
      "792 ,  66.0 ,  768 , 816 ,  163 ,  7 ,  0.042945 ,  5 ,  0.030675\n",
      "816 ,  68.0 ,  792 , 840 ,  155 ,  12 ,  0.077419 ,  8 ,  0.051613\n",
      "840 ,  70.0 ,  816 , 864 ,  163 ,  14 ,  0.08589 ,  12 ,  0.07362\n",
      "864 ,  72.0 ,  840 , 888 ,  170 ,  10 ,  0.058824 ,  10 ,  0.058824\n",
      "888 ,  74.0 ,  864 , 912 ,  149 ,  7 ,  0.04698 ,  9 ,  0.060403\n",
      "912 ,  76.0 ,  888 , 936 ,  136 ,  8 ,  0.058824 ,  4 ,  0.029412\n",
      "936 ,  78.0 ,  912 , 960 ,  112 ,  6 ,  0.053571 ,  4 ,  0.035714\n",
      "960 ,  80.0 ,  936 , 984 ,  115 ,  8 ,  0.069565 ,  4 ,  0.034783\n",
      "984 ,  82.0 ,  960 , 1008 ,  130 ,  12 ,  0.092308 ,  3 ,  0.023077\n",
      "1008 ,  84.0 ,  984 , 1032 ,  85 ,  8 ,  0.094118 ,  4 ,  0.047059\n",
      "1032 ,  86.0 ,  1008 , 1056 ,  67 ,  2 ,  0.029851 ,  5 ,  0.074627\n",
      "1056 ,  88.0 ,  1032 , 1080 ,  41 ,  0 ,  0.0 ,  4 ,  0.097561\n"
     ]
    }
   ],
   "source": [
    "varlist = ['FEV1OFVC', 'FEV1', 'FVC', 'PEFROFVC']\n",
    "varlist = ['FEF75', 'FEV05', 'FEV1', 'FEV3', 'FEV6', 'FVC', \n",
    "            'MMEF', 'PEFR', \n",
    "            'FEF75OFVC','FEF75OPEFR','FEV05OFEV3','FEV05OFVC',\n",
    "            'FEV1OFEV3','FEV1OFEV6', 'FEV1OFVC', 'FEV3OFEV6',\n",
    "            'FEV3OFVC','FEV6OFVC',\n",
    "            'MMEFOFVC', 'MMEFOPEFR', \n",
    "            'PEFROFEV1', 'PEFROFEV6', 'PEFROFVC']\n",
    "# varlist = ['FEV1OFVC', 'FEV1']\n",
    "df = alltotal\n",
    "for var in varlist:\n",
    "    printLLNULNage (df, var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Now LLN Hansen Hankinson fraction by age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "    df = alltotal\n",
    "    var = 'FVC'\n",
    "    vn = df.name + var\n",
    "    vPPbest = var + \"PPbest\"\n",
    "    vbest = var\n",
    "    varllnh = var + \"LLNPredh\"\n",
    "    varllnhansen = var + \"LLNPredhansen\"\n",
    "    varllnopt = var + \"LLNPredopt\"\n",
    "    agemonth = \"MXPAXTMR\"\n",
    "    monthrange = 12\n",
    "\n",
    "    monthdiff = 24\n",
    "    month = 72\n",
    "    llna = LLNULNbest.loc[\"alltotal\" + var,'lln'] # 87.79 # FOR FEV1/FVC alltotal\n",
    "    lena = len(alltotal)\n",
    "    lenb = len(alltotallt600)\n",
    "    lenc = len(alltotal600over)\n",
    "    lenc2 = len(alltotallt720)\n",
    "    lend = len(alltotal720over)\n",
    "    llnb = LLNULNbest.loc[\"alltotallt600\" + var,'lln'] # 88.477 # for FEV1/FVC alltotallt600\n",
    "    llnc = LLNULNbest.loc[\"alltotal600over\" + var,'lln'] #84.668 # for FEV1/FVC alltotal600over\n",
    "    llnd = 0\n",
    "    llnd = 0\n",
    "    #    llnc2 = LLNULNbest.loc[\"alltotallt720\" + var,'lln']\n",
    "#    llnd = LLNULNbest.loc[\"alltotal720over\" + var,'lln'] #82  for alltotal720over\n",
    "    print (vbest, \" LLNa \", llna, \"mrange \", monthrange, \"mdiff \", monthdiff, \"all, lt600, 600over, Optimal, Hankinson, Hansen\")\n",
    "    print (\"month, year, agemin,  agemax, # in age, # <\",\n",
    "           round(llna,2), \" ,f<\", \", #<\", round(llnb,2),  \", f<, #<\", round(llnc,2), \", f<\", #<\", \"Optimal, f<, Hankinson f<\",  \n",
    "           \"#<, Hansen, f<\")\n",
    "     # do months from 8 yr(96 mo) to 90 (1080)\n",
    "    for i in range (42):\n",
    " #   dftemp = alltotal.query('MXPAXTMR >100')\n",
    "        month = month + monthdiff\n",
    "        lmonth = month -monthrange\n",
    "        hmonth = month + monthrange\n",
    "        dftemp = alltotal.query(agemonth + \">=\" + str(lmonth)).query(agemonth + \"<\" + str(hmonth))\n",
    "        fractiona =  len(dftemp.query(vPPbest + \"<\" + str(llna)))\n",
    "        fractionb =  len(dftemp.query(vPPbest + \"<\" + str(llnb)))\n",
    "        fractionc =  len(dftemp.query(vPPbest + \"<\" + str(llnc)))\n",
    "        fractionc2 =  len(dftemp.query(vPPbest + \"<\" + str(llnc2)))\n",
    "        fractiond =  len(dftemp.query(vPPbest + \"<\" + str(llnd)))\n",
    "        fractionh =   len(dftemp.query(var + \"<\" + varllnh))\n",
    "        fractiono =   len(dftemp.query(var + \"<\" + varllnopt))\n",
    "  #Hansen not have FVC      fractionhansen =   len(dftemp.query(var + \"<\" + varllnhansen))\n",
    "\n",
    "        print (month, \",\", round (month/12,1), \",\", lmonth, \",\",hmonth, \",\", len(dftemp), \",\",\n",
    "               fractiona, \", \", round(fractiona/len(dftemp),5), \",\", \n",
    "               fractionb, \", \", round(fractionb/len(dftemp),5), \",\", \n",
    "               fractionc, \", \", round(fractionc/len(dftemp),5), \",\",\n",
    "               fractiono, \", \", round(fractiono/len(dftemp),5), \",\",\n",
    "               fractionh, \", \", round(fractionh/len(dftemp),5), \",\",\n",
    "               fractiond, \", \", round(fractiond/len(dftemp),5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- This works well for LLN, but ULN between age 50 and 70 too few above ULN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " now get z-scores (but is using varPred rather than varPPbest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "    def getzscore2 (df,var):\n",
    " #       print (var)\n",
    "  #      df = alltotal\n",
    "  #      vn = df.name + var + \"PP\" \n",
    "        vn = df.name + var + \"PPbest\" \n",
    "        vPred = var + \"Pred\"\n",
    "  #      vPred = var + \"PPbest\"  #try this\n",
    "        varn3 = var\n",
    "        varn2 = var\n",
    "        list = ['EXPIR', 'FEF75', 'FEV1', 'FEV3', 'FEV6', 'FVC', 'MMEF']\n",
    "  #      if var == 'EXPIR':\n",
    "  #          var3 = \"SPPEXPIR\"\n",
    "\n",
    "        zscore = 1.645\n",
    "        zscoreu = 1.645\n",
    "        std = PPbestvalues.loc[vn, 'std']/100 # try /100\n",
    "        zstd = zscore*std\n",
    "        zstdu = zscoreu * std\n",
    "#        print (std)\n",
    "  \n",
    "#        print (\"lower zscore \",zscore, \" \", varn2, df.name, \", \",len(df.query(varn3 + '< ' + vPred + '* (1-' + str(zstd) + ')')), \", \", \n",
    " #          len(df), \", \", len(df.query(varn3 + '< ' + vPred + '* (1-'  + str(zstd) + ')'))/len(df))\n",
    "   \n",
    " #       print (\"upper zscore \",zscore, \" \",varn2, df.name, \", \",len(df.query(varn3 + '> ' + vPred + '* (1+' + str(zstd) + ')')), \", \", \n",
    "  #         len(df), \", \", len(df.query(varn3 + '> ' + vPred + '* (1+'  + str(zstd) + ')'))/len(df))\n",
    "     \n",
    " #       print (varn2, df.name, \", \",len(df.query('SPPFEV1 < FEV1Pred * (1-' + str(zstd) + ')')), \", \", \n",
    "  #         len(df), \", \", len(df.query('SPPFEV1 < FEV1Pred * (1-' + str(zstd) + ')'))/len(df))\n",
    "        diff = .2\n",
    "        for i in range (20):\n",
    "            fraction =  len(df.query(varn3 + \"<\" + vPred + \"* (1-\"  + str(zstd) + ')'))/len(df)\n",
    "            if fraction < 0.05:\n",
    "                zscore = zscore - diff\n",
    "                zstd = zscore * std\n",
    "  #              print (i, \" \", fraction, \" \", zscore, \" \", diff)\n",
    "                fraction =  len(df.query(varn3 + \"<\" + vPred + \"* (1-\"  + str(zstd) + ')'))/len(df)\n",
    "                if fraction > 0.05:\n",
    "                    diff = diff/2\n",
    "            if fraction > 0.05:\n",
    "                zscore = zscore + diff\n",
    "                zstd = zscore * std\n",
    "  #              print (i, \" \", fraction, \" \", zscore, \" \", diff)\n",
    "                fraction =  len(df.query(varn3 + \"<\" + vPred + \"* (1-\"  + str(zstd) + ')'))/len(df)\n",
    "                if fraction < 0.05:\n",
    "                    diff = diff/2\n",
    "\n",
    "        diff = .2\n",
    "        for i in range (20):\n",
    "            fractionu =  len(df.query(varn3 + \">\" + vPred + \"* (1+\"  + str(zstdu) + ')'))/len(df)\n",
    "            if fractionu < 0.05:\n",
    "                zscoreu = zscoreu - diff\n",
    "                zstdu = zscoreu * std\n",
    " #               print (i, \" \", fractionu, \" \", zscoreu, \" \", diff)\n",
    "                fractionu =  len(df.query(varn3 + \">\" + vPred + \"* (1+\"  + str(zstdu) + ')'))/len(df)\n",
    "                if fractionu > 0.05:\n",
    "                    diff = diff/2\n",
    "            if fractionu > 0.05:\n",
    "                zscoreu = zscoreu + diff\n",
    "                zstdu = zscoreu * std\n",
    "  #              print (i, \" \", fractionu, \" \", zscoreu, \" \", diff)\n",
    "                fractionu =  len(df.query(varn3 + \">\" + vPred + \"* (1+\"  + str(zstdu) + ')'))/len(df)\n",
    "                if fractionu < 0.05:\n",
    "                    diff = diff/2\n",
    "\n",
    "        print (df.name, \", \", var, \", \", round(std,6), \", \", round (zscore,6), \", \", round (fraction,5), \n",
    "               \", \", round(zscoreu,6), \", \", round(fractionu,6))\n",
    "\n",
    "\n",
    "  #      finalz = zscore\n",
    " #       return finalz \n",
    " #          len(df.query('SPPFEV1 < FEV1LLNPred'))/len(df)) \n",
    "\n",
    "\n",
    "#    vn = df.name + 'FEV1PP'\n",
    "#   df['FEV1LLNPred'] = (df.FEV1Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# need do for \n",
    "           'PEFRPPOFEV1PP', 'PEFRPPOFVCPP', 'MMEFPPOFVCPP',            'MMEFPPOPEFRPP', 'FEF75PPOFVCPP']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not work for FEV05/FEV3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = alltotal\n",
    "print (\"dframe, parameter, std, LLN zscore, <LLN, ULN zscore, >ULN\")\n",
    "varlist = ['EXPIR', 'FEF75', 'FEV05', 'FEV1', 'FEV3', 'FEV6', 'FVC', \n",
    "            'MMEF', 'PEFR', \n",
    "            'FEF75OFVC', 'FEF75OPEFR',\n",
    "            'FEV05OFEV3', \n",
    "            'FEV05OFVC',\n",
    "            'FEV1OFEV3',\n",
    "            'FEV1OFEV6', 'FEV1OFVC', 'FEV3OFEV6',\n",
    "            'FEV3OFVC', 'FEV6OFVC',\n",
    "            'MMEFOFVC', 'MMEFOPEFR',\n",
    "            'PEFROFEV1', 'PEFROFEV6', 'PEFROFVC']\n",
    "  #          'PEFRPPOFEV1PP', 'PEFRPPOFVCPP', 'MMEFPPOFVCPP']\n",
    "#           'MMEFPPOPEFRPP', 'FEF75PPOFVCPP']\n",
    "#. for var in varlist:\n",
    "  #. NOT DO FOR NOW AS OTHER ABOVE WORKED FOR PPbest  getzscore2 (df, var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printltlln (df):\n",
    "    print (\"FEV05, \", df.name, \", \",len(df.query('SPPFEV05 < FEV05LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPFEV05 < FEV05LLNPred'))/len(df))\n",
    "    print (\"FEV1, \", df.name, \", \",len(df.query('SPPFEV1 < FEV1LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPFEV1 < FEV1LLNPred'))/len(df))\n",
    "    print (\"FVC, \", df.name, \", \",len(df.query('SPPFVC < FVCLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPFVC < FVCLLNPred'))/len(df))\n",
    "    print (\"FEV6, \", df.name, \", \",len(df.query('SPPFEV6 < FEV6LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPFEV6 < FEV6LLNPred'))/len(df))\n",
    "    print (\"PEFR, \", df.name, \", \",len(df.query('SPPPEAK < PEFRLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPPEAK < PEFRLLNPred'))/len(df))\n",
    "    print (\"MMEF, \", df.name, \", \",len(df.query('SPPMMEF < MMEFLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPMMEF < MMEFLLNPred'))/len(df))\n",
    "    print (\"FEV1OFVC, \", df.name, \", \",len(df.query('FEV1OFVC < FEV1OFVCLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('FEV1OFVC < FEV1OFVCLLNPred'))/len(df))\n",
    "    print (\"PEFROFVC, \", df.name, \", \",len(df.query('PEFROFVC < PEFROFVCLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('PEFROFVC < PEFROFVCLLNPred'))/len(df))\n",
    "    \n",
    "    print (\"FEV1OFEV6, \", df.name, \", \",len(df.query('FEV1OFEV6 < FEV1OFEV6Pred')), \", \", \n",
    "           len(df), \", \", len(df.query('FEV1OFEV6 < FEV1OFEV6LLNPred'))/len(df))\n",
    "\n",
    "    print (\"PEFROFEV6, \", df.name, \", \",len(df.query('PEFROFEV6 < PEFROFEV6LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('PEFROFEV6 < PEFROFEV6LLNPred'))/len(df))\n",
    "    print (\"PEFROFEV1, \", df.name, \", \",len(df.query('PEFROFEV1 < PEFROFEV1LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('PEFROFEV1 < PEFROFEV1LLNPred'))/len(df))\n",
    "    print (\"FEV3OFVC, \", df.name, \", \",len(df.query('FEV3OFVC < FEV3OFVCLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('FEV3OFVC < FEV3OFVCLLNPred'))/len(df))\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "   vn = df.name + 'FEV1OFVCPP'\n",
    "    df['FEV1OFVCLLNPred'] = (df.FEV1OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "    vn = dfa.name + 'PEFROFVCPP'\n",
    "    df['PEFROFVCLLNPred'] = (df.PEFROFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))         \n",
    "    vn = df.name + 'FEV1OFEV6PP'\n",
    "    df['FEV1OFEV6LLNPred'] = (df.FEV1OFEV6Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'PEFROFVCPP'\n",
    "    df['PEFROFVCLLNPred'] = (df.PEFROFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'PEFROFEV6PP'\n",
    "    df['PEFROFEV6LLNPred'] = (df.PEFROFEV6Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'PEFROFEV1PP'\n",
    "    df['PEFROFEV1LLNPred'] = (df.PEFROFEV1Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'FEV3OFVCPP'\n",
    "    df['FEV3OFVCLLNPred'] = (df.FEV3OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = df.name + 'FEV6OFVCPP'\n",
    "    df['FEV6OFVCLLNPred'] = (df.FEV6OFVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))\n",
    "    vn = df.name + 'FEV1PP'\n",
    "    df['FEV1LLNPred'] = (df.FEV1Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'FVCPP'\n",
    "    df['FVCLLNPred'] = (df.FVCPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'PEFRPP'\n",
    "    df['PEFRLLNPred'] = (df.PEFRPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'FEV3PP'\n",
    "    df['FEV3LLNPred'] = (df.FEV3Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'FEV6PP'\n",
    "    df['FEV6LLNPred'] = (df.FEV6Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'MMEFPP'\n",
    "    df['MMEFLLNPred'] = (df.MMEFPred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'FEF75PP'\n",
    "    df['FEF75LLNPred'] = (df.FEF75Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) \n",
    "    vn = dfa.name + 'EXPIRPP'\n",
    "    df['EXPIRLLNPred'] = (df.EXPIRPred * (1 - 1.645* ((PPvalues.loc[vn, 'std']))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Results in FEV1 near 5%, FVC 9%, MMEF 10%, PEFROFVC 6% to 2%; suggesting that for MMEF skewed to right and PEFROFVC skewed to left\n",
    "So do scatter plot of PEFROFVC and of MMEF - see if skewed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "parameter, dataframe, #<LLN, count, fraction < LLN\n"
     ]
    },
    {
     "ename": "UndefinedVariableError",
     "evalue": "name 'FEV05LLNPred' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    186\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhas_resolvers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolvers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    915\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 916\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__missing__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m            \u001b[0;31m# support subclasses that define __missing__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    917\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py\u001b[0m in \u001b[0;36m__missing__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    907\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__missing__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 908\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    909\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV05LLNPred'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    197\u001b[0m                 \u001b[0;31m# e.g., df[df > 0]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 198\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtemps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    199\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'FEV05LLNPred'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mUndefinedVariableError\u001b[0m                    Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-513-b28f557ce623>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mftoa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mftoaall\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mftoa\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mprintltlln\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-458-6a0b5962194d>\u001b[0m in \u001b[0;36mprintltlln\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mprintltlln\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     print (\"FEV05, \", df.name, \", \",len(df.query('SPPFEV05 < FEV05LLNPred')), \", \", \n\u001b[0m\u001b[1;32m      3\u001b[0m            len(df), \", \", len(df.query('SPPFEV05 < FEV05LLNPred'))/len(df))\n\u001b[1;32m      4\u001b[0m     print (\"FEV1, \", df.name, \", \",len(df.query('SPPFEV1 < FEV1LLNPred')), \", \", \n\u001b[1;32m      5\u001b[0m            len(df), \", \", len(df.query('SPPFEV1 < FEV1LLNPred'))/len(df))\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mquery\u001b[0;34m(self, expr, inplace, **kwargs)\u001b[0m\n\u001b[1;32m   3229\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"level\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"level\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3230\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"target\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3231\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3232\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3233\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, expr, inplace, **kwargs)\u001b[0m\n\u001b[1;32m   3344\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"resolvers\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"resolvers\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresolvers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3345\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3346\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_eval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3348\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mselect_dtypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;34m\"DataFrame\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/eval.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(expr, parser, engine, truediv, local_dict, global_dict, resolvers, level, target, inplace)\u001b[0m\n\u001b[1;32m    330\u001b[0m         )\n\u001b[1;32m    331\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 332\u001b[0;31m         \u001b[0mparsed_expr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExpr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    333\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    334\u001b[0m         \u001b[0;31m# construct the engine and evaluate the parsed expression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, expr, engine, parser, env, level)\u001b[0m\n\u001b[1;32m    762\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    763\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_visitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_parsers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparser\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 764\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mterms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    766\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mparse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    779\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    780\u001b[0m         \u001b[0;34m\"\"\"Parse an expression\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 781\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_visitor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    782\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    783\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Module\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    379\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mSyntaxError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"only a single expression is allowed\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m         \u001b[0mexpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 381\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    382\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Expr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Expr\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    382\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Expr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 384\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    385\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_rewrite_membership_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Compare\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    674\u001b[0m             \u001b[0mop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranslate_In\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mops\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m             \u001b[0mbinop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mast\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBinOp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcomps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbinop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m         \u001b[0;31m# recursive case: we have a chained comparison, a CMP b CMP c, etc.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_BinOp\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    495\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    496\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_BinOp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 497\u001b[0;31m         \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_transform_eq_ne\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    498\u001b[0m         \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_downcast_constants\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_evaluate_binop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36m_maybe_transform_eq_ne\u001b[0;34m(self, node, left, right)\u001b[0m\n\u001b[1;32m    416\u001b[0m             \u001b[0mleft\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mside\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"left\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mright\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m             \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mside\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"right\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m         \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rewrite_membership_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"visit_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 375\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/expr.py\u001b[0m in \u001b[0;36mvisit_Name\u001b[0;34m(self, node, **kwargs)\u001b[0m\n\u001b[1;32m    508\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    509\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_Name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 510\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mterm_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    511\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    512\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mvisit_NameConstant\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/ops.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, env, side, encoding)\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0mtname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_local\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LOCAL_TAG\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mtname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_DEFAULT_GLOBALS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_resolve_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/ops.py\u001b[0m in \u001b[0;36m_resolve_name\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_resolve_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocal_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_local\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_local\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.7/site-packages/pandas/core/computation/scope.py\u001b[0m in \u001b[0;36mresolve\u001b[0;34m(self, key, is_local)\u001b[0m\n\u001b[1;32m    201\u001b[0m                 \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomputation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mops\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mUndefinedVariableError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 203\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mUndefinedVariableError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_local\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    204\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mswapkey\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mold_key\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_key\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mUndefinedVariableError\u001b[0m: name 'FEV05LLNPred' is not defined"
     ]
    }
   ],
   "source": [
    "print (\"parameter, dataframe, #<LLN, count, fraction < LLN\")\n",
    "ftoaall = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n",
    "        mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma, mallcma, alltotal]\n",
    "ftoa = ftoaall\n",
    "for y in ftoa:\n",
    "    printltlln (y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create LLN diff variables  - need redo using new LLN values from ppPred\n",
    "Which is the predicted LLN (LLNPred) - the LLN predicted of Hankinson (LLNPredh)\n",
    "However, we need LLNPredb - using methodb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createllndiffs(df):\n",
    "    df['FEV1llndiff'] = df.FEV1LLNPred - df.FEV1LLNPredh\n",
    "    df['FVCllndiff'] = df.FVCLLNPred - df.FVCLLNPredh\n",
    "    df['PEFRllndiff'] = df.PEFRLLNPred - df.PEFLLNPredh\n",
    "    df['MMEFllndiff'] = df.MMEFLLNPred - df.MMEFLLNPredh\n",
    "    df['FEV6llndiff'] = df.FEV6LLNPred - df.FEV6LLNPredh\n",
    "    df['FEV1OFVCllndiff'] = df.FEV1OFVCLLNPred - df.FEV1OFVCLLNPredh\n",
    "    df['FEV1OFEV6llndiff'] = df.FEV1OFEV6LLNPred - df.FEV1OFEV6LLNPredh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'hnonratioframestoanalyze' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-515-a594810b143d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhnonratioframestoanalyze\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#    createllndiffs(y)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'hnonratioframestoanalyze' is not defined"
     ]
    }
   ],
   "source": [
    "for y in hnonratioframestoanalyze:\n",
    "    print (y.name)\n",
    "#    createllndiffs(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "now print values of llndiffs for nonratio variables (need also do for hratioframestoanalyze)\n",
    "llndiff is "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dfvarname, dataframe, variable, mean, STD, count\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'hnonratioframestoanalyze' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-516-280aa418fa8e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m ftoa = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n\u001b[1;32m      5\u001b[0m         mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma]\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mftoa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhnonratioframestoanalyze\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mftoa\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m  \u001b[0;31m#   print (df.name)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'hnonratioframestoanalyze' is not defined"
     ]
    }
   ],
   "source": [
    "hdifflist =  ['FEV1llndiff', 'FEV6llndiff', 'FVCllndiff','PEFRllndiff','MMEFllndiff'] #,'FEV1OFVCllndiff', 'FEV1OFEV6llndiff']\n",
    "\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n",
    "        mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma]\n",
    "ftoa = hnonratioframestoanalyze\n",
    "for df in ftoa:\n",
    " #   print (df.name)\n",
    "    for y in hdifflist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", df.loc[:,y].mean(), \", \", df.loc[:,y].std(), \", \", df.loc[:,y].count())\n",
    "#        df2 =         df2 = {'dfnvarn': [dfnvarn], 'dfname': y.name, 'var': xx, \n",
    "#                             'intercept': intercept, 'b1': b1, 'b2': b2, 'b3': b3, 'r2':r2, 'std':std, 'count':count}                          \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "LLN = "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First create new variables LLNdiff = our percent predicted - Hankinson percent predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12702ce10>"
      ]
     },
     "execution_count": 517,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mallc.plot.scatter('BMPHT', 'FEV1Pred')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create PPcvalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [dfnvarn, dfname, var, mean, std, count]\n",
      "Index: []\n",
      "dfvarname, dataframe, variable, mean, STD, count\n",
      "m20overbFEV1OFVCPPc , m20overb ,  FEV1OFVCPPc ,  102.560943363407 ,  8.16507717215925 ,  477\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'LLNvalues' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-518-d0fea257d700>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     19\u001b[0m   \u001b[0;31m#      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0mPPcvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLLNvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m   \u001b[0;31m# now set index\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0mPPcvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'dfnvarn'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'LLNvalues' is not defined"
     ]
    }
   ],
   "source": [
    "# create df PPcvalues\n",
    "column_names = [\"dfnvarn\",\"dfname\", \"var\", \"mean\", \"std\", \"count\"]\n",
    "# print (column_names)\n",
    "PPcvalues= pd.DataFrame(columns = column_names)\n",
    "PPcvalues.name = 'PPvalues'\n",
    "print (PPcvalues)\n",
    "print(\"dfvarname, dataframe, variable, mean, STD, count\")\n",
    "ftoa = [m20overb, m20overcma, m20overc, m20overma, f18overb, f18overcma, f18overc, f18overma, mlt20b, \n",
    "        mlt20cma, mlt20c, mlt20ma, flt18b, flt18cma, flt18c, flt18ma]\n",
    "PPclist = ['FEV1OFVCPPc', 'FEV1OFEV6PPc', 'PEFROFVCPPc', 'PEFROFEV6PPc', \n",
    "           'PEFROFEV1PPc', 'FEV3OFVCPPc', 'FEV6OFVCPPc', 'FEV1PPc', 'FVCPPc',\n",
    "           'PEFRPPc', 'FEV3PPc', 'FEV6PPc', 'MMEFPPc', 'FEF75PPc', 'EXPIRPPc']\n",
    "for df in ftoa:\n",
    " #   print (df.name)\n",
    "    for y in PPclist:\n",
    "        print(df.name + y, \",\", df.name, \", \", y, \", \", df.loc[:,y].mean(), \", \", df.loc[:,y].std(), \", \", df.loc[:,y].count())\n",
    "        df2 = {    'dfnvarn': df.name + y, 'dfname': df.name, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count':df.loc[:,y].count()}\n",
    "   #     df2 =  {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), 'std':df.loc[:,y].std(), 'count',df.loc[:,y].count()}\n",
    "  #      df2 = {'dfnvarn': df.name + y, 'dfname': df.name, 'var': y, 'mean': df.loc[:,y].mean(), std':df.loc[:,y].std(), 'count',df.loc[:,y].count()  }                         \n",
    "\n",
    "        PPcvalues = LLNvalues.append(df2, ignore_index=True)\n",
    "  # now set index   \n",
    "PPcvalues.set_index('dfnvarn', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " from scipy import stats\n",
    "?do this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "metadata": {},
   "outputs": [],
   "source": [
    "varsppbest = ['EXPIRPPbest', 'FEF75PPbest', 'FEV05PPbest', 'FEV1PPbest', 'FEV3PPbest', 'FEV6PPbest', 'FVCPPbest', \n",
    "              'MMEFPPbest', 'PEFRPPbest', 'FEV1OFEV3PPbest',\n",
    "              'FEV1OFEV6PPbest', 'FEV1OFVCPPbest','FEV3OFVCPPbest','PEFROFEV1PPbest', \n",
    "              'PEFROFEV6PPbest', 'PEFROFVCPPbest', \n",
    "              'FEV6OFVCPPbest','MMEFOFVCPPbest', 'MMEFOPEFRPPbest',\n",
    "              'PEFRPPOFEV1PPPPbest', 'PEFRPPOFVCPPPPbest', 'MMEFPPOFVCPPPPbest', \n",
    "              'MMEFPPOPEFRPPPPbest', 'FEF75PPOFVCPPPPbest']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "metadata": {},
   "outputs": [],
   "source": [
    " #   print (\"FEV1OFVC, \", df.name, \", \",len(df.query('FEV1OFVC < FEV1OFVCLLNPred')), \", \")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now want to vary LLNPred so that it comes out to 5%\n",
    "First try doing for FEV1\n",
    "FEV1LLNPred was initially set to predicted - 1.645 * STD of the %predicted\n",
    "start with offset = 1.645\n",
    "Each subject has an FEV1 SPPFEV1, a predicted FEV1 FEV1Pred, and \n",
    "   FEV1LLNPred which equals FEV1Pred * (1 - 1.645 * stdev of FEV1PP)\n",
    "start with offset = 1.645\n",
    "LLN = <<FEV1Pred * (1 - offset * stdev of FEV1PP)>>\n",
    "PBLLN = len(df.query('SPPFEV1 < <<FEV1Pred * (1 - offset * stdev of FEV1PP)>>'))/len(df)) \n",
    "if PBLLN < 0.05 then offset = offset - .01\n",
    "If len(df.query('SPPFEV1 < FEV1LLNPred'))/len(df))\n",
    "    vn = df.name + 'FEV1PP'\n",
    "    df['FEV1LLNPred'] = (df.FEV1Pred * (1 - 1.645* ((PPvalues.loc[vn, 'std'])))) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printltllnend (df):\n",
    "    print (\"FEV1, \", df.name, \", \",len(df.query('SPPFEV1 < FEV1LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPFEV1 < FEV1LLNPred'))/len(df))\n",
    "    print (\"FVC, \", df.name, \", \",len(df.query('SPPFVC < FVCLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPFVC < FVCLLNPred'))/len(df))\n",
    "    print (\"FEV6, \", df.name, \", \",len(df.query('SPPFEV6 < FEV6LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPFEV6 < FEV6LLNPred'))/len(df))\n",
    "    print (\"PEFR, \", df.name, \", \",len(df.query('SPPPEAK < PEFRLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPPEAK < PEFRLLNPred'))/len(df))\n",
    "    print (\"MMEF, \", df.name, \", \",len(df.query('SPPMMEF < MMEFLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPMMEF < MMEFLLNPred'))/len(df))\n",
    "    print (\"FEV1OFVC, \", df.name, \", \",len(df.query('FEV1OFVC < FEV1OFVCLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('FEV1OFVC < FEV1OFVCLLNPred'))/len(df))\n",
    "    print (\"PEFROFVC, \", df.name, \", \",len(df.query('PEFROFVC < PEFROFVCLLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('PEFROFVC < PEFROFVCLLNPred'))/len(df))\n",
    " \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "it is not not have alltotal FEV1PP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printltllnend (df):\n",
    "    print (\"FEV1, \", df.name, \", \",len(df.query('SPPFEV1 < FEV1LLNPred')), \", \", \n",
    "           len(df), \", \", len(df.query('SPPFEV1 < FEV1LLNPred'))/len(df))\n",
    "    vn = df.name + 'FEV1PP'\n",
    "    print (PPvalues.loc[vn, 'std'])\n",
    "#    print ((1 - 1.645* (PPvalues.loc[vn, 'std']))\n",
    "#    print (\"FEV1, \", df.name, \", \",len(df.query('SPPFEV1 < FEV1LLNPred')), \", \", \n",
    "#           len(df), \", \", len(df.query('SPPFEV1 < (1 - 1.645* ((PPvalues.loc[vn, 'std']))))/len(df))    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now do plots with LLN ULN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now scatter plot with lln and uln lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 565,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dopltwln(varPPbest, shortname, llnlt50, ulnlt50, lln50over, uln50over):\n",
    "    fig = plt.figure(figsize=(10,5))\n",
    "    ax= fig.add_subplot(111)\n",
    "    x = np.linspace (0,50,100)\n",
    "    ylabeln = shortname + \" %Predicted\"\n",
    "\n",
    "    plt.plot (x, x*0+llnlt50, linestyle = \"dashed\", c='white', label = \"LLN <50\", linewidth = 2)\n",
    "    plt.plot (x, x*0+ ulnlt50, c='white', linestyle = \"dashed\", label = \"ULN <50\", linewidth = 2)\n",
    "    plt.plot (x+50, x*0+lln50over, linestyle = \"dashed\", c='black', label = \"LLN >50\", linewidth = 2)\n",
    "    plt.plot (x +50, x*0+ uln50over, c='black', linestyle = \"dashed\", label = \"ULN >50\", linewidth = 2)\n",
    "\n",
    "    ax.scatter(x=alltotal['AGE'], y=alltotal[varPPbest], s=2, c='black', label = 'data')\n",
    "\n",
    "    ax.set_title(shortname,y=1.0,pad = -50)\n",
    "    \n",
    "    ax.set(xlabel='Age', ylabel = ylabeln);  # prior had title = shortname\n",
    "    plt.show()\n",
    "#    plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 566,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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UlW/m1WZiYiIiPJEjtQ+do6JiQldXFxsdTGIiIiIEonIrao6EfYa70xARERElFMM1IiIiIhyioEaERERUU4xUCMiIiLKKQZqRERERDnFQI2IiIgopxioEREREeUUAzUiIiKinGKgRkRERJRTDNSIiIiIcoqBGhEREVFOMVAjIiIiyikGakREREQ5xUCNiIiIKKcYqBERERHlFAM1IiIiopxioEZERESUUwzUiIiIiHKKgRoRERFRTjFQIyIiIsopBmpEREREOcVAjYiIiCinGKgRERER5RQDNSIiIqKcYqBGRERElFMM1IiIiIhyioEaERERUU4xUCMiIiLKKQZqRERERDnFQI2IiIgopxioEREREeUUAzUiIiKinMosUBORK0XkIRG5wzy3RkRuFJHvB3+fFTwvIvJeEdknIt8WkXHznvOD+b8vIudnVV4iIiKivMkyo/ZhAFu95y4GcJOqngjgpuAxALwSwInBtAPAB4FSYAdgFsAkgI0AZl1wR0RERNTpMgvUVPVrAB7xnj4LwNXB/1cDeI15/hotuQXAahEZBjAF4EZVfURVHwVwI5YGf0REREQdqdlt1I5R1QeD//cDOCb4/1gA95n57g+ei3qeiIiIqOO1rDOBqioAbdTyRGSHiCyKyOLDDz/cqMUSERERtUyzA7WfBFWaCP4+FDz/AIDjzHzrg+einl9CVXer6oSqTqxdu7bhBSciIiJqtmYHatcDcD03zwfwWfP8eUHvz00AHg+qSPcC2CIizwo6EWwJniMiIiLqeMuyWrCIfBzAqQCOFpH7Ueq9+VcAPiUirwfwIwCvDWb/IoBXAdgH4OcAfh8AVPUREXkngH8L5vv/VdXvoEBERETUkaTUVKyzTExM6OLiYquLQURERJRIRG5V1Ymw13hnAiIiIqKcYqBGRERElFMM1IiIiIhyioEaERERUU4xUCMiIiLKKQZqRERERDnFQI2IiIgopxioERFRZhYWFrB161YsLCy0uihEbSmzOxMQERHt3LkTe/eW7vy3Z8+eFpeGqP0wUCMioszMzs5W/CWi6jBQIyKizGzevJmZNKI6sI0aERERUU4xUCMiIiLKKQZqRERERDnFQI2IiIgopxioEREREeUUAzUiIiKinIocnkNEPgdAo15X1TMzKRERERERAYgfR+2S4O82AOsA/EPw+FwAP8myUEREREQU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bNny5ctjj7menp6KThFuH9jguFgsVmTk/PaMrurW33abwYwav849b+9TagP1uDsDpFmu7UDilhPVY9NmUcOG3QgLOOM6G1BjISZQ6wF1pF27drW6CEsUi0UsW7aspveuWrUKPT09OOaYYzAwMJDqPaXvfqVnnnmm/P/y5ctx0kknlcv20Y9+FDfddBNGRkZSl+u4445Db29vedkHDhyInf+RRx6peLxu3Tr09Bw5DE844YSK10UEhUKh/NcnIujr60td3ig9PT3lchw6dAj9/f0QkYp5isUiVq9eDQB46KGHcMEFF+Coo44KXd6qVavwK7/yKwCAQqGAn/3sZzWXzS9HWNkHBwfR398PYOnnLiKYmJiAiOD000/H5OQkfvzjH1fMNzQ0hJtuugk33HADpqam8LznPQ9PPvkkDh8+jJ6eHhSLRaxbtw6qiuXLl5fft3///vLncsIJJ2BychKTk5NYs2YNAODJJ5/Ek08+iaGhIVx00UW4++67AQAPP/wwVq9ejUcffbQ8z6pVq3DhhRdicnKy4jt46NChir8igre97W146qmnAKD8/du7dy927twJALjuuuvKrz/++ON4/PHHMTQ0hNnZ2YptBoDDhw9jZGQEk5OTOPnkkwEAq1evxoYNGwAAv/jFL/C9730Phw4dQrFYxOTkJI4//viKfezKBgA/+MEP8MMf/hCHDh3C4cOH0dfXh0KhgMOHD2P9+vUoFosoFos44YQTsG/fvvK+KhQKGBsbAwA89dRTGBwcBAA88cQTWLVqFXbs2IFt27bhHe94R/k78ctf/hIHDhxAX18fenp6sG7dOoyOjpa/yyeddBKuu+46HDx4EAAwODiIbdu24fjjj0d/fz+KxSLWrl2LZ555BoODg3jd614HAJicnMRb3/pWDA0N4e/+7u8qvoNxx9vMzAwOHDiAu+66CytXrsR9992H73znO+XXV61ahT179uDSSy/F1NQUjj322Ir3LywsYNOmTdi0aRMAYM+ePdi8eTOuu+46HDhwAKtWrcLU1BRmZ2exefPm8utu+w4ePIidO3fiwIED6O3txQte8AJs3boVCwsLmJ2dLX8/P/e5zwEAtm7dit27d2Pr1q143eteh6mpKVx66aXl8mzbtg1DQ0PYtm1b5DZTE0RFcO08MaNW4n7Jxw2wuLi4WPELNM727dvL823fvj12XrvM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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dopltwln('EXPIRPPbest', \"EXPIR\", 32.9, 163.1, 38.3, 170)\n",
    "dopltwln('FEF75PPbest', \"FEF75%\", 50.8, 166.5, 31.8, 218.9)\n",
    "dopltwln('FEV05PPbest', \"FEV05\", 78.7, 121.5, 66.5, 128.7)\n",
    "dopltwln('FEV1PPbest', \"FEV1\", 80.7, 119.6, 70.6, 127.9)\n",
    "dopltwln('FEV3PPbest', \"FEV3\", 81, 119.2, 72.4, 127.5)\n",
    "dopltwln('FEV6PPbest', \"FEV6\", 81.1, 119.2, 72.6, 127.2)\n",
    "dopltwln('FVCPPbest', \"FVC\", 81, 119.3, 71.6, 126.4)\n",
    "dopltwln('MMEFPPbest', \"FEF25-75%\", 61.5, 143.5, 40, 174.1)\n",
    "dopltwln('PEFRPPbest', \"PEF\", 72.9, 127.5, 59.3, 136.8)\n",
    "dopltwln('FEF75OFVCPPbest', \"FEF75%/FVC\", 49.5, 168.8, 34.4, 282.6)\n",
    "dopltwln('FEF75OPEFRPPbest', \"FEF75%/PEF\", 50.0, 159.4, 35.5, 289.7)\n",
    "dopltwln('FEV05OFEV3PPbest', \"FEV05/FEV3\", 84.3, 116.7, 83.9, 114.1)\n",
    "dopltwln('FEV05OFVCPPbest', \"FEV05/FVC\", 83, 118.1, 78.9, 120.5)\n",
    "dopltwln('FEV1OFEV3PPbest', \"FEV1/FEV3\", 90.7, 108.5, 91.3, 107.4)\n",
    "dopltwln('FEV1OFEV6PPbest', \"FEV1/FEV6\", 89.1, 110, 88.5, 111)\n",
    "dopltwln('FEV1OFVCPPbest', \"FEV1/FVC\", 88.5, 110.5, 84.7, 114.9)\n",
    "dopltwln('FEV3OFEV6PPbest', \"FEV3/FEV6\", 97.1, 102.2, 96.1, 105.6)\n",
    "dopltwln('FEV3OFVCPPbest', \"FEV3/FVC\", 96, 103.1, 91.1, 110.1)\n",
    "dopltwln('FEV6OFVCPPbest', \"FEV6/FVC\", 98.2, 101.4, 93.8, 105.1)\n",
    "dopltwln('MMEFOFVCPPbest', \"FEF25-75%/FVC\", 61.0, 145.3, 42.8, 179.5)\n",
    "dopltwln('MMEFOPEFRPPbest', \"FEF25-75%/PEF\", 68.1, 135.1, 49.5, 175.6)\n",
    "dopltwln('PEFROFEV1PPbest', \"PEF/FEV1\", 78.3, 123, 70.7, 128.3)\n",
    "dopltwln('PEFROFEV6PPbest', \"PEF/FEV6\", 74.5, 128.2, 67.4, 132.6)\n",
    "dopltwln('PEFROFVCPPbest', \"PEF/FVC\", 74.3, 128.5, 66, 135.6)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "  varsppbestLLN = ['EXPIRPPbest', 'FEF75PPbest'] #, \n",
    "    vtemp =          ['FEV05PPbest', 'FEV1PPbest', 'FEV3PPbest', 'FEV6PPbest', 'FVCPPbest', \n",
    "              'MMEFPPbest', 'PEFRPPbest',\n",
    "              'FEF75OFVCPPbest', 'FEF75OPEFRPPbest',\n",
    "              'FEV05OFEV3PPbest', 'FEV05OFVCPPbest', 'FEV1OFEV3PPbest',\n",
    "              'FEV1OFEV6PPbest', 'FEV1OFVCPPbest','FEV3OFVCPPbest','PEFROFEV1PPbest', \n",
    "              'PEFROFEV6PPbest', 'PEFROFVCPPbest', \n",
    "              'FEV6OFVCPPbest','MMEFOFVCPPbest', 'MMEFOPEFRPPbest',"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nlist = {'EXPIRPPbest':'Expiratory Time %Predicted','FEF75PPbest':'FEF75 %Predicted'}\n",
    "yname = \"Expiratory Time %Predicted\"\n",
    "\n",
    "fig = plt.figure(figsize=(10,5))\n",
    "ax= fig.add_subplot(111)\n",
    "\n",
    "x = np.linspace (5,50,100)\n",
    "llnlt50 = 50\n",
    "ulnlt50 = 200\n",
    "lln50over = 40\n",
    "uln50over = 300\n",
    "# plt.plot(x,y1, label=\"LLN\")\n",
    "plt.plot (x, x*0+llnlt50, linestyle = \"dashdot\", c='black')\n",
    "plt.plot (x, x*0+ ulnlt50, c='black')\n",
    "plt.plot (x+50, x*0+lln50over, linestyle = \"dashdot\", c='black')\n",
    "plt.plot (x +50, x*0+ uln50over, c='black')\n",
    "\n",
    "ax.scatter(x=alltotal['AGE'], y=alltotal['FEF75PPbest'], s=2, c='black', label = 'data')\n",
    "\n",
    "ax.set_xlabel('Age')\n",
    "# plt.ylim(0,400)\n",
    "\n",
    "# plt.title(\"Title\")\n",
    "plt.ylabel(yname)\n",
    "# alltotal.plot.scatter('AGE','FEF75PPbest', s=2, c='black')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def doscatterageLLN(y, nlist):\n",
    "  alltotal.plot.scatter('AGE', y, s = 2, c='black')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nlist = {'EXPIRPPbest':'Expiratory Time %Predicted','FEF75PPbest':'FEF75 %Predicted'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type (alltotal)\n",
    "\n",
    "alltotal.to_pickle(\"alltotal.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
